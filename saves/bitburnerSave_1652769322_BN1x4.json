{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":1,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":2,\"intelligence\":236,\"hacking_chance_mult\":1.613549124733283,\"hacking_speed_mult\":1.613549124733283,\"hacking_money_mult\":1.613549124733283,\"hacking_grow_mult\":1.9523944409272724,\"hacking_exp\":0,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":839165.5829934194,\"hacking_mult\":1.613549124733283,\"strength_mult\":1.613549124733283,\"defense_mult\":1.613549124733283,\"dexterity_mult\":1.613549124733283,\"agility_mult\":1.613549124733283,\"charisma_mult\":2.2912397571212617,\"hacking_exp_mult\":1.613549124733283,\"strength_exp_mult\":1.613549124733283,\"defense_exp_mult\":1.613549124733283,\"dexterity_exp_mult\":1.613549124733283,\"agility_exp_mult\":1.613549124733283,\"charisma_exp_mult\":1.4153939690642832,\"company_rep_mult\":2.2080145917402816,\"faction_rep_mult\":1.4153939690642832,\"money\":1004,\"city\":\"Sector-12\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[\"hacknet-node-0\"],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":1024,\"hashes\":5.3311663081187595,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"name\":\"NeuroFlux Governor\",\"level\":9}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":3,\"n\":5},{\"lvl\":3,\"n\":4},{\"lvl\":3,\"n\":2},{\"lvl\":3,\"n\":3},{\"lvl\":9,\"n\":12},{\"lvl\":3,\"n\":6},{\"lvl\":3,\"n\":7},{\"lvl\":3,\"n\":10},{\"lvl\":3,\"n\":11},{\"lvl\":3,\"n\":9},{\"lvl\":3,\"n\":13},{\"lvl\":3,\"n\":8}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":2.0098594360712823,\"crime_success_mult\":2.0098594360712823,\"isWorking\":false,\"focus\":false,\"workType\":\"Working on Create a Program\",\"workCostMult\":20,\"workExpMult\":10,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":400,\"graftAugmentationName\":\"\",\"timeWorkedGraftAugmentation\":0,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":586981.940257891,\"timeNeededToCompleteWork\":7200000,\"work_money_mult\":2.5171366345839217,\"hacknet_node_money_mult\":1.613549124733283,\"hacknet_node_purchase_cost_mult\":0.5599623136952863,\"hacknet_node_ram_cost_mult\":0.5599623136952863,\"hacknet_node_core_cost_mult\":0.5599623136952863,\"hacknet_node_level_cost_mult\":0.5599623136952863,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1.1400000000000001,\"bladeburner_stamina_gain_mult\":1.1400000000000001,\"bladeburner_analysis_mult\":1.1400000000000001,\"bladeburner_success_chance_mult\":1.1400000000000001,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":1,\"hp\":10,\"max_hp\":10,\"hacking_exp\":0,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":2.546327760810417,\"hacking_speed_mult\":2.370300086703255,\"hacking_money_mult\":14.04232074370125,\"hacking_grow_mult\":6.5625,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":2.52209375,\"hacknet_node_purchase_cost_mult\":0.765,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":11000,\"earningsForSleeves\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":1.0164999999999982,\"storedCycles\":4,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":1,\"hp\":10,\"max_hp\":10,\"hacking_exp\":0,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1.904427409500001,\"hacking_speed_mult\":1.9078008172450704,\"hacking_money_mult\":12.210713690175002,\"hacking_grow_mult\":6.5625,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":2.52209375,\"hacknet_node_purchase_cost_mult\":0.765,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":11000,\"earningsForSleeves\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":1.0164999999999982,\"storedCycles\":4,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":1,\"hp\":10,\"max_hp\":10,\"hacking_exp\":0,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1.904427409500001,\"hacking_speed_mult\":1.8522338031505539,\"hacking_money_mult\":11.10064880925,\"hacking_grow_mult\":6.5625,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":2.52209375,\"hacknet_node_purchase_cost_mult\":0.765,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":11000,\"earningsForSleeves\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":1.0164999999999982,\"storedCycles\":4,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":1,\"hp\":10,\"max_hp\":10,\"hacking_exp\":0,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1.904427409500001,\"hacking_speed_mult\":1.8522338031505539,\"hacking_money_mult\":11.10064880925,\"hacking_grow_mult\":6.5625,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":2.52209375,\"hacknet_node_purchase_cost_mult\":0.765,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":11000,\"earningsForSleeves\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":1.0164999999999982,\"storedCycles\":4,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":1,\"hp\":10,\"max_hp\":10,\"hacking_exp\":0,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1.904427409500001,\"hacking_speed_mult\":1.8522338031505539,\"hacking_money_mult\":11.10064880925,\"hacking_grow_mult\":6.5625,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":2.52209375,\"hacknet_node_purchase_cost_mult\":0.765,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":11000,\"earningsForSleeves\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":1.0164999999999982,\"storedCycles\":4,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":1,\"hp\":10,\"max_hp\":10,\"hacking_exp\":0,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1.904427409500001,\"hacking_speed_mult\":1.8522338031505539,\"hacking_money_mult\":11.10064880925,\"hacking_grow_mult\":6.5625,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":2.52209375,\"hacknet_node_purchase_cost_mult\":0.765,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":11000,\"earningsForSleeves\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":1.0164999999999982,\"storedCycles\":4,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":1,\"hp\":10,\"max_hp\":10,\"hacking_exp\":0,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1.904427409500001,\"hacking_speed_mult\":1.8522338031505539,\"hacking_money_mult\":11.10064880925,\"hacking_grow_mult\":6.5625,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":2.52209375,\"hacknet_node_purchase_cost_mult\":0.765,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":11000,\"earningsForSleeves\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":1.0164999999999982,\"storedCycles\":4,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":1,\"hp\":10,\"max_hp\":10,\"hacking_exp\":0,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1,\"hacking_speed_mult\":1.02,\"hacking_money_mult\":1.1,\"hacking_grow_mult\":1,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":11000,\"earningsForSleeves\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":1.0164999999999982,\"storedCycles\":4,\"sync\":100}}],\"sleevesFromCovenant\":5,\"bitNodeN\":1,\"entropy\":0,\"lastUpdate\":1652769321848,\"lastSave\":1652769318621,\"totalPlaytime\":13097611400,\"playtimeSinceLastAug\":11800,\"playtimeSinceLastBitnode\":11800,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":0,\"work\":0,\"servers\":0,\"other\":0,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":0,\"work\":0,\"servers\":0,\"other\":0,\"augmentations\":0}},\"scriptProdSinceLastAug\":0,\"exploits\":[\"N00dles\",\"UndocumentedFunctionCall\",\"Bypass\",\"PrototypeTampering\",\"RealityAlteration\",\"Unclickable\",\"TimeCompression\",\"EditSaveFile\",\"YoureNotMeantToAccessThis\",\"INeedARainbow\",\"TrueRecursion\"],\"achievements\":[{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641679889873},{\"ID\":\"NITESEC\",\"unlockedOn\":1641679889924},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641679889930},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641679889937},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641679889950},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641679889959},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641679889967},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1641679889976},{\"ID\":\"SF1.1\",\"unlockedOn\":1641679889988},{\"ID\":\"SF4.1\",\"unlockedOn\":1641679889998},{\"ID\":\"SF5.1\",\"unlockedOn\":1641679890005},{\"ID\":\"NS2\",\"unlockedOn\":1641679890014},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1641679890023},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1641679890030},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641679890036},{\"ID\":\"TOR\",\"unlockedOn\":1641679890048},{\"ID\":\"BYPASS\",\"unlockedOn\":1641679890061},{\"ID\":\"PROTOTYPETAMPERING\",\"unlockedOn\":1641679890067},{\"ID\":\"UNCLICKABLE\",\"unlockedOn\":1641679890073},{\"ID\":\"UNDOCUMENTEDFUNCTIONCALL\",\"unlockedOn\":1641679890083},{\"ID\":\"TIMECOMPRESSION\",\"unlockedOn\":1641679890090},{\"ID\":\"REALITYALTERATION\",\"unlockedOn\":1641679890099},{\"ID\":\"N00DLES\",\"unlockedOn\":1641679890109},{\"ID\":\"EDITSAVEFILE\",\"unlockedOn\":1641679890117},{\"ID\":\"DEVMENU\",\"unlockedOn\":1641679890130},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641681211658},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641687973510},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641721856386},{\"ID\":\"UNACHIEVABLE\",\"unlockedOn\":1641722341982},{\"ID\":\"FROZE\",\"unlockedOn\":1641734437104},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1641817424050},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1641903848242},{\"ID\":\"4S\",\"unlockedOn\":1641907336632},{\"ID\":\"DONATION\",\"unlockedOn\":1641907396617},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641908663322},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1641918704987},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1641937453791},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1641982053228},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1641982113197},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1641984580423},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1641985300316},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641991378620},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1641999052675},{\"ID\":\"WORKOUT\",\"unlockedOn\":1642334647833},{\"ID\":\"INDECISIVE\",\"unlockedOn\":1642343484769},{\"ID\":\"FAST_BN\",\"unlockedOn\":1642768530890},{\"ID\":\"GANG\",\"unlockedOn\":1642772019491},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1642804547259},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1642841548633},{\"ID\":\"SF2.1\",\"unlockedOn\":1642849051433},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1643025332087},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1643025332093},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1643025332094},{\"ID\":\"GANG_TERRITORY\",\"unlockedOn\":1643032932296},{\"ID\":\"CORPORATION\",\"unlockedOn\":1643059508902},{\"ID\":\"CORPORATION_BRIBE\",\"unlockedOn\":1643193348323},{\"ID\":\"CORPORATION_REAL_ESTATE\",\"unlockedOn\":1643194428307},{\"ID\":\"CORPORATION_PROD_1000\",\"unlockedOn\":1643195028369},{\"ID\":\"MONEY_1Q\",\"unlockedOn\":1643197062119},{\"ID\":\"QUEUE_40\",\"unlockedOn\":1643198982091},{\"ID\":\"MAX_RAM\",\"unlockedOn\":1643200021662},{\"ID\":\"SF3.1\",\"unlockedOn\":1643201341872},{\"ID\":\"SF12.1\",\"unlockedOn\":1643327676262},{\"ID\":\"BLADEBURNER_DIVISION\",\"unlockedOn\":1643365278774},{\"ID\":\"BLADEBURNER_OVERCLOCK\",\"unlockedOn\":1643509416134},{\"ID\":\"BLADEBURNER_UNSPENT_100000\",\"unlockedOn\":1643555667526},{\"ID\":\"SF6.1\",\"unlockedOn\":1643563733741},{\"ID\":\"SF7.1\",\"unlockedOn\":1643878806799},{\"ID\":\"INSTALL_100\",\"unlockedOn\":1644076472788},{\"ID\":\"SF10.1\",\"unlockedOn\":1644112443819},{\"ID\":\"SLEEVE_8\",\"unlockedOn\":1644249879023},{\"ID\":\"MONEY_M1B\",\"unlockedOn\":1644260084626},{\"ID\":\"KARMA_1000000\",\"unlockedOn\":1644708960059},{\"ID\":\"CHALLENGE_BN3\",\"unlockedOn\":1645285861265},{\"ID\":\"SF11.1\",\"unlockedOn\":1645453783214},{\"ID\":\"FIRST_HACKNET_SERVER\",\"unlockedOn\":1645636516948},{\"ID\":\"MAX_CACHE\",\"unlockedOn\":1645655374553},{\"ID\":\"HACKNET_SERVER_1B\",\"unlockedOn\":1645696775058},{\"ID\":\"SF9.1\",\"unlockedOn\":1645872084439},{\"ID\":\"ALL_HACKNET_SERVER\",\"unlockedOn\":1646392690849},{\"ID\":\"HACKING_100000\",\"unlockedOn\":1646409480959},{\"ID\":\"CORPORATION_EMPLOYEE_3000\",\"unlockedOn\":1646409960975},{\"ID\":\"NEUROFLUX_255\",\"unlockedOn\":1646410080951},{\"ID\":\"MAX_HACKNET_SERVER\",\"unlockedOn\":1646410140948},{\"ID\":\"RAINBOW\",\"unlockedOn\":1647605661257},{\"ID\":\"SF8.1\",\"unlockedOn\":1648455767996},{\"ID\":\"TRUE_RECURSION\",\"unlockedOn\":1649257301878},{\"ID\":\"CHALLENGE_BN2\",\"unlockedOn\":1651134768755},{\"ID\":\"CHALLENGE_BN6\",\"unlockedOn\":1651525227752},{\"ID\":\"CHALLENGE_BN7\",\"unlockedOn\":1651927703039},{\"ID\":\"CHALLENGE_BN13\",\"unlockedOn\":1652309620216},{\"ID\":\"CHALLENGE_BN9\",\"unlockedOn\":1652477815051},{\"ID\":\"CHALLENGE_BN10\",\"unlockedOn\":1652769294464}],\"terminalCommandHistory\":[\"cls\",\"run augmentations/purchase.js --install\",\"cls\",\"tail corporation/\",\"tail corporation/autopilot.js\",\"cls\",\"run augmentations/purchase.js --hacking\",\"run fl1ght.exe\",\"cls\",\"run augmentations/install.js\",\"run hacknet/manager.js\",\"run player/hacking-farm.js\",\"cls\",\"nano data/1.txt\",\"ps\",\"kill player/hacking-farm.js\",\"cls\",\"run stanek/save.js\",\"nano stanek/controller.js\",\"run stanek/set.js --pattern hacking\",\"cls\",\"run stanek/controller.js\",\"run cortex.js\",\"cls\",\"run player/create-programs.js\",\"cls\",\"nano corporation/autopilot.js\",\"cls\",\"run cortex.js\",\"home\",\"run cortex.js\",\"cls\",\"home\",\"run augmentations/purchase.js --hacking\",\"run augmentations/install.js\",\"home\",\"run player/hacking-farm.js\",\"run tools/cre\",\"run player/create-programs.js\",\"cls\",\"run augmentations/purchase.js --hacking\",\"run augmentations/install.js\",\"home\",\"run player/hacking-farm.js\",\"kill player/hacking-farm.js\",\"cls\",\"run tools/bitnode-multipliers.js\",\"run tools/connect.js w0r1d_d43m0n\",\"backdoor\",\"cls\"],\"identifier\":\"1e2dc3fc23d205\",\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"94.5.4.1\",\"isConnectedTo\":true,\"maxRam\":128,\"messages\":[\"hackers-starting-handbook.lit\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"Formulas.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedFunction,JSUnresolvedVariable\\n\\n/**\\n *\\n * @returns {Promise<void>}\\n */\\nexport async function main() {\\n\\tlet boxes = Array.from(eval('document').querySelectorAll('[class*=MuiBox-root]'));\\n\\tlet box = boxes.find(x => hasPlayer(x));\\n\\n\\tif (box) {\\n\\t\\tlet props = getProps(box);\\n\\t\\tprops.router.toDevMenu();\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {Object} obj\\n * @returns {Object}\\n */\\nfunction getProps(obj) {\\n\\treturn Object.entries(obj).find(entry => entry[0].startsWith('__reactProps'))[1].children.props;\\n}\\n\\n/**\\n *\\n * @param {Object} obj\\n * @returns {boolean}\\n */\\nfunction hasPlayer(obj) {\\n\\ttry {\\n\\t\\treturn !!getProps(obj).router;\\n\\t} catch (err) {\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/exploits/dev-menu.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/exploits/dev-menu.js\",\"url\":\"blob:file:///e1eba301-6265-4077-a1b4-2a5efd58094c\",\"moduleSequenceNumber\":317289}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":30017,\"_hash\":\"b03b9cede60b50447d1f38b2e370d36f9517e5d1b9accfc2ed19d72569cd3499\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {formatBinary, formatPercentage, formatTime} from '/utils.js';\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst server = ns.args[0];\\n\\tconst usedRam = ns.getServerUsedRam(server);\\n\\tconst maxRam = ns.getServerMaxRam(server);\\n\\tconst money = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst minSec = ns.getServerMinSecurityLevel(server);\\n\\tconst sec = ns.getServerSecurityLevel(server);\\n\\n\\tns.tprint(`\\n${server}:\\n    RAM        : ${formatBinary(ns, usedRam * 1e9)} / ${formatBinary(ns, maxRam * 1e9)} (${formatPercentage(ns, usedRam / maxRam * 100)}%)\\n    $          : ${formatMoney(ns, money)} / ${formatMoney(ns, maxMoney)} (${formatPercentage(ns, money / maxMoney * 100)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)}\\n    hack time  : ${formatTime(ns, ns.getHackTime(server))}\\n    grow time  : ${formatTime(ns, ns.getGrowTime(server))}\\n    weaken time: ${formatTime(ns, ns.getWeakenTime(server))}\\n    grow x2    : ${Math.ceil(ns.growthAnalyze(server, 2))} threads\\n    grow x3    : ${Math.ceil(ns.growthAnalyze(server, 3))} threads\\n    grow x4    : ${Math.ceil(ns.growthAnalyze(server, 4))} threads\\n    hack 10%   : ${Math.floor(0.1 / ns.hackAnalyze(server))} threads\\n    hack 25%   : ${Math.floor(0.25 / ns.hackAnalyze(server))} threads\\n    hack 50%   : ${Math.floor(0.5 / ns.hackAnalyze(server))} threads\\n    hackChance : ${formatPercentage(ns.hackAnalyzeChance(server) * 100)}\\n`);\\n}\",\"filename\":\"/tools/analyze-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///44e010b1-6eb9-49e4-b16c-cf31fec957b3\",\"moduleSequenceNumber\":635797},{\"filename\":\"/tools/analyze-server.js\",\"url\":\"blob:file:///fb2e96a7-0a6c-4c71-ae19-c8b0d0b17375\",\"moduleSequenceNumber\":640013}],\"dependents\":[],\"ramUsage\":5.35,\"server\":\"home\",\"moduleSequenceNumber\":30018,\"_hash\":\"6619cc0c1589e2f49c33c30e904029c7c743566bf011fc5b60dc419a8a18df87\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst mults = ns.getBitNodeMultipliers();\\n\\tfor (let [mult, val] of Object.entries(mults)) {\\n\\t\\tns.tprint(`${mult}: ${val}`);\\n\\t}\\n}\",\"filename\":\"/tools/bitnode-multipliers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/tools/bitnode-multipliers.js\",\"url\":\"blob:file:///0355f3c5-4fda-4849-8c5c-bae48d8cc7ae\",\"moduleSequenceNumber\":30015}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":30019,\"_hash\":\"1b05da9eaa009ff6c1ea4327f0928a1b9a84baca2b54e41f2732e27a3ed8d76f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {formatMoney} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst cost = ns.getPurchasedServerCost(Math.pow(2, ns.args[0]));\\n\\tconst maxServers = Math.floor(ns.getBitNodeMultipliers().PurchasedServerLimit * 25);\\n\\tconst costMax = cost * maxServers;\\n\\tns.tprint(`1 Server: ${formatMoney(ns, cost)}, ${maxServers} servers: ${formatMoney(ns, costMax)}`);\\n}\",\"filename\":\"/tools/cost-pserv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///68f97c2b-ca2a-470e-8e91-dd4d4bbd3634\",\"moduleSequenceNumber\":13001},{\"filename\":\"/tools/cost-pserv.js\",\"url\":\"blob:file:///b511cd52-67df-4e4f-8cc1-e8dd5be7e46f\",\"moduleSequenceNumber\":1281515}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"home\",\"moduleSequenceNumber\":30020,\"_hash\":\"eb5525ca20ffef2475d020610dafdbb753f15035ae52f347f9dd19b6aa4a620f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.tprint(1 + Math.floor(Math.log((ns.args[0] + 25000) / 25500) / Math.log(1.02)));\\n}\",\"filename\":\"/tools/favor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":30021,\"_hash\":\"6ad751e0df0ec6fbb7d5566bba9ffd5bf774eb0a307aa21712094760add3d41d\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getServers} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst servers = getServers(ns);\\n\\tfor (let server of servers) {\\n\\t\\tlet files = ns.ls(server);\\n\\t\\tfor (let file of files) {\\n\\t\\t\\tif (file.endsWith('.lit') || file.endsWith('.txt')) await ns.scp(file, server, 'home');\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/tools/get-all-text.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///475c3128-f4c8-41e2-9b48-e27f3e6c3f25\",\"moduleSequenceNumber\":103401},{\"filename\":\"/tools/get-all-text.js\",\"url\":\"blob:file:///07ec6154-ae09-45ed-be61-81d5f61bf25b\",\"moduleSequenceNumber\":104252}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":30022,\"_hash\":\"c97e515d9ca69432b40b8181133b05c5a67cacc9e33fc6715be4c6ca073fc025\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {formatMoney, getAccessibleServers, getOptimalHackable, targetCost} from '/utils.js';\\n\\nconst argsSchema = [\\n\\t['cores', 1],\\n\\t['verbose', false]\\n];\\n\\nexport function autocomplete(data) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst options = ns.flags(argsSchema);\\n\\tconst servers = getAccessibleServers(ns);\\n\\tconst hackable = getOptimalHackable(ns, servers);\\n\\tfor (let [i, server] of hackable.entries()) {\\n\\t\\tconst growth = ns.getServerGrowth(server);\\n\\t\\tconst money = formatMoney(ns, ns.getServerMaxMoney(server));\\n\\t\\tconst minSec = ns.getServerMinSecurityLevel(server);\\n\\t\\tconst cost = targetCost(ns, server, options.cores);\\n\\t\\tlet string = `${i + 1}: Server: ${server}`;\\n\\t\\tif (options.verbose) string += `, Maximum Money: ${money}, Growth: ${growth}, Min Security: ${minSec}`;\\n\\t\\tfor (let [j, c] of cost.entries()) string += `, Cost ${j + 1}: ${formatNumber(ns, c)}`;\\n\\t\\tns.tprintf(string);\\n\\t}\\n}\",\"filename\":\"/tools/hackable-servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///f483b60e-f344-40ef-bc39-88d50a4fe70b\",\"moduleSequenceNumber\":602226},{\"filename\":\"/tools/hackable-servers.js\",\"url\":\"blob:file:///ef3f9dc3-03b3-4a72-a592-d927baf70dcf\",\"moduleSequenceNumber\":618938}],\"dependents\":[],\"ramUsage\":8.8,\"server\":\"home\",\"moduleSequenceNumber\":30023,\"_hash\":\"77f8678e5689e1a51b3f032bc619bf3f1b569fb1a361527d4ce8e1565a9feb3d\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedFunction,JSUnresolvedVariable\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.tprint(ns.heart.break().toFixed(2));\\n}\",\"filename\":\"/tools/karma.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/tools/karma.js\",\"url\":\"blob:file:///581d5a78-aebd-48a8-8e5d-44b5bd706a4d\",\"moduleSequenceNumber\":617531}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":30024,\"_hash\":\"8529bd972efba9e73eb14e6c6dedebe5a94dc535af954e63001249f18366aa70\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {formatMoney, formatTime} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tns.disableLog('ALL');\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\tconst server = ns.args[0];\\n\\t\\tlet money = ns.getServerMoneyAvailable(server);\\n\\t\\tif (money === 0) money = 1;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\t\\tconst minSec = ns.getServerMinSecurityLevel(server);\\n\\t\\tconst sec = ns.getServerSecurityLevel(server);\\n\\t\\tns.clearLog(server);\\n\\t\\tns.print(`${server}:`);\\n\\t\\tns.print(` $       : ${formatMoney(ns, money)} / ${formatMoney(ns, maxMoney)} (${formatPercentage(money / maxMoney * 100)})`);\\n\\t\\tns.print(` security: +${sec - minSec}`);\\n\\t\\tns.print(` hack    : ${formatTime(ns, ns.getHackTime(server))} (t=${Math.ceil(ns.hackAnalyzeThreads(server, money))})`);\\n\\t\\tns.print(` grow    : ${formatTime(ns, ns.getGrowTime(server))} (t=${Math.ceil(ns.growthAnalyze(server, maxMoney / money))})`);\\n\\t\\tns.print(` weaken  : ${formatTime(ns, ns.getWeakenTime(server))} (t=${Math.ceil((sec - minSec) * 20)})`);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\n// noinspection JSUnusedGlobalSymbols\\n/**\\n *\\n * @param {*} data\\n * @returns {string[]}\\n */\\nexport function autocomplete(data) {\\n\\t// noinspection JSUnresolvedVariable\\n\\treturn data.servers;\\n}\",\"filename\":\"/tools/monitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///3f84f986-44a5-4481-825e-ec03b9d3ff64\",\"moduleSequenceNumber\":635797},{\"filename\":\"/tools/monitor.js\",\"url\":\"blob:file:///98631abb-f407-46ba-a130-11cf05a242e9\",\"moduleSequenceNumber\":648436}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"home\",\"moduleSequenceNumber\":30025,\"_hash\":\"893c12e0ba4f315c62804972ae8d701f79995bced0cb1efe4b3bc26a3fba651f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {scriptsToCopy} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst power = ns.args[0];\\n\\tconst targetRam = Math.pow(2, power);\\n\\tfor (let i = 0; i < ns.getPurchasedServerLimit(); i++) {\\n\\t\\tlet server = 'pserv-' + i;\\n\\t\\tlet cost = ns.getPurchasedServerCost(targetRam);\\n\\t\\twhile (ns.getServerMoneyAvailable('home') < cost) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t\\tif (ns.serverExists(server)) {\\n\\t\\t\\tif (ns.getServerMaxRam(server) < targetRam) {\\n\\t\\t\\t\\tns.killall(server);\\n\\t\\t\\t\\tns.deleteServer(server);\\n\\t\\t\\t} else continue;\\n\\t\\t}\\n\\t\\tns.tprint(`Buying server: ${server}, target RAM: ${targetRam}`);\\n\\t\\tns.purchaseServer(server, targetRam);\\n\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t}\\n}\",\"filename\":\"/tools/pserv-buyer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///a0251434-937d-4859-8c74-9d46826275ee\",\"moduleSequenceNumber\":1344740},{\"filename\":\"/tools/pserv-buyer.js\",\"url\":\"blob:file:///87b68575-22bb-44b1-b75f-c8ad1a49c256\",\"moduleSequenceNumber\":1506429}],\"dependents\":[],\"ramUsage\":7.75,\"server\":\"home\",\"moduleSequenceNumber\":30026,\"_hash\":\"56c2d141ea865d967ca9c6c4f957758f2fa9da467ecafc722271bee972d6116a\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {formatNumber} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.tprint(formatNumber(ns, Math.ceil(25500 * Math.exp(Math.log(1.02) * (ns.args[0] - 1)) - 25000)));\\n}\",\"filename\":\"/tools/reputation.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/tools/reputation.js\",\"url\":\"blob:file:///aa33c0f3-e8d2-4e13-8fde-ebda6c4aec9b\"}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":30027,\"_hash\":\"182648057b1c1b5efc12614517609fa0b5dd94312c4a74359ddbbb214c62bb5f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst url = 'https://raw.githubusercontent.com/mirkoconsiglio/Bitburner-scripts/master';\\n\\tconst listOfScripts = 'build/scripts.txt';\\n\\tns.tprint('----- Downloading scripts -----');\\n\\tns.tprint(`Downloading ${listOfScripts}`);\\n\\tlet download = await ns.wget(`${url}/${listOfScripts}`, '/' + listOfScripts);\\n\\tif (!download) throw new Error(`Could not download ${listOfScripts}`);\\n\\tlet scripts = ns.read('/' + listOfScripts).split('\\\\n');\\n\\tfor (let script of scripts) {\\n\\t\\tif (script === listOfScripts || (script.includes('/') ? '/' : '') + script === ns.getScriptName()) continue;\\n\\t\\tns.tprint(`Downloading ${script}`);\\n\\t\\tdownload = await ns.wget(`${url}/${script}`, (script.includes('/') ? '/' : '') + script);\\n\\t\\tif (!download) ns.alert(`Could not download ${script}`);\\n\\t}\\n\\tns.tprint('----- Download complete -----');\\n}\",\"filename\":\"/build/download-bitburner-scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/build/download-bitburner-scripts.js\",\"url\":\"blob:file:///f2ca6ed9-0490-459a-8b73-f2fa76d034e1\",\"moduleSequenceNumber\":12997}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":30028,\"_hash\":\"db6be36921ed3570f27656ff3709a77330179d053163e571a78ce453593dcaa2\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getFileHandle} from 'utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst scriptsToKeep = ['/build/scripts.txt', '/build/download-bitburner-scripts.js'];\\n\\tns.read('/build/scripts.txt').split('\\\\n').forEach(script =>\\n\\t\\tscript.includes('/') ? scriptsToKeep.push('/' + script) : scriptsToKeep.push(script));\\n\\tfor (let i = 1; i <= 20; i++) scriptsToKeep.push(getFileHandle(i));\\n\\tlet files = ns.ls('home').filter(file => file.endsWith('.js') || file.endsWith('.txt'));\\n\\tif (files.length === 0) {\\n\\t\\tns.tprint(`There are no files to delete`);\\n\\t\\treturn;\\n\\t}\\n\\tfor (let file of files) {\\n\\t\\tif (!scriptsToKeep.includes(file)) {\\n\\t\\t\\tif (await ns.prompt(`Delete ${file}?`)) {\\n\\t\\t\\t\\tns.rm(file, 'home');\\n\\t\\t\\t\\tns.tprint(`Deleted ${file}`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/build/script-remover.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///21b33c67-40cc-42b1-af84-1ba87d31ad7e\",\"moduleSequenceNumber\":602226},{\"filename\":\"/build/script-remover.js\",\"url\":\"blob:file:///3f375b83-24fc-4eca-a4e7-4380144e8e32\",\"moduleSequenceNumber\":613320}],\"dependents\":[],\"ramUsage\":2.8,\"server\":\"home\",\"moduleSequenceNumber\":30029,\"_hash\":\"b0e886a683c819af301969714eb16bdedfa567fa40525eda9475ea32decb7185\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedVariable\\n\\nimport {contractor} from '/contracts/contractor.js';\\nimport {spendHashes} from '/hacknet/hash-spender.js';\\nimport {acceptStanek} from '/stanek/accept.js';\\nimport {\\n\\tcopyScriptsToAll,\\n\\tdeployBatchers,\\n\\tenoughRam,\\n\\tgetAccessibleServers,\\n\\tgetGangs,\\n\\tgetScripts,\\n\\tgetUsefulPrograms,\\n\\tinitData,\\n\\tmanageAndHack,\\n\\tprintBoth,\\n\\tpromptScriptRunning,\\n\\tupdateOverview,\\n\\tupdateReservedRam\\n} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\t// Copy necessary scripts to all servers\\n\\tawait copyScriptsToAll(ns);\\n\\t// Initialise data\\n\\tawait initData(ns);\\n\\t// Constants\\n\\tconst scripts = getScripts();\\n\\tconst haveHacknetServers = ns.getPlayer().bitNodeN === 9 || ns.getOwnedSourceFiles().some(s => s.n === 9);\\n\\tconst bitnode8 = ns.getPlayer().bitNodeN === 8;\\n\\t// Variables\\n\\tlet host = ns.getHostname();\\n\\tlet contractorOnline = true;\\n\\tlet upgradeRam = true;\\n\\tlet upgradeCores = true;\\n\\tlet homeRam = ns.getServer('home').maxRam;\\n\\tlet homeCores = ns.getServer('home').cpuCores;\\n\\tlet wse = true;\\n\\tlet tix = true;\\n\\tlet gang = true;\\n\\tlet corp = !bitnode8;\\n\\tlet bladeburner = !bitnode8;\\n\\tlet stock = true;\\n\\tlet hacknet = !bitnode8;\\n\\tlet sleeve = false;\\n\\tlet stanek = true;\\n\\tlet backdoorWorldDaemon = true;\\n\\tlet factions = [];\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\t// Heal player\\n\\t\\tif (ns.getPlayer().hp < ns.getPlayer().max_hp) ns.hospitalize();\\n\\t\\t// Contract solver (disables itself if any solution was incorrect)\\n\\t\\tif (contractorOnline) contractorOnline = contractor(ns);\\n\\t\\t// Purchase TOR\\n\\t\\tif (!ns.getPlayer().tor && ns.purchaseTor()) printBoth(ns, `Purchased TOR router`);\\n\\t\\t// Purchase only useful programs\\n\\t\\tif (ns.getPlayer().tor) {\\n\\t\\t\\tfor (const program of getUsefulPrograms()) {\\n\\t\\t\\t\\tif (!ns.fileExists(program.name) && ns.getPlayer().hacking >= program.level && ns.purchaseProgram(program.name))\\n\\t\\t\\t\\t\\tprintBoth(ns, `Purchased ${program.name}`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Check if we want to upgrade home server\\n\\t\\tconst homeServer = ns.getServer('home');\\n\\t\\tconst currentHomeRam = homeServer.maxRam;\\n\\t\\tconst currentHomeCores = homeServer.cpuCores;\\n\\t\\tif (currentHomeRam > homeRam) {\\n\\t\\t\\thomeRam = currentHomeRam;\\n\\t\\t\\tupgradeRam = true;\\n\\t\\t}\\n\\t\\tif (currentHomeCores > homeCores) {\\n\\t\\t\\thomeCores = currentHomeCores;\\n\\t\\t\\tupgradeCores = true;\\n\\t\\t}\\n\\t\\t// Upgrade home RAM\\n\\t\\tif (ns.getPlayer().money >= ns.getUpgradeHomeRamCost() && upgradeRam &&\\n\\t\\t\\t!promptScriptRunning(ns, host) && homeRam < 2 ** 30 && enoughRam(ns, scripts.upgradeHomeRam, host)) {\\n\\t\\t\\tns.exec(scripts.upgradeHomeRam, host);\\n\\t\\t\\tupgradeRam = false;\\n\\t\\t}\\n\\t\\t// Upgrade home cores\\n\\t\\tif (ns.getPlayer().money >= ns.getUpgradeHomeCoresCost() && upgradeCores &&\\n\\t\\t\\t!promptScriptRunning(ns, host) && homeCores < 8 && enoughRam(ns, scripts.upgradeHomeCores, host)) {\\n\\t\\t\\tns.exec(scripts.upgradeHomeCores, host);\\n\\t\\t\\tupgradeCores = false;\\n\\t\\t}\\n\\t\\t// Gang manager\\n\\t\\t// noinspection JSUnresolvedFunction\\n\\t\\tconst hasGangs = ns.getPlayer().bitNodeN === 2 || (ns.getOwnedSourceFiles().some(s => s.n === 2) && ns.heart.break() <= -54e3);\\n\\t\\tif (hasGangs && !ns.gang.inGang() && gang && !ns.scriptRunning(scripts.gang, host) &&\\n\\t\\t\\t!promptScriptRunning(ns, host)) {\\n\\t\\t\\tconst gangs = getGangs().filter(g => ns.getPlayer().factions.includes(g));\\n\\t\\t\\tgangs.unshift('No');\\n\\t\\t\\tconst gangName = await ns.prompt(`Create a gang?`, {'type': 'select', 'choices': gangs});\\n\\t\\t\\tif (gangName !== 'No') {\\n\\t\\t\\t\\tns.gang.createGang(gangName);\\n\\t\\t\\t\\tprintBoth(ns, `Created a gang with ${gangName}`);\\n\\t\\t\\t} else gang = false;\\n\\t\\t}\\n\\t\\tif (hasGangs && ns.gang.inGang() && gang && !ns.scriptRunning(scripts.gang, host) &&\\n\\t\\t\\tenoughRam(ns, scripts.gang, host) && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Start gang manager?`)) {\\n\\t\\t\\t\\tif (!bitnode8) ns.exec(scripts.gang, host);\\n\\t\\t\\t\\telse ns.exec(scripts.gang, host, 1, '--disable-equipment-buying');\\n\\t\\t\\t\\tprintBoth(ns, `Started gang manager`);\\n\\t\\t\\t}\\n\\t\\t\\tgang = false;\\n\\t\\t}\\n\\t\\t// Corp manager\\n\\t\\tconst hasCorps = ns.getPlayer().bitNodeN === 3 || ns.getOwnedSourceFiles().some(s => s.n === 3 && s.lvl === 3);\\n\\t\\tif (hasCorps && !ns.getPlayer().hasCorporation && ns.getPlayer().money >= 150e9 && corp\\n\\t\\t\\t&& !ns.scriptRunning(scripts.corp, host) && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tconst name = await ns.prompt(`Create a Corporation? (Leave empty if no)`, {'type': 'text'});\\n\\t\\t\\tif (name !== '') {\\n\\t\\t\\t\\tconst corp = eval('ns.corporation'); // Cheating here because using 1 TiB of RAM to start a corporation is overkill\\n\\t\\t\\t\\tcorp.createCorporation(name);\\n\\t\\t\\t\\tprintBoth(ns, `Started a corporation: ${name}`);\\n\\t\\t\\t} else corp = false;\\n\\t\\t}\\n\\t\\tif (hasCorps && ns.getPlayer().hasCorporation && corp && !ns.scriptRunning(scripts.corp, host) &&\\n\\t\\t\\tenoughRam(ns, scripts.corp, host) && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Start corp manager?`)) {\\n\\t\\t\\t\\tns.exec(scripts.corp, host);\\n\\t\\t\\t\\tprintBoth(ns, `Started corp manager`);\\n\\t\\t\\t}\\n\\t\\t\\tcorp = false;\\n\\t\\t}\\n\\t\\t// Bladeburner manager\\n\\t\\tconst hasBladeburner = ns.getPlayer().bitNodeN === 7 || ns.getOwnedSourceFiles().some(s => s.n === 7);\\n\\t\\tconst hasCombatStats = ns.getPlayer().strength >= 100 && ns.getPlayer().defense >= 100 &&\\n\\t\\t\\tns.getPlayer().dexterity >= 100 && ns.getPlayer().agility >= 100;\\n\\t\\tif (hasBladeburner && hasCombatStats && !ns.getPlayer().inBladeburner && bladeburner &&\\n\\t\\t\\t!ns.scriptRunning(scripts.bladeburner, host) && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Join Bladeburner Division?`)) {\\n\\t\\t\\t\\tns.bladeburner.joinBladeburnerDivision();\\n\\t\\t\\t\\tprintBoth(ns, `Joined Bladeburner Division`);\\n\\t\\t\\t} else bladeburner = false;\\n\\t\\t}\\n\\t\\tif (hasBladeburner && ns.getPlayer().inBladeburner && bladeburner && !ns.scriptRunning(scripts.bladeburner, host) &&\\n\\t\\t\\tenoughRam(ns, scripts.bladeburner, host) && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Start Bladeburner manager?`)) {\\n\\t\\t\\t\\tns.exec(scripts.bladeburner, host);\\n\\t\\t\\t\\tprintBoth(ns, `Started Bladeburner manager`);\\n\\t\\t\\t}\\n\\t\\t\\tbladeburner = false;\\n\\t\\t}\\n\\t\\t// Purchase WSE account\\n\\t\\tif (!ns.getPlayer().hasWseAccount && ns.getPlayer().money >= 200e6 &&\\n\\t\\t\\twse && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Purchase WSE account?`)) {\\n\\t\\t\\t\\tns.stock.purchaseWseAccount();\\n\\t\\t\\t\\tprintBoth(ns, `Purchased WSE account`);\\n\\t\\t\\t} else wse = false;\\n\\t\\t}\\n\\t\\t// Purchase TIX API\\n\\t\\tif (!ns.getPlayer().hasTixApiAccess && ns.getPlayer().money >= 5e9 &&\\n\\t\\t\\ttix && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Purchase TIX API?`)) {\\n\\t\\t\\t\\tns.stock.purchaseTixApi();\\n\\t\\t\\t\\tprintBoth(ns, `Purchased TIX API`);\\n\\t\\t\\t} else tix = false;\\n\\t\\t}\\n\\t\\t// Stock market manager\\n\\t\\tif (ns.getPlayer().hasTixApiAccess && stock && !ns.scriptRunning(scripts.stock, host) &&\\n\\t\\t\\tenoughRam(ns, scripts.stock, host) && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Start stock market manager?`)) {\\n\\t\\t\\t\\tif (!bitnode8) ns.exec(scripts.stock, host);\\n\\t\\t\\t\\telse ns.exec(scripts.stock, host, 1, '--fracH', 0.001, '--fracB', 0.1);\\n\\t\\t\\t\\tprintBoth(ns, `Started stock market manager`);\\n\\t\\t\\t}\\n\\t\\t\\tstock = false;\\n\\t\\t}\\n\\t\\t// Hacknet manager\\n\\t\\tif (hacknet && !ns.scriptRunning(scripts.hacknet, host) &&\\n\\t\\t\\tenoughRam(ns, scripts.hacknet, host) && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Start Hacknet manager?`)) {\\n\\t\\t\\t\\tns.exec(scripts.hacknet, host);\\n\\t\\t\\t\\tprintBoth(ns, `Started Hacknet manager`);\\n\\t\\t\\t}\\n\\t\\t\\thacknet = false;\\n\\t\\t}\\n\\t\\t// Sleeve manager\\n\\t\\t// if ((ns.getPlayer().bitNodeN === 10 || ns.getOwnedSourceFiles().some(s => s.n === 10)) &&\\n\\t\\t// \\tsleeve && !ns.scriptRunning(scripts.sleeve, host) &&\\n\\t\\t// \\tenoughRam(ns, scripts.sleeve, host) && !promptScriptRunning(ns, host)) {\\n\\t\\t// \\tif (await ns.prompt(`Start sleeve manager?`)) {\\n\\t\\t// \\t\\tif (!bitnode8) ns.exec(scripts.sleeve, host);\\n\\t\\t// \\t\\telse ns.exec(scripts.sleeve, host, 1, '--disable-augmentation-buying');\\n\\t\\t// \\t\\tprintBoth(ns, `Started sleeve manager`);\\n\\t\\t// \\t}\\n\\t\\t// \\tsleeve = false;\\n\\t\\t// }\\n\\t\\t// Stanek Manager\\n\\t\\tconst hasStanek = ns.getPlayer().bitNodeN === 13 || ns.getOwnedSourceFiles().some(s => s.n === 13);\\n\\t\\tif (hasStanek && ns.getOwnedAugmentations().findIndex(e => e.includes('Stanek\\\\'s Gift')) === -1 &&\\n\\t\\t\\tns.getPlayer().money >= 200e3 && stanek && !ns.scriptRunning(scripts.stanek, host) &&\\n\\t\\t\\t!promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Accept Stanek's Gift?`)) {\\n\\t\\t\\t\\tacceptStanek(ns);\\n\\t\\t\\t\\tprintBoth(ns, `Accepted Stanek's Gift`);\\n\\t\\t\\t} else stanek = false;\\n\\t\\t}\\n\\t\\tif (hasStanek && ns.getOwnedAugmentations().findIndex(e => e.includes('Stanek\\\\'s Gift')) !== -1 &&\\n\\t\\t\\t!ns.scriptRunning(scripts.stanek, host) && stanek &&\\n\\t\\t\\tenoughRam(ns, scripts.stanek, host) && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Start Stanek's Gift manager?`)) {\\n\\t\\t\\t\\tns.exec(scripts.stanek, host);\\n\\t\\t\\t\\tprintBoth(ns, `Started Stanek's Gift manager`);\\n\\t\\t\\t}\\n\\t\\t\\tstanek = false;\\n\\t\\t}\\n\\t\\t// Check faction invites\\n\\t\\tconst factionInvitations = ns.checkFactionInvitations().filter(faction => !factions.includes(faction));\\n\\t\\tif (factionInvitations.length > 0 && enoughRam(ns, scripts.joinFactions, host) &&\\n\\t\\t\\t!promptScriptRunning(ns, host)) {\\n\\t\\t\\tns.print(`Request to join ${factionInvitations}`);\\n\\t\\t\\tns.exec(scripts.joinFactions, host, 1, ...factionInvitations);\\n\\t\\t\\tfactions = factions.concat(factionInvitations); // Don't ask again\\n\\t\\t}\\n\\t\\t// Backdoor servers\\n\\t\\tfor (const server of getAccessibleServers(ns)) {\\n\\t\\t\\tif (!ns.getServer(server).backdoorInstalled &&\\n\\t\\t\\t\\t!ns.isRunning(scripts.backdoor, host, server) &&\\n\\t\\t\\t\\tserver !== 'home' && enoughRam(ns, scripts.backdoor, host)) {\\n\\t\\t\\t\\tif (server === 'w0r1d_d43m0n' && backdoorWorldDaemon) {\\n\\t\\t\\t\\t\\tif (await ns.prompt(`Install backdoor on w0r1d_d43m0n and finish Bitnode?`)) {\\n\\t\\t\\t\\t\\t\\tns.print(`Installing backdoor on ${server}`);\\n\\t\\t\\t\\t\\t\\tns.exec(scripts.backdoor, host, 1, server);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tbackdoorWorldDaemon = false;\\n\\t\\t\\t\\t} else if (server !== 'w0r1d_d43m0n') {\\n\\t\\t\\t\\t\\tns.exec(scripts.backdoor, host, 1, server);\\n\\t\\t\\t\\t\\tns.print(`Installing backdoor on ${server}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Spend Hashes\\n\\t\\tif (haveHacknetServers) await spendHashes(ns, 'Sell for Money');\\n\\t\\t// Deploy batchers\\n\\t\\tdeployBatchers(ns);\\n\\t\\t// Simple hack manager\\n\\t\\tmanageAndHack(ns);\\n\\t\\t// Update overview\\n\\t\\tupdateOverview(ns);\\n\\t\\t// Update reserved RAM\\n\\t\\tawait updateReservedRam(ns);\\n\\t\\t// Update every second\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"cortex.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///cb31e23f-3ce0-4836-98a0-67ba6755e4d3\",\"moduleSequenceNumber\":24391},{\"filename\":\"/stanek/accept.js\",\"url\":\"blob:file:///04258c7e-7f63-4e4e-8c0b-fb4936f5ce70\",\"moduleSequenceNumber\":24406},{\"filename\":\"/hacknet/hash-spender.js\",\"url\":\"blob:file:///add8d179-5b38-4d23-b328-eb3677ea51c9\",\"moduleSequenceNumber\":24380},{\"filename\":\"utils.js\",\"url\":\"blob:file:///bbba2420-781c-4c08-83fd-fadbe64da3c5\",\"moduleSequenceNumber\":24391},{\"filename\":\"/contracts/contractor.js\",\"url\":\"blob:file:///c16aa567-dda6-4206-be7a-6be322179b5e\",\"moduleSequenceNumber\":24379},{\"filename\":\"cortex.js\",\"url\":\"blob:file:///424c6a0b-c396-4ad4-ac6f-687cbce2a08b\",\"moduleSequenceNumber\":24414}],\"dependents\":[],\"ramUsage\":84.35,\"server\":\"home\",\"moduleSequenceNumber\":30030,\"_hash\":\"7f18fa8326af637cbac3875144fb01f69969bc9e2986856dedb97b35526bfcb3\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.hospitalize\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeCoresCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeCores\",\"cost\":3},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.createGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"bladeburner.joinBladeburnerDivision\",\"cost\":4},{\"type\":\"fn\",\"name\":\"stock.purchaseWseAccount\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchaseTixApi\",\"cost\":2.5},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.goToLocation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {routeFinder} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst server = ns.args[0];\\n\\tconst route = routeFinder(ns, server);\\n\\tif (route) {\\n\\t\\tfor (let serv of route) {\\n\\t\\t\\tns.connect(serv);\\n\\t\\t}\\n\\t}\\n}\\n\\n// noinspection JSUnusedGlobalSymbols\\n/**\\n *\\n * @param {*} data\\n * @returns {string[]}\\n */\\nexport function autocomplete(data) {\\n\\t// noinspection JSUnresolvedVariable\\n\\treturn data.servers;\\n}\",\"filename\":\"/tools/connect.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///f8d69bdf-c662-4d4c-b6ed-821fd56d65bf\",\"moduleSequenceNumber\":24391},{\"filename\":\"/tools/connect.js\",\"url\":\"blob:file:///0ed48233-8d3a-4744-bf0d-c27cc857584f\",\"moduleSequenceNumber\":30016}],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"home\",\"moduleSequenceNumber\":30031,\"_hash\":\"b17a3e15d50101bb20a99629e19f87c1f2f8ca1d2cc4f7b60323548fe3f992a8\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const fs = require('fs');\\nconst path = require('path');\\nconst http = require('https');\\n\\n/**\\n *\\n * @param {string} dir\\n * @param {string[]} arrayOfFiles\\n * @returns {string[]}\\n */\\nfunction getFilesRecursive(dir, arrayOfFiles) {\\n\\ttry {\\n\\t\\tconst files = fs.readdirSync(dir);\\n\\t\\tarrayOfFiles = arrayOfFiles || [];\\n\\t\\tfiles.forEach(file => {\\n\\t\\t\\tconst subfile = path.join(dir, file);\\n\\t\\t\\tif (file !== 'test') {\\n\\t\\t\\t\\tif (fs.statSync(subfile).isDirectory()) arrayOfFiles = getFilesRecursive(subfile, arrayOfFiles);\\n\\t\\t\\t\\telse arrayOfFiles.push(subfile);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\treturn arrayOfFiles.filter(file => (path.extname(file) === '.txt' || path.extname(file) === '.js'));\\n\\t} catch (err) {\\n\\t\\tconsole.log(err);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {string} dir\\n * @returns {string[]}\\n */\\nfunction getFiles(dir = __dirname) {\\n\\tconst files = getFilesRecursive(`${dir}`);\\n\\tconst relativeFiles = [];\\n\\tfiles.forEach(file => relativeFiles.push(path.relative(dir, file).replace(/\\\\\\\\/g, '/')));\\n\\treturn relativeFiles;\\n}\\n\\n/**\\n *\\n * @param {string} filename\\n * @param {string} str\\n */\\nfunction writeToFile(filename, str) {\\n\\tfs.writeFile(filename, str, (err) => {\\n\\t\\tif (err) console.log(err);\\n\\t\\telse console.log('File written successfully');\\n\\t});\\n}\\n\\nconst dir = path.join(__dirname, '../');\\nconst files = getFiles(`${dir}`);\\nconst str = files.join('\\\\n');\\nwriteToFile('scripts.txt', str);\\n\\nconst index = fs.createWriteStream('../types/index.d.ts');\\nconst url = 'https://raw.githubusercontent.com/danielyxie/bitburner/dev/src/ScriptEditor/NetscriptDefinitions.d.ts';\\nhttp.get(url, response => response.pipe(index));\",\"filename\":\"/build/update.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":30032,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulPrograms(ns, name) {\\n\\treturn ignore(name) &&\\n\\t\\t( \\t// Useful programs augmentations\\n\\t\\t\\tname === 'CashRoot Starter Kit' || // Starting money and programs\\n\\t\\t\\tname === 'BitRunners Neurolink' || // Programs\\n\\t\\t\\tname === 'PCMatrix' // Programs\\n\\t\\t);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulFaction(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn ignore(name) &&\\n\\t\\tstats.faction_rep_mult; // Useful faction augmentations\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulFocus(ns, name) {\\n\\treturn ignore(name) &&\\n\\t\\t( \\t// Useful focus augmentations\\n\\t\\t\\tname === 'Neuroreceptor Management Implant' || // No simultaneous penalty\\n\\t\\t\\tname === 'The Blade\\\\'s Simulacrum' // Bladeburner and working\\n\\t\\t);\\n\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn ignore(name) &&\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulHackingSkill(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn ignore(name) &&\\n\\t\\t( \\t// Useful hacking skill augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult\\n\\t\\t);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn ignore(name) &&\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult\\n\\t\\t);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulCrime(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn ignore(name) &&\\n\\t\\t( \\t// Useful crime augmentations\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn ignore(name) &&\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn ignore(name) &&\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn ignore(name) &&\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\n/**\\n *\\n * @param {string} name\\n * @return {boolean}\\n */\\nfunction ignore(name) {\\n\\treturn name !== 'NeuroFlux Governor' && !name.includes('Stanek\\\\'s Gift');\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {function} criteria\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUseful(ns, criteria, name) {\\n\\tfor (const criterion of criteria) if (criterion(ns, name)) return true;\\n\\treturn false;\\n}\\n\\n\",\"filename\":\"/augmentations/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":30033,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Requires WarehouseAPI and OfficeAPI\\nimport {formatMoney, getCities} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst unlocked = ns.getOwnedSourceFiles().some(s => s.n === 3 && s.lvl === 3);\\n\\tif (!unlocked && !ns.corporation.hasUnlockUpgrade('Warehouse API')) throw new Error(`This script requires the Warehouse API`);\\n\\tif (!unlocked && !ns.corporation.hasUnlockUpgrade('Office API')) throw new Error(`This script requires the Office API`);\\n\\t// Set up\\n\\tconst cities = getCities();\\n\\tconst jobs = getJobs();\\n\\tconst division1 = 'Agriculture';\\n\\tconst division2 = 'Tobacco';\\n\\t// Part 1\\n\\tawait part1(ns, cities, jobs, division1);\\n\\t// Part 2\\n\\tawait part2(ns, cities, jobs, division1);\\n\\t// Part 3\\n\\tawait part3(ns, cities, jobs, division2);\\n\\t// Autopilot\\n\\tawait autopilot(ns, cities, jobs, division2);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} cities\\n * @param {Object<string>} jobs\\n * @param {string} division\\n * @returns {Promise<void>}\\n */\\nexport async function part1(ns, cities, jobs, division) {\\n\\tconst corp = ns.corporation;\\n\\t// Expand to Agriculture division\\n\\tawait expandIndustry(ns, 'Agriculture', division);\\n\\t// Unlock Smart Supply\\n\\tawait unlockUpgrade(ns, 'Smart Supply');\\n\\t// Turn on Smart Supply\\n\\tcorp.setSmartSupply(division, 'Sector-12', true);\\n\\t// Expand\\n\\tfor (let city of cities) {\\n\\t\\t// Expand to city\\n\\t\\tawait expandCity(ns, division, city);\\n\\t\\t// Purchase warehouse\\n\\t\\tawait purchaseWarehouse(ns, division, city);\\n\\t\\t// upgrade office to 3 and assign jobs\\n\\t\\tconst positions = [\\n\\t\\t\\t{job: jobs.operations, num: 1},\\n\\t\\t\\t{job: jobs.engineer, num: 1},\\n\\t\\t\\t{job: jobs.business, num: 1}\\n\\t\\t];\\n\\t\\tawait upgradeOffice(ns, division, city, 3, positions);\\n\\t\\t// Start selling material\\n\\t\\tcorp.sellMaterial(division, city, 'Food', 'MAX', 'MP');\\n\\t\\tcorp.sellMaterial(division, city, 'Plants', 'MAX', 'MP');\\n\\t}\\n\\t// Upgrade warehouse upto level 2\\n\\tfor (let city of cities) {\\n\\t\\tawait upgradeWarehouseUpto(ns, division, city, 2);\\n\\t}\\n\\t// Hire advert\\n\\tawait hireAdVertUpto(ns, division, 1);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} cities\\n * @param {Object<string>} jobs\\n * @param {string }division\\n * @returns {Promise<void>}\\n */\\nexport async function part2(ns, cities, jobs, division) {\\n\\t// Get upgrades\\n\\tlet upgrades = [\\n\\t\\t{name: 'FocusWires', level: 2},\\n\\t\\t{name: 'Neural Accelerators', level: 2},\\n\\t\\t{name: 'Speech Processor Implants', level: 2},\\n\\t\\t{name: 'Nuoptimal Nootropic Injector Implants', level: 2},\\n\\t\\t{name: 'Smart Factories', level: 2}\\n\\t];\\n\\tawait upgradeUpto(ns, upgrades);\\n\\t// Boost production\\n\\tfor (let city of cities) {\\n\\t\\tconst materials = [\\n\\t\\t\\t{name: 'Hardware', qty: 125},\\n\\t\\t\\t{name: 'AI Cores', qty: 75},\\n\\t\\t\\t{name: 'Real Estate', qty: 27e3}\\n\\t\\t];\\n\\t\\tawait buyMaterialsUpto(ns, division, city, materials);\\n\\t}\\n\\t// Wait for investment offer of $210b for the first round\\n\\tawait investmentOffer(ns, 210e9, 1);\\n\\t// Upgrade office size to nine\\n\\tfor (let city of cities) {\\n\\t\\tconst positions = [\\n\\t\\t\\t{job: jobs.operations, num: 2},\\n\\t\\t\\t{job: jobs.engineer, num: 2},\\n\\t\\t\\t{job: jobs.business, num: 1},\\n\\t\\t\\t{job: jobs.management, num: 2},\\n\\t\\t\\t{job: jobs.RAndD, num: 2}\\n\\t\\t];\\n\\t\\tawait upgradeOffice(ns, division, city, 9, positions);\\n\\t}\\n\\t// Upgrade factories and storage\\n\\tupgrades = [\\n\\t\\t{name: 'Smart Factories', level: 10},\\n\\t\\t{name: 'Smart Storage', level: 10}\\n\\t];\\n\\tawait upgradeUpto(ns, upgrades);\\n\\t// Upgrade warehouses\\n\\tfor (let city of cities) {\\n\\t\\tawait upgradeWarehouseUpto(ns, division, city, 9);\\n\\t}\\n\\t// Boost production\\n\\tfor (let city of cities) {\\n\\t\\tconst materials = [\\n\\t\\t\\t{name: 'Hardware', qty: 2800},\\n\\t\\t\\t{name: 'Robots', qty: 96},\\n\\t\\t\\t{name: 'AI Cores', qty: 2520},\\n\\t\\t\\t{name: 'Real Estate', qty: 146400}\\n\\t\\t];\\n\\t\\tawait buyMaterialsUpto(ns, division, city, materials);\\n\\t}\\n\\t// Wait for investment offer of $5t for the second round\\n\\tawait investmentOffer(ns, 5e12, 2);\\n\\t// Upgrade warehouses\\n\\tfor (let city of cities) {\\n\\t\\tawait upgradeWarehouseUpto(ns, division, city, 19);\\n\\t}\\n\\t// Boost production\\n\\tfor (let city of cities) {\\n\\t\\tconst materials = [\\n\\t\\t\\t{name: 'Hardware', qty: 9300},\\n\\t\\t\\t{name: 'Robots', qty: 726},\\n\\t\\t\\t{name: 'AI Cores', qty: 6270},\\n\\t\\t\\t{name: 'Real Estate', qty: 230400}\\n\\t\\t];\\n\\t\\tawait buyMaterialsUpto(ns, division, city, materials);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} cities\\n * @param {Object<string>} jobs\\n * @param {string} division\\n * @param {string} mainCity\\n * @returns {Promise<void>}\\n */\\nexport async function part3(ns, cities, jobs, division, mainCity = 'Aevum') {\\n\\t// Expand into Tobacco industry\\n\\tawait expandIndustry(ns, 'Tobacco', division);\\n\\tfor (let city of cities) {\\n\\t\\t// Expand to city\\n\\t\\tawait expandCity(ns, division, city);\\n\\t\\t// Purchase warehouse\\n\\t\\tawait purchaseWarehouse(ns, division, city);\\n\\t\\tif (city === mainCity) {\\n\\t\\t\\t// Upgrade Office size to 60\\n\\t\\t\\tconst positions = [\\n\\t\\t\\t\\t{job: jobs.operations, num: 6},\\n\\t\\t\\t\\t{job: jobs.engineer, num: 6},\\n\\t\\t\\t\\t{job: jobs.business, num: 6},\\n\\t\\t\\t\\t{job: jobs.management, num: 6},\\n\\t\\t\\t\\t{job: jobs.RAndD, num: 6}\\n\\t\\t\\t];\\n\\t\\t\\tawait upgradeOffice(ns, division, city, 30, positions);\\n\\t\\t} else {\\n\\t\\t\\t// Upgrade Office size to nine\\n\\t\\t\\tconst positions = [\\n\\t\\t\\t\\t{job: jobs.operations, num: 2},\\n\\t\\t\\t\\t{job: jobs.engineer, num: 2},\\n\\t\\t\\t\\t{job: jobs.business, num: 1},\\n\\t\\t\\t\\t{job: jobs.management, num: 2},\\n\\t\\t\\t\\t{job: jobs.RAndD, num: 2}\\n\\t\\t\\t];\\n\\t\\t\\tawait upgradeOffice(ns, division, city, 9, positions);\\n\\t\\t}\\n\\t}\\n\\t// Start making Tobacco v1\\n\\tif (getLatestVersion(ns, division) === 0) await makeProduct(ns, division, mainCity, 'Tobacco v1', 1e9, 1e9);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} cities\\n * @param {Object<string>} jobs\\n * @param {string} division\\n * @param {string} mainCity\\n * @returns {Promise<void>}\\n */\\nexport async function autopilot(ns, cities, jobs, division, mainCity = 'Aevum') {\\n\\tconst corp = ns.corporation;\\n\\tconst upgrades = getResearch();\\n\\tconst minResearch = 50e3;\\n\\tlet maxProducts = 3;\\n\\tif (corp.hasResearched(division, upgrades.capacity1)) maxProducts++;\\n\\tif (corp.hasResearched(division, upgrades.capacity2)) maxProducts++;\\n\\t// Get latest version\\n\\tlet version = getLatestVersion(ns, division);\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\tif (corp.getProduct(division, 'Tobacco v' + version).developmentProgress >= 100) {\\n\\t\\t\\t// Start selling the developed version\\n\\t\\t\\tcorp.sellProduct(division, mainCity, 'Tobacco v' + version, 'MAX', 'MP*' + (2 ** (version - 1)), true);\\n\\t\\t\\t// Set Market TA II if researched\\n\\t\\t\\tif (corp.hasResearched(division, upgrades.market2)) corp.setProductMarketTA2(division, 'Tobacco v' + version, true);\\n\\t\\t\\t// Discontinue earliest version\\n\\t\\t\\tif (corp.getDivision(division).products.length === maxProducts) corp.discontinueProduct(division, 'Tobacco v' + getEarliestVersion(ns, division));\\n\\t\\t\\t// Start making new version\\n\\t\\t\\tawait makeProduct(ns, division, mainCity, 'Tobacco v' + (version + 1), 1e9 * 2 ** version, 1e9 * 2 ** version);\\n\\t\\t\\t// Update current version\\n\\t\\t\\tversion++;\\n\\t\\t}\\n\\t\\t// Use hashes to boost research\\n\\t\\tif (ns.hacknet.numHashes() >= ns.hacknet.hashCost('Exchange for Corporation Research') &&\\n\\t\\t\\tcorp.getDivision(division).research < 3 * minResearch) ns.hacknet.spendHashes('Exchange for Corporation Research');\\n\\t\\t// Check research progress for lab\\n\\t\\tif (!corp.hasResearched(division, upgrades.lab) &&\\n\\t\\t\\tcorp.getDivision(division).research - corp.getResearchCost(division, upgrades.lab) >= minResearch) {\\n\\t\\t\\tcorp.research(division, upgrades.lab);\\n\\t\\t}\\n\\t\\t// Check research progress for Market TAs\\n\\t\\tlet researchCost = 0;\\n\\t\\tif (!corp.hasResearched(division, upgrades.market1)) researchCost += corp.getResearchCost(division, upgrades.market1);\\n\\t\\tif (!corp.hasResearched(division, upgrades.market2)) researchCost += corp.getResearchCost(division, upgrades.market2);\\n\\t\\tif (corp.hasResearched(division, upgrades.lab) && researchCost > 0 &&\\n\\t\\t\\tcorp.getDivision(division).research - researchCost >= minResearch) {\\n\\t\\t\\tif (!corp.hasResearched(division, upgrades.market1)) corp.research(division, upgrades.market1);\\n\\t\\t\\tif (!corp.hasResearched(division, upgrades.market2)) {\\n\\t\\t\\t\\tcorp.research(division, upgrades.market2);\\n\\t\\t\\t\\t// Set Market TA II on for the current selling versions\\n\\t\\t\\t\\tfor (const product of corp.getDivision(division).products) corp.setProductMarketTA2(division, product, true);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Check research progress for Fulcrum\\n\\t\\tif (corp.hasResearched(division, upgrades.market2) && !corp.hasResearched(division, upgrades.fulcrum) &&\\n\\t\\t\\tcorp.getDivision(division).research - corp.getResearchCost(division, upgrades.fulcrum) >= minResearch) {\\n\\t\\t\\tcorp.research(division, upgrades.fulcrum);\\n\\t\\t}\\n\\t\\t// Check research progress for Capacity I\\n\\t\\tif (corp.hasResearched(division, upgrades.fulcrum) && !corp.hasResearched(division, upgrades.capacity1) &&\\n\\t\\t\\tcorp.getDivision(division).research - corp.getResearchCost(division, upgrades.capacity1) >= minResearch) {\\n\\t\\t\\tcorp.research(division, upgrades.capacity1);\\n\\t\\t\\tmaxProducts++;\\n\\t\\t}\\n\\t\\t// Check research progress for Capacity II\\n\\t\\tif (corp.hasResearched(division, upgrades.capacity1) && !corp.hasResearched(division, upgrades.capacity2) &&\\n\\t\\t\\tcorp.getDivision(division).research - corp.getResearchCost(division, upgrades.capacity2) >= minResearch) {\\n\\t\\t\\tcorp.research(division, upgrades.capacity2);\\n\\t\\t\\tmaxProducts++;\\n\\t\\t}\\n\\t\\t// Check what is cheaper\\n\\t\\tif (corp.getOfficeSizeUpgradeCost(division, mainCity, 15) < corp.getHireAdVertCost(division)) {\\n\\t\\t\\t// Upgrade office size in Aevum\\n\\t\\t\\tif (corp.getCorporation().funds >= corp.getOfficeSizeUpgradeCost(division, mainCity, 15)) {\\n\\t\\t\\t\\tcorp.upgradeOfficeSize(division, mainCity, 15);\\n\\t\\t\\t\\thireMaxEmployees(ns, division, mainCity);\\n\\t\\t\\t\\t// Assign jobs\\n\\t\\t\\t\\tconst dist = Math.floor(corp.getOffice(division, mainCity).size / Object.keys(jobs).length);\\n\\t\\t\\t\\tfor (let job of Object.values(jobs)) {\\n\\t\\t\\t\\t\\tawait corp.setAutoJobAssignment(division, mainCity, job, dist);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Hire advert\\n\\t\\telse if (corp.getCorporation().funds >= corp.getHireAdVertCost(division)) corp.hireAdVert(division);\\n\\t\\t// Level upgrades\\n\\t\\tlevelUpgrades(ns, 0.1);\\n\\t\\t// Go public\\n\\t\\tif (corp.getCorporation().revenue >= 1e18) corp.goPublic(0);\\n\\t\\t// If public\\n\\t\\tif (corp.getCorporation().public) {\\n\\t\\t\\t// Sell a small amount of shares when they amount to more cash than we have on hand\\n\\t\\t\\tif (corp.getCorporation().shareSaleCooldown <= 0 &&\\n\\t\\t\\t\\tcorp.getCorporation().sharePrice * 1e6 > ns.getPlayer().money) corp.sellShares(1e6);\\n\\t\\t\\t// Buyback shares when we can\\n\\t\\t\\telse if (corp.getCorporation().issuedShares > 0) {\\n\\t\\t\\t\\tif (ns.getPlayer().money > 2 * corp.getCorporation().issuedShares * corp.getCorporation().sharePrice * 1.1) {\\n\\t\\t\\t\\t\\tcorp.buyBackShares(corp.getCorporation().issuedShares);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// Check if we can unlock Shady Accounting\\n\\t\\t\\tif (corp.getCorporation().funds >= corp.getUnlockUpgradeCost('Shady Accounting') &&\\n\\t\\t\\t\\t!corp.hasUnlockUpgrade('Shady Accounting')) corp.unlockUpgrade('Shady Accounting');\\n\\t\\t\\t// Check if we can unlock Government Partnership\\n\\t\\t\\tif (corp.getCorporation().funds >= corp.getUnlockUpgradeCost('Government Partnership') &&\\n\\t\\t\\t\\t!corp.hasUnlockUpgrade('Government Partnership')) corp.unlockUpgrade('Government Partnership');\\n\\t\\t\\t// Issue dividends\\n\\t\\t\\tcorp.issueDividends(dividendsPercentage(ns));\\n\\t\\t}\\n\\t\\t// Update every second\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n/**\\n * Function to level the cheapest upgrade if under a certain percentage of the corp funds\\n *\\n * @param {NS} ns\\n * @param {number} percent\\n */\\nfunction levelUpgrades(ns, percent) {\\n\\tconst corp = ns.corporation;\\n\\tlet cheapestCost = Infinity;\\n\\tlet cheapestUpgrade;\\n\\tfor (const upgrade of getUpgrades()) {\\n\\t\\tconst cost = corp.getUpgradeLevelCost(upgrade);\\n\\t\\tif (cost < cheapestCost) {\\n\\t\\t\\tcheapestUpgrade = upgrade;\\n\\t\\t\\tcheapestCost = cost;\\n\\t\\t}\\n\\t}\\n\\tif (percent * corp.getCorporation().funds >= cheapestCost) corp.levelUpgrade(cheapestUpgrade);\\n}\\n\\n/**\\n * Function to return a list of upgrades\\n *\\n * @return {string[]}\\n */\\nfunction getUpgrades() {\\n\\treturn [\\n\\t\\t'Smart Factories',\\n\\t\\t'Smart Storage',\\n\\t\\t'DreamSense',\\n\\t\\t'Wilson Analytics',\\n\\t\\t'Nuoptimal Nootropic Injector Implants',\\n\\t\\t'Speech Processor Implants',\\n\\t\\t'Neural Accelerators',\\n\\t\\t'FocusWires',\\n\\t\\t'ABC SalesBots',\\n\\t\\t'Project Insight'\\n\\t];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {number}\\n */\\nfunction dividendsPercentage(ns) {\\n\\treturn Math.max(0, Math.min(0.99, Math.log(ns.corporation.getCorporation().revenue) / (20 * Math.log(1000))));\\n}\\n\\n/**\\n *\\n * @returns {Object<string>} Jobs\\n */\\nfunction getJobs() {\\n\\treturn {\\n\\t\\toperations: 'Operations',\\n\\t\\tengineer: 'Engineer',\\n\\t\\tbusiness: 'Business',\\n\\t\\tmanagement: 'Management',\\n\\t\\tRAndD: 'Research & Development'\\n\\t};\\n}\\n\\n\\n/**\\n * Function to wait for enough money\\n *\\n * @param {NS} ns\\n * @param {function} func\\n * @param {*[]} args\\n * @returns {Promise<void>}\\n */\\nasync function moneyFor(ns, func, ...args) {\\n\\twhile (func(...args) > ns.corporation.getCorporation().funds) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n/**\\n * Function to wait for enough money\\n *\\n * @param {NS} ns\\n * @param {number} amount\\n * @returns {Promise<void>}\\n */\\nasync function moneyForAmount(ns, amount) {\\n\\twhile (amount > ns.corporation.getCorporation().funds) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n/**\\n * Function to hire employees up to office size\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @param {string} city\\n */\\nfunction hireMaxEmployees(ns, division, city) {\\n\\tconst corp = ns.corporation;\\n\\tns.print(`Hiring employees for ${division} (${city})`);\\n\\twhile (corp.getOffice(division, city).employees.length < corp.getOffice(division, city).size) {\\n\\t\\tcorp.hireEmployee(division, city);\\n\\t}\\n}\\n\\n/**\\n * Function to upgrade list of upgrades upto a certain level\\n *\\n * @param {NS} ns\\n * @param {Object<string, number>[]} upgrades\\n * @returns {Promise<void>}\\n */\\nasync function upgradeUpto(ns, upgrades) {\\n\\tconst corp = ns.corporation;\\n\\tfor (let upgrade of upgrades) {\\n\\t\\twhile (corp.getUpgradeLevel(upgrade.name) < upgrade.level) {\\n\\t\\t\\tawait moneyFor(ns, corp.getUpgradeLevelCost, upgrade.name);\\n\\t\\t\\tcorp.levelUpgrade(upgrade.name);\\n\\t\\t\\tns.print(`Upgraded ${upgrade.name} to level ${corp.getUpgradeLevel(upgrade.name)}`);\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n * Function to buy materials upto a certain quantity\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @param {string} city\\n * @param {Object<string, number>[]} materials\\n * @returns {Promise<void>}\\n */\\nasync function buyMaterialsUpto(ns, division, city, materials) {\\n\\tconst corp = ns.corporation;\\n\\tfor (let material of materials) {\\n\\t\\tconst curQty = corp.getMaterial(division, city, material.name).qty;\\n\\t\\tif (curQty < material.qty) {\\n\\t\\t\\tns.print(`Buying ${material.name} for ${division} (${city})`);\\n\\t\\t\\tcorp.buyMaterial(division, city, material.name, (material.qty - curQty) / 10);\\n\\t\\t}\\n\\t}\\n\\twhile (true) {\\n\\t\\tlet breakOut = true;\\n\\t\\tfor (let material of materials) {\\n\\t\\t\\tconst curQty = corp.getMaterial(division, city, material.name).qty;\\n\\t\\t\\tif (curQty >= material.qty) corp.buyMaterial(division, city, material.name, 0);\\n\\t\\t\\telse breakOut = false;\\n\\t\\t}\\n\\t\\tif (breakOut) break;\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\n/**\\n * Function to upgrade warehouse up to certain level\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @param {string} city\\n * @param {number} level\\n * @returns {Promise<void>}\\n */\\nasync function upgradeWarehouseUpto(ns, division, city, level) {\\n\\tconst corp = ns.corporation;\\n\\twhile (corp.getWarehouse(division, city).level < level) {\\n\\t\\tawait moneyFor(ns, corp.getUpgradeWarehouseCost, division, city);\\n\\t\\tcorp.upgradeWarehouse(division, city);\\n\\t\\tns.print(`Upgraded warehouse in ${division} (${city}) to level ${corp.getWarehouse(division, city).level}`);\\n\\t}\\n}\\n\\n/**\\n * Function to hire AdVert up to certain level\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @param {number} level\\n * @returns {Promise<void>}\\n */\\nasync function hireAdVertUpto(ns, division, level) {\\n\\tconst corp = ns.corporation;\\n\\twhile (corp.getHireAdVertCount(division) < level) {\\n\\t\\tawait moneyFor(ns, corp.getHireAdVertCost, division);\\n\\t\\tcorp.hireAdVert(division);\\n\\t\\tns.print(`Hired AdVert in ${division} to level ${level}`);\\n\\t}\\n}\\n\\n/**\\n * Function to upgrade an office, hire maximum number of employees and assign them jobs\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @param {string} city\\n * @param {number} size\\n * @param {Object<string, number>[]} positions\\n * @returns {Promise<void>}\\n */\\nasync function upgradeOffice(ns, division, city, size, positions) {\\n\\tconst corp = ns.corporation;\\n\\tconst upgradeSize = size - corp.getOffice(division, city).size;\\n\\tif (upgradeSize > 0) {\\n\\t\\tns.print(`Upgrading office in ${division} (${city}) to ${size}`);\\n\\t\\tawait moneyFor(ns, corp.getOfficeSizeUpgradeCost, division, city, upgradeSize);\\n\\t\\tcorp.upgradeOfficeSize(division, city, upgradeSize);\\n\\t}\\n\\thireMaxEmployees(ns, division, city);\\n\\tconst allPositions = getPositions(ns, division, city);\\n\\tfor (let position of positions) {\\n\\t\\tif (allPositions[position.job] !== position.num) await corp.setAutoJobAssignment(division, city, position.job, position.num);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param division\\n * @param city\\n * @returns {Object<string, number>[]}\\n */\\nfunction getPositions(ns, division, city) {\\n\\tconst corp = ns.corporation;\\n\\tconst positions = {};\\n\\tconst employeeNames = corp.getOffice(division, city).employees;\\n\\tfor (let employeeName of employeeNames) {\\n\\t\\tconst employeePos = corp.getEmployee(division, city, employeeName).pos;\\n\\t\\tpositions[employeePos] = (positions[employeePos] || 0) + 1;\\n\\t}\\n\\treturn positions;\\n}\\n\\n/**\\n * Function to wait for an investment offer of a certain amount\\n *\\n * @param {NS} ns\\n * @param {number} amount\\n * @param {number} round\\n * @returns {Promise<void>}\\n */\\nasync function investmentOffer(ns, amount, round = 5) {\\n\\tconst corp = ns.corporation;\\n\\tif (corp.getInvestmentOffer().round > round) return;\\n\\tns.print(`Waiting for investment offer of ${formatMoney(ns, amount)}`);\\n\\t// Wait for investment\\n\\twhile (corp.getInvestmentOffer().funds < amount) {\\n\\t\\tif (corp.getInvestmentOffer().round > round) {\\n\\t\\t\\tns.print(`Already accepted investment offer at round ${corp.getInvestmentOffer().round}, ` +\\n\\t\\t\\t\\t`or it was manually accepted now.`);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tamount -= corp.getCorporation().revenue; // Take revenue into account\\n\\t\\t// Pump in corp funds if we have hashes\\n\\t\\tif (ns.hacknet.numHashes() >= ns.hacknet.hashCost('Sell for Corporation Funds')) {\\n\\t\\t\\tns.hacknet.spendHashes('Sell for Corporation Funds');\\n\\t\\t\\tamount -= 1e9;\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.print(`Accepted investment offer of ${formatMoney(ns, corp.getInvestmentOffer().funds)}`);\\n\\tcorp.acceptInvestmentOffer();\\n}\\n\\n/**\\n * Function to start making a product\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @param {string} city\\n * @param {string} name\\n * @param {number} design\\n * @param {number} marketing\\n * @returns {Promise<void>}\\n */\\nasync function makeProduct(ns, division, city, name, design = 0, marketing = 0) {\\n\\tconst corp = ns.corporation;\\n\\tconst products = corp.getDivision(division).products;\\n\\tconst proposedVersion = parseVersion(name);\\n\\tlet currentBestVersion = 0;\\n\\tfor (let product of products) {\\n\\t\\tlet version = parseVersion(product);\\n\\t\\tif (version > currentBestVersion) currentBestVersion = version;\\n\\t}\\n\\tif (proposedVersion > currentBestVersion) {\\n\\t\\tawait moneyForAmount(ns, design + marketing);\\n\\t\\tcorp.makeProduct(division, city, name, design, marketing);\\n\\t\\tns.print(`Started to make ${name} in ${division} (${city}) with ${formatMoney(ns, design)} for design and ${formatMoney(ns, marketing)} for marketing`);\\n\\t} else ns.print(`Already making/made ${name} in ${division} (${city})`);\\n}\\n\\n/**\\n * Function to get latest product version\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @return {number}\\n */\\nfunction getLatestVersion(ns, division) {\\n\\tconst products = ns.corporation.getDivision(division).products;\\n\\tlet latestVersion = 0;\\n\\tfor (let product of products) {\\n\\t\\tlet version = parseVersion(product);\\n\\t\\tif (version > latestVersion) latestVersion = version;\\n\\t}\\n\\treturn latestVersion;\\n}\\n\\n/**\\n * Function to get earliest product version\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @returns {number}\\n */\\nfunction getEarliestVersion(ns, division) {\\n\\tconst products = ns.corporation.getDivision(division).products;\\n\\tlet earliestVersion = Number.MAX_SAFE_INTEGER;\\n\\tfor (let product of products) {\\n\\t\\tlet version = parseVersion(product);\\n\\t\\tif (version < earliestVersion) earliestVersion = version;\\n\\t}\\n\\treturn earliestVersion;\\n}\\n\\n/**\\n * Function to parse product version from name\\n *\\n * @param {string} name\\n * @returns {number}\\n */\\nfunction parseVersion(name) {\\n\\tlet version = '';\\n\\tfor (let i = 1; i <= name.length; i++) {\\n\\t\\tlet slice = name.slice(-i);\\n\\t\\tif (!isNaN(slice)) version = slice;\\n\\t\\telse if (version === '') throw new Error(`Product name must end with version number`);\\n\\t\\telse return parseInt(version);\\n\\t}\\n}\\n\\n/**\\n * Function to expand industry\\n *\\n * @param {NS} ns\\n * @param {string} industry\\n * @param {string} division\\n * @returns {Promise<void>}\\n */\\nasync function expandIndustry(ns, industry, division) {\\n\\tconst corp = ns.corporation;\\n\\tif (!corp.getCorporation().divisions.some(d => d.type === industry || d.name === division)) {\\n\\t\\tns.print(`Expanding to ${industry} industry: ${division}`);\\n\\t\\tawait moneyFor(ns, corp.getExpandIndustryCost, industry);\\n\\t\\tcorp.expandIndustry(industry, division);\\n\\t} else ns.print(`Already expanded to ${industry} industry: ${division}`);\\n}\\n\\n\\n/**\\n * Function to expand city\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @param {string} city\\n * @returns {Promise<void>}\\n */\\nasync function expandCity(ns, division, city) {\\n\\tconst corp = ns.corporation;\\n\\tif (!corp.getDivision(division).cities.includes(city)) {\\n\\t\\tawait moneyFor(ns, corp.getExpandCityCost);\\n\\t\\tcorp.expandCity(division, city);\\n\\t\\tns.print(`Expanded to ${city} for ${division}`);\\n\\t} else ns.print(`Already expanded to ${city} for ${division}`);\\n}\\n\\n/**\\n * Function to purchase warehouse\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @param {string} city\\n * @returns {Promise<void>}\\n */\\nasync function purchaseWarehouse(ns, division, city) {\\n\\tconst corp = ns.corporation;\\n\\tif (!corp.hasWarehouse(division, city)) {\\n\\t\\tawait moneyFor(ns, corp.getPurchaseWarehouseCost);\\n\\t\\tcorp.purchaseWarehouse(division, city);\\n\\t\\tns.print(`Purchased warehouse in ${division} (${city})`);\\n\\t} else ns.print(`Already purchased warehouse in ${city} for ${division}`);\\n}\\n\\n/**\\n * Function to unlock upgrade\\n *\\n * @param {NS} ns\\n * @param {string} upgrade\\n * @returns {Promise<void>}\\n */\\nasync function unlockUpgrade(ns, upgrade) {\\n\\tconst corp = ns.corporation;\\n\\tif (!corp.hasUnlockUpgrade(upgrade)) {\\n\\t\\tawait moneyFor(ns, corp.getUnlockUpgradeCost, upgrade);\\n\\t\\tcorp.unlockUpgrade(upgrade);\\n\\t\\tns.print(`Purchased ${upgrade}`);\\n\\t} else ns.print(`Already purchased ${upgrade}`);\\n}\\n\\n/**\\n * Function to return important research\\n *\\n * @returns {Object<string>}\\n */\\nfunction getResearch() {\\n\\treturn {\\n\\t\\tlab: 'Hi-Tech R&D Laboratory',\\n\\t\\tmarket1: 'Market-TA.I',\\n\\t\\tmarket2: 'Market-TA.II',\\n\\t\\tfulcrum: 'uPgrade: Fulcrum',\\n\\t\\tcapacity1: 'uPgrade: Capacity.I',\\n\\t\\tcapacity2: 'uPgrade: Capacity.II'\\n\\t};\\n}\",\"filename\":\"/corporation/autopilot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///8b3d1c0a-6758-4b1b-90ff-50f0740e4555\",\"moduleSequenceNumber\":10734},{\"filename\":\"/corporation/autopilot.js\",\"url\":\"blob:file:///2721f4d1-51f5-4e7a-b094-8c4c49f83cd3\",\"moduleSequenceNumber\":13380}],\"dependents\":[],\"ramUsage\":1033.5,\"server\":\"home\",\"moduleSequenceNumber\":30034,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedVariable\\n\\nimport {getCities, promptScriptRunning} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst bb = ns.bladeburner;\\n\\tif (ns.getPlayer().bitNodeN !== 7 && !ns.getOwnedSourceFiles().some(s => s.n === 7 && s.lvl >= 1)) throw new Error(`This script requires the Bladeburner API`);\\n\\tif (!bb.joinBladeburnerDivision()) throw new Error(`Must be able to join Bladeburner division`);\\n\\t// Minimum chance for switching actions\\n\\tconst minChance = 1 / 3;\\n\\t// Sort black ops in ascending rank\\n\\tlet maxRequiredRank = 0;\\n\\tconst blackOps = bb.getBlackOpNames().map(blackOp => {\\n\\t\\tconst requiredRank = bb.getBlackOpRank(blackOp);\\n\\t\\tif (maxRequiredRank < requiredRank) maxRequiredRank = requiredRank;\\n\\t\\treturn {name: blackOp, requiredRank};\\n\\t}).sort((a, b) => a.requiredRank - b.requiredRank);\\n\\tns.print(`Max rank required: ${maxRequiredRank}`);\\n\\tlet lastLookAround = 0;\\n\\t// Autopilot\\n\\twhile (true) {\\n\\t\\tconst player = ns.getPlayer();\\n\\t\\tconst rank = bb.getRank();\\n\\t\\t// Join Faction if we can\\n\\t\\tif (rank > 25) bb.joinBladeburnerFaction();\\n\\t\\t// Check if we can get skills\\n\\t\\tlet points = bb.getSkillPoints();\\n\\t\\twhile (points > 0) {\\n\\t\\t\\tconst skills = getSkillsData().filter(s => bb.getSkillLevel(s.name) < s.max || s.max === -1).map(\\n\\t\\t\\t\\ts => {\\n\\t\\t\\t\\t\\tconst cost = bb.getSkillUpgradeCost(s.name);\\n\\t\\t\\t\\t\\tlet value = s.bonus / cost;\\n\\t\\t\\t\\t\\tif (s.name === 'Overclock' &&\\n\\t\\t\\t\\t\\t\\tbb.getActionEstimatedSuccessChance('Operation', 'Assassination')[0] === 1) value = 1000;\\n\\t\\t\\t\\t\\telse if (s.late &&\\n\\t\\t\\t\\t\\t\\tbb.getSkillLevel('Overclock') < getSkillsData().find(s => s.name === 'Overclock').max) value = 0;\\n\\t\\t\\t\\t\\treturn {\\n\\t\\t\\t\\t\\t\\t...s,\\n\\t\\t\\t\\t\\t\\tvalue: value,\\n\\t\\t\\t\\t\\t\\tcost\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t}).sort((a, b) => b.value - a.value);\\n\\t\\t\\t// Get current best skill\\n\\t\\t\\tconst skill = skills[0];\\n\\t\\t\\tif (skill.cost > points) break;\\n\\t\\t\\t// Purchase current best skill\\n\\t\\t\\tbb.upgradeSkill(skill.name);\\n\\t\\t\\tns.print(`Purchasing ${skill.name} for ${skill.cost} skill points`);\\n\\t\\t\\t// Update skill points\\n\\t\\t\\tpoints = bb.getSkillPoints();\\n\\t\\t}\\n\\t\\t// Train combat to get 100 in all combat stats\\n\\t\\tif (player.strength < 100 || player.defense < 100 || player.dexterity < 100 || player.agility < 100) {\\n\\t\\t\\tawait doAction(ns, 'General', 'Training');\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\t// Check if we can do black ops\\n\\t\\tfor (const blackOp of blackOps) {\\n\\t\\t\\tif (rank < blackOp.requiredRank) break; // Can't do this Black Op yet\\n\\t\\t\\tif (bb.getActionCountRemaining('BlackOps', blackOp.name) === 0) continue; // Already did the Black Op\\n\\t\\t\\tlet [amin, amax] = bb.getActionEstimatedSuccessChance('BlackOps', blackOp.name);\\n\\t\\t\\tif (amax < 1) break; // Not yet at 100%\\n\\t\\t\\twhile (amin !== amax) { // Needs field analysis\\n\\t\\t\\t\\tawait doAction(ns, 'General', 'Field Analysis');\\n\\t\\t\\t\\t[amin, amax] = bb.getActionEstimatedSuccessChance('BlackOps', blackOp.name);\\n\\t\\t\\t}\\n\\t\\t\\tif (amax < 1) break; // Attempt only at 100%\\n\\t\\t\\t// Ask player to complete the Bitnode\\n\\t\\t\\tif (blackOp.name === 'Operation Daedalus') {\\n\\t\\t\\t\\twhile (promptScriptRunning(ns, 'home')) {\\n\\t\\t\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (!await ns.prompt(`Complete Operation Daedalus and finish Bitnode?`)) {\\n\\t\\t\\t\\t\\tns.tprint(`Stopping Bladeburner manager`);\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tawait doAction(ns, 'BlackOps', blackOp.name);\\n\\t\\t}\\n\\t\\t// Get current city\\n\\t\\tlet city = bb.getCity();\\n\\t\\tif (lastLookAround < Date.now() - 60 * 60 * 1000) {\\n\\t\\t\\tlastLookAround = Date.now();\\n\\t\\t\\t// Update best city\\n\\t\\t\\tns.print(`Finding best city`);\\n\\t\\t\\tconst raid = bb.getActionCountRemaining('Operation', 'Assassination') === 0;\\n\\t\\t\\tlet bestPop = 0;\\n\\t\\t\\tlet bestCity = '';\\n\\t\\t\\tfor (const city of getCities()) {\\n\\t\\t\\t\\tbb.switchCity(city);\\n\\t\\t\\t\\tlet [amin, amax] = bb.getActionEstimatedSuccessChance('Operation', 'Assassination');\\n\\t\\t\\t\\twhile (amin !== amax) {\\n\\t\\t\\t\\t\\tawait improveAccuracy(ns);\\n\\t\\t\\t\\t\\t[amin, amax] = bb.getActionEstimatedSuccessChance('Operation', 'Assassination');\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tconst pop = bb.getCityEstimatedPopulation(city);\\n\\t\\t\\t\\tif (pop > bestPop && !(raid && bb.getCityCommunities(city) === 0)) {\\n\\t\\t\\t\\t\\tbestPop = pop;\\n\\t\\t\\t\\t\\tbestCity = city;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// Switch to best city\\n\\t\\t\\tif (bestCity && city !== bestCity) {\\n\\t\\t\\t\\tcity = bestCity;\\n\\t\\t\\t\\tns.print(`Switched to ${city}`);\\n\\t\\t\\t\\tbb.switchCity(city);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Check if chaos is over 50\\n\\t\\tconst chaos = bb.getCityChaos(city);\\n\\t\\tif (chaos >= 50) {\\n\\t\\t\\tns.print(`Chaos is high in ${city}`);\\n\\t\\t\\tif (bb.getActionEstimatedSuccessChance('Operation', 'Stealth Retirement Operation')[0] === 1 &&\\n\\t\\t\\t\\tbb.getActionCountRemaining('Operation', 'Stealth Retirement Operation') > 0) {\\n\\t\\t\\t\\tawait doAction(ns, 'Operation', 'Stealth Retirement Operation');\\n\\t\\t\\t} else await doAction(ns, 'General', 'Diplomacy');\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\t// Get best action\\n\\t\\tlet needsImprovedAccuracy = false;\\n\\t\\tconst actions = getActionData().filter(a => {\\n\\t\\t\\tconst [amin, amax] = bb.getActionEstimatedSuccessChance(a.type, a.name);\\n\\t\\t\\tconst minMax = amin === amax;\\n\\t\\t\\tconst include = a.late ? bb.getActionCountRemaining('Operation', 'Assassination') === 0 : true;\\n\\t\\t\\tif (!minMax) needsImprovedAccuracy = true;\\n\\t\\t\\treturn bb.getActionCountRemaining(a.type, a.name) > 0 && minMax && amin >= minChance && include;\\n\\t\\t}).map(a => {\\n\\t\\t\\tconst level = bb.getActionCurrentLevel(a.type, a.name);\\n\\t\\t\\tconst rewardMultiplier = Math.pow(a.rewardFac, level - 1);\\n\\t\\t\\tconst gain = a.rankGain * rewardMultiplier * ns.getBitNodeMultipliers().BladeburnerRank;\\n\\t\\t\\tconst time = bb.getActionTime(a.type, a.name);\\n\\t\\t\\tconst [, amax] = bb.getActionEstimatedSuccessChance(a.type, a.name);\\n\\t\\t\\treturn {\\n\\t\\t\\t\\t...a,\\n\\t\\t\\t\\tgain,\\n\\t\\t\\t\\tlevel,\\n\\t\\t\\t\\trewardMultiplier,\\n\\t\\t\\t\\ttime,\\n\\t\\t\\t\\tchance: amax\\n\\t\\t\\t};\\n\\t\\t}).sort((a, b) => b.gain * b.chance / b.time - a.gain * a.chance / a.time);\\n\\t\\t// Do field analysis if needed\\n\\t\\tif (needsImprovedAccuracy) {\\n\\t\\t\\tawait improveAccuracy(ns);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\t// Check stamina\\n\\t\\tconst [stamina, maxStamina] = bb.getStamina();\\n\\t\\tif (stamina < maxStamina / 2) {\\n\\t\\t\\tawait doAction(ns, 'General', 'Hyperbolic Regeneration Chamber');\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\t// Do best action\\n\\t\\tconst action = actions[0];\\n\\t\\tawait doAction(ns, action.type, action.name);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nasync function improveAccuracy(ns) {\\n\\tconst [type, name] = bestOpForImprovingAccuracy(ns);\\n\\tawait doAction(ns, type, name);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} type\\n * @param {string} name\\n * @returns {Promise<void>}\\n */\\nasync function doAction(ns, type, name) {\\n\\tconst bb = ns.bladeburner;\\n\\t// If already doing the action go back\\n\\tif (bb.getCurrentAction().name === name) {\\n\\t\\tawait ns.sleep(100);\\n\\t\\treturn;\\n\\t}\\n\\t// Take into account bonus time\\n\\tconst actionTime = bb.getActionTime(type, name);\\n\\tconst bonusTime = bb.getBonusTime();\\n\\tconst time = bonusTime === 0\\n\\t\\t? actionTime                            // If we don't have bonus time\\n\\t\\t: bonusTime > actionTime\\n\\t\\t\\t? actionTime / 4                    // If we have more bonus time than action time\\n\\t\\t\\t: actionTime - 0.75 * bonusTime;    // If we have less bonus time than action time\\n\\t// Wait until the action finishes\\n\\tconst started = bb.startAction(type, name);\\n\\tif (started) {\\n\\t\\tns.print(`Carrying out ${name}`);\\n\\t\\tawait ns.sleep(Math.ceil(time / 1e3) * 1e3 + 100);\\n\\t}\\n}\\n\\n/**\\n *\\n * @returns {Object[]}\\n */\\nexport function getSkillsData() {\\n\\treturn [\\n\\t\\t{\\n\\t\\t\\tname: 'Blade\\\\'s Intuition',\\n\\t\\t\\tbonus: 3,\\n\\t\\t\\tmax: -1\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Cloak',\\n\\t\\t\\tbonus: 5.5,\\n\\t\\t\\tmax: 25\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Short-Circuit',\\n\\t\\t\\tbonus: 5.5,\\n\\t\\t\\tmax: 25\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Digital Observer',\\n\\t\\t\\tbonus: 4,\\n\\t\\t\\tmax: -1\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Tracer',\\n\\t\\t\\tbonus: 4,\\n\\t\\t\\tmax: 5\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Overclock',\\n\\t\\t\\tbonus: 0,\\n\\t\\t\\tmax: 90\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Reaper',\\n\\t\\t\\tbonus: 4,\\n\\t\\t\\tmax: 150\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Evasive System',\\n\\t\\t\\tbonus: 4,\\n\\t\\t\\tmax: 150\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Datamancer',\\n\\t\\t\\tbonus: 1,\\n\\t\\t\\tmax: -1,\\n\\t\\t\\tlate: true\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Cyber\\\\'s Edge',\\n\\t\\t\\tbonus: 0,\\n\\t\\t\\tmax: -1\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Hands of Midas',\\n\\t\\t\\tbonus: 0,\\n\\t\\t\\tmax: -1\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Hyperdrive',\\n\\t\\t\\tbonus: 0,\\n\\t\\t\\tmax: -1\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Datamancer',\\n\\t\\t\\tbonus: 0,\\n\\t\\t\\tmax: -1\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Cyber\\\\'s Edge',\\n\\t\\t\\tbonus: 0,\\n\\t\\t\\tmax: -1\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Hands of Midas',\\n\\t\\t\\tbonus: 0,\\n\\t\\t\\tmax: -1\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Hyperdrive',\\n\\t\\t\\tbonus: 0,\\n\\t\\t\\tmax: -1\\n\\t\\t}\\n\\t];\\n}\\n\\n/**\\n *\\n * @returns {Object[]}\\n */\\nexport function getActionData() {\\n\\treturn [\\n\\t\\t// General\\n\\t\\t{\\n\\t\\t\\tname: 'Training',\\n\\t\\t\\ttype: 'General',\\n\\t\\t\\trewardFac: 0,\\n\\t\\t\\trankGain: 0\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Field Analysis',\\n\\t\\t\\ttype: 'General',\\n\\t\\t\\trewardFac: 1,\\n\\t\\t\\trankGain: 0.1,\\n\\t\\t\\taccuracy: 'eff'\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Recruitment',\\n\\t\\t\\ttype: 'General',\\n\\t\\t\\trewardFac: 0,\\n\\t\\t\\trankGain: 0\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Diplomacy',\\n\\t\\t\\ttype: 'General',\\n\\t\\t\\trewardFac: 0,\\n\\t\\t\\trankGain: 0\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Hyperbolic Regeneration Chamber',\\n\\t\\t\\ttype: 'General',\\n\\t\\t\\trewardFac: 0,\\n\\t\\t\\trankGain: 0\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Incite Violence',\\n\\t\\t\\ttype: 'General',\\n\\t\\t\\trewardFac: 0,\\n\\t\\t\\trankGain: 0\\n\\t\\t},\\n\\t\\t// Contracts\\n\\t\\t{\\n\\t\\t\\tname: 'Tracking',\\n\\t\\t\\ttype: 'Contract',\\n\\t\\t\\trewardFac: 1.041,\\n\\t\\t\\trankGain: 0.3\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Bounty Hunter',\\n\\t\\t\\ttype: 'Contract',\\n\\t\\t\\trewardFac: 1.085,\\n\\t\\t\\trankGain: 0.9\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Retirement',\\n\\t\\t\\ttype: 'Contract',\\n\\t\\t\\trewardFac: 1.065,\\n\\t\\t\\trankGain: 0.6\\n\\t\\t},\\n\\t\\t// Operations\\n\\t\\t{\\n\\t\\t\\tname: 'Investigation',\\n\\t\\t\\ttype: 'Operation',\\n\\t\\t\\trewardFac: 1.07,\\n\\t\\t\\trankGain: 2.2,\\n\\t\\t\\taccuracy: 0.4\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Undercover Operation',\\n\\t\\t\\ttype: 'Operation',\\n\\t\\t\\trewardFac: 1.09,\\n\\t\\t\\trankGain: 4.4,\\n\\t\\t\\taccuracy: 0.8\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Sting Operation',\\n\\t\\t\\ttype: 'Operation',\\n\\t\\t\\trewardFac: 1.095,\\n\\t\\t\\trankGain: 5.5,\\n\\t\\t\\tlate: true\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Raid',\\n\\t\\t\\ttype: 'Operation',\\n\\t\\t\\trewardFac: 1.1,\\n\\t\\t\\trankGain: 55,\\n\\t\\t\\tlate: true\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Stealth Retirement Operation',\\n\\t\\t\\ttype: 'Operation',\\n\\t\\t\\trewardFac: 1.11,\\n\\t\\t\\trankGain: 22,\\n\\t\\t\\tlate: true\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Assassination',\\n\\t\\t\\ttype: 'Operation',\\n\\t\\t\\trewardFac: 1.14,\\n\\t\\t\\trankGain: 44\\n\\t\\t}\\n\\t];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {[string, string]}\\n */\\nexport function bestOpForImprovingAccuracy(ns) {\\n\\tconst bb = ns.bladeburner;\\n\\tconst improvingAccuracyActions = getActionData().filter(a => a.accuracy);\\n\\tlet bestCost = 0;\\n\\tlet type;\\n\\tlet op;\\n\\tfor (let action of improvingAccuracyActions) {\\n\\t\\tif (bb.getActionCountRemaining(action.type, action.name) === 0) continue;\\n\\t\\tlet cost = action.accuracy;\\n\\t\\tif (cost === 'eff') cost = calculateEff(ns); // Used for general field analysis\\n\\t\\tcost *= bb.getActionEstimatedSuccessChance(action.type, action.name)[1]; // Multiply by current supposed best chance\\n\\t\\tcost /= bb.getActionTime(action.type, action.name); // Divide by time taken for the action to complete\\n\\t\\tif (cost > bestCost) {\\n\\t\\t\\tbestCost = cost;\\n\\t\\t\\ttype = action.type;\\n\\t\\t\\top = action.name;\\n\\t\\t}\\n\\t}\\n\\treturn [type, op];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {number}\\n */\\nfunction calculateEff(ns) {\\n\\tconst player = ns.getPlayer();\\n\\treturn (0.04 * Math.pow(player.hacking, 0.3) +\\n\\t\\t\\t0.04 * Math.pow(player.intelligence, 0.9) +\\n\\t\\t\\t0.02 * Math.pow(player.charisma, 0.3)) *\\n\\t\\tplayer.bladeburner_analysis_mult;\\n}\",\"filename\":\"/bladeburner/autopilot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d970c709-b8d5-43c8-8d5c-f7e61d0f6941\",\"moduleSequenceNumber\":10734},{\"filename\":\"/bladeburner/autopilot.js\",\"url\":\"blob:file:///eb089921-a5ed-499c-a150-b23940a151fe\",\"moduleSequenceNumber\":13381}],\"dependents\":[],\"ramUsage\":93.5,\"server\":\"home\",\"moduleSequenceNumber\":30035,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"bladeburner.joinBladeburnerDivision\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getBlackOpNames\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"bladeburner.getBlackOpRank\",\"cost\":2},{\"type\":\"fn\",\"name\":\"bladeburner.getRank\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.joinBladeburnerFaction\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillPoints\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillLevel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillUpgradeCost\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getActionEstimatedSuccessChance\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.upgradeSkill\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getActionCountRemaining\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getCity\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.switchCity\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getCityEstimatedPopulation\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getCityCommunities\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getCityChaos\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getActionCurrentLevel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getActionTime\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getStamina\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getCurrentAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"bladeburner.startAction\",\"cost\":4},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeCores\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n\\tisUseful,\\n\\tisUsefulCombat,\\n\\tisUsefulCompany,\\n\\tisUsefulCrime,\\n\\tisUsefulFaction,\\n\\tisUsefulHackingSkill\\n} from '/augmentations/utils.js';\\nimport {getPortNumbers, readFromFile} from '/utils.js';\\n\\nconst argsSchema = [\\n\\t['disable-augmentation-buying', false]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, options) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst options = ns.flags(argsSchema);\\n\\tconst disableAugmentationBuying = options['disable-augmentation-buying'];\\n\\tconst works = ['Security', 'Field', 'Hacking'];\\n\\tconst jobs = getJobs();\\n\\tconst numSleeves = ns.sleeve.getNumSleeves();\\n\\tconst usefulCombat = Array.from({length: numSleeves}, _ => false);\\n\\tconst usefulHacking = Array.from({length: numSleeves}, _ => false);\\n\\tconst usefulFaction = Array.from({length: numSleeves}, _ => false);\\n\\tconst usefulCompany = Array.from({length: numSleeves}, _ => false);\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\tns.clearLog();\\n\\t\\tconst data = readFromFile(ns, getPortNumbers().sleeve);\\n\\t\\tconst freeSleeves = Object.keys(data).filter(k => data[k]).map(k => Number(k));\\n\\t\\tfor (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\n\\t\\t\\t// Check for useful augmentations\\n\\t\\t\\tconst criteria = [isUsefulCrime];\\n\\t\\t\\tif (data[i].usefulCombat) criteria.push(isUsefulCombat);\\n\\t\\t\\tif (data[i].usefulHacking) criteria.push(isUsefulHackingSkill);\\n\\t\\t\\tif (data[i].usefulFaction) criteria.push(isUsefulFaction);\\n\\t\\t\\tif (data[i].usefulCompany) criteria.push(isUsefulCompany);\\n\\t\\t\\t// Check for augmentation purchases\\n\\t\\t\\tns.sleeve.getSleevePurchasableAugs(i).forEach(aug => {\\n\\t\\t\\t\\tif (!disableAugmentationBuying && isUseful(ns, criteria, aug.name) &&\\n\\t\\t\\t\\t\\tns.getPlayer().money >= aug.cost && ns.sleeve.getSleeveStats(i).shock === 0)\\n\\t\\t\\t\\t\\tns.sleeve.purchaseSleeveAug(i, aug.name);\\n\\t\\t\\t});\\n\\t\\t\\t// Assign tasks\\n\\t\\t\\tconst player = ns.getPlayer();\\n\\t\\t\\tconst factionName = player.currentWorkFactionName;\\n\\t\\t\\tconst companyName = player.companyName;\\n\\t\\t\\t// Free sleeve copies player working for faction\\n\\t\\t\\tif (freeSleeves.includes(i) && player.isWorking && player.workType === 'Working for Faction' &&\\n\\t\\t\\t\\t!sameSleeveWork(ns, factionName)) {\\n\\t\\t\\t\\tif (data[i].autopilot && ns.sleeve.getTask(i).task !== 'Faction' || !works.includes(ns.sleeve.getTask(i).factionWorkType)) {\\n\\t\\t\\t\\t\\tlet j = 0;\\n\\t\\t\\t\\t\\twhile (!ns.sleeve.setToFactionWork(i, factionName, works[j])) j++;\\n\\t\\t\\t\\t\\tfreeSleeves.splice(freeSleeves.findIndex(s => s === i), 1);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// Free sleeve copies player working for company\\n\\t\\t\\telse if (freeSleeves.includes(i) && player.isWorking && player.workType === 'Working for Company' &&\\n\\t\\t\\t\\t!sameSleeveWork(ns, companyName)) {\\n\\t\\t\\t\\tif (data[i].autopilot && ns.sleeve.getTask(i).task !== 'Company') {\\n\\t\\t\\t\\t\\tns.sleeve.setToCompanyWork(i, companyName);\\n\\t\\t\\t\\t\\tfreeSleeves.splice(freeSleeves.findIndex(s => s === i), 1);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// Crime\\n\\t\\t\\telse if (!sleeveOtherWork(ns, i, factionName, companyName)) {\\n\\t\\t\\t\\tconst crime = ns.sleeve.getSleeveStats(i).strength < 50 ? 'Mug' : 'Homicide';\\n\\t\\t\\t\\tif (data[i].autopilot && ns.sleeve.getTask(i).crime !== crime) ns.sleeve.setToCommitCrime(i, crime);\\n\\t\\t\\t}\\n\\t\\t\\t// Make relevant augmentations purchasable for sleeves\\n\\t\\t\\tconst task = ns.sleeve.getTask(i);\\n\\t\\t\\tif (task.task === 'Faction') {\\n\\t\\t\\t\\tns.print(`Sleeve ${i}: Working for ${task.location}`);\\n\\t\\t\\t\\tusefulFaction[i] = true;\\n\\t\\t\\t\\tif (task.factionWorkType === 'Security' || task.factionWorkType === 'Field') usefulCombat[i] = true;\\n\\t\\t\\t\\tif (task.factionWorkType === 'Hacking' || task.factionWorkType === 'Field') usefulHacking[i] = true;\\n\\t\\t\\t} else if (task.task === 'Company') {\\n\\t\\t\\t\\tusefulCompany[i] = true;\\n\\t\\t\\t\\tns.print(`Sleeve ${i}: Working for ${task.location}`);\\n\\t\\t\\t\\tfor (const [company, job] of Object.entries(player.jobs)) {\\n\\t\\t\\t\\t\\tif (company === player.company) {\\n\\t\\t\\t\\t\\t\\tconst foundJob = Object.values(jobs).find(val => val.name === job);\\n\\t\\t\\t\\t\\t\\tif (foundJob.hacking) usefulHacking[i] = true;\\n\\t\\t\\t\\t\\t\\tif (foundJob.combat) usefulCombat[i] = true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (task.task === 'Crime') ns.print(`Sleeve ${i}: ${task.crime}`);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} organization\\n * @return {boolean}\\n */\\nfunction sameSleeveWork(ns, organization) {\\n\\tfor (let i = 0; i < ns.sleeve.getNumSleeves(); i++) if (ns.sleeve.getTask(i).location === organization) return true;\\n\\treturn false;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} sleeveNumber\\n * @param {string} factionName\\n * @param {string} companyName\\n * @return {boolean}\\n */\\nfunction sleeveOtherWork(ns, sleeveNumber, factionName, companyName) {\\n\\tconst location = ns.sleeve.getTask(sleeveNumber).location;\\n\\tif (location === '') return false;\\n\\treturn location === factionName || location === companyName;\\n\\n}\\n\\n/**\\n *\\n * @returns {Object<Object<string, boolean, boolean, boolean>[]>}\\n */\\nfunction getJobs() {\\n\\treturn {\\n\\t\\tagent: {\\n\\t\\t\\tname: 'Agent',\\n\\t\\t\\thacking: true,\\n\\t\\t\\tcombat: true,\\n\\t\\t\\tcharisma: true\\n\\t\\t},\\n\\t\\tbusiness: {\\n\\t\\t\\tname: 'Business',\\n\\t\\t\\thacking: true,\\n\\t\\t\\tcombat: false,\\n\\t\\t\\tcharisma: true\\n\\t\\t},\\n\\t\\tit: {\\n\\t\\t\\tname: 'IT',\\n\\t\\t\\thacking: true,\\n\\t\\t\\tcombat: false,\\n\\t\\t\\tcharisma: true\\n\\t\\t},\\n\\t\\tsecurity: {\\n\\t\\t\\tname: 'Security',\\n\\t\\t\\thacking: true,\\n\\t\\t\\tcombat: true,\\n\\t\\t\\tcharisma: true\\n\\t\\t},\\n\\t\\tsoftware: {\\n\\t\\t\\tname: 'Software',\\n\\t\\t\\thacking: true,\\n\\t\\t\\tcombat: false,\\n\\t\\t\\tcharisma: true\\n\\t\\t},\\n\\t\\tsoftware_consultant: {\\n\\t\\t\\tname: 'Software Consultant',\\n\\t\\t\\thacking: true,\\n\\t\\t\\tcombat: false,\\n\\t\\t\\tcharisma: true\\n\\t\\t},\\n\\t\\temployee: {\\n\\t\\t\\tname: 'Employee',\\n\\t\\t\\thacking: false,\\n\\t\\t\\tcombat: true,\\n\\t\\t\\tcharisma: true\\n\\t\\t},\\n\\t\\tpart_time_employee: {\\n\\t\\t\\tname: 'part-time Employee',\\n\\t\\t\\thacking: false,\\n\\t\\t\\tcombat: true,\\n\\t\\t\\tcharisma: true\\n\\t\\t},\\n\\t\\twaiter: {\\n\\t\\t\\tname: 'Employee',\\n\\t\\t\\thacking: false,\\n\\t\\t\\tcombat: true,\\n\\t\\t\\tcharisma: true\\n\\t\\t},\\n\\t\\tpart_time_waiter: {\\n\\t\\t\\tname: 'part-time Waiter',\\n\\t\\t\\thacking: false,\\n\\t\\t\\tcombat: true,\\n\\t\\t\\tcharisma: true\\n\\t\\t}\\n\\t};\\n}\",\"filename\":\"/sleeve/autopilot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///550d5482-2b5f-4685-9a82-78494b694296\",\"moduleSequenceNumber\":696222},{\"filename\":\"/augmentations/utils.js\",\"url\":\"blob:file:///0bd7c3af-fab5-4c45-8b0e-16085546430e\",\"moduleSequenceNumber\":696188},{\"filename\":\"/sleeve/autopilot.js\",\"url\":\"blob:file:///efdd1cee-6caf-4d73-bac0-b730a942f8ed\",\"moduleSequenceNumber\":698909}],\"dependents\":[],\"ramUsage\":39.1,\"server\":\"home\",\"moduleSequenceNumber\":30036,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getSleevePurchasableAugs\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"sleeve.getSleeveStats\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.purchaseSleeveAug\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getTask\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToFactionWork\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToCompanyWork\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToCommitCrime\",\"cost\":4},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Requires access to the TIX API. Purchases access to the 4S Mkt Data API as soon as it can\\nimport {\\n\\tformatMoney,\\n\\tformatNumber,\\n\\tformatPercentage,\\n\\tformatTime,\\n\\tgetPortNumbers,\\n\\tprintBoth,\\n\\tsymbolToServer,\\n\\twriteToFile\\n} from '/utils.js';\\n\\nlet disableShorts = false;\\nlet commission = 100000; // Buy/sell commission. Expected profit must exceed this to buy anything.\\nlet totalProfit = 0; // We can keep track of how much we've earned since start.\\nlet mock = false; // If set to true, will \\\"mock\\\" buy/sell but not actually buy/sell anything\\n// Pre-4S configuration (influences how we play the stock market before we have 4S data, after which everything's fool-proof)\\nlet minTickHistory; // This much history must be gathered before we will offer a stock forecast.\\nlet longTermForecastWindowLength; // This much history will be used to determine the historical probability of the stock (so long as no inversions are detected)\\nlet nearTermForecastWindowLength; // This much history will be used to detect recent negative trends and act on them immediately.\\n// The following pre-4s constants are hard-coded (not configurable via command line) but may require tweaking\\nconst marketCycleLength = 75; // Every this many ticks, all stocks have a 45% chance of \\\"reversing\\\" their probability. Something we must detect and act on quick to not lose profits.\\nconst maxTickHistory = 151; // This much history will be kept for purposes of determining volatility and perhaps one day pinpointing the market cycle tick\\nconst inversionDetectionTolerance = 0.1; // If the near-term forecast is within this distance of (1 - long-term forecast), consider it a potential \\\"inversion\\\"\\nconst inversionLagTolerance = 5; // An inversion is \\\"trusted\\\" up to this many ticks after the normal nearTermForecastWindowLength expected detection time\\n// (Note: 33 total stocks * 45% inversion chance each cycle = ~15 expected inversions per cycle)\\n// The following pre-4s values are set during the lifetime of the program\\nlet marketCycleDetected = false; // We should not make risky purchasing decisions until the stock market cycle is detected. This can take a long time, but we'll be thanked\\nlet detectedCycleTick = 0; // This will be reset to zero once we've detected the market cycle point.\\nlet inversionAgreementThreshold = 6; // If this many stocks are detected as being in an \\\"inversion\\\", consider this the stock market cycle point\\nconst expectedTickTime = 6000;\\nconst catchUpTickTime = 4000;\\nlet lastTick = 0;\\nlet sleepInterval = 1000;\\nconst portNumber = getPortNumbers().stock;\\n\\nconst argsSchema = [\\n\\t['liquidate', false], // Stop any other running instances and sell all stocks\\n\\t['mock', false], // If set to true, will \\\"mock\\\" buy/sell but not actually buy/sell anything\\n\\t['disable-shorts', false], // If set to true, will disable shorting\\n\\t['reserve', 0], // A fixed amount of money to not spend\\n\\t['fracB', 0.4], // Fraction of assets to have as liquid before we consider buying more stock\\n\\t['fracH', 0.2], // Fraction of assets to retain as cash in hand when buying\\n\\t['buy-threshold', 0.0001], // Buy only stocks forecasted to earn better than a 0.01% return (1 Basis Point)\\n\\t['sell-threshold', 0], // Sell stocks forecasted to earn less than this return (default 0% - which happens when prob hits 50% or worse)\\n\\t['diversification', 0.34], // Before we have 4S data, we will not hold more than this fraction of our portfolio as a single stock\\n\\t['disableHud', false], // Disable showing stock value in the HUD panel\\n\\t// The following settings are related only to tweaking pre-4s stock-market logic\\n\\t['pre-4s-buy-threshold-probability', 0.15], // Before we have 4S data, only buy stocks whose probability is more than this far away from 0.5, to account for imprecision\\n\\t['pre-4s-buy-threshold-return', 0.0015], // Before we have 4S data, Buy only stocks forecasted to earn better than this return (default 0.25% or 25 Basis Points)\\n\\t['pre-4s-sell-threshold-return', 0.0005], // Before we have 4S data, Sell stocks forecasted to earn less than this return (default 0.15% or 15 Basis Points)\\n\\t['pre-4s-min-tick-history', 21], // This much history must be gathered before we will use pre-4s stock forecasts to make buy/sell decisions. (Default 21)\\n\\t['pre-4s-forecast-window', 51], // This much history will be used to determine the historical probability of the stock (so long as no inversions are detected) (Default 76)\\n\\t['pre-4s-inversion-detection-window', 10], // This much history will be used to detect recent negative trends and act on them immediately. (Default 10)\\n\\t['pre-4s-min-blackout-window', 10], // Do not make any new purchases this many ticks before the detected stock market cycle tick, to avoid buying a position that reverses soon after\\n\\t['pre-4s-minimum-hold-time', 10] // A recently bought position must be held for this long before selling, to avoid rash decisions due to noise after a fresh market cycle. (Default 10)\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, args) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\t// Extract various options from the args (globals, purchasing decision factors, pre-4s factors)\\n\\tconst options = ns.flags(argsSchema);\\n\\tmock = options.mock;\\n\\tconst fracB = options.fracB;\\n\\tconst fracH = options.fracH;\\n\\tconst diversification = options.diversification;\\n\\tconst disableHud = options.disableHud || options.liquidate || options.mock;\\n\\tdisableShorts = options['disable-shorts'];\\n\\tconst pre4sBuyThresholdProbability = options['pre-4s-buy-threshold-probability'];\\n\\tconst pre4sMinBlackoutWindow = options['pre-4s-min-blackout-window'] || 1;\\n\\tconst pre4sMinHoldTime = options['pre-4s-minimum-hold-time'] || 0;\\n\\tminTickHistory = options['pre-4s-min-tick-history'] || 21;\\n\\tnearTermForecastWindowLength = options['pre-4s-inversion-detection-window'] || 10;\\n\\tlongTermForecastWindowLength = options['pre-4s-forecast-window'] || (marketCycleLength + 1);\\n\\t// Other global values must be reset at start lest they be left in memory from a prior run\\n\\tlastTick = 0;\\n\\ttotalProfit = 0;\\n\\tmarketCycleDetected = false;\\n\\tdetectedCycleTick = 0;\\n\\tinversionAgreementThreshold = 6;\\n\\tlet corpus = 0;\\n\\tlet myStocks = [];\\n\\tlet allStocks = [];\\n\\n\\tif (!ns.getPlayer().hasTixApiAccess) { // You cannot use the autopilot until you have API access\\n\\t\\treturn printBoth(ns, `ERROR: You have to buy WSE account and TIX API access before you can run this script`);\\n\\t}\\n\\n\\tif (options.liquidate) { // If given the \\\"liquidate\\\" command, try to kill the version of ourselves trading in stocks\\n\\t\\tns.ps().filter(p => p.filename === ns.getScriptName() && !p.args.includes('--l') &&\\n\\t\\t\\t!p.args.includes('--liquidate')).forEach(p => ns.kill(p.pid));\\n\\t}\\n\\n\\tif (!disableShorts && ns.getPlayer().bitNodeN !== 8 && !ns.getOwnedSourceFiles().some(s => s.n === 8 && s.lvl > 1)) {\\n\\t\\tns.print(`INFO: Shorting stocks has been disabled (you have not yet unlocked access to shorting)`);\\n\\t\\tdisableShorts = true;\\n\\t}\\n\\n\\tallStocks = initAllStocks(ns);\\n\\n\\tif (options.liquidate) {\\n\\t\\tliquidate(ns); // Sell all stocks\\n\\t\\treturn;\\n\\t}\\n\\n\\t// Assume Bitnode mults are 1 if user doesn't have this API access yet\\n\\tconst bitnodeMults = ns.getPlayer().bitNodeN === 5 || ns.getOwnedSourceFiles().includes(s => s.n === 5) ?\\n\\t\\tns.getBitNodeMultipliers() : {FourSigmaMarketDataCost: 1, FourSigmaMarketDataApiCost: 1};\\n\\n\\tlet hudElement = null;\\n\\tif (!disableHud) {\\n\\t\\thudElement = initializeHud();\\n\\t\\tns.atExit(() => hudElement.parentElement.parentElement.parentElement.removeChild(hudElement.parentElement.parentElement));\\n\\t}\\n\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\tconst playerStats = ns.getPlayer();\\n\\t\\tconst pre4s = !playerStats.has4SDataTixApi;\\n\\t\\tcorpus = await refresh(ns, playerStats, allStocks, myStocks);\\n\\t\\tif (pre4s && !mock && tryGet4SApi(ns, playerStats, bitnodeMults, corpus))\\n\\t\\t\\tcontinue; // Start the loop over if we just bought 4S API access\\n\\t\\t// Be more conservative with our decisions if we don't have 4S data\\n\\t\\tconst thresholdToBuy = pre4s ? options['pre-4s-buy-threshold-return'] : options['buy-threshold'];\\n\\t\\tconst thresholdToSell = pre4s ? options['pre-4s-sell-threshold-return'] : options['sell-threshold'];\\n\\t\\tif (myStocks.length > 0) doStatusUpdate(ns, allStocks, myStocks, hudElement);\\n\\t\\telse if (hudElement) hudElement.innerText = '$0.000 ';\\n\\t\\tif (pre4s && allStocks[0].priceHistory.length < minTickHistory) {\\n\\t\\t\\tns.print(`Building a history of stock prices (${allStocks[0].priceHistory.length}/${minTickHistory})...`);\\n\\t\\t\\tawait ns.sleep(sleepInterval);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t// Sell shares which are forecasted to underperform (worse than some expected return threshold)\\n\\t\\tlet sales = 0;\\n\\t\\tfor (let stk of myStocks) {\\n\\t\\t\\tif (stk.absReturn() <= thresholdToSell || stk.bullish() && stk.sharesShort > 0 || stk.bearish() && stk.sharesLong > 0) {\\n\\t\\t\\t\\tif (pre4s && stk.ticksHeld < pre4sMinHoldTime) {\\n\\t\\t\\t\\t\\tif (!stk.warnedBadPurchase) ns.print(`WARNING: Thinking of selling ${stk.sym} with ER ${formatMoney(ns, stk.absReturn())}, but holding out as it was purchased just ${stk.ticksHeld} ticks ago...`);\\n\\t\\t\\t\\t\\tstk.warnedBadPurchase = true; // Hack to ensure we don't spam this warning\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tsales += doSellAll(ns, stk);\\n\\t\\t\\t\\t\\tstk.warnedBadPurchase = false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (sales > 0) continue; // If we sold anything, loop immediately (no need to sleep) and refresh stats immediately before making purchasing decisions.\\n\\n\\t\\tlet cash = playerStats.money - options['reserve'];\\n\\t\\tlet liquidity = cash / corpus;\\n\\t\\t// If we haven't gone above a certain liquidity threshold, don't attempt to buy more stock\\n\\t\\t// Avoids death-by-a-thousand-commissions before we get super-rich, stocks are capped, and this is no longer an issue\\n\\t\\t// BUT may mean we miss striking while the iron is hot while waiting to build up more funds.\\n\\t\\tif (liquidity > fracB) {\\n\\t\\t\\t// If we haven't detected the market cycle (or haven't detected it reliably), assume it might be quite soon and restrict bets to those that can turn a profit in the very-near term.\\n\\t\\t\\tconst estTick = Math.max(detectedCycleTick, marketCycleLength - (!marketCycleDetected ? 5 : inversionAgreementThreshold <= 8 ? 15 : inversionAgreementThreshold <= 10 ? 30 : marketCycleLength));\\n\\t\\t\\t// Buy shares with cash remaining in hand if exceeding some buy threshold. Prioritize targets whose expected return will cover the ask/bit spread the soonest\\n\\t\\t\\tfor (const stk of allStocks.sort(purchaseOrder)) {\\n\\t\\t\\t\\t// Do not purchase a stock if it is not forecasted to recover from the ask/bid spread before the next market cycle and potential probability inversion\\n\\t\\t\\t\\tif (stk.blackoutWindow() >= marketCycleLength - estTick) continue;\\n\\t\\t\\t\\tif (pre4s && (Math.max(pre4sMinHoldTime, pre4sMinBlackoutWindow) >= marketCycleLength - estTick)) continue;\\n\\t\\t\\t\\t// Compute the cash we have to spend (such that spending it all on stock would bring us down to a liquidity of fracH)\\n\\t\\t\\t\\tlet budget = cash - (fracH * corpus);\\n\\t\\t\\t\\tif (budget <= 0) break; // Break if we are out of money (i.e. from prior purchases)\\n\\t\\t\\t\\t// Skip if we already own all possible shares in this stock, or if the expected return is below our threshold, or if shorts are disabled and stock is bearish\\n\\t\\t\\t\\tif (stk.ownedShares() === stk.maxShares || stk.absReturn() <= thresholdToBuy || (disableShorts && stk.bearish())) continue;\\n\\t\\t\\t\\t// If pre-4s, do not purchase any stock whose last inversion was too recent, or whose probability is too close to 0.5\\n\\t\\t\\t\\tif (pre4s && (stk.lastInversion < minTickHistory || Math.abs(stk.prob - 0.5) < pre4sBuyThresholdProbability)) continue;\\n\\n\\t\\t\\t\\t// Enforce diversification - don't hold more than x% of our portfolio as a single stock (as corpus increases, this naturally stops being a limiter)\\n\\t\\t\\t\\tbudget = Math.min(budget, (1 - fracH) * corpus * diversification - stk.positionValue());\\n\\t\\t\\t\\tlet purchasePrice = stk.bullish() ? stk.ask_price : stk.bid_price; // Depends on whether we will be buying a long or short position\\n\\t\\t\\t\\tlet affordableShares = Math.floor((budget - commission) / purchasePrice);\\n\\t\\t\\t\\tlet numShares = Math.min(stk.maxShares - stk.ownedShares(), affordableShares);\\n\\t\\t\\t\\tif (numShares <= 0) continue;\\n\\t\\t\\t\\t// Don't buy fewer shares than can beat the commission before the next stock market cycle (after covering the spread), lest the position reverse before we break even.\\n\\t\\t\\t\\tlet ticksBeforeCycleEnd = marketCycleLength - estTick - stk.timeToCoverTheSpread();\\n\\t\\t\\t\\tif (ticksBeforeCycleEnd < 1) continue; // We're cutting it too close to the market cycle, position might reverse before we break even on commission\\n\\t\\t\\t\\tlet estEndOfCycleValue = numShares * purchasePrice * ((stk.absReturn() + 1) ** ticksBeforeCycleEnd - 1); // Expected difference in purchase price and value at next market cycle end\\n\\t\\t\\t\\tif (estEndOfCycleValue <= 2 * commission)\\n\\t\\t\\t\\t\\tns.print(`Despite attractive ER of ${formatMoney(ns, stk.absReturn())}, ${stk.sym} was not bought. Budget: ${formatMoney(ns, budget)} can only buy ${numShares} shares @ ${formatMoney(ns, purchasePrice)}. ` +\\n\\t\\t\\t\\t\\t\\t`Given an estimated ${marketCycleLength - estTick} ticks left in market cycle, less ${stk.timeToCoverTheSpread().toFixed(1)} ticks to cover the spread (${formatPercentage(stk.spread_pct * 100)}), ` +\\n\\t\\t\\t\\t\\t\\t`remaining ${ticksBeforeCycleEnd.toFixed(1)} ticks would only generate ${formatMoney(ns, estEndOfCycleValue)}, which is less than 2x commission (${formatMoney(ns, 2 * commission)})`);\\n\\t\\t\\t\\telse cash -= doBuy(ns, stk, numShares);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.sleep(sleepInterval);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {function} func\\n * @returns {Object<string, *>}\\n */\\nfunction getStockInfoDict(ns, func) {\\n\\treturn Object.fromEntries(ns.stock.getSymbols().map(sym => [sym, func(sym)]));\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Object[]}\\n */\\nfunction initAllStocks(ns) {\\n\\tconst dictMaxShares = getStockInfoDict(ns, ns.stock.getMaxShares); // Only need to get this once, it never changes\\n\\treturn ns.stock.getSymbols().map(s => ({\\n\\t\\tsym: s,\\n\\t\\tmaxShares: dictMaxShares[s], // Value never changes once retrieved\\n\\t\\texpectedReturn: function () { // How many holdings are expected to appreciate (or depreciate) in the future\\n\\t\\t\\t// To add conservatism to pre-4s estimates, we reduce the probability by 1 standard deviation without crossing the midpoint\\n\\t\\t\\tlet normalizedProb = (this.prob - 0.5);\\n\\t\\t\\tlet conservativeProb = normalizedProb < 0 ? Math.min(0, normalizedProb + this.probStdDev) : Math.max(0, normalizedProb - this.probStdDev);\\n\\t\\t\\treturn this.vol * conservativeProb;\\n\\t\\t},\\n\\t\\tabsReturn: function () {\\n\\t\\t\\treturn Math.abs(this.expectedReturn());\\n\\t\\t}, // Appropriate to use when can just as well buy a short position as a long position\\n\\t\\tbullish: function () {\\n\\t\\t\\treturn this.prob > 0.5;\\n\\t\\t},\\n\\t\\tbearish: function () {\\n\\t\\t\\treturn !this.bullish();\\n\\t\\t},\\n\\t\\townedShares: function () {\\n\\t\\t\\treturn this.sharesLong + this.sharesShort;\\n\\t\\t},\\n\\t\\towned: function () {\\n\\t\\t\\treturn this.ownedShares() > 0;\\n\\t\\t},\\n\\t\\tpositionValueLong: function () {\\n\\t\\t\\treturn this.sharesLong * this.bid_price;\\n\\t\\t},\\n\\t\\tpositionValueShort: function () {\\n\\t\\t\\treturn this.sharesShort * (2 * this.boughtPriceShort - this.ask_price);\\n\\t\\t}, // Shorts work a bit weird\\n\\t\\tpositionValue: function () {\\n\\t\\t\\treturn this.positionValueLong() + this.positionValueShort();\\n\\t\\t},\\n\\t\\t// How many stock market ticks must occur at the current expected return before we regain the value lost by the spread between buy and sell prices.\\n\\t\\t// This can be derived by taking the compound interest formula (future = current * (1 + expected_return) ^ n) and solving for n\\n\\t\\ttimeToCoverTheSpread: function () {\\n\\t\\t\\treturn Math.log(this.ask_price / this.bid_price) / Math.log(1 + this.absReturn());\\n\\t\\t},\\n\\t\\t// We should not buy this stock within this many ticks of a Market cycle, or we risk being forced to sell due to a probability inversion, and losing money due to the spread\\n\\t\\tblackoutWindow: function () {\\n\\t\\t\\treturn Math.ceil(this.timeToCoverTheSpread());\\n\\t\\t},\\n\\t\\t// Pre-4s properties used for forecasting\\n\\t\\tpriceHistory: [],\\n\\t\\tlastInversion: 0\\n\\t}));\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n */\\nfunction liquidate(ns) {\\n\\tlet totalStocks = 0, totalSharesLong = 0, totalSharesShort = 0, totalRevenue = 0;\\n\\tconst dictPositions = mock ? null : getStockInfoDict(ns, ns.stock.getPosition);\\n\\tfor (const sym of ns.stock.getSymbols()) {\\n\\t\\tconst [sharesLong, , sharesShort, avgShortCost] = dictPositions[sym];\\n\\t\\tif (sharesLong + sharesShort === 0) continue;\\n\\t\\ttotalStocks++;\\n\\t\\ttotalSharesLong += sharesLong;\\n\\t\\ttotalSharesShort += sharesShort;\\n\\t\\tif (sharesLong > 0) totalRevenue += ns.stock.sell(sym, sharesLong) * sharesLong - commission;\\n\\t\\tif (sharesShort > 0) totalRevenue += (2 * avgShortCost - ns.stock.sellShort(sym, sharesShort)) * sharesShort - commission;\\n\\t}\\n\\tprintBoth(ns, `Sold ${formatNumber(ns, totalSharesLong)} long shares and ${formatNumber(ns, totalSharesShort)} short shares ` +\\n\\t\\t`in ${totalStocks} stocks for ${formatMoney(ns, totalRevenue)}`);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {Player} playerStats\\n * @param {Object<number>} bitnodeMults\\n * @param {number} corpus\\n * @returns {boolean}\\n */\\nfunction tryGet4SApi(ns, playerStats, bitnodeMults, corpus) {\\n\\tif (playerStats.has4SDataTixApi) return false; // Only return true if we just bought it\\n\\tconst cost4sApi = bitnodeMults.FourSigmaMarketDataApiCost * 25e9;\\n\\tif (cost4sApi > corpus * 0.9) return false;\\n\\t// Liquidate shares if it would allow us to afford 4S API data\\n\\tif (playerStats.money < cost4sApi) liquidate(ns);\\n\\tif (ns.stock.purchase4SMarketDataTixApi()) {\\n\\t\\tprintBoth(ns, `Purchased 4SMarketDataTixApi for ${formatMoney(ns, cost4sApi)}`);\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.print(`ERROR attempting to purchase 4SMarketDataTixApi`);\\n\\t\\tif (playerStats.bitNodeN !== 5 || !ns.getOwnedSourceFiles().some(s => s.n === 5)) { // If we do not have access to Bitnode multipliers, assume the cost is double and try again later\\n\\t\\t\\tns.print('INFO: Bitnode mults are not available (SF5) - assuming everything is twice as expensive in the current Bitnode');\\n\\t\\t\\tbitnodeMults.FourSigmaMarketDataCost *= 2;\\n\\t\\t\\tbitnodeMults.FourSigmaMarketDataApiCost *= 2;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {Object} stocks\\n * @param {Object} myStocks\\n * @param {*} hudElement\\n */\\nfunction doStatusUpdate(ns, stocks, myStocks, hudElement = null) {\\n\\tconst maxReturnBP = 1e5 * Math.max(...myStocks.map(s => s.absReturn())); // The largest return (in basis points) in our portfolio\\n\\tconst minReturnBP = 1e5 * Math.min(...myStocks.map(s => s.absReturn())); // The smallest return (in basis points) in our portfolio\\n\\tconst est_holdings_cost = myStocks.reduce((sum, stk) => sum + (stk.owned() ? commission : 0) +\\n\\t\\tstk.sharesLong * stk.boughtPrice + stk.sharesShort * stk.boughtPriceShort, 0);\\n\\tconst liquidation_value = myStocks.reduce((sum, stk) => sum - (stk.owned() ? commission : 0) + stk.positionValue(), 0);\\n\\tns.print(`Long ${myStocks.filter(s => s.sharesLong > 0).length}, Short ${myStocks.filter(s => s.sharesShort > 0).length} of ${stocks.length} stocks ` +\\n\\t\\t(myStocks.length === 0 ? '' : `(ER ${minReturnBP.toFixed(1)}-${maxReturnBP.toFixed(1)} BP) `) +\\n\\t\\t`Profit: ${formatMoney(ns, totalProfit)} Holdings: ${formatMoney(ns, liquidation_value)} ` +\\n\\t\\t`(Cost: ${formatMoney(ns, est_holdings_cost)}) Net: ${formatMoney(ns, totalProfit + liquidation_value - est_holdings_cost)}`);\\n\\tif (hudElement) hudElement.innerText = formatMoney(ns, liquidation_value);\\n}\\n\\n/* A sorting function to put stocks in the order we should prioritize investing in them */\\nconst purchaseOrder = (a, b) => (Math.ceil(a.timeToCoverTheSpread()) - Math.ceil(b.timeToCoverTheSpread())) || (b.absReturn() - a.absReturn());\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {Player} playerStats\\n * @param {Object[]} allStocks\\n * @param {Object[]} myStocks\\n * @returns {Promise<number>}\\n */\\nasync function refresh(ns, playerStats, allStocks, myStocks) {\\n\\tconst has4s = playerStats.has4SDataTixApi;\\n\\tlet corpus = playerStats.money;\\n\\tconst dictAskPrices = getStockInfoDict(ns, ns.stock.getAskPrice);\\n\\tconst dictBidPrices = getStockInfoDict(ns, ns.stock.getBidPrice);\\n\\tconst dictVolatilities = !has4s ? null : getStockInfoDict(ns, ns.stock.getVolatility);\\n\\tconst dictForecasts = !has4s ? null : getStockInfoDict(ns, ns.stock.getForecast);\\n\\tconst dictPositions = mock ? null : getStockInfoDict(ns, ns.stock.getPosition);\\n\\tconst ticked = allStocks.some(stk => stk.ask_price !== dictAskPrices[stk.sym]); // If any price has changed since our last update, the stock market has \\\"ticked\\\"\\n\\tif (ticked) {\\n\\t\\tif (Date.now() - lastTick < expectedTickTime - sleepInterval) {\\n\\t\\t\\tif (Date.now() - lastTick < catchUpTickTime - sleepInterval) {\\n\\t\\t\\t\\tconst changedPrices = allStocks.filter(stk => stk.ask_price !== dictAskPrices[stk.sym]);\\n\\t\\t\\t\\tns.print(`WARNING: Detected a stock market tick after only ${formatTime(ns, Date.now() - lastTick)}, but expected ~${formatTime(ns, expectedTickTime)}. ` +\\n\\t\\t\\t\\t\\t(changedPrices.length >= 33 ? '(All stocks updated)' : `The following ${changedPrices.length} stock prices changed: ${changedPrices.map(stk =>\\n\\t\\t\\t\\t\\t\\t`${stk.sym} ${formatMoney(ns, stk.ask_price)} -> ${formatMoney(ns, dictAskPrices[stk.sym])}`).join(', ')}`));\\n\\t\\t\\t} else ns.print(`INFO: Detected a rapid stock market tick (${formatTime(ns, Date.now() - lastTick)}), likely to make up for lag / offline time.`);\\n\\t\\t}\\n\\t\\tlastTick = Date.now();\\n\\t}\\n\\n\\tmyStocks.length = 0;\\n\\tfor (const stk of allStocks) {\\n\\t\\tconst sym = stk.sym;\\n\\t\\tstk.ask_price = dictAskPrices[sym]; // The amount we would pay if we bought the stock (higher than 'price')\\n\\t\\tstk.bid_price = dictBidPrices[sym]; // The amount we would receive if we sold the stock (lower than 'price')\\n\\t\\tstk.spread = stk.ask_price - stk.bid_price;\\n\\t\\tstk.spread_pct = stk.spread / stk.ask_price; // The percentage of value we lose just by buying the stock\\n\\t\\tstk.price = (stk.ask_price + stk.bid_price) / 2; // = ns.stock.getPrice(sym);\\n\\t\\tstk.vol = has4s ? dictVolatilities[sym] : stk.vol;\\n\\t\\tstk.prob = has4s ? dictForecasts[sym] : stk.prob;\\n\\t\\tstk.probStdDev = has4s ? 0 : stk.probStdDev; // Standard deviation around the est. probability\\n\\t\\t// Update our current portfolio of owned stock\\n\\t\\tconst [priorLong, priorShort] = [stk.sharesLong, stk.sharesShort];\\n\\t\\tstk.position = mock ? null : dictPositions[sym];\\n\\t\\tstk.sharesLong = mock ? (stk.sharesLong || 0) : stk.position[0];\\n\\t\\tstk.boughtPrice = mock ? (stk.boughtPrice || 0) : stk.position[1];\\n\\t\\tstk.sharesShort = mock ? (stk.shares_short || 0) : stk.position[2];\\n\\t\\tstk.boughtPriceShort = mock ? (stk.boughtPrice_short || 0) : stk.position[3];\\n\\t\\tcorpus += stk.positionValue();\\n\\t\\tif (stk.owned()) myStocks.push(stk);\\n\\t\\telse stk.ticksHeld = 0;\\n\\t\\tif (ticked) // Increment ticksHeld, or reset it if we have no position in this stock or reversed our position last tick.\\n\\t\\t\\tstk.ticksHeld = !stk.owned() || (priorLong > 0 && stk.sharesLong === 0) || (priorShort > 0 && stk.sharesShort === 0) ? 0 : 1 + (stk.ticksHeld || 0);\\n\\t}\\n\\tif (ticked) await updateForecast(ns, allStocks, has4s); // Logic below only required on market tick\\n\\treturn corpus;\\n}\\n\\n// Historical probability can be inferred from the number of times the stock was recently observed increasing over the total number of observations\\nconst forecast = history => history.reduce((ups, price, idx) => idx === 0 ? 0 : (history[idx - 1] > price ? ups + 1 : ups), 0) / (history.length - 1);\\n// An \\\"inversion\\\" can be detected if two probabilities are far enough apart and are within \\\"tolerance\\\" of p1 being equal to 1-p2\\nconst tol2 = inversionDetectionTolerance / 2;\\nconst detectInversion = (p1, p2) => ((p1 >= 0.5 + tol2) && (p2 <= 0.5 - tol2) && p2 <= (1 - p1) + inversionDetectionTolerance)\\n\\t/* Reverse Condition: */ || ((p1 <= 0.5 - tol2) && (p2 >= 0.5 + tol2) && p2 >= (1 - p1) - inversionDetectionTolerance);\\n\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {Object[]} allStocks\\n * @param {boolean} has4s\\n * @returns {Promise<void>}\\n */\\nasync function updateForecast(ns, allStocks, has4s) {\\n\\tconst currentHistory = allStocks[0].priceHistory.length;\\n\\tconst prepSummary = mock || (!has4s && (currentHistory < minTickHistory || allStocks.filter(stk => stk.owned()).length === 0)); // Decide whether to display the market summary table.\\n\\tconst inversionsDetected = []; // Keep track of individual stocks whose probability has inverted (45% chance of happening each \\\"cycle\\\")\\n\\tdetectedCycleTick = (detectedCycleTick + 1) % marketCycleLength; // Keep track of stock market cycle (which occurs every 75 ticks)\\n\\tfor (const stk of allStocks) {\\n\\t\\tstk.priceHistory.unshift(stk.price);\\n\\t\\tif (stk.priceHistory.length > maxTickHistory) // Limit the rolling window size\\n\\t\\t\\tstk.priceHistory.splice(maxTickHistory, 1);\\n\\t\\t// Volatility is easy - the largest observed % movement in a single tick\\n\\t\\tif (!has4s) stk.vol = stk.priceHistory.reduce((max, price, idx) => Math.max(max, idx === 0 ? 0 : Math.abs(stk.priceHistory[idx - 1] - price) / price), 0);\\n\\t\\t// We want stocks that have the best expected return, averaged over a long window for greater precision, but the game will occasionally invert probabilities\\n\\t\\t// (45% chance every 75 updates), so we also compute a near-term forecast window to allow for early-detection of inversions, so we can ditch our position.\\n\\t\\tstk.nearTermForecast = forecast(stk.priceHistory.slice(0, nearTermForecastWindowLength));\\n\\t\\tlet preNearTermWindowProb = forecast(stk.priceHistory.slice(nearTermForecastWindowLength)); // Used to detect the probability before the potential inversion event.\\n\\t\\t// Detect whether it appears as though the probability of this stock has recently undergone an inversion (i.e. prob => 1 - prob)\\n\\t\\tstk.possibleInversionDetected = has4s ? detectInversion(stk.prob, stk.lastTickProbability || stk.prob) : detectInversion(preNearTermWindowProb, stk.nearTermForecast);\\n\\t\\tstk.lastTickProbability = stk.prob;\\n\\t\\tif (stk.possibleInversionDetected) inversionsDetected.push(stk);\\n\\t}\\n\\t// Detect whether our auto-detected \\\"stock market cycle\\\" timing should be adjusted based on the number of potential inversions observed\\n\\tlet summary = '';\\n\\tif (inversionsDetected.length > 0) {\\n\\t\\tsummary += `${inversionsDetected.length} Stocks appear to be reversing their outlook: ${inversionsDetected.map(s => s.sym).join(', ')} (threshold: ${inversionAgreementThreshold})\\\\n`;\\n\\t\\tif (inversionsDetected.length >= inversionAgreementThreshold && (has4s || currentHistory >= minTickHistory)) { // We believe we have detected the stock market cycle!\\n\\t\\t\\tconst newPredictedCycleTick = has4s ? 0 : nearTermForecastWindowLength; // By the time we've detected it, we're this many ticks past the cycle start\\n\\t\\t\\tif (detectedCycleTick !== newPredictedCycleTick) {\\n\\t\\t\\t\\tns.print(`Threshold for changing predicted market cycle met (${inversionsDetected.length} >= ${inversionAgreementThreshold}). ` +\\n\\t\\t\\t\\t\\t`Changing current market tick from ${detectedCycleTick} to ${newPredictedCycleTick}.`);\\n\\t\\t\\t}\\n\\t\\t\\tmarketCycleDetected = true;\\n\\t\\t\\tdetectedCycleTick = newPredictedCycleTick;\\n\\t\\t\\t// Don't adjust this in the future unless we see another day with as much or even more agreement (capped at 14, it seems sometimes our cycles get out of sync with\\n\\t\\t\\t// actual cycles, and we need to reset our clock even after previously determining the cycle with great certainty.)\\n\\t\\t\\tinversionAgreementThreshold = Math.max(14, inversionsDetected.length);\\n\\t\\t}\\n\\t}\\n\\t// Act on any inversions (if trusted), compute the probability, and prepare the stock summary\\n\\tfor (const stk of allStocks) {\\n\\t\\t// Don't \\\"trust\\\" (act on) a detected inversion unless it's near the time when we're capable of detecting market cycle start. Avoids most false-positives.\\n\\t\\tif (stk.possibleInversionDetected && (has4s && detectedCycleTick === 0 ||\\n\\t\\t\\t(!has4s && (detectedCycleTick > nearTermForecastWindowLength / 2 - 1) &&\\n\\t\\t\\t\\t(detectedCycleTick <= nearTermForecastWindowLength + inversionLagTolerance)))) {\\n\\t\\t\\tstk.lastInversion = detectedCycleTick; // If we \\\"trust\\\" a probability inversion has occurred, probability will be calculated based on only history since the last inversion.\\n\\t\\t} else stk.lastInversion++;\\n\\t\\t// Only take the stock history since after the last inversion to compute the probability of the stock.\\n\\t\\tconst probWindowLength = Math.min(longTermForecastWindowLength, stk.lastInversion);\\n\\t\\tstk.longTermForecast = forecast(stk.priceHistory.slice(0, probWindowLength));\\n\\t\\tif (!has4s) {\\n\\t\\t\\tstk.prob = stk.longTermForecast;\\n\\t\\t\\tstk.probStdDev = Math.sqrt((stk.prob * (1 - stk.prob)) / probWindowLength);\\n\\t\\t}\\n\\t\\tconst signalStrength = 1 + (stk.bullish() ? (stk.nearTermForecast > stk.prob ? 1 : 0) + (stk.prob > 0.8 ? 1 : 0) : (stk.nearTermForecast < stk.prob ? 1 : 0) + (stk.prob < 0.2 ? 1 : 0));\\n\\t\\tif (prepSummary) { // Example: AERO  ++   Prob: 54% (t51: 54%, t10: 67%) tLast⇄:190 Vol:0.640% ER: 2.778BP Spread:1.784% ttProfit: 65 Pos: 14.7M long  (held 189 ticks)\\n\\t\\t\\tstk.debugLog = `${stk.sym.padEnd(5, ' ')} ${(stk.bullish() ? '+' : '-').repeat(signalStrength).padEnd(3)} ` +\\n\\t\\t\\t\\t`Prob:${(stk.prob * 100).toFixed(0).padStart(3)}% (t${probWindowLength.toFixed(0).padStart(2)}:${(stk.longTermForecast * 100).toFixed(0).padStart(3)}%, ` +\\n\\t\\t\\t\\t`t${Math.min(stk.priceHistory.length, nearTermForecastWindowLength).toFixed(0).padStart(2)}:${(stk.nearTermForecast * 100).toFixed(0).padStart(3)}%) ` +\\n\\t\\t\\t\\t`tLast⇄:${(stk.lastInversion + 1).toFixed(0).padStart(3)} Vol:${formatPercentage(stk.vol * 100)} ER:${formatMoney(ns, stk.expectedReturn()).padStart(8)} ` +\\n\\t\\t\\t\\t`Spread:${formatPercentage(stk.spread_pct * 100)} ttProfit:${stk.blackoutWindow().toFixed(0).padStart(3)}`;\\n\\t\\t\\tif (stk.owned()) stk.debugLog += ` Pos: ${formatMoney(ns, stk.ownedShares())} (${stk.ownedShares() === stk.maxShares ? 'max' :\\n\\t\\t\\t\\tformatPercentage((100 * stk.ownedShares() / stk.maxShares))}) ${stk.sharesLong > 0 ? 'long ' : 'short'} (held ${stk.ticksHeld} ticks)`;\\n\\t\\t\\tif (stk.possibleInversionDetected) stk.debugLog += ' ⇄⇄⇄';\\n\\t\\t}\\n\\t}\\n\\t// Print a summary of stocks as of this most recent tick (if enabled)\\n\\tif (prepSummary) {\\n\\t\\tsummary += `Market day ${detectedCycleTick + 1}${marketCycleDetected ? '' : '?'} of ${marketCycleLength} (${marketCycleDetected ? (100 * inversionAgreementThreshold / 19).toPrecision(2) : '0'}% certain) ` +\\n\\t\\t\\t`Current Stock Summary and Pre-4S Forecasts (by best payoff-time):\\\\n` + allStocks.sort(purchaseOrder).map(s => s.debugLog).join('\\\\n');\\n\\t\\tns.print(summary);\\n\\t}\\n\\t// Write out a file of stock information so that other scripts can make use of this (e.g. hacks and grows can manipulate the stock market)\\n\\tconst long = [];\\n\\tconst short = [];\\n\\tallStocks.forEach(stk => {\\n\\t\\tif (stk.sharesLong > 0) long.push(symbolToServer(stk.sym));\\n\\t\\tif (stk.sharesShort > 0) short.push(symbolToServer(stk.sym));\\n\\t});\\n\\tawait writeToFile(ns, portNumber, {long: long, short: short});\\n}\\n\\n/**\\n * Automatically buys either a short or long position depending on the outlook of the stock\\n *\\n * @param {NS} ns\\n * @param {Object} stk\\n * @param {amount} sharesBought\\n * @returns {number}\\n */\\nfunction doBuy(ns, stk, sharesBought) {\\n\\t// We include -2*commission in the \\\"holdings value\\\" of our stock, but if we make repeated purchases of the same stock, we have to track\\n\\t// the additional commission somewhere. So only subtract it from our running profit if this isn't our first purchase of this symbol\\n\\tif (stk.owned()) totalProfit -= commission;\\n\\tlet long = stk.bullish();\\n\\tlet expectedPrice = long ? stk.ask_price : stk.bid_price; // Depends on whether we will be buying a long or short position\\n\\tlet price;\\n\\ttry {\\n\\t\\tprice = mock ? expectedPrice : long ? ns.stock.buy(stk.sym, sharesBought) : ns.stock.short(stk.sym, sharesBought);\\n\\t} catch (err) {\\n\\t\\tif (long) throw err;\\n\\t\\tprintBoth(ns, `WARNING: Failed to short ${stk.sym} (Shorts not available?). Disabling shorts...`);\\n\\t\\tdisableShorts = true;\\n\\t\\treturn 0;\\n\\t}\\n\\n\\tns.print(`INFO: ${long ? 'Bought ' : 'Shorted'} ${formatNumber(ns, sharesBought).padStart(5)}${stk.maxShares === sharesBought + stk.ownedShares() ? ' (max shares)' : ''} ` +\\n\\t\\t`${stk.sym.padEnd(5)} @ ${formatMoney(ns, price).padStart(9)} for ${formatMoney(ns, sharesBought * price).padStart(9)} (Spread: ${formatPercentage(stk.spread_pct * 100)} ` +\\n\\t\\t`ER:${formatMoney(ns, stk.expectedReturn()).padStart(8)}) Ticks to Profit: ${stk.timeToCoverTheSpread().toFixed(2)}`);\\n\\t// The rest of this work is for troubleshooting / mock-mode purposes\\n\\tif (price === 0) {\\n\\t\\tprintBoth(ns, `ERROR: Failed to ${long ? 'buy' : 'short'} ${stk.sym} @ ${formatMoney(ns, expectedPrice)} - 0 was returned`);\\n\\t\\treturn 0;\\n\\t} else if (price !== expectedPrice) {\\n\\t\\tprintBoth(ns, `WARNING: ${long ? 'Bought' : 'Shorted'} ${stk.sym} @ ${formatMoney(ns, price)} but expected ${formatMoney(ns, expectedPrice)} (spread: ${formatMoney(ns, stk.spread)})`);\\n\\t\\tprice = expectedPrice; // Known Bitburner bug for now, short returns \\\"price\\\" instead of \\\"bit_price\\\". Correct this so running profit calculations are correct.\\n\\t}\\n\\tif (mock && long) stk.boughtPrice = (stk.boughtPrice * stk.sharesLong + price * sharesBought) / (stk.sharesLong + sharesBought);\\n\\tif (mock && !long) stk.boughtPriceShort = (stk.boughtPriceShort * stk.sharesShort + price * sharesBought) / (stk.sharesShort + sharesBought);\\n\\tif (long) stk.sharesLong += sharesBought; else stk.sharesShort += sharesBought; // Maintained for mock mode, otherwise, redundant (overwritten at next refresh)\\n\\treturn sharesBought * price + commission; // Return the amount spent on the transaction, so it can be subtracted from our cash on hand\\n}\\n\\n/**\\n * Sell our current position in this stock\\n *\\n * @param {NS} ns\\n * @param {Object} stk\\n * @returns {number}\\n */\\nfunction doSellAll(ns, stk) {\\n\\tlet long = stk.sharesLong > 0;\\n\\tif (long && stk.sharesShort > 0) // Detect any issues here - we should always sell one before buying the other.\\n\\t\\tprintBoth(ns, `ERROR: Somehow ended up both ${stk.sharesShort} short and ${stk.sharesLong} long on ${stk.sym}`);\\n\\tlet expectedPrice = long ? stk.bid_price : stk.ask_price; // Depends on whether we will be selling a long or short position\\n\\tlet sharesSold = long ? stk.sharesLong : stk.sharesShort;\\n\\tlet price = mock ? expectedPrice : long ? ns.stock.sell(stk.sym, sharesSold) : ns.stock.sellShort(stk.sym, sharesSold);\\n\\tconst profit = (long ? stk.sharesLong * (price - stk.boughtPrice) : stk.sharesShort * (stk.boughtPriceShort - price)) - 2 * commission;\\n\\tns.print(`${profit > 0 ? 'SUCCESS' : 'WARNING'}: Sold all ${formatMoney(ns, sharesSold).padStart(5)} ${stk.sym.padEnd(5)} ${long ? ' long' : 'short'} positions ` +\\n\\t\\t`@ ${formatMoney(ns, price).padStart(9)} for a ` + (profit > 0 ? `PROFIT of ${formatMoney(ns, profit).padStart(9)}` : ` LOSS of ${formatMoney(ns, -profit).padStart(9)}`) + ` after ${stk.ticksHeld} ticks`);\\n\\tif (price === 0) {\\n\\t\\tprintBoth(ns, `ERROR: Failed to sell ${sharesSold} ${stk.sym} ${long ? 'shares' : 'shorts'} @ ${formatMoney(ns, expectedPrice)} - 0 was returned`);\\n\\t\\treturn 0;\\n\\t} else if (price !== expectedPrice) {\\n\\t\\tns.print(`WARNING: Sold ${stk.sym} ${long ? 'shares' : 'shorts'} @ ${formatMoney(ns, price)} but expected ${formatMoney(ns, expectedPrice)} (spread: ${formatMoney(ns, stk.spread)})`);\\n\\t\\tprice = expectedPrice; // Known Bitburner bug for now, sellSort returns \\\"price\\\" instead of \\\"ask_price\\\". Correct this so running profit calculations are correct.\\n\\t}\\n\\tif (long) stk.sharesLong -= sharesSold;\\n\\telse stk.sharesShort -= sharesSold; // Maintained for mock mode, otherwise, redundant (overwritten at next refresh)\\n\\ttotalProfit += profit;\\n\\treturn price * sharesSold - commission; // Return the amount of money received from the transaction\\n}\\n\\n/**\\n *\\n * @returns {*}\\n */\\nfunction initializeHud() {\\n\\tconst d = eval('document');\\n\\tlet htmlDisplay = d.getElementById('stock-display-1');\\n\\tif (htmlDisplay !== null) return htmlDisplay;\\n\\t// Get the custom display elements in HUD.\\n\\tlet customElements = d.getElementById('overview-extra-hook-0').parentElement.parentElement;\\n\\t// Make a clone of the hook for extra hud elements, and move it up under money\\n\\tlet stockValueTracker = customElements.cloneNode(true);\\n\\t// Remove any nested elements created by stats.js\\n\\tstockValueTracker.querySelectorAll('p > p').forEach(e => e.parentElement.removeChild(e));\\n\\t// Change ids since duplicate ids are invalid\\n\\tstockValueTracker.querySelectorAll('p').forEach((e, i) => e.id = `stock-display-${i}`);\\n\\t// Get out output element\\n\\thtmlDisplay = stockValueTracker.querySelector('#stock-display-1');\\n\\t// Display label and default value\\n\\tstockValueTracker.querySelectorAll('p')[0].innerText = 'Stock';\\n\\thtmlDisplay.innerText = '$0.000 ';\\n\\t// Insert our element right after Money\\n\\tcustomElements.parentElement.insertBefore(stockValueTracker, customElements.parentElement.childNodes[2]);\\n\\treturn htmlDisplay;\\n}\",\"filename\":\"/stock-market/autopilot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///1842aa02-8e1a-42b6-aede-0497be85d6a7\",\"moduleSequenceNumber\":10734},{\"filename\":\"/stock-market/autopilot.js\",\"url\":\"blob:file:///763bf8db-1ddb-43ce-943b-0fdafd811b21\",\"moduleSequenceNumber\":13382}],\"dependents\":[],\"ramUsage\":39.3,\"server\":\"home\",\"moduleSequenceNumber\":30037,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchase4SMarketDataTixApi\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {disableSleeveAutopilot} from '/sleeve/utils.js';\\nimport {getGymLocation, getGyms} from '/utils.js';\\n\\nconst argsSchema = [\\n\\t['sleeve', undefined],\\n\\t['str', false],\\n\\t['def', false],\\n\\t['dex', false],\\n\\t['agi', false],\\n\\t['gym', 'Powerhouse Gym'],\\n\\t['all', false]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, options) {\\n\\tdata.flags(argsSchema);\\n\\treturn [...getGyms()];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst options = ns.flags(argsSchema);\\n\\tif (!options.all && !options.sleeve) throw new Error(`Need to specify --sleeve 'number' or --all`);\\n\\t// Get gym location\\n\\tconst location = getGymLocation(options.gym);\\n\\t// Get stat to train\\n\\tif (!options.str && !options.def && !options.dex && !options.agi)\\n\\t\\tthrow new Error(`Specify --str, --def, --dex or --agi for stat to train`);\\n\\tconst stat = options.str ? 'Strength' : options.def ? 'Defense' : options.dex ? 'Dexterity' : 'Agility';\\n\\tif (options.all) {\\n\\t\\tfor (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\n\\t\\t\\tif (!ns.sleeve.travel(i, location)) throw new Error(`Could not travel sleeve to correct location`);\\n\\t\\t\\tawait disableSleeveAutopilot(ns, i);\\n\\t\\t\\tns.sleeve.setToGymWorkout(i, options.gym, stat);\\n\\t\\t}\\n\\t} else {\\n\\t\\tif (!ns.sleeve.travel(options.sleeve, location)) throw new Error(`Could not travel sleeve to correct location`);\\n\\t\\tawait disableSleeveAutopilot(ns, options.sleeve);\\n\\t\\tns.sleeve.setToGymWorkout(options.sleeve, options.gym, stat);\\n\\t}\\n}\",\"filename\":\"/sleeve/gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///5e84fab3-a083-4a01-87dc-b11c58d56324\",\"moduleSequenceNumber\":798442},{\"filename\":\"utils.js\",\"url\":\"blob:file:///a9d114d5-13b4-4e41-a206-4f04ca5000a1\",\"moduleSequenceNumber\":798442},{\"filename\":\"/sleeve/utils.js\",\"url\":\"blob:file:///90796228-eaf8-42ca-8e74-1933311889d4\",\"moduleSequenceNumber\":798426},{\"filename\":\"/sleeve/gym.js\",\"url\":\"blob:file:///801f5540-0d09-4e8c-94d4-7d2ba815f5a4\",\"moduleSequenceNumber\":816084}],\"dependents\":[],\"ramUsage\":13.6,\"server\":\"home\",\"moduleSequenceNumber\":30038,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.travel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToGymWorkout\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {disableSleeveAutopilot} from '/sleeve/utils.js';\\nimport {getUniversities, getUniversityLocation} from '/utils.js';\\n\\nconst argsSchema = [\\n\\t['sleeve', undefined],\\n\\t['university', 'ZB Institute of Technology'],\\n\\t['course', 'Algorithms'],\\n\\t['all', false]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, options) {\\n\\tdata.flags(argsSchema);\\n\\treturn [...getUniversities()];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst options = ns.flags(argsSchema);\\n\\tif (!options.all && !options.sleeve) throw new Error(`Need to specify --sleeve 'number' or --all`);\\n\\t// Get university location\\n\\tconst location = getUniversityLocation(options.university);\\n\\tif (options.all) {\\n\\t\\tfor (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\n\\t\\t\\tif (!ns.sleeve.travel(i, location)) throw new Error(`Could not travel sleeve to correct location`);\\n\\t\\t\\tawait disableSleeveAutopilot(ns, i);\\n\\t\\t\\tns.sleeve.setToUniversityCourse(i, options.university, options.course);\\n\\t\\t}\\n\\t} else {\\n\\t\\tif (!ns.sleeve.travel(options.sleeve, location)) throw new Error(`Could not travel sleeve to correct location`);\\n\\t\\tawait disableSleeveAutopilot(ns, options.sleeve);\\n\\t\\tns.sleeve.setToUniversityCourse(options.sleeve, options.university, options.course);\\n\\t}\\n}\",\"filename\":\"/sleeve/university.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///5dc79cf5-8d7d-4fcb-9b5e-bfb39644a400\",\"moduleSequenceNumber\":1473},{\"filename\":\"utils.js\",\"url\":\"blob:file:///ee6501ce-38bd-4651-9407-234a15648534\",\"moduleSequenceNumber\":1473},{\"filename\":\"/sleeve/utils.js\",\"url\":\"blob:file:///a4340097-dae5-4673-bee5-ec3ad3cf2b3c\",\"moduleSequenceNumber\":1458},{\"filename\":\"/sleeve/university.js\",\"url\":\"blob:file:///5aa68e94-600a-40f0-8b7e-9f16db724e72\",\"moduleSequenceNumber\":5735}],\"dependents\":[],\"ramUsage\":13.6,\"server\":\"home\",\"moduleSequenceNumber\":30039,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.travel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToUniversityCourse\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {disableSleeveAutopilot} from '/sleeve/utils.js';\\nimport {getCrimes} from '/utils.js';\\n\\nconst argsSchema = [\\n\\t['crime', 'homicide'],\\n\\t['sleeve', undefined],\\n\\t['all', false]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, options) {\\n\\tdata.flags(argsSchema);\\n\\treturn [...getCrimes()];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst options = ns.flags(argsSchema);\\n\\tif (!options.all && !options.sleeve) throw new Error(`Need to specify --sleeve \\\"number\\\" or --all`);\\n\\tif (options.all) {\\n\\t\\tfor (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\n\\t\\t\\tawait disableSleeveAutopilot(ns, i);\\n\\t\\t\\tns.sleeve.setToCommitCrime(i, options.crime);\\n\\t\\t}\\n\\t} else {\\n\\t\\tawait disableSleeveAutopilot(ns, options.sleeve);\\n\\t\\tns.sleeve.setToCommitCrime(options.sleeve, options.crime);\\n\\t}\\n}\",\"filename\":\"/sleeve/crime.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///b03cd1e5-124b-4334-b95f-681480ac7660\",\"moduleSequenceNumber\":19817},{\"filename\":\"/sleeve/utils.js\",\"url\":\"blob:file:///12fbe238-461b-40fe-8799-0c0f504e2dea\",\"moduleSequenceNumber\":19801},{\"filename\":\"/sleeve/crime.js\",\"url\":\"blob:file:///72e22484-8c95-4097-8f3f-129ce679035f\",\"moduleSequenceNumber\":22472}],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"home\",\"moduleSequenceNumber\":30040,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToCommitCrime\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {disableSleeveAutopilot} from '/sleeve/utils.js';\\nimport {getCompanies} from '/utils.js';\\n\\nconst argsSchema = [\\n\\t['sleeve', undefined],\\n\\t['company', undefined]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, options) {\\n\\tdata.flags(argsSchema);\\n\\treturn [...getCompanies()];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst options = ns.flags(argsSchema);\\n\\t// Get sleeve number\\n\\tif (!options.sleeve) throw new Error(`Need to specify --sleeve 'number'`);\\n\\tconst sleeveNumber = options.sleeve;\\n\\t// Get company\\n\\tif (!options.faction) throw new Error(`Need to specify --company 'company'`);\\n\\tconst company = options.company;\\n\\tconst foundCompany = Object.keys(ns.getPlayer().jobs).find(c => c.toLowerCase() === company.toLowerCase());\\n\\tif (!foundCompany) throw new Error(`Invalid company or you haven't joined ${company} yet`);\\n\\t// Disable autopilot for this sleeve\\n\\tawait disableSleeveAutopilot(ns, sleeveNumber);\\n\\t// Set sleeve to company work\\n\\tns.sleeve.setToCompanyWork(sleeveNumber, foundCompany);\\n}\",\"filename\":\"/sleeve/company.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":30041,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"sleeve.setToCompanyWork\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {disableSleeveAutopilot} from '/sleeve/utils.js';\\nimport {getFactions} from '/utils.js';\\n\\nconst argsSchema = [\\n\\t['sleeve', undefined],\\n\\t['faction', undefined],\\n\\t['hacking', false],\\n\\t['field', false],\\n\\t['security', false]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, options) {\\n\\tdata.flags(argsSchema);\\n\\treturn [...getFactions()];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst options = ns.flags(argsSchema);\\n\\t// Get sleeve number\\n\\tif (!options.sleeve) throw new Error(`Need to specify --sleeve 'number'`);\\n\\tconst sleeveNumber = options.sleeve;\\n\\t// Get faction\\n\\tif (!options.faction) throw new Error(`Need to specify --faction 'faction'`);\\n\\tconst faction = options.faction;\\n\\t// Get work type\\n\\tif (!options.hacking && !options.field && !options.security)\\n\\t\\tthrow new Error(`Specify --hacking, --field or --security for work type`);\\n\\tconst workType = options.hacking ? 'Hacking Contracts' : options.field ? 'Field Work' : 'Security Work';\\n\\t// Get factions player has joined\\n\\tconst foundFaction = ns.getPlayer().factions.find(f => f.toLowerCase() === faction.toLowerCase());\\n\\tif (!foundFaction) throw new Error(`Invalid faction or you haven't joined ${faction} yet`);\\n\\t// Disable autopilot for this sleeve\\n\\tawait disableSleeveAutopilot(ns, sleeveNumber);\\n\\t// Set sleeve to faction work\\n\\tif (!ns.sleeve.setToFactionWork(sleeveNumber, foundFaction, workType))\\n\\t\\tthrow new Error(`Could not get sleeve ${sleeveNumber} to start working for ${foundFaction} doing ${workType}`);\\n}\",\"filename\":\"/sleeve/faction.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///fd8b3a1a-fd58-412b-bf6a-e701a19ffb9c\",\"moduleSequenceNumber\":631564},{\"filename\":\"utils.js\",\"url\":\"blob:file:///8920d71b-1f9f-4f35-9537-09dccd608c11\",\"moduleSequenceNumber\":631564},{\"filename\":\"/sleeve/utils.js\",\"url\":\"blob:file:///53771244-5f2d-48b1-8349-222c2be1ce55\",\"moduleSequenceNumber\":631548},{\"filename\":\"/sleeve/faction.js\",\"url\":\"blob:file:///83495782-d47c-4ca4-82b7-59942e2dcb7b\",\"moduleSequenceNumber\":1592775}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":30042,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"sleeve.setToFactionWork\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {disableSleeveAutopilot} from '/sleeve/utils.js';\\n\\nconst argsSchema = [\\n\\t['sleeve', undefined],\\n\\t['all', false]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, options) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst options = ns.flags(argsSchema);\\n\\tif (!options.all && !options.sleeve) throw new Error(`Need to specify a sleeve number or --all`);\\n\\n\\tif (options.all) {\\n\\t\\tfor (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\n\\t\\t\\tawait disableSleeveAutopilot(ns, i);\\n\\t\\t\\tns.sleeve.setToShockRecovery(i);\\n\\t\\t}\\n\\t} else {\\n\\t\\tawait disableSleeveAutopilot(ns, options.sleeve);\\n\\t\\tns.sleeve.setToShockRecovery(options.sleeve);\\n\\t}\\n}\",\"filename\":\"/sleeve/shock-recovery.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///b405339f-7528-4318-9f0a-ae32d316c4e2\",\"moduleSequenceNumber\":1641},{\"filename\":\"/sleeve/utils.js\",\"url\":\"blob:file:///d469d7fe-b6fd-4baa-91e9-4e5be6897de7\",\"moduleSequenceNumber\":111158},{\"filename\":\"/sleeve/shock-recovery.js\",\"url\":\"blob:file:///547333f6-71c3-472b-af59-d08de6194f79\",\"moduleSequenceNumber\":129656}],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"home\",\"moduleSequenceNumber\":30043,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToShockRecovery\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {disableSleeveAutopilot} from '/sleeve/utils.js';\\n\\nconst argsSchema = [\\n\\t['sleeve', undefined],\\n\\t['all', false]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, options) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst options = ns.flags(argsSchema);\\n\\tif (!options.all && !options.sleeve) throw new Error(`Need to specify a sleeve 'number' or --all`);\\n\\tif (options.all) {\\n\\t\\tfor (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\n\\t\\t\\tawait disableSleeveAutopilot(ns, i);\\n\\t\\t\\tns.sleeve.setToSynchronize(i);\\n\\t\\t}\\n\\t} else {\\n\\t\\tawait disableSleeveAutopilot(ns, options.sleeve);\\n\\t\\tns.sleeve.setToSynchronize(options.sleeve);\\n\\t}\\n}\",\"filename\":\"/sleeve/synchronize.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"home\",\"moduleSequenceNumber\":30044,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToSynchronize\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @returns {Promise<void>}\\n */\\nexport async function main() {\\n\\tconst doc = eval('document');\\n\\tdoc.getElementById('unclickable').style = 'display: block; position: absolute; top: 50%; left: 50%; width: 100px; height: 100px; z-index: 10000; background: red;';\\n\\tdoc.getElementById('unclickable').parentNode.addEventListener('click', () => {\\n\\t\\tdoc.getElementById('unclickable').style = 'display: none; visibility: hidden;';\\n\\t}, true);\\n}\",\"filename\":\"/exploits/unclickable.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":30045,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedFunction\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\teval('ns.bypass(document)');\\n}\",\"filename\":\"/exploits/bypass.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":30046,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @returns {Promise<void>}\\n */\\nexport async function main() {\\n\\tNumber.prototype.toExponential = () => null;\\n}\",\"filename\":\"/exploits/prototype-tampering.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":30047,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @returns {Promise<void>}\\n */\\nexport async function main() {\\n\\tconst win = eval('window');\\n\\twin.performance.now = () => 0;\\n}\",\"filename\":\"/exploits/time-compression.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":30048,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\t// noinspection JSUnresolvedFunction\\n\\tns.exploit();\\n}\",\"filename\":\"/exploits/undocumented-function-call.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":30049,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSDeprecatedSymbols,JSUnresolvedFunction\\n\\n/**\\n *\\n * @returns {Promise<void>}\\n */\\nexport async function main() {\\n\\tlet saveStr = decodeURIComponent(escape(atob(await load())));\\n\\n\\tsaveStr = saveStr.replace('\\\\\\\\\\\"exploits\\\\\\\\\\\":[', '\\\\\\\\\\\"exploits\\\\\\\\\\\":[\\\\\\\\\\\"EditSaveFile\\\\\\\\\\\",');\\n\\n\\tsaveStr = btoa(unescape(encodeURIComponent(saveStr)));\\n\\tawait save(saveStr);\\n}\\n\\n/**\\n *\\n * @returns {Promise<string>}\\n */\\nfunction getDB() {\\n\\treturn new Promise((resolve, reject) => {\\n\\t\\tconst win = eval('window');\\n\\t\\tif (!win.indexedDB) reject(`Indexed DB does not exists`);\\n\\t\\tconst indexedDbRequest = win.indexedDB.open('bitburnerSave', 1);\\n\\t\\tindexedDbRequest.onupgradeneeded = () => indexedDbRequest.result.createObjectStore('savestring');\\n\\t\\tindexedDbRequest.onerror = ev => reject(`Failed to get IDB ${ev}`);\\n\\t\\tindexedDbRequest.onsuccess = () => {\\n\\t\\t\\tconst db = indexedDbRequest.result;\\n\\t\\t\\tif (!db) {\\n\\t\\t\\t\\treject(`database loading result was undefined`);\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tresolve(db.transaction(['savestring'], 'readwrite').objectStore('savestring'));\\n\\t\\t};\\n\\t});\\n}\\n\\n/**\\n *\\n * @returns {Promise<string>}\\n */\\nfunction load() {\\n\\treturn new Promise((resolve, reject) => {\\n\\t\\tgetDB().then(db => {\\n\\t\\t\\treturn new Promise((resolve, reject) => {\\n\\t\\t\\t\\tconst request = db.get('save');\\n\\t\\t\\t\\trequest.onerror = ev => reject(`Error in Database request to get savestring: ${ev}`);\\n\\t\\t\\t\\trequest.onsuccess = () => resolve(request.result);\\n\\t\\t\\t}).then(saveString => resolve(saveString));\\n\\t\\t}).catch(r => reject(r));\\n\\t});\\n}\\n\\n/**\\n *\\n * @param {string} saveString\\n * @returns {Promise<string>}\\n */\\nfunction save(saveString) {\\n\\treturn getDB().then((db) => {\\n\\t\\treturn new Promise((resolve, reject) => {\\n\\t\\t\\tconst request = db.put(saveString, 'save');\\n\\t\\t\\trequest.onerror = e => reject(`Error saving game to IndexedDB: ${e}`);\\n\\t\\t\\trequest.onsuccess = () => resolve();\\n\\t\\t});\\n\\t});\\n}\",\"filename\":\"/exploits/edit-save-file.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":30050,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedFunction,JSUnresolvedVariable\\n\\n/**\\n *\\n * @returns {Promise<void>}\\n */\\nexport async function main() {\\n\\tlet boxes = Array.from(eval('document').querySelectorAll('[class*=MuiBox-root]'));\\n\\tlet box = boxes.find(x => hasPlayer(x));\\n\\n\\tif (box) {\\n\\t\\tlet props = getProps(box);\\n\\t\\tprops.router.toLocation({name: 'Noodle Bar', types: [4]});\\n\\t\\t[...eval('document').getElementsByTagName('*')].find(e => e.innerText === 'Eat noodles').click();\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {Object} obj\\n * @returns {Object}\\n */\\nfunction getProps(obj) {\\n\\treturn Object.entries(obj).find(entry => entry[0].startsWith('__reactProps'))[1].children.props;\\n}\\n\\n/**\\n *\\n * @param {Object} obj\\n * @returns {boolean}\\n */\\nfunction hasPlayer(obj) {\\n\\ttry {\\n\\t\\treturn !!getProps(obj).router;\\n\\t} catch (err) {\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/exploits/n00dles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/exploits/n00dles.js\",\"url\":\"blob:file:///98bcd8f4-0820-4685-91dd-428d9d1e8297\",\"moduleSequenceNumber\":79650}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":30051,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getPortNumbers, modifyFile} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} sleeveNumber\\n */\\nexport async function disableSleeveAutopilot(ns, sleeveNumber) {\\n\\tawait modifyFile(ns, getPortNumbers().sleeve, {[sleeveNumber]: {autopilot: false}});\\n}\",\"filename\":\"/sleeve/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":30052,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {hackServer, routeFinder} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst server = ns.args[0];\\n\\tconst route = routeFinder(ns, server);\\n\\tif (route && hackServer(ns, server)) {\\n\\t\\tfor (let serv of route) {\\n\\t\\t\\tns.connect(serv);\\n\\t\\t}\\n\\t\\tawait ns.installBackdoor();\\n\\t\\tfor (let serv of route.reverse()) {\\n\\t\\t\\tns.connect(serv);\\n\\t\\t}\\n\\t}\\n}\\n\\n// noinspection JSUnusedGlobalSymbols\\n/**\\n *\\n * @param {*} data\\n * @returns {string[]}\\n */\\nexport function autocomplete(data) {\\n\\t// noinspection JSUnresolvedVariable\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///c2347bb1-f1d6-4981-ba4f-0df27dea51ec\",\"moduleSequenceNumber\":24391},{\"filename\":\"/hacking/backdoor.js\",\"url\":\"blob:file:///019d39b1-4102-4c31-b9cf-ea66ccf61f61\",\"moduleSequenceNumber\":27078}],\"dependents\":[],\"ramUsage\":6.55,\"server\":\"home\",\"moduleSequenceNumber\":30053,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tfor (let [key, val] of Object.entries(ns.getPlayer())) {\\n\\t\\tif (key === 'jobs') {\\n\\t\\t\\tns.tprint('jobs:');\\n\\t\\t\\tfor (let [i, j] of Object.entries(val)) {\\n\\t\\t\\t\\tns.tprintf(`\\\\t${i}: ${j}`);\\n\\t\\t\\t}\\n\\t\\t} else ns.tprint(`${key}: ${val}`);\\n\\t}\\n}\",\"filename\":\"/tools/player.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/tools/player.js\",\"url\":\"blob:file:///be953101-365c-4575-91b9-ff7f9cf61158\",\"moduleSequenceNumber\":4267}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":30054,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getServers, printBoth} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tcontractor(ns);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {boolean}\\n */\\nexport function contractor(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tconst files = ns.ls(server, '.cct');\\n\\t\\tfor (let file of files) {\\n\\t\\t\\tconst contract = ns.codingcontract.getContractType(file, server);\\n\\t\\t\\tconst data = ns.codingcontract.getData(file, server);\\n\\t\\t\\tlet solution;\\n\\t\\t\\tswitch (contract) {\\n\\t\\t\\t\\tcase 'Find Largest Prime Factor':\\n\\t\\t\\t\\t\\tsolution = largestPrimeFactor(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\t\\t\\tsolution = subarrayMaxSum(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Spiralize Matrix':\\n\\t\\t\\t\\t\\tsolution = spiralizeMatrix(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Minimum Path Sum in a Triangle':\\n\\t\\t\\t\\t\\tsolution = minPathSum(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\t\\t\\tsolution = uniquePathsI(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\t\\t\\tsolution = uniquePathsII(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Shortest Path in a Grid':\\n\\t\\t\\t\\t\\tsolution = shortestPath(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Algorithmic Stock Trader I':\\n\\t\\t\\t\\t\\tsolution = stockTrader(1, data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\t\\t\\tsolution = stockTrader(Math.floor(data.length / 2), data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Algorithmic Stock Trader III':\\n\\t\\t\\t\\t\\tsolution = stockTrader(2, data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Algorithmic Stock Trader IV':\\n\\t\\t\\t\\t\\tsolution = stockTrader(...data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Generate IP Addresses':\\n\\t\\t\\t\\t\\tsolution = genIPAddresses(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\t\\t\\tsolution = mergeOverlappingIntervals(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Array Jumping Game':\\n\\t\\t\\t\\t\\tsolution = arrayJumpingGame(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Array Jumping Game II':\\n\\t\\t\\t\\t\\tsolution = arrayJumpingGameII(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\t\\t\\tsolution = totalWaysToSum(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Total Ways to Sum II':\\n\\t\\t\\t\\t\\tsolution = totalWaysToSumII(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Find All Valid Math Expressions':\\n\\t\\t\\t\\t\\tsolution = validMathExpressions(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Sanitize Parentheses in Expression':\\n\\t\\t\\t\\t\\tsolution = sanitizeParentheses(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'HammingCodes: Integer to encoded Binary':\\n\\t\\t\\t\\t\\tsolution = hammingEncode(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'HammingCodes: Encoded Binary to Integer':\\n\\t\\t\\t\\t\\tsolution = hammingDecode(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Proper 2-Coloring of a Graph':\\n\\t\\t\\t\\t\\tsolution = twoColoring(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Compression I: RLE Compression':\\n\\t\\t\\t\\t\\tsolution = runLengthEncoding(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Compression II: LZ Decompression':\\n\\t\\t\\t\\t\\tsolution = decompressLZ(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Compression III: LZ Compression':\\n\\t\\t\\t\\t\\tsolution = compressLZ(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\tns.print(`Found ${file} on ${server} of type: ${contract}. This does not have a solver yet.`);\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tconst result = ns.codingcontract.attempt(solution, file, server, {returnReward: true});\\n\\t\\t\\tif (result) {\\n\\t\\t\\t\\tprintBoth(ns, `Solved ${file} on ${server} of type: ${contract}. ${result}.`);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tprintBoth(ns, `Could not solve ${file} on ${server} of type: ${contract}...`);\\n\\t\\t\\t\\tprintBoth(ns, `Disabling contractor...`);\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn true;\\n}\\n\\n/**\\n *\\n * @param {number} n\\n * @returns {number}\\n */\\nfunction largestPrimeFactor(n) {\\n\\tlet maxPrime = 0;\\n\\twhile (n % 2 === 0) {\\n\\t\\tn = Math.floor(n / 2);\\n\\t\\tmaxPrime = 2;\\n\\t}\\n\\tfor (let i = 3; i <= Math.floor(Math.sqrt(n)) + 1; i = i + 2) {\\n\\t\\twhile (n % i === 0) {\\n\\t\\t\\tn = Math.floor(n / i);\\n\\t\\t\\tmaxPrime = i;\\n\\t\\t}\\n\\t}\\n\\tif (n > 2) maxPrime = n;\\n\\n\\treturn maxPrime;\\n}\\n\\n/**\\n *\\n * @param {number[]} array\\n * @returns {number}\\n */\\nfunction subarrayMaxSum(array) {\\n\\tconst sumReduce = (a, b) => a + b;\\n\\tlet maxSum = -Infinity;\\n\\tlet sum;\\n\\tfor (let i = 0; i < array.length; i++) {\\n\\t\\tfor (let j = i; j < array.length; j++) {\\n\\t\\t\\tsum = array.slice(i, j + 1).reduce(sumReduce);\\n\\t\\t\\tif (sum > maxSum) maxSum = sum;\\n\\t\\t}\\n\\t}\\n\\treturn maxSum;\\n}\\n\\n/**\\n *\\n * @param {number[][]} matrix\\n * @returns {number[][]}\\n */\\nfunction spiralizeMatrix(matrix) {\\n\\tconst rows = matrix.length;\\n\\tconst cols = matrix[0].length;\\n\\n\\tlet maxrow = rows - 1;\\n\\tlet maxcol = cols - 1;\\n\\tlet minrow = 0;\\n\\tlet mincol = 0;\\n\\n\\tlet row = 0;\\n\\tlet col = 0;\\n\\n\\tlet list = [];\\n\\twhile (list.length < rows * cols) {\\n\\t\\tif (maxrow >= minrow) {\\n\\t\\t\\tfor (col; col <= maxcol; col++) {\\n\\t\\t\\t\\tlist.push(matrix[row][col]);\\n\\t\\t\\t}\\n\\t\\t\\tminrow++;\\n\\t\\t\\trow++;\\n\\t\\t\\tcol--;\\n\\t\\t}\\n\\t\\tif (maxcol >= mincol) {\\n\\t\\t\\tfor (row; row <= maxrow; row++) {\\n\\t\\t\\t\\tlist.push(matrix[row][col]);\\n\\t\\t\\t}\\n\\t\\t\\tmaxcol--;\\n\\t\\t\\tcol--;\\n\\t\\t\\trow--;\\n\\t\\t}\\n\\t\\tif (minrow <= maxrow) {\\n\\t\\t\\tfor (col; col >= mincol; col--) {\\n\\t\\t\\t\\tlist.push(matrix[row][col]);\\n\\t\\t\\t}\\n\\t\\t\\tmaxrow--;\\n\\t\\t\\tcol++;\\n\\t\\t\\trow--;\\n\\t\\t}\\n\\t\\tif (mincol <= maxcol) {\\n\\t\\t\\tfor (row; row >= minrow; row--) {\\n\\t\\t\\t\\tlist.push(matrix[row][col]);\\n\\t\\t\\t}\\n\\t\\t\\tmincol++;\\n\\t\\t\\trow++;\\n\\t\\t\\tcol++;\\n\\t\\t}\\n\\t}\\n\\treturn list;\\n}\\n\\n/**\\n *\\n * @param {number[][]} data\\n * @returns {number}\\n */\\nfunction minPathSum(data) {\\n\\tconst totalPaths = Math.pow(2, data.length - 1);\\n\\tlet minSum = Infinity;\\n\\tfor (let i = 0; i < totalPaths; i++) {\\n\\t\\tlet bin = i.toString(2);\\n\\t\\twhile (bin.length < data.length - 1) {\\n\\t\\t\\tbin = '0' + bin;\\n\\t\\t}\\n\\n\\t\\tlet sum = data[0][0];\\n\\t\\tlet k = 0;\\n\\t\\tfor (let j = 1; j < data.length; j++) {\\n\\t\\t\\tlet index = parseInt(bin.charAt(j - 1));\\n\\t\\t\\tk += index;\\n\\t\\t\\tsum += data[j][k];\\n\\t\\t}\\n\\n\\t\\tif (sum < minSum) minSum = sum;\\n\\t}\\n\\treturn minSum;\\n}\\n\\n/**\\n *\\n * @param {[number, number]} data\\n * @returns {number}\\n */\\nfunction uniquePathsI(data) {\\n\\tconst [m, n] = data;\\n\\n\\tconst f = [];\\n\\tconst x = factorial(f, m + n - 2);\\n\\tconst y = factorial(f, m - 1);\\n\\tconst z = factorial(f, n - 1);\\n\\n\\treturn x / (y * z);\\n}\\n\\nfunction factorial(f, n) {\\n\\tif (n === 0 || n === 1) return 1;\\n\\tif (f[n] > 0) return f[n];\\n\\treturn f[n] = n * factorial(f, n - 1);\\n}\\n\\n/**\\n *\\n * @param {number[][]} grid\\n * @returns {number}\\n */\\nfunction uniquePathsII(grid) {\\n\\tconst gridSum = [];\\n\\tfor (let i of grid) {\\n\\t\\tgridSum.push(i.slice());\\n\\t}\\n\\tfor (let i = 0; i < gridSum.length; i++) {\\n\\t\\tfor (let j = 0; j < gridSum[0].length; j++) {\\n\\t\\t\\tif (gridSum[i][j] === 1) {\\n\\t\\t\\t\\tgridSum[i][j] = 0;\\n\\t\\t\\t} else if (i === 0 && j === 0) {\\n\\t\\t\\t\\tgridSum[0][0] = 1;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tgridSum[i][j] = (i > 0 ? gridSum[i - 1][j] : 0) + (j > 0 ? gridSum[i][j - 1] : 0);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn gridSum[gridSum.length - 1][gridSum[0].length - 1];\\n}\\n\\n/**\\n *\\n * @param {number[]} array\\n * @returns {string}\\n */\\nfunction shortestPath(array) {\\n\\tconst dist = array.map(arr => new Array(arr.length).fill(Infinity));\\n\\tconst prev = array.map(arr => new Array(arr.length).fill(undefined));\\n\\tconst path = array.map(arr => new Array(arr.length).fill(undefined));\\n\\tconst queue = [];\\n\\tarray.forEach((arr, i) => arr.forEach((a, j) => {\\n\\t\\tif (a === 0) queue.push([i, j]);\\n\\t}));\\n\\n\\tdist[0][0] = 0;\\n\\tconst height = array.length;\\n\\tconst length = array[height - 1].length;\\n\\tconst target = [height - 1, length - 1];\\n\\twhile (queue.length > 0) {\\n\\t\\tlet u;\\n\\t\\tlet d = Infinity;\\n\\t\\tlet idx;\\n\\t\\tqueue.forEach(([i, j], k) => {\\n\\t\\t\\tif (dist[i][j] < d) {\\n\\t\\t\\t\\tu = [i, j];\\n\\t\\t\\t\\td = dist[i][j];\\n\\t\\t\\t\\tidx = k;\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\tif (JSON.stringify(u) === JSON.stringify(target)) {\\n\\t\\t\\tlet str = '';\\n\\t\\t\\tlet [a, b] = target;\\n\\t\\t\\tif (prev[a][b] || (a === 0 && b === 0)) {\\n\\t\\t\\t\\twhile (prev[a][b]) {\\n\\t\\t\\t\\t\\tstr = path[a][b] + str;\\n\\t\\t\\t\\t\\t[a, b] = prev[a][b];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn str;\\n\\t\\t}\\n\\t\\tqueue.splice(idx, 1);\\n\\t\\tif (u === undefined) continue;\\n\\t\\tconst [a, b] = u;\\n\\t\\tfor (const [s, i, j] of [['D', a + 1, b], ['U', a - 1, b], ['R', a, b + 1], ['L', a, b - 1]]) {\\n\\t\\t\\tif (i < 0 || i >= height || j < 0 || j >= length) continue; // Index over edge\\n\\t\\t\\tif (array[i][j] === 1) continue; // We've hit a wall;\\n\\t\\t\\tif (!queue.some(([k, l]) => k === i && l === j)) continue; // Vertex not in queue\\n\\t\\t\\tconst alt = dist[a][b] + 1;\\n\\t\\t\\tif (alt < dist[i][j]) {\\n\\t\\t\\t\\tdist[i][j] = alt;\\n\\t\\t\\t\\tprev[i][j] = u;\\n\\t\\t\\t\\tpath[i][j] = s;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn '';\\n}\\n\\n/**\\n *\\n * @param {number} maxTrades\\n * @param {number[]} stockPrices\\n * @returns {number}\\n */\\nfunction stockTrader(maxTrades, stockPrices) {\\n\\tlet tempStr = '[0';\\n\\tfor (let i = 0; i < stockPrices.length - 1; i++) {\\n\\t\\ttempStr += ',0';\\n\\t}\\n\\ttempStr += ']';\\n\\tlet tempArr = '[' + tempStr;\\n\\tfor (let i = 0; i < maxTrades - 1; i++) {\\n\\t\\ttempArr += ',' + tempStr;\\n\\t}\\n\\ttempArr += ']';\\n\\n\\tconst highestProfit = JSON.parse(tempArr);\\n\\n\\tfor (let i = 0; i < maxTrades; i++) {\\n\\t\\tfor (let j = 0; j < stockPrices.length - 1; j++) {\\n\\t\\t\\tfor (let k = j + 1; k < stockPrices.length; k++) {\\n\\t\\t\\t\\tif (i > 0 && j > 0 && k > 0) {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t} else if (i > 0 && j > 0) {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t} else if (i > 0 && k > 0) {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t} else if (j > 0 && k > 0) {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn highestProfit[maxTrades - 1][stockPrices.length - 1];\\n}\\n\\n/**\\n *\\n * @param {string} str\\n * @returns {string[]}\\n */\\nfunction genIPAddresses(str) {\\n\\tconst ips = [];\\n\\tfor (let i = 1; i < str.length - 2; i++) {\\n\\t\\tfor (let j = i + 1; j < str.length - 1; j++) {\\n\\t\\t\\tfor (let k = j + 1; k < str.length; k++) {\\n\\t\\t\\t\\tconst ip = [\\n\\t\\t\\t\\t\\tstr.slice(0, i),\\n\\t\\t\\t\\t\\tstr.slice(i, j),\\n\\t\\t\\t\\t\\tstr.slice(j, k),\\n\\t\\t\\t\\t\\tstr.slice(k)\\n\\t\\t\\t\\t];\\n\\n\\t\\t\\t\\tlet isValid = true;\\n\\t\\t\\t\\tip.forEach(seg => {\\n\\t\\t\\t\\t\\tisValid = isValid && isValidIpSegment(seg);\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\tif (isValid) ips.push(ip.join('.'));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn ips;\\n}\\n\\n/**\\n *\\n * @param {string[]} segment\\n * @returns {boolean}\\n */\\nfunction isValidIpSegment(segment) {\\n\\treturn !((segment[0] === '0' && segment !== '0') || segment > 255);\\n}\\n\\n/**\\n *\\n * @param {number[][]} array\\n * @returns {number[][]}\\n */\\nfunction mergeOverlappingIntervals(array) {\\n\\tarray.sort((a, b) => a[0] - b[0]);\\n\\n\\tconst intervals = [array[0].slice()];\\n\\tfor (let interval of array) {\\n\\t\\tlet [x1, y1] = interval;\\n\\t\\tlet [, y2] = intervals[intervals.length - 1];\\n\\n\\t\\tif (y2 >= x1) intervals[intervals.length - 1][1] = Math.max(y1, y2);\\n\\t\\telse intervals.push(interval.slice());\\n\\t}\\n\\treturn intervals;\\n}\\n\\n/**\\n *\\n * @param {number[]} array\\n * @returns {number}\\n */\\nfunction arrayJumpingGame(array) {\\n\\tconst reachable = jumps(array);\\n\\treturn reachable.includes(Infinity) ? 0 : 1;\\n}\\n\\n/**\\n *\\n * @param {number[]} array\\n * @returns {number}\\n */\\nfunction arrayJumpingGameII(array) {\\n\\tconst reachable = jumps(array);\\n\\treturn reachable[reachable.length - 1] === Infinity ? 0 : reachable[reachable.length - 1];\\n}\\n\\n/**\\n *\\n * @param {number[]} array\\n * @returns {number[]}\\n */\\nfunction jumps(array) {\\n\\tconst reachable = new Array(array.length).fill(Infinity);\\n\\treachable[0] = 0;\\n\\tfor (let i = 0; i < array.length; i++) {\\n\\t\\tlet num = array[i];\\n\\t\\tfor (let j = 1; j <= num; j++) {\\n\\t\\t\\tif (i + j === array.length) break;\\n\\t\\t\\treachable[i + j] = Math.min(reachable[i + j], reachable[i] + 1);\\n\\t\\t}\\n\\t}\\n\\treturn reachable;\\n}\\n\\n/**\\n *\\n * @param {number} n\\n * @returns {number}\\n */\\nfunction totalWaysToSum(n) {\\n\\tconst table = [1];\\n\\ttable.length = n + 1;\\n\\ttable.fill(0, 1);\\n\\tfor (let i = 1; i < n; i++) {\\n\\t\\tfor (let j = i; j <= n; j++) {\\n\\t\\t\\ttable[j] += table[j - i];\\n\\t\\t}\\n\\t}\\n\\treturn table[n];\\n}\\n\\n/**\\n *\\n * @param {[number, number[]]} data\\n * @returns {number}\\n */\\nfunction totalWaysToSumII(data) {\\n\\tconst [n, digits] = data;\\n\\tconst table = [1];\\n\\ttable.length = n + 1;\\n\\ttable.fill(0, 1);\\n\\tfor (const i of digits) {\\n\\t\\tfor (let j = i; j <= n; j++) {\\n\\t\\t\\ttable[j] += table[j - i];\\n\\t\\t}\\n\\t}\\n\\treturn table[n];\\n}\\n\\n/**\\n *\\n * @param {[string, number]} data\\n * @returns {string[]}\\n */\\nfunction validMathExpressions(data) {\\n\\tconst [digits, target] = data;\\n\\n\\tconst result = [];\\n\\tif (digits == null || digits.length === 0) return result;\\n\\trecursiveExpression(result, '', digits, target, 0, 0, 0);\\n\\n\\treturn result;\\n}\\n\\n/**\\n *\\n * @param {string[]} res\\n * @param {string} path\\n * @param {string} digits\\n * @param {number} target\\n * @param {number} pos\\n * @param {number} evaluated\\n * @param {number} multed\\n */\\nfunction recursiveExpression(res, path, digits, target, pos, evaluated, multed) {\\n\\tif (pos === digits.length) {\\n\\t\\tif (target === evaluated) res.push(path);\\n\\t\\treturn;\\n\\t}\\n\\tfor (let i = pos; i < digits.length; i++) {\\n\\t\\tif (i !== pos && digits[pos] === '0') break;\\n\\t\\tconst cur = parseInt(digits.substring(pos, i + 1));\\n\\t\\tif (pos === 0) recursiveExpression(res, path + cur, digits, target, i + 1, cur, cur);\\n\\t\\telse {\\n\\t\\t\\trecursiveExpression(res, path + '+' + cur, digits, target, i + 1, evaluated + cur, cur);\\n\\t\\t\\trecursiveExpression(res, path + '-' + cur, digits, target, i + 1, evaluated - cur, -cur);\\n\\t\\t\\trecursiveExpression(res, path + '*' + cur, digits, target, i + 1, evaluated - multed + multed * cur, multed * cur);\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {string} data\\n * @returns {string[]}\\n */\\nfunction sanitizeParentheses(data) {\\n\\tconst valid = new Set('');\\n\\tlet min = data.length;\\n\\tfor (let i = 0; i < 2 ** data.length; i++) {\\n\\t\\tlet j = i.toString(2);\\n\\t\\twhile (j.length < data.length) {\\n\\t\\t\\tj = '0' + j;\\n\\t\\t}\\n\\n\\t\\tlet str = '';\\n\\t\\tlet deletions = 0;\\n\\t\\tfor (let k = 0; k < j.length; k++) {\\n\\t\\t\\tif (j[k] === '1' || (data[k] !== '(' && data[k] !== ')')) str += data[k];\\n\\t\\t\\telse deletions++;\\n\\t\\t}\\n\\t\\tif (deletions > min) continue;\\n\\n\\t\\tlet count = 0;\\n\\t\\tlet neg = false;\\n\\t\\tfor (let k of str) {\\n\\t\\t\\tif (k === '(') count++;\\n\\t\\t\\telse if (k === ')') count--;\\n\\t\\t\\tif (count < 0) neg = true;\\n\\t\\t}\\n\\t\\tif (count > 0 || neg) continue;\\n\\n\\t\\tif (deletions === min) valid.add(str);\\n\\t\\telse if (deletions < min) {\\n\\t\\t\\tmin = deletions;\\n\\t\\t\\tvalid.clear();\\n\\t\\t\\tvalid.add(str);\\n\\t\\t}\\n\\t}\\n\\treturn [...valid];\\n}\\n\\n/**\\n *\\n * @param {number} n\\n * @returns {string}\\n */\\nfunction hammingEncode(n) {\\n\\tconst array = Array.from(n.toString(2));\\n\\tconst encodedArray = [];\\n\\tlet i = 0;\\n\\twhile (array.length > 0) {\\n\\t\\tif ((i & (i - 1)) !== 0) encodedArray[i] = array.shift();\\n\\t\\ti++;\\n\\t}\\n\\tconst p = Math.ceil(Math.log2(encodedArray.length));\\n\\tfor (i = 0; i < p; i++) encodedArray[2 ** i] = (encodedArray.filter((b, k) => b === '1' &&\\n\\t\\t(k.toString(2).padStart(p, '0'))[p - i - 1] === '1').length % 2).toString();\\n\\tencodedArray[0] = (encodedArray.filter(b => b === '1').length % 2).toString();\\n\\treturn encodedArray.join('');\\n}\\n\\n/**\\n *\\n * @param {string} bitstring\\n * @returns {string}\\n */\\nfunction hammingDecode(bitstring) {\\n\\tconst array = Array.from(bitstring);\\n\\tconst error = array.reduce((a, b, i) => b === '1' ? a ^ i : a, 0);\\n\\tif (error) array[error] = array[error] === '1' ? '0' : '1';\\n\\tconst decodedArray = [];\\n\\tfor (const [i, b] of array.entries()) {\\n\\t\\tif ((i & (i - 1)) === 0) continue;\\n\\t\\tdecodedArray.push(b);\\n\\t}\\n\\treturn parseInt(decodedArray.join(''), 2).toString();\\n}\\n\\n/**\\n *\\n * @param {array} data\\n * @returns {number[]}\\n */\\nfunction twoColoring(data) {\\n\\treturn isBipartite(adjacencyMatrix(...data));\\n}\\n\\n/**\\n *\\n * @param {number} n\\n * @param {number[][]} e\\n * @returns {number[][]}\\n */\\nfunction adjacencyMatrix(n, e) {\\n\\tconst G = Array.from(Array(n), _ => Array(n).fill(0));\\n\\tfor (const [i, j] of e) {\\n\\t\\tG[i][j] = 1;\\n\\t\\tG[j][i] = 1;\\n\\t}\\n\\treturn G;\\n}\\n\\n/**\\n *\\n * @param {number[][]} G\\n * @returns {number[]}\\n */\\nfunction isBipartite(G) {\\n\\tconst n = G.length;\\n\\tconst colorArr = Array(n);\\n\\tfor (let i = 0; i < n; i++) if (!colorArr[i] && !isBipartiteUtil(G, n, i, colorArr)) return [];\\n\\treturn colorArr;\\n}\\n\\n/**\\n *\\n * @param {number[][]} G\\n * @param {number} n\\n * @param {number} src\\n * @param {number[]} colorArr\\n * @returns {boolean}\\n */\\nfunction isBipartiteUtil(G, n, src, colorArr) {\\n\\tcolorArr[src] = 0;\\n\\tconst q = [];\\n\\tq.push(src);\\n\\twhile (q.length > 0) {\\n\\t\\tconst u = q.shift();\\n\\t\\tif (G[u][u] === 1) return false;\\n\\t\\tfor (let v = 0; v < n; v++) {\\n\\t\\t\\tif (G[u][v] === 1 && colorArr[v] === undefined) {\\n\\t\\t\\t\\tcolorArr[v] = 1 - colorArr[u];\\n\\t\\t\\t\\tq.push(v);\\n\\t\\t\\t} else if (G[u][v] === 1 && colorArr[v] === colorArr[u]) return false;\\n\\t\\t}\\n\\t}\\n\\treturn true;\\n}\\n\\n/**\\n *\\n * @param {string} str\\n * @returns {string}\\n */\\nfunction runLengthEncoding(str) {\\n\\tconst encoding = [];\\n\\tlet count, previous, i;\\n\\tfor (count = 1, previous = str[0], i = 1; i < str.length; i++) {\\n\\t\\tif (str[i] !== previous || count === 9) {\\n\\t\\t\\tencoding.push(count, previous);\\n\\t\\t\\tcount = 1;\\n\\t\\t\\tprevious = str[i];\\n\\t\\t} else count++;\\n\\t}\\n\\tencoding.push(count, previous);\\n\\treturn encoding.join('');\\n}\\n\\n/**\\n *\\n * @param {string} str\\n * @returns {string}\\n */\\nfunction decompressLZ(str) {\\n\\tlet decoded = '', len, ref, pos, i = 0;\\n\\twhile (i < str.length) {\\n\\t\\tlen = parseInt(str[i]);\\n\\t\\tref = parseInt(str[++i]);\\n\\t\\tif (len === 0) continue;\\n\\t\\tif (isNaN(ref)) {\\n\\t\\t\\tpos = i;\\n\\t\\t\\tfor (; i < len + pos; i++) decoded += str[i];\\n\\t\\t} else {\\n\\t\\t\\ti++;\\n\\t\\t\\tfor (let j = 0; j < len; j++) decoded += decoded[decoded.length - ref];\\n\\t\\t}\\n\\t}\\n\\treturn decoded;\\n}\\n\\n/**\\n *\\n * @param {str} str\\n * @returns {string}\\n */\\nfunction compressLZ(str) {\\n\\t// state [i][j] contains a backreference of offset i and length j\\n\\tlet cur_state = Array.from(Array(10), _ => Array(10)), new_state, tmp_state, result;\\n\\tcur_state[0][1] = ''; // initial state is a literal of length 1\\n\\tfor (let i = 1; i < str.length; i++) {\\n\\t\\tnew_state = Array.from(Array(10), _ => Array(10));\\n\\t\\tconst c = str[i];\\n\\t\\t// handle literals\\n\\t\\tfor (let len = 1; len <= 9; len++) {\\n\\t\\t\\tconst input = cur_state[0][len];\\n\\t\\t\\tif (input === undefined) continue;\\n\\t\\t\\tif (len < 9) set(new_state, 0, len + 1, input); // extend current literal\\n\\t\\t\\telse set(new_state, 0, 1, input + '9' + str.substring(i - 9, i) + '0'); // start new literal\\n\\t\\t\\tfor (let offset = 1; offset <= Math.min(9, i); offset++) { // start new backreference\\n\\t\\t\\t\\tif (str[i - offset] === c) set(new_state, offset, 1, input + len + str.substring(i - len, i));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// handle backreferences\\n\\t\\tfor (let offset = 1; offset <= 9; offset++) {\\n\\t\\t\\tfor (let len = 1; len <= 9; len++) {\\n\\t\\t\\t\\tconst input = cur_state[offset][len];\\n\\t\\t\\t\\tif (input === undefined) continue;\\n\\t\\t\\t\\tif (str[i - offset] === c) {\\n\\t\\t\\t\\t\\tif (len < 9) set(new_state, offset, len + 1, input); // extend current backreference\\n\\t\\t\\t\\t\\telse set(new_state, offset, 1, input + '9' + offset + '0'); // start new backreference\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tset(new_state, 0, 1, input + len + offset); // start new literal\\n\\t\\t\\t\\t// end current backreference and start new backreference\\n\\t\\t\\t\\tfor (let new_offset = 1; new_offset <= Math.min(9, i); new_offset++) {\\n\\t\\t\\t\\t\\tif (str[i - new_offset] === c) set(new_state, new_offset, 1, input + len + offset + '0');\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ttmp_state = new_state;\\n\\t\\tnew_state = cur_state;\\n\\t\\tcur_state = tmp_state;\\n\\t}\\n\\tfor (let len = 1; len <= 9; len++) {\\n\\t\\tlet input = cur_state[0][len];\\n\\t\\tif (input === undefined) continue;\\n\\t\\tinput += len + str.substring(str.length - len, str.length);\\n\\t\\t// noinspection JSUnusedAssignment\\n\\t\\tif (result === undefined || input.length < result.length) result = input;\\n\\t}\\n\\tfor (let offset = 1; offset <= 9; offset++) {\\n\\t\\tfor (let len = 1; len <= 9; len++) {\\n\\t\\t\\tlet input = cur_state[offset][len];\\n\\t\\t\\tif (input === undefined) continue;\\n\\t\\t\\tinput += len + '' + offset;\\n\\t\\t\\tif (result === undefined || input.length < result.length) result = input;\\n\\t\\t}\\n\\t}\\n\\treturn result ?? '';\\n}\\n\\n/**\\n *\\n * @param {string[][]} state\\n * @param {number} i\\n * @param {number} j\\n * @param {string} str\\n */\\nfunction set(state, i, j, str) {\\n\\tif (state[i][j] === undefined || str.length < state[i][j].length) state[i][j] = str;\\n}\",\"filename\":\"/contracts/contractor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///0b2d1f44-8d30-49ad-8809-2a5443b095d6\",\"moduleSequenceNumber\":1573},{\"filename\":\"/contracts/contractor.js\",\"url\":\"blob:file:///16c3b27e-42e0-414b-8ac0-49485e53e005\",\"moduleSequenceNumber\":6083}],\"dependents\":[],\"ramUsage\":22,\"server\":\"home\",\"moduleSequenceNumber\":30055,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedVariable\\n\\nconst argsSchema = [\\n\\t['upgrade', 'Sell for Money'],\\n\\t['target', undefined],\\n\\t['liquidate', false],\\n\\t['continuous', false]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, args) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tif (!ns.getPlayer().bitNodeN === 9 && !ns.getOwnedSourceFiles().some(s => s.n === 9)) throw new Error(`Script requires Hacknet servers to be unlocked`);\\n\\tconst options = ns.flags(argsSchema);\\n\\tconst upgrade = options.upgrade;\\n\\tconst target = options.target;\\n\\tconst liquidate = options.liquidate;\\n\\tconst continuous = options.continuous;\\n\\twhile (true) {\\n\\t\\tawait spendHashes(ns, upgrade, target, liquidate);\\n\\t\\tif (!continuous) break;\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} upgrade\\n * @param {string} target\\n * @param {boolean} liquidate\\n * @returns {Promise<void>}\\n */\\nexport async function spendHashes(ns, upgrade, target = undefined, liquidate = false) {\\n\\tconst hn = ns.hacknet;\\n\\tconst capacity = hn.hashCapacity();\\n\\tconst globalProduction = Array.from({length: hn.numNodes()}, (_, i) => hn.getNodeStats(i)).reduce((total, node) => total + node.production, 0);\\n\\twhile (hn.numHashes() > (liquidate ? hn.hashCost(upgrade) : capacity - 2 * globalProduction)) {\\n\\t\\ttarget ? hn.spendHashes(upgrade, target) : hn.spendHashes(upgrade);\\n\\t\\tawait ns.sleep(1);\\n\\t}\\n}\",\"filename\":\"/hacknet/hash-spender.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/hacknet/hash-spender.js\",\"url\":\"blob:file:///b6ab347a-caa4-40c8-8b53-40eb98466ea3\",\"moduleSequenceNumber\":879074}],\"dependents\":[],\"ramUsage\":11.1,\"server\":\"home\",\"moduleSequenceNumber\":30056,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @param {number} fragmentID\\n * @returns {Fragment}\\n */\\nexport function getFragment(ns, fragmentID) {\\n\\treturn ns.stanek.fragmentDefinitions().find(f => f.id === fragmentID);\\n}\",\"filename\":\"/stanek/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":30057,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getFragment} from '/stanek/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.tprintf(JSON.stringify(ns.stanek.activeFragments().map(f => ({\\n\\t\\trootX: f.x,\\n\\t\\trootY: f.y,\\n\\t\\trotation: f.rotation,\\n\\t\\tfragmentID: f.id,\\n\\t\\ttype: getFragment(ns, f.id).type\\n\\t}))));\\n}\",\"filename\":\"/stanek/save.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/stanek/utils.js\",\"url\":\"blob:file:///2ad85bc9-c47c-40f7-aa25-b0a9c615a204\",\"moduleSequenceNumber\":794109},{\"filename\":\"/stanek/save.js\",\"url\":\"blob:file:///d56bca35-9592-472b-bdef-d4d21e719967\",\"moduleSequenceNumber\":806051}],\"dependents\":[],\"ramUsage\":8.6,\"server\":\"home\",\"moduleSequenceNumber\":30058,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.activeFragments\",\"cost\":5},{\"type\":\"fn\",\"name\":\"stanek.getFragment\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getFragment} from '/stanek/utils.js';\\nimport {\\n\\tformatBinary,\\n\\tformatNumber,\\n\\tgetAccessibleServers,\\n\\tgetFreeRam,\\n\\tgetPortNumbers,\\n\\tgetScripts,\\n\\treadFromFile,\\n\\treserveRam,\\n\\tunreserveRam\\n} from '/utils.js';\\n\\n// Constants\\nconst portNumber = getPortNumbers().stanek;\\nconst hostSearchDelay = 3600;\\n\\n// Variables\\nlet host;\\nlet threads = 0;\\nlet ram = 0;\\nlet firstLoop = true;\\nlet time = Date.now();\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst st = ns.stanek;\\n\\thost = ns.getHostname();\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\tns.clearLog();\\n\\t\\t// Get Stanek data\\n\\t\\tconst data = readFromFile(ns, portNumber);\\n\\t\\t// Get best host and the max RAM we can reserve for charging\\n\\t\\tgetBestHost(ns);\\n\\t\\t// Set up pattern\\n\\t\\tsetupPattern(ns, getPatterns(st.giftWidth(), st.giftHeight())[data.pattern]);\\n\\t\\t// Get chargeable fragment info\\n\\t\\tconst fragments = st.activeFragments().filter(f => f.numCharge < data.maxCharges);\\n\\t\\tif (fragments.length === 0) {\\n\\t\\t\\tns.print(`INFO: All fragments are fully charged`);\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\t// Reserve RAM on host for charging\\n\\t\\tawait reserveRam(ns, host, ram);\\n\\t\\t// Wait for RAM to free up\\n\\t\\twhile (ns.getServerMaxRam(host) - ns.getServerUsedRam(host) < ram) {\\n\\t\\t\\tns.clearLog();\\n\\t\\t\\tns.print(`INFO: Waiting for RAM to free up on ${host}: ` +\\n\\t\\t\\t\\t`${formatBinary(ns, (ns.getServerMaxRam(host) - ns.getServerUsedRam(host)) * 1e9)} ` +\\n\\t\\t\\t\\t`/ ${formatBinary(ns, ram * 1e9)}`);\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t\\t// Charge Stanek\\n\\t\\tawait charger(ns);\\n\\t\\t// Remove reserved RAM on host\\n\\t\\tawait unreserveRam(ns, host);\\n\\t\\t// Update every second\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n */\\nfunction getBestHost(ns) {\\n\\tconst scripts = getScripts();\\n\\tconst chargeRam = ns.getScriptRam(scripts.charge);\\n\\tlet bestHost, maxThreads = 0, maxRam = 0;\\n\\tfor (const host of getAccessibleServers(ns)) {\\n\\t\\tconst maxRamAvailable = getFreeRam(ns, host, true);\\n\\t\\tif (maxRamAvailable > maxRam) {\\n\\t\\t\\tbestHost = host;\\n\\t\\t\\tmaxThreads = Math.floor(maxRamAvailable / chargeRam);\\n\\t\\t\\tmaxRam = maxRamAvailable;\\n\\t\\t}\\n\\t}\\n\\tif (firstLoop || (Date.now() >= time + hostSearchDelay && maxThreads > threads)) {\\n\\t\\tns.stanek.clearGift(); // Reset charges\\n\\t\\thost = bestHost;\\n\\t\\tthreads = maxThreads;\\n\\t\\tram = maxRam;\\n\\t\\tfirstLoop = false;\\n\\t\\ttime = Date.now();\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nasync function charger(ns) {\\n\\tconst st = ns.stanek;\\n\\tconst script = getScripts().charge;\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\t// Charge fragments\\n\\twhile (true) {\\n\\t\\t// Get data\\n\\t\\tconst data = readFromFile(ns, portNumber);\\n\\t\\t// Set up pattern\\n\\t\\tsetupPattern(ns, getPatterns(st.giftWidth(), st.giftHeight())[data.pattern]);\\n\\t\\t// Get chargeable fragments\\n\\t\\tconst fragments = st.activeFragments().filter(f => f.numCharge < data.maxCharges);\\n\\t\\tif (fragments.length === 0) return; // All fragments charged to full\\n\\t\\t// Charge each fragment one at a time\\n\\t\\tfor (const fragment of fragments) {\\n\\t\\t\\tstatusUpdate(ns, data);\\n\\t\\t\\tconst availableRam = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\n\\t\\t\\tconst availableThreads = Math.floor(availableRam / scriptRam);\\n\\t\\t\\tif (availableThreads <= 0) {\\n\\t\\t\\t\\tns.print(`INFO: Not enough RAM available on ${host} to charge Stanek. ` +\\n\\t\\t\\t\\t\\t`Waiting for RAM to free up.`);\\n\\t\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\t// Only charge if we will not be bringing down the highest\\n\\t\\t\\tif (availableThreads < fragment.highestCharge * 0.99) {\\n\\t\\t\\t\\tns.print(`WARNING: The highest average charge of fragment ${fragment.id} is ${formatNumber(ns, fragment.highestCharge)}, ` +\\n\\t\\t\\t\\t\\t`indicating that it has been charged while there was ${formatBinary(ns, 2 * fragment.highestCharge * 1e9)} or more free RAM on home, ` +\\n\\t\\t\\t\\t\\t`but currently there is only ${formatBinary(ns, availableRam * 1e9)} available, which would reduce the average charge and lower your stats. ` +\\n\\t\\t\\t\\t\\t`This update will be skipped, and you should free up RAM on home to resume charging.`);\\n\\t\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tconst pid = ns.exec(script, host, threads, fragment.x, fragment.y);\\n\\t\\t\\twhile (ns.isRunning(pid, host)) {\\n\\t\\t\\t\\tawait ns.sleep(100);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {Fragment[]} fragments\\n * @param {Object} data\\n */\\nfunction statusUpdate(ns, data) {\\n\\tns.clearLog();\\n\\tconst fragments = ns.stanek.activeFragments().filter(f => f.numCharge < data.maxCharges);\\n\\tlet status = `Charging ${fragments.length} fragments to ${data.maxCharges}\\\\n`;\\n\\tfor (const fragment of fragments) {\\n\\t\\tstatus += `Fragment ${String(fragment.id).padStart(2)} at [${fragment.x}, ${fragment.y}], ` +\\n\\t\\t\\t`charge num: ${fragment.numCharge}, highest: ${formatNumber(ns, fragment.highestCharge)}\\\\n`;\\n\\t}\\n\\tns.print(status);\\n}\\n\\n/**\\n *\\n * @param {number} width\\n * @param {number} height\\n * @returns {Object<Object<number, number, number, number, number>[]>}\\n */\\nfunction getPatterns(width, height) { // Can be filled in using stanek/save.js\\n\\tconst patterns = {};\\n\\tswitch (true) { // Sorted in descending order of size\\n\\t\\tcase width >= 8 && height >= 7:\\n\\t\\t\\tpatterns.hacking = [\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 0, 'rotation': 1, 'fragmentID': 6, 'type': 4},\\n\\t\\t\\t\\t{'rootX': 4, 'rootY': 0, 'rotation': 1, 'fragmentID': 5, 'type': 3},\\n\\t\\t\\t\\t{'rootX': 2, 'rootY': 0, 'rotation': 0, 'fragmentID': 0, 'type': 6},\\n\\t\\t\\t\\t{'rootX': 1, 'rootY': 2, 'rotation': 0, 'fragmentID': 102, 'type': 18},\\n\\t\\t\\t\\t{'rootX': 3, 'rootY': 3, 'rotation': 0, 'fragmentID': 1, 'type': 6},\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 4, 'rotation': 0, 'fragmentID': 20, 'type': 12},\\n\\t\\t\\t\\t{'rootX': 1, 'rootY': 0, 'rotation': 1, 'fragmentID': 7, 'type': 5},\\n\\t\\t\\t\\t{'rootX': 3, 'rootY': 4, 'rotation': 2, 'fragmentID': 101, 'type': 18},\\n\\t\\t\\t\\t{'rootX': 2, 'rootY': 5, 'rotation': 0, 'fragmentID': 25, 'type': 14},\\n\\t\\t\\t\\t{'rootX': 5, 'rootY': 2, 'rotation': 1, 'fragmentID': 100, 'type': 18},\\n\\t\\t\\t\\t{'rootX': 5, 'rootY': 5, 'rotation': 0, 'fragmentID': 28, 'type': 16},\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 5, 'rotation': 0, 'fragmentID': 21, 'type': 13},\\n\\t\\t\\t\\t{'rootX': 6, 'rootY': 0, 'rotation': 3, 'fragmentID': 18, 'type': 11}\\n\\t\\t\\t];\\n\\t\\t\\tbreak;\\n\\t\\tcase width >= 6 && height >= 5:\\n\\t\\t\\tpatterns.starter = [\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 0, 'rotation': 0, 'fragmentID': 20, 'type': 12},\\n\\t\\t\\t\\t{'rootX': 4, 'rootY': 0, 'rotation': 0, 'fragmentID': 21, 'type': 13},\\n\\t\\t\\t\\t{'rootX': 3, 'rootY': 3, 'rotation': 0, 'fragmentID': 12, 'type': 8},\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 3, 'rotation': 0, 'fragmentID': 14, 'type': 9},\\n\\t\\t\\t\\t{'rootX': 3, 'rootY': 2, 'rotation': 0, 'fragmentID': 10, 'type': 7},\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 2, 'rotation': 0, 'fragmentID': 16, 'type': 10},\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 1, 'rotation': 0, 'fragmentID': 101, 'type': 18}\\n\\t\\t\\t];\\n\\t\\t\\tpatterns.hacking = [\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 0, 'rotation': 1, 'fragmentID': 6, 'type': 4},\\n\\t\\t\\t\\t{'rootX': 4, 'rootY': 0, 'rotation': 1, 'fragmentID': 5, 'type': 3},\\n\\t\\t\\t\\t{'rootX': 2, 'rootY': 0, 'rotation': 0, 'fragmentID': 0, 'type': 6},\\n\\t\\t\\t\\t{'rootX': 1, 'rootY': 2, 'rotation': 0, 'fragmentID': 102, 'type': 18},\\n\\t\\t\\t\\t{'rootX': 3, 'rootY': 3, 'rotation': 0, 'fragmentID': 1, 'type': 6},\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 4, 'rotation': 0, 'fragmentID': 20, 'type': 12},\\n\\t\\t\\t\\t{'rootX': 1, 'rootY': 0, 'rotation': 1, 'fragmentID': 7, 'type': 5}\\n\\t\\t\\t];\\n\\t\\t\\tpatterns.bladeburner = [\\n\\t\\t\\t\\t{'rootX': 3, 'rootY': 0, 'rotation': 0, 'fragmentID': 30, 'type': 17},\\n\\t\\t\\t\\t{'rootX': 3, 'rootY': 3, 'rotation': 0, 'fragmentID': 12, 'type': 8},\\n\\t\\t\\t\\t{'rootX': 1, 'rootY': 0, 'rotation': 0, 'fragmentID': 10, 'type': 7},\\n\\t\\t\\t\\t{'rootX': 2, 'rootY': 1, 'rotation': 2, 'fragmentID': 101, 'type': 18},\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 0, 'rotation': 1, 'fragmentID': 16, 'type': 10},\\n\\t\\t\\t\\t{'rootX': 2, 'rootY': 3, 'rotation': 2, 'fragmentID': 14, 'type': 9},\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 2, 'rotation': 1, 'fragmentID': 18, 'type': 11}\\n\\t\\t\\t];\\n\\t\\t\\tbreak;\\n\\t\\tcase width >= 5 && height >= 5:\\n\\t\\t\\tpatterns.starter = [\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 0, 'rotation': 0, 'fragmentID': 1, 'type': 6},\\n\\t\\t\\t\\t{'rootX': 2, 'rootY': 0, 'rotation': 3, 'fragmentID': 12, 'type': 8},\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 3, 'rotation': 2, 'fragmentID': 16, 'type': 10},\\n\\t\\t\\t\\t{'rootX': 2, 'rootY': 3, 'rotation': 2, 'fragmentID': 10, 'type': 7},\\n\\t\\t\\t\\t{'rootX': 4, 'rootY': 0, 'rotation': 3, 'fragmentID': 6, 'type': 4},\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 2, 'rotation': 2, 'fragmentID': 14, 'type': 9}\\n\\t\\t\\t];\\n\\t\\t\\tpatterns.hacking = [\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 2, 'rotation': 2, 'fragmentID': 1, 'type': 6},\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 3, 'rotation': 0, 'fragmentID': 7, 'type': 5},\\n\\t\\t\\t\\t{'rootX': 2, 'rootY': 1, 'rotation': 1, 'fragmentID': 102, 'type': 18},\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 0, 'rotation': 1, 'fragmentID': 21, 'type': 13},\\n\\t\\t\\t\\t{'rootX': 2, 'rootY': 0, 'rotation': 0, 'fragmentID': 5, 'type': 3},\\n\\t\\t\\t\\t{'rootX': 4, 'rootY': 1, 'rotation': 1, 'fragmentID': 6, 'type': 4}\\n\\t\\t\\t];\\n\\t\\t\\tbreak;\\n\\t\\tcase width >= 3 && height >= 3:\\n\\t\\t\\tpatterns.starter = [\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 1, 'rotation': 0, 'fragmentID': 7, 'type': 5},\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 0, 'rotation': 0, 'fragmentID': 1, 'type': 6}\\n\\t\\t\\t];\\n\\t\\t\\tpatterns.hacking = [\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 1, 'rotation': 0, 'fragmentID': 7, 'type': 5},\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 0, 'rotation': 0, 'fragmentID': 1, 'type': 6}\\n\\t\\t\\t];\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tthrow new Error(`No patterns are defined for Stanek's gift of size ${width} by ${height}`);\\n\\t}\\n\\treturn patterns;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} pattern\\n */\\nfunction setupPattern(ns, pattern) {\\n\\tconst st = ns.stanek;\\n\\tfor (const fragment of pattern) {\\n\\t\\tconst x = fragment.rootX;\\n\\t\\tconst y = fragment.rootY;\\n\\t\\tconst rot = fragment.rotation;\\n\\t\\tconst id = fragment.fragmentID;\\n\\t\\tif (st.getFragment(x, y)?.id === id) continue; // Fragment already placed there\\n\\t\\tif (!st.canPlaceFragment(x, y, rot, id)) makeSpace(ns, x, y, rot, id); // Make space for fragment\\n\\t\\tst.placeFragment(x, y, rot, id); // Place fragment\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} rootX\\n * @param {number} rootY\\n * @param {number} rotation\\n * @param {number} fragmentID\\n * @returns {boolean}\\n */\\nfunction makeSpace(ns, rootX, rootY, rotation, fragmentID) {\\n\\tconst st = ns.stanek;\\n\\tconst fragment = getFragment(ns, fragmentID);\\n\\tconst activeFragments = st.activeFragments();\\n\\tconst sameActiveFragments = activeFragments.filter(f => f.id === fragmentID);\\n\\t// Check first if we are going over the limit\\n\\tif (sameActiveFragments.length + 1 > fragment.limit) {\\n\\t\\t// Remove any fragments with the same ID\\n\\t\\tfor (let sameActiveFragment of sameActiveFragments) {\\n\\t\\t\\tst.removeFragment(sameActiveFragment.x, sameActiveFragment.y);\\n\\t\\t}\\n\\t\\t// Check if we can place fragment now\\n\\t\\tif (st.canPlaceFragment(rootX, rootY, rotation, fragmentID)) return true;\\n\\t}\\n\\t// Check if we are colliding with another fragment\\n\\tconst currentFragmentCoordinates = getCoordinates(ns, rootX, rootY, fragment.shape, rotation);\\n\\tfor (let other of getActiveFragmentsAndCoordinates(ns)) {\\n\\t\\t// Check if there are colliding cells\\n\\t\\tif (currentFragmentCoordinates.some(c => other.coordinates.some(e => e[0] === c[0] && e[1] === c[1]))) {\\n\\t\\t\\tst.removeFragment(other.fragment.x, other.fragment.y);\\n\\t\\t}\\n\\t\\t// Check if we can place fragment now\\n\\t\\tif (st.canPlaceFragment(rootX, rootY, rotation, fragmentID)) return true;\\n\\t}\\n\\t// Something is stopping us from making space\\n\\tthrow new Error(`Could not make space for fragment`);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Object<Fragment, [number, number][]>[]}\\n */\\nfunction getActiveFragmentsAndCoordinates(ns) {\\n\\treturn Array.from(ns.stanek.activeFragments(), f => {\\n\\t\\treturn {\\n\\t\\t\\tfragment: f,\\n\\t\\t\\tcoordinates: getCoordinates(ns, f.x, f.y, getFragment(ns, f.id).shape, f.rotation)\\n\\t\\t};\\n\\t});\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} rootX\\n * @param {number} rootY\\n * @param {boolean[][]} shape\\n * @param {number} rotation\\n * @returns {[number, number][]}\\n */\\nfunction getCoordinates(ns, rootX, rootY, shape, rotation) {\\n\\tconst st = ns.stanek;\\n\\tconst coordinates = [];\\n\\tfor (let [i, row] of getRotatedShape(shape, rotation).entries()) {\\n\\t\\tfor (let [j, cell] of row.entries()) {\\n\\t\\t\\t// Check if fragment occupies the cell\\n\\t\\t\\tif (cell === false) continue;\\n\\t\\t\\tconst x = rootX + j;\\n\\t\\t\\tconst y = rootY + i;\\n\\t\\t\\t// If we are going over the gift's edges throw an error\\n\\t\\t\\tif (x < 0 || y < 0 || x >= st.giftWidth() || y >= st.giftHeight()) throw new Error(`Invalid placement`);\\n\\t\\t\\tcoordinates.push([x, y]);\\n\\t\\t}\\n\\t}\\n\\treturn coordinates;\\n}\\n\\n/**\\n *\\n * @param {boolean[][]} shape\\n * @param {number} rotation\\n * @returns {boolean[][]}\\n */\\nfunction getRotatedShape(shape, rotation) {\\n\\tswitch (rotation) {\\n\\t\\tcase 0: // No rotation\\n\\t\\t\\treturn shape;\\n\\t\\tcase 1: // Rotate by 90 degrees\\n\\t\\t\\treturn reverse(transpose(shape));\\n\\t\\tcase 2: // Rotate by 180 degrees\\n\\t\\t\\treturn reverse(transpose(reverse(transpose(shape))));\\n\\t\\tcase 3: // Rotate by 270 degrees\\n\\t\\t\\treturn transpose(reverse(shape));\\n\\t\\tdefault:\\n\\t\\t\\tthrow new Error(`Invalid rotation`);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {boolean[][]} shape\\n * @returns {boolean[][]}\\n */\\nfunction transpose(shape) {\\n\\treturn Object.keys(shape[0]).map(c => shape.map(r => r[c]));\\n}\\n\\n/**\\n *\\n * @param {boolean[][]} shape\\n * @returns {boolean[][]}\\n */\\nfunction reverse(shape) {\\n\\treturn shape.map(r => r.reverse());\\n}\",\"filename\":\"/stanek/controller.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///4fd6a946-3da0-4540-abb9-255f5df42701\",\"moduleSequenceNumber\":794119},{\"filename\":\"/stanek/utils.js\",\"url\":\"blob:file:///a508048a-a0d8-4ee6-9d86-0c62f0c48b71\",\"moduleSequenceNumber\":794109},{\"filename\":\"/stanek/controller.js\",\"url\":\"blob:file:///22725f06-f3a5-421d-9e90-104b2801688a\",\"moduleSequenceNumber\":818044}],\"dependents\":[],\"ramUsage\":22.1,\"server\":\"home\",\"moduleSequenceNumber\":30059,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"stanek.giftWidth\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.giftHeight\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.activeFragments\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stanek.getFragment\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stanek.canPlaceFragment\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stanek.placeFragment\",\"cost\":5},{\"type\":\"fn\",\"name\":\"stanek.removeFragment\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getPortNumbers, modifyFile} from '/utils.js';\\n\\nconst argsSchema = [\\n\\t['pattern', undefined],\\n\\t['maxCharges', undefined]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, args) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst options = ns.flags(argsSchema);\\n\\tconst dataToModify = {};\\n\\tif (options.pattern) dataToModify.pattern = options.pattern;\\n\\tif (options.maxCharges) dataToModify.maxCharges = options.maxCharges;\\n\\tawait modifyFile(ns, getPortNumbers().stanek, dataToModify);\\n}\",\"filename\":\"/stanek/set.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///2a54e2c6-b6f7-4f16-91c2-0192b4c49dd9\",\"moduleSequenceNumber\":794119},{\"filename\":\"/stanek/set.js\",\"url\":\"blob:file:///a2eec98b-0970-4d92-90c9-4b7015666db7\",\"moduleSequenceNumber\":816545}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":30060,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {defaultPortData, getPortNumbers, modifyFile} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst portNumber = getPortNumbers().sleeve;\\n\\tawait modifyFile(ns, portNumber, defaultPortData(portNumber));\\n}\",\"filename\":\"/sleeve/reset.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d39449fa-daa1-4e31-b5ab-1d82f18771d3\",\"moduleSequenceNumber\":798442},{\"filename\":\"/sleeve/reset.js\",\"url\":\"blob:file:///5226fcf2-fcbf-4c7a-aff2-08db7d793440\",\"moduleSequenceNumber\":817588}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":30061,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.stanek.clearGift();\\n}\",\"filename\":\"/stanek/reset-charges.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/stanek/reset-charges.js\",\"url\":\"blob:file:///c0a49986-1eca-499d-afe4-5d4b544eb6a6\",\"moduleSequenceNumber\":1654398}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":30062,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['disable-equipment-buying', false]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, options) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst options = ns.flags(argsSchema);\\n\\tconst disableEquipmentBuying = options['disable-equipment-buying'];\\n\\tif (!ns.gang.inGang()) {\\n\\t\\tns.tprint(`You need to join a gang first`);\\n\\t\\treturn;\\n\\t}\\n\\tlet counter = 0;\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\t// Check for recruits\\n\\t\\tcounter = recruitGangMembers(ns, counter);\\n\\t\\t// Get gang info\\n\\t\\tconst gangRoster = Array.from(ns.gang.getMemberNames(), name => ns.gang.getMemberInformation(name));\\n\\t\\t//Update Log\\n\\t\\tns.clearLog();\\n\\t\\tns.print(`Gang: ${getGangName(ns)}`);\\n\\t\\tns.print(`Gang Warfare: ${ns.gang.getGangInformation().territoryWarfareEngaged}`);\\n\\t\\tfor (const gangMember of gangRoster) ns.print(`${gangMember.name} - ${gangMember.task}`);\\n\\t\\t// Check for ascensions\\n\\t\\tascendMembers(ns, gangRoster);\\n\\t\\t// Check for equipment purchases\\n\\t\\tif (!disableEquipmentBuying) purchaseEquipment(ns, gangRoster);\\n\\t\\t// Assign tasks\\n\\t\\tassignTasks(ns, gangRoster);\\n\\t\\t// Check for territory warfare\\n\\t\\tns.gang.setTerritoryWarfare(territoryWarfare(ns));\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Object}\\n */\\nfunction getData(ns) {\\n\\tif (ns.gang.getGangInformation().isHacking) return {\\n\\t\\tgangName: getGangName(ns),\\n\\t\\tisHacking: true,\\n\\t\\tlevel: 500,\\n\\t\\tname: 'hackerman-',\\n\\t\\ttraining: 'Train Hacking',\\n\\t\\treduceWantedLevel: 'Ethical Hacking',\\n\\t\\tterrorize: 'Cyberterrorism',\\n\\t\\tmoney: 'Money Laundering',\\n\\t\\tterritoryWarfare: 'Territory Warfare',\\n\\t\\tattribute: 'hack',\\n\\t\\tasc_attribute: 'hack_asc_mult',\\n\\t\\tclash: false\\n\\t};\\n\\telse return {\\n\\t\\tgangName: getGangName(ns),\\n\\t\\tisHacking: false,\\n\\t\\tlevel: 500,\\n\\t\\tname: 'gangsta-',\\n\\t\\ttraining: 'Train Combat',\\n\\t\\treduceWantedLevel: 'Vigilante Justice',\\n\\t\\tterrorize: 'Terrorism',\\n\\t\\tmoney: 'Human Trafficking',\\n\\t\\tterritoryWarfare: 'Territory Warfare',\\n\\t\\tattribute: 'str',\\n\\t\\tasc_attribute: 'str_asc_mult',\\n\\t\\tclash: true\\n\\t};\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {string}\\n */\\nexport function getGangName(ns) {\\n\\treturn ns.gang.getGangInformation().faction;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {string[]}\\n */\\nfunction getOtherGangs(ns) {\\n\\treturn Object.entries(ns.gang.getOtherGangInformation()).filter(([faction]) =>\\n\\t\\tfaction !== getGangName(ns));\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} counter\\n */\\nexport function recruitGangMembers(ns, counter) {\\n\\tconst data = getData(ns);\\n\\tif (ns.gang.canRecruitMember()) {\\n\\t\\tconst name = data.name + counter;\\n\\t\\tns.gang.recruitMember(name);\\n\\t\\tns.gang.setMemberTask(name, data.training);\\n\\t\\tcounter++;\\n\\t}\\n\\treturn counter;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {GangMemberInfo[]} gangRoster\\n */\\nexport function ascendMembers(ns, gangRoster) {\\n\\tfor (const gangMember of gangRoster) {\\n\\t\\tif (!ns.gang.getAscensionResult(gangMember.name)) continue;\\n\\t\\tconst ascensionThreshold = calculateAscensionThreshold(gangMember[getData(ns).asc_attribute]);\\n\\t\\tif (ns.gang.getAscensionResult(gangMember.name)[getData(ns).attribute] >= ascensionThreshold)\\n\\t\\t\\tns.gang.ascendMember(gangMember.name);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {number} asc_mult\\n * @returns {number}\\n */\\nfunction calculateAscensionThreshold(asc_mult) {\\n\\treturn Math.max(1.6 + (1 - asc_mult) / 58, 1.1);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {GangMemberInfo[]} gangRoster\\n */\\nexport function purchaseEquipment(ns, gangRoster) {\\n\\tconst data = getData(ns);\\n\\tconst orderedEquipment = data.isHacking ? getHackingEquipment(ns) : getCombatEquipment(ns);\\n\\tfor (const gangMember of gangRoster) {\\n\\t\\tif (gangMember[data.attribute] < data.level) continue;\\n\\t\\tfor (const equipment of orderedEquipment) {\\n\\t\\t\\tif (!gangMember.upgrades.includes(equipment) && !gangMember.augmentations.includes(equipment) &&\\n\\t\\t\\t\\t!ns.gang.purchaseEquipment(gangMember.name, equipment)) break;\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {string[]}\\n */\\nfunction getHackingEquipment(ns) {\\n\\tconst allEquipment = ns.gang.getEquipmentNames();\\n\\tconst hackEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).hack).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\tconst chaEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).cha).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\treturn [...new Set([...hackEquipment, ...chaEquipment])];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {string[]}\\n */\\nfunction getCombatEquipment(ns) {\\n\\tconst allEquipment = ns.gang.getEquipmentNames();\\n\\tconst strAndDefEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).str || ns.gang.getEquipmentStats(equipment).def).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\tconst dexAndAgiEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).dex || ns.gang.getEquipmentStats(equipment).agi).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\tconst chaAndHackEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).cha || ns.gang.getEquipmentStats(equipment).hack).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\treturn [...new Set([...strAndDefEquipment, ...dexAndAgiEquipment, ...chaAndHackEquipment])];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {GangMemberInfo[]} gangRoster\\n */\\nexport function assignTasks(ns, gangRoster) {\\n\\tconst data = getData(ns);\\n\\tlet warfareCounter = 0;\\n\\tfor (const gangMember of gangRoster) {\\n\\t\\tif (gangMember[data.attribute] < data.level) ns.gang.setMemberTask(gangMember.name, data.training);\\n\\t\\telse if (ns.gang.getGangInformation().wantedPenalty < 0.5) ns.gang.setMemberTask(gangMember.name, data.reduceWantedLevel);\\n\\t\\telse if (gangRoster.length < 12) ns.gang.setMemberTask(gangMember.name, data.terrorize);\\n\\t\\telse if (data.clash && clashChance(ns).some(s => s < 0.8) &&\\n\\t\\t\\tns.gang.getGangInformation().territory < 1 && warfareCounter < 6) {\\n\\t\\t\\tns.gang.setMemberTask(gangMember.name, data.territoryWarfare);\\n\\t\\t\\twarfareCounter++;\\n\\t\\t} else ns.gang.setMemberTask(gangMember.name, data.money);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {number[]}\\n */\\nfunction clashChance(ns) {\\n\\treturn Array.from(getOtherGangs(ns), ([faction]) => ns.gang.getChanceToWinClash(faction));\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {boolean}\\n */\\nexport function territoryWarfare(ns) {\\n\\treturn (Number(Math.round(Number(ns.gang.getGangInformation().territory + 'e' + 10)) + 'e' + 10 * -1) < 1 &&\\n\\t\\tfightForTerritory(ns, getOtherGangs(ns)));\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {boolean}\\n */\\nfunction fightForTerritory(ns) {\\n\\tlet averageWinChance = 0;\\n\\tfor (const [faction, info] of getOtherGangs(ns)) averageWinChance += info.territory * ns.gang.getChanceToWinClash(faction);\\n\\treturn averageWinChance / (1 - ns.gang.getGangInformation().territory) >= 0.7;\\n}\",\"filename\":\"/gang/manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/gang/manager.js\",\"url\":\"blob:file:///4bd24989-4162-4878-be0e-47416d3b0105\",\"moduleSequenceNumber\":13379}],\"dependents\":[],\"ramUsage\":40.7,\"server\":\"home\",\"moduleSequenceNumber\":30063,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setTerritoryWarfare\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getOtherGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentStats\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getChanceToWinClash\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedFunction,JSUnresolvedVariable\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\t// Download password list and check it\\n\\tconst link = 'https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/Common-Credentials/10-million-password-list-top-10000.txt';\\n\\tconst list = download(ns, link);\\n\\tawait check(list);\\n\\t// or brute force your way\\n\\t// brute(ns);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} list\\n * @returns {Promise<void>}\\n */\\nasync function check(ns, list) {\\n\\tfor (const s of list) {\\n\\t\\tns.rainbow(s);\\n\\t\\tawait ns.asleep(1);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} link\\n * @returns {Promise<string[]>}\\n */\\nasync function download(ns, link) {\\n\\tlet lines, done;\\n\\tconst req = new XMLHttpRequest();\\n\\treq.onreadystatechange = function () {\\n\\t\\tif (req.readyState === 4 && req.status === 200) {\\n\\t\\t\\tns.print(`Processing successful response...`);\\n\\t\\t\\tconst text = req.responseText;\\n\\t\\t\\tlines = text.split('\\\\n');\\n\\t\\t} else if (req.readyState === 4) ns.print(`Request failed with status ${req.status}`);\\n\\t\\telse ns.print(`State: ${req.readyState}`);\\n\\t\\tdone = req.readyState === 4;\\n\\t};\\n\\treq.open('GET', link);\\n\\treq.send();\\n\\twhile (!done) {\\n\\t\\tawait ns.asleep(5000);\\n\\t}\\n\\treturn lines;\\n}\\n\\n// noinspection JSUnusedLocalSymbols\\n/**\\n *\\n * @param {NS} ns\\n * @param {boolean} lowercase\\n * @param {boolean} uppercase\\n * @param {boolean} numbers\\n * @param {number} length\\n * @returns {Promise<void>}\\n */\\nasync function brute(ns, lowercase = true, uppercase = false, numbers = false, length = 8) {\\n\\tconst list = [];\\n\\tif (lowercase) for (let i = 'a'.charCodeAt(); i <= 'z'.charCodeAt(); i++) list.push(String.fromCharCode(i));\\n\\tif (uppercase) for (let i = 'A'.charCodeAt(); i <= 'Z'.charCodeAt(); i++) list.push(String.fromCharCode(i));\\n\\tif (numbers) for (let i = 0; i <= 9; i++) list.push(String(i));\\n\\tawait force(ns, list, ns.rainbow, length);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} list\\n * @param {function} func\\n * @param {number} limit\\n * @param {number} k\\n * @param {string} prepend\\n * @param {boolean} callBig\\n * @returns {Promise<void>}\\n */\\nasync function force(ns, list, func, limit, k = 1, prepend = '', callBig = true) {\\n\\tif (k <= 0 || k > limit) return;\\n\\tif (k === 1) for (let s of list) if (func(prepend + s)) return;\\n\\tfor (let i = 0; i < list.length; i++) await force(ns, list, func, limit - 1, k - 1, prepend + list[i], false);\\n\\tif (callBig) await force(ns, list, func, limit, k + 1);\\n\\tawait ns.asleep(1);\\n}\\n\\n\",\"filename\":\"/exploits/rainbow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":30064,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Requires formulas\\nimport {formatMoney, formatNumber, formatTime, printBoth} from '/utils.js';\\n\\nconst argsSchema = [\\n\\t['max-spend', Infinity],\\n\\t['max-payoff-time', Infinity]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, args) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst options = ns.flags(argsSchema);\\n\\tlet maxSpend = options['max-spend'];\\n\\tconst maxPayoffTime = options['max-payoff-time'];\\n\\twhile (true) {\\n\\t\\tconst spend = upgradeHacknet(ns, maxSpend, maxPayoffTime);\\n\\t\\tif (typeof spend === 'string') {\\n\\t\\t\\tprintBoth(ns, spend);\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tmaxSpend -= spend;\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\n// Will buy the most effective hacknet upgrade, so long as it will pay for itself in maxPayoffTimeSeconds\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} maxSpend\\n * @param {number} maxPayoffTimeSeconds\\n * @returns {number|boolean}\\n */\\nexport function upgradeHacknet(ns, maxSpend = Infinity, maxPayoffTimeSeconds = 21600 /* 6 hours */) {\\n\\tconst hn = ns.hacknet;\\n\\tconst haveHacknetServers = ns.getPlayer().bitNodeN === 9 || ns.getOwnedSourceFiles().some(s => s.n === 9);\\n\\tconst form = haveHacknetServers ? ns.formulas.hacknetServers : ns.formulas.hacknetNodes;\\n\\tconst currentHacknetMult = ns.getPlayer().hacknet_node_money_mult;\\n\\t// Find the best upgrade we can make to an existing node\\n\\tconst upgrades = getUpgrades(ns);\\n\\tlet bestUpgradePayoff = 0;\\n\\tlet nodeToUpgrade;\\n\\tlet bestUpgrade;\\n\\tlet cost;\\n\\tlet upgradedValue;\\n\\tlet worstNodeProduction = Number.MAX_SAFE_INTEGER; // Used to hold how productive a newly purchased node might be\\n\\tfor (let i = 0; i < hn.numNodes(); i++) {\\n\\t\\tconst nodeStats = hn.getNodeStats(i);\\n\\t\\t// When a hacknet server runs scripts, nodeStats.production lags behind what it should be for current ram usage\\n\\t\\tif (haveHacknetServers) nodeStats.production = form.hashGainRate(nodeStats.level, 0, nodeStats.ram, nodeStats.cores, currentHacknetMult);\\n\\t\\tworstNodeProduction = Math.min(worstNodeProduction, nodeStats.production);\\n\\t\\t// Get next best upgrade\\n\\t\\tfor (let upgrade of upgrades) {\\n\\t\\t\\tconst currentUpgradeCost = upgrade.cost(i);\\n\\t\\t\\tconst payoff = upgrade.addedProduction(nodeStats) / currentUpgradeCost; // Production per money\\n\\t\\t\\tif (payoff > bestUpgradePayoff) {\\n\\t\\t\\t\\tbestUpgradePayoff = payoff;\\n\\t\\t\\t\\tnodeToUpgrade = i;\\n\\t\\t\\t\\tbestUpgrade = upgrade;\\n\\t\\t\\t\\tcost = currentUpgradeCost;\\n\\t\\t\\t\\tupgradedValue = upgrade.nextValue(nodeStats);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Compare this to the cost of adding a new node\\n\\tlet newNodeCost;\\n\\tlet newNodePayoff;\\n\\tlet shouldBuyNewNode;\\n\\tif (hn.numNodes() < hn.maxNumNodes()) {\\n\\t\\tnewNodeCost = hn.getPurchaseNodeCost();\\n\\t\\tnewNodePayoff = worstNodeProduction / newNodeCost;\\n\\t\\tshouldBuyNewNode = newNodePayoff > bestUpgradePayoff;\\n\\t} else if (bestUpgradePayoff === 0) return false; // Cannot buy new node and payoff will be zero\\n\\t// If specified, only buy upgrades that will pay for themselves in payoffTimeSeconds\\n\\tconst value = haveHacknetServers ? 0.25e6 : 1; // 1 hash = 0.25m\\n\\tlet payoffTimeSeconds = 1 / (value * (shouldBuyNewNode ? newNodePayoff : bestUpgradePayoff));\\n\\tif (shouldBuyNewNode) cost = newNodeCost;\\n\\t// Prepare info about next purchase\\n\\tlet strPurchase = (shouldBuyNewNode ? `a new node \\\"hacknet-node-${hn.numNodes()}\\\"` :\\n\\t\\t`hacknet-node-${nodeToUpgrade} ${bestUpgrade.name} ${upgradedValue}`) + ` for ${formatMoney(ns, cost)}`;\\n\\tlet strPayoff = `production ${formatNumber(ns, (shouldBuyNewNode ? newNodePayoff : bestUpgradePayoff) * cost)}, payoff time: ${formatTime(ns, 1000 * payoffTimeSeconds)}`;\\n\\tif (cost > maxSpend) {\\n\\t\\tns.print(`The next best purchase would be ${strPurchase} but the cost ${formatMoney(ns, cost)} exceeds the limit (${formatMoney(ns, maxSpend)})`);\\n\\t\\treturn 'Spending limit reached. Turning off Hacknet manager...'; // Overspending\\n\\t}\\n\\tif (payoffTimeSeconds > maxPayoffTimeSeconds) {\\n\\t\\tns.print(`The next best purchase would be ${strPurchase} but the ${strPayoff} is worse than the limit (${formatTime(ns, 1000 * maxPayoffTimeSeconds)})`);\\n\\t\\treturn 'Max payoff time reached. Turning off Hacknet manager...'; // Won't pay itself off\\n\\t}\\n\\tconst success = shouldBuyNewNode ? hn.purchaseNode() !== -1 : bestUpgrade.upgrade(nodeToUpgrade, 1);\\n\\tns.print(success ? `Purchased ${strPurchase} with ${strPayoff}` : `Insufficient funds to purchase the next best upgrade: ${strPurchase}`);\\n\\treturn success ? cost : 0;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Object<string, function, function, function, function>[]}\\n */\\nexport function getUpgrades(ns) {\\n\\tconst hn = ns.hacknet;\\n\\treturn [\\n\\t\\t{\\n\\t\\t\\tname: 'level',\\n\\t\\t\\tupgrade: hn.upgradeLevel,\\n\\t\\t\\tcost: i => hn.getLevelUpgradeCost(i, 1),\\n\\t\\t\\tnextValue: nodeStats => nodeStats.level + 1,\\n\\t\\t\\taddedProduction: nodeStats => nodeStats.production * productionMult(ns, 'level', nodeStats.level)\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'ram',\\n\\t\\t\\tupgrade: hn.upgradeRam,\\n\\t\\t\\tcost: i => hn.getRamUpgradeCost(i, 1),\\n\\t\\t\\tnextValue: nodeStats => nodeStats.ram * 2,\\n\\t\\t\\taddedProduction: nodeStats => nodeStats.production * productionMult(ns, 'ram', nodeStats.ram)\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'cores',\\n\\t\\t\\tupgrade: hn.upgradeCore,\\n\\t\\t\\tcost: i => hn.getCoreUpgradeCost(i, 1),\\n\\t\\t\\tnextValue: nodeStats => nodeStats.cores + 1,\\n\\t\\t\\taddedProduction: nodeStats => nodeStats.production * productionMult(ns, 'cores', nodeStats.cores)\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'cache',\\n\\t\\t\\tupgrade: hn.upgradeCache,\\n\\t\\t\\tcost: i => hn.getCacheUpgradeCost(i, 1),\\n\\t\\t\\tnextValue: nodeStats => nodeStats.cache + 1,\\n\\t\\t\\taddedProduction: nodeStats => nodeStats.production * productionMult(ns, 'cache', nodeStats.cache)\\n\\t\\t}\\n\\t];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} type\\n * @param {number} level\\n * @returns {number}\\n */\\nfunction productionMult(ns, type, level) {\\n\\tconst hn = ns.hacknet;\\n\\tconst haveHacknetServers = ns.getPlayer().bitNodeN === 9 || ns.getOwnedSourceFiles().some(s => s.n === 9);\\n\\tconst form = haveHacknetServers ? ns.formulas.hacknetServers.hashGainRate : ns.formulas.hacknetNodes.moneyGainRate;\\n\\tlet curLevel;\\n\\tlet nextLevel;\\n\\tswitch (type) {\\n\\t\\tcase 'level':\\n\\t\\t\\tcurLevel = haveHacknetServers ? [level, 0, 1, 1] : [level, 1, 1];\\n\\t\\t\\tnextLevel = haveHacknetServers ? [level + 1, 0, 1, 1] : [level + 1, 1, 1];\\n\\t\\t\\tbreak;\\n\\t\\tcase 'ram':\\n\\t\\t\\tcurLevel = haveHacknetServers ? [1, 0, level, 1] : [1, level, 1];\\n\\t\\t\\tnextLevel = haveHacknetServers ? [1, 0, level * 2, 1] : [1, level * 2, 1];\\n\\t\\t\\tbreak;\\n\\t\\tcase 'cores':\\n\\t\\t\\tcurLevel = haveHacknetServers ? [1, 0, 1, level] : [1, 1, level];\\n\\t\\t\\tnextLevel = haveHacknetServers ? [1, 0, 1, level + 1] : [1, 1, level + 1];\\n\\t\\t\\tbreak;\\n\\t\\tcase 'cache': // Doesn't improve production, but we consider buying cache if hash is at percentageCutoff capacity\\n\\t\\t\\tconst percentageCutoff = 0.95;\\n\\t\\t\\tconst mult = 1 / (1 - percentageCutoff);\\n\\t\\t\\treturn mult * (hn.numHashes() / hn.hashCapacity() - percentageCutoff);\\n\\t\\tdefault:\\n\\t\\t\\tthrow new Error(`Invalid type encountered in Hacknet production multiplier`);\\n\\t}\\n\\treturn form(...nextLevel) / form(...curLevel) - 1;\\n}\",\"filename\":\"/hacknet/manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///cd9cbf0a-da4b-47f3-985f-a66dce376031\",\"moduleSequenceNumber\":10734},{\"filename\":\"/hacknet/manager.js\",\"url\":\"blob:file:///3b659ad0-cc31-4921-bc42-a3532d678541\",\"moduleSequenceNumber\":13383}],\"dependents\":[],\"ramUsage\":11.1,\"server\":\"home\",\"moduleSequenceNumber\":30065,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n\\tfindPlaceToRun,\\n\\tformatBinary,\\n\\tformatPercentage,\\n\\tformatTime,\\n\\tgetAccessibleServers,\\n\\tgetFreeRam,\\n\\tgetFreeRams,\\n\\tgetScripts,\\n\\tprintBoth\\n} from '/utils.js';\\n// TODO: collision detection\\n// TODO: no waiting between groups of cycles\\n// TODO: optimise priming\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, args) {\\n\\treturn data.servers;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\tconst sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tconst money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (money < data.maxMoney || sec > data.minSec) {\\n\\t\\t\\tns.print(`Priming ${data.target} in ${formatTime(ns, ns.getWeakenTime(data.target))}`);\\n\\t\\t\\tconst primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\t\\tconst info = getInfo(ns, data);\\n\\t\\tif (info === 'EXIT') return;\\n\\t\\telse if (info === 'REPEAT') continue;\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {Object} info\\n * @param {Object} data\\n * @returns {Promise<void>}\\n */\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRam) {\\n\\t\\t\\tns.print(`Running cycle ${c}`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} sec\\n * @param {number} money\\n * @param {Object} data\\n * @returns {Promise<boolean>}\\n */\\nasync function primeTarget(ns, sec, money, data) {\\n\\tconst growth = data.maxMoney / money;\\n\\tconst growThreads = Math.ceil(ns.growthAnalyze(data.target, Math.max(growth !== Infinity ? growth : 10, 1), data.cores));\\n\\tconst weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tconst growTime = ns.getGrowTime(data.target);\\n\\tconst weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tconst freeRam = getFreeRam(ns, data.host);\\n\\tconst primeRam = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRam > freeRam) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${formatBinary(ns, primeRam)}, available RAM: ${formatBinary(ns, freeRam)}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tconst servers = getAccessibleServers(ns);\\n\\t\\tconst freeRams = getFreeRams(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown && growThreads > 0) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, data.target);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened && weakenThreads > 0) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, data.target);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tlet time = 0;\\n\\t\\tif (!growFound) time = Math.max(time, growTime);\\n\\t\\tif (!weakenFound) time = Math.max(time, weakenTime);\\n\\t\\tawait ns.sleep(time + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {Object} data\\n * @returns {Object}\\n */\\nfunction getInfo(ns, data) {\\n\\tconst hackTime = ns.getHackTime(data.target);\\n\\tconst growTime = ns.getGrowTime(data.target);\\n\\tconst weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tconst hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tconst hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tconst growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tconst gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tconst freeRam = getFreeRam(ns, data.host);\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRam / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRam / cycleRAM);\\n\\t}\\n\\tif (cycleRAM > freeRam) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRam}`);\\n\\t\\tdata.drainPercent *= freeRam / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${formatPercentage(data.drainPercent * 100)}`);\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}...`);\\n\\t\\t\\treturn 'EXIT';\\n\\t\\t}\\n\\t\\treturn 'REPEAT';\\n\\t}\\n\\tns.print(`Running ${cycleCount} cycles in ${formatTime(ns, cycleCount * cycleDelay / 1000)}`);\\n\\n\\tconst hackOffset = -0.25 * cycleDelay;\\n\\tconst hWeakenOffset = 0;\\n\\tconst growOffset = 0.25 * cycleDelay;\\n\\tconst gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tconst hackDelay = weakenTime - hackTime + hackOffset;\\n\\tconst hWeakenDelay = hWeakenOffset;\\n\\tconst growDelay = weakenTime - growTime + growOffset;\\n\\tconst gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRam,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Object}\\n */\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 100;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam,\\n\\t\\tgrowScriptRam,\\n\\t\\tweakenScriptRam\\n\\t};\\n}\",\"filename\":\"/hacking/batcher.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///481147df-60e2-4bbb-ae1d-d4c15c199395\",\"moduleSequenceNumber\":24391},{\"filename\":\"/hacking/batcher.js\",\"url\":\"blob:file:///13e60c38-5725-4df0-8217-3e0a3e83fd8e\",\"moduleSequenceNumber\":27079}],\"dependents\":[],\"ramUsage\":17.2,\"server\":\"home\",\"moduleSequenceNumber\":30066,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @param {string} str\\n */\\nexport function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) if (server !== 'home') await ns.scp(scriptsToCopy(), 'home', server);\\n}\\n\\n/**\\n *\\n * @returns {Object<string>}\\n */\\nexport function getScripts() {\\n\\treturn {\\n\\t\\tcortex: 'cortex.js',\\n\\t\\tupgradeHomeRam: '/player/upgrade-home-ram.js',\\n\\t\\tupgradeHomeCores: '/player/upgrade-home-cores.js',\\n\\t\\tjoinFactions: '/factions/join-factions.js',\\n\\t\\thack: '/daemons/hack.js',\\n\\t\\tgrow: '/daemons/grow.js',\\n\\t\\tweaken: '/daemons/weaken.js',\\n\\t\\tcharge: '/daemons/charge.js',\\n\\t\\tintelligence: '/daemons/intelligence.js',\\n\\t\\tbatcher: '/hacking/batcher.js',\\n\\t\\tbackdoor: '/hacking/backdoor.js',\\n\\t\\tshare: '/daemons/share.js',\\n\\t\\tutils: 'utils.js',\\n\\t\\tgang: '/gang/manager.js',\\n\\t\\tcorp: '/corporation/autopilot.js',\\n\\t\\tbladeburner: '/bladeburner/autopilot.js',\\n\\t\\tstock: '/stock-market/autopilot.js',\\n\\t\\thacknet: '/hacknet/manager.js',\\n\\t\\tsleeve: '/sleeve/autopilot.js',\\n\\t\\tstanek: '/stanek/controller.js'\\n\\t};\\n}\\n\\n/**\\n *\\n * @returns {string[]}\\n */\\nexport function getManagerScripts() {\\n\\tconst scripts = getScripts();\\n\\treturn [\\n\\t\\tscripts.cortex,\\n\\t\\tscripts.gang,\\n\\t\\tscripts.corp,\\n\\t\\tscripts.bladeburner,\\n\\t\\tscripts.stock,\\n\\t\\tscripts.hacknet,\\n\\t\\tscripts.sleeve,\\n\\t\\tscripts.stanek,\\n\\t\\tscripts.batcher\\n\\t];\\n}\\n\\n/**\\n *\\n * @returns {string[]}\\n */\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\n/**\\n *\\n * @returns {Object<Object>}\\n */\\nfunction getOrganisations() {\\n\\treturn {\\n\\t\\t'ECorp': {\\n\\t\\t\\tlocation: 'Aevum',\\n\\t\\t\\tstockSymbol: 'ECP',\\n\\t\\t\\tserver: 'ecorp',\\n\\t\\t\\tfaction: 'ECorp',\\n\\t\\t\\tcompany: 'ECorp',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'MegaCorp': {\\n\\t\\t\\tlocation: 'Sector-12',\\n\\t\\t\\tstockSymbol: 'MGCP',\\n\\t\\t\\tserver: 'megacorp',\\n\\t\\t\\tfaction: 'MegaCorp',\\n\\t\\t\\tcompany: 'MegaCorp',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'Blade Industries': {\\n\\t\\t\\tlocation: 'Sector-12',\\n\\t\\t\\tstockSymbol: 'BLD',\\n\\t\\t\\tserver: 'blade',\\n\\t\\t\\tfaction: 'Blade Industries',\\n\\t\\t\\tcompany: 'Blade Industries',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'Clarke Incorporated': {\\n\\t\\t\\tlocation: 'Aevum',\\n\\t\\t\\tstockSymbol: 'CLRK',\\n\\t\\t\\tserver: 'clarkinc',\\n\\t\\t\\tfaction: 'Clarke Incorporated',\\n\\t\\t\\tcompany: 'Clarke Incorporated',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'OmniTek Incorporated': {\\n\\t\\t\\tlocation: 'Volhaven',\\n\\t\\t\\tstockSymbol: 'OMTK',\\n\\t\\t\\tserver: 'omnitek',\\n\\t\\t\\tfaction: 'OmniTek Incorporated',\\n\\t\\t\\tcompany: 'OmniTek Incorporated',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'Four Sigma': {\\n\\t\\t\\tlocation: 'Sector-12',\\n\\t\\t\\tstockSymbol: 'FSIG',\\n\\t\\t\\tserver: '4sigma',\\n\\t\\t\\tfaction: 'Four Sigma',\\n\\t\\t\\tcompany: 'Four Sigma',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'KuaiGong International': {\\n\\t\\t\\tlocation: 'Chongqing',\\n\\t\\t\\tstockSymbol: 'KGI',\\n\\t\\t\\tserver: 'kuai-gong',\\n\\t\\t\\tfaction: 'KuaiGong International',\\n\\t\\t\\tcompany: 'KuaiGong International',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'Fulcrum Technologies': {\\n\\t\\t\\tlocation: 'Aevum',\\n\\t\\t\\tstockSymbol: 'FLCM',\\n\\t\\t\\tserver: 'fulcrumtech',\\n\\t\\t\\tcompany: 'Fulcrum Technologies',\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Software']\\n\\t\\t},\\n\\t\\t'Storm Technologies': {\\n\\t\\t\\tlocation: 'Ishima',\\n\\t\\t\\tstockSymbol: 'STM',\\n\\t\\t\\tserver: 'stormtech',\\n\\t\\t\\tcompany: 'Storm Technologies',\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Software Consultant', 'Software']\\n\\t\\t},\\n\\t\\t'DefComm': {\\n\\t\\t\\tlocation: 'New Tokyo',\\n\\t\\t\\tstockSymbol: 'DCOMM',\\n\\t\\t\\tserver: 'defcomm',\\n\\t\\t\\tcompany: 'DefComm',\\n\\t\\t\\tcompanyPositions: ['IT', 'Software Consultant', 'Software']\\n\\t\\t},\\n\\t\\t'Helios Labs': {\\n\\t\\t\\tlocation: 'Volhaven',\\n\\t\\t\\tstockSymbol: 'HLS',\\n\\t\\t\\tserver: 'helios',\\n\\t\\t\\tcompany: 'Helios Labs',\\n\\t\\t\\tcompanyPositions: ['IT', 'Software Consultant', 'Software']\\n\\t\\t},\\n\\t\\t'VitaLife': {\\n\\t\\t\\tlocation: 'New Tokyo',\\n\\t\\t\\tstockSymbol: 'VITA',\\n\\t\\t\\tserver: 'vitalife',\\n\\t\\t\\tcompany: 'VitaLife',\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Software Consultant', 'Software']\\n\\t\\t},\\n\\t\\t'Icarus Microsystems': {\\n\\t\\t\\tlocation: 'Sector-12',\\n\\t\\t\\tstockSymbol: 'ICRS',\\n\\t\\t\\tserver: 'icarus',\\n\\t\\t\\tcompany: 'Icarus Microsystems',\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Software Consultant', 'Software']\\n\\t\\t},\\n\\t\\t'Universal Energy': {\\n\\t\\t\\tlocation: 'Sector-12',\\n\\t\\t\\tstockSymbol: 'UNV',\\n\\t\\t\\tserver: 'univ-energy',\\n\\t\\t\\tcompany: 'Universal Energy',\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Software Consultant', 'Software']\\n\\t\\t},\\n\\t\\t'AeroCorp': {\\n\\t\\t\\tlocation: 'Aevum',\\n\\t\\t\\tstockSymbol: 'AERO',\\n\\t\\t\\tserver: 'aerocorp',\\n\\t\\t\\tcompany: 'AeroCorp',\\n\\t\\t\\tcompanyPositions: ['IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'Omnia Cybersystems': {\\n\\t\\t\\tlocation: 'Volhaven',\\n\\t\\t\\tstockSymbol: 'OMN',\\n\\t\\t\\tserver: 'omnia',\\n\\t\\t\\tcompany: 'Omnia Cybersystems',\\n\\t\\t\\tcompanyPositions: ['IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'Solaris Space Systems': {\\n\\t\\t\\tlocation: 'Chongqing',\\n\\t\\t\\tstockSymbol: 'SLRS',\\n\\t\\t\\tserver: 'solaris',\\n\\t\\t\\tcompany: 'Solaris Space Systems',\\n\\t\\t\\tcompanyPositions: ['IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'Global Pharmaceuticals': {\\n\\t\\t\\tlocation: 'New Tokyo',\\n\\t\\t\\tstockSymbol: 'GPH',\\n\\t\\t\\tserver: 'global-pharm',\\n\\t\\t\\tcompany: 'Global Pharmaceuticals',\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Security', 'Software Consultant', 'Software']\\n\\t\\t},\\n\\t\\t'Nova Medical': {\\n\\t\\t\\tlocation: 'Ishima',\\n\\t\\t\\tstockSymbol: 'NVMD',\\n\\t\\t\\tserver: 'nova-med',\\n\\t\\t\\tcompany: 'Nova Medical',\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Security', 'Software Consultant', 'Software']\\n\\t\\t},\\n\\t\\t'Watchdog Security': {\\n\\t\\t\\tlocation: 'Aevum',\\n\\t\\t\\tstockSymbol: 'WDS',\\n\\t\\t\\tcompany: 'Watchdog Security',\\n\\t\\t\\tcompanyPositions: ['Agent', 'IT', 'Security', 'Software Consultant', 'Software']\\n\\t\\t},\\n\\t\\t'LexoCorp': {\\n\\t\\t\\tlocation: 'Volhaven',\\n\\t\\t\\tstockSymbol: 'LXO',\\n\\t\\t\\tserver: 'lexo-corp',\\n\\t\\t\\tcompany: 'LexoCorp',\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Security', 'Software Consultant', 'Software']\\n\\t\\t},\\n\\t\\t'Rho Construction': {\\n\\t\\t\\tlocation: 'Aevum',\\n\\t\\t\\tstockSymbol: 'RHOC',\\n\\t\\t\\tserver: 'rho-construction',\\n\\t\\t\\tcompany: 'Rho Construction',\\n\\t\\t\\tcompanyPositions: ['Business', 'Software']\\n\\t\\t},\\n\\t\\t'Alpha Enterprises': {\\n\\t\\t\\tlocation: 'Sector-12',\\n\\t\\t\\tstockSymbol: 'APHE',\\n\\t\\t\\tserver: 'alpha-ent',\\n\\t\\t\\tcompany: 'Alpha Enterprises',\\n\\t\\t\\tcompanyPositions: ['Business', 'Software Consultant', 'Software']\\n\\t\\t},\\n\\t\\t'SysCore Securities': {\\n\\t\\t\\tlocation: 'Volhaven',\\n\\t\\t\\tstockSymbol: 'SYSC',\\n\\t\\t\\tserver: 'syscore',\\n\\t\\t\\tcompany: 'SysCore Securities',\\n\\t\\t\\tcompanyPositions: ['IT', 'Software']\\n\\t\\t},\\n\\t\\t'CompuTek': {\\n\\t\\t\\tlocation: 'Volhaven',\\n\\t\\t\\tstockSymbol: 'CTK',\\n\\t\\t\\tserver: 'comptek',\\n\\t\\t\\tcompany: 'CompuTek',\\n\\t\\t\\tcompanyPositions: ['IT', 'Software']\\n\\t\\t},\\n\\t\\t'NetLink Technologies': {\\n\\t\\t\\tlocation: 'Aevum',\\n\\t\\t\\tstockSymbol: 'NTLK',\\n\\t\\t\\tserver: 'netlink',\\n\\t\\t\\tcompany: 'NetLink Technologies',\\n\\t\\t\\tcompanyPositions: ['IT', 'Software']\\n\\t\\t},\\n\\t\\t'Omega Software': {\\n\\t\\t\\tlocation: 'Ishima',\\n\\t\\t\\tstockSymbol: 'OMGA',\\n\\t\\t\\tserver: 'omega-net',\\n\\t\\t\\tcompany: 'Omega Software',\\n\\t\\t\\tcompanyPositions: ['IT', 'Software Consultant', 'Software']\\n\\t\\t},\\n\\t\\t'FoodNStuff': {\\n\\t\\t\\tlocation: 'Sector-12',\\n\\t\\t\\tstockSymbol: 'FNS',\\n\\t\\t\\tserver: 'foodnstuff',\\n\\t\\t\\tcompany: 'FoodNStuff',\\n\\t\\t\\tcompanyPositions: ['Employee', 'part-time Employee']\\n\\t\\t},\\n\\t\\t'Sigma Cosmetics': {stockSymbol: 'SGC', server: 'sigma-cosmetics'},\\n\\t\\t'Joe\\\\'s Guns': {\\n\\t\\t\\tlocation: 'Sector-12',\\n\\t\\t\\tstockSymbol: 'JGN',\\n\\t\\t\\tserver: 'joesguns',\\n\\t\\t\\tcompany: 'Joe\\\\'s Guns',\\n\\t\\t\\tcompanyPositions: ['Employee', 'part-time Employee']\\n\\t\\t},\\n\\t\\t'Catalyst Ventures': {stockSymbol: 'CTYS', server: 'catalyst'},\\n\\t\\t'Microdyne Technologies': {stockSymbol: 'MDYN', server: 'microdyne'},\\n\\t\\t'Titan Laboratories': {stockSymbol: 'TITN', server: 'titan-labs'},\\n\\t\\t'CyberSec': {server: 'CSEC', faction: 'CyberSec', factionWorkTypes: ['Hacking']},\\n\\t\\t'The Runners': {server: 'run4theh111z', faction: 'BitRunners', factionWorkTypes: ['Hacking']},\\n\\t\\t'Bachman & Associates': {\\n\\t\\t\\tlocation: 'Aevum',\\n\\t\\t\\tserver: 'b-and-a',\\n\\t\\t\\tfaction: 'Bachman & Associates',\\n\\t\\t\\tcompany: 'Bachman & Associates',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'Fulcrum Secret Technologies': {\\n\\t\\t\\tserver: 'fulcrumassets',\\n\\t\\t\\tfaction: 'Fulcrum Secret Technologies',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Security']\\n\\t\\t},\\n\\t\\t'NiteSec': {server: 'avmnite-02h', faction: 'NiteSec', factionWorkTypes: ['Hacking'], gang: true},\\n\\t\\t'I.I.I.I': {server: 'I.I.I.I', faction: 'The Black Hand', factionWorkTypes: ['Hacking', 'Field'], gang: true},\\n\\t\\t'Slum Snakes': {faction: 'Slum Snakes', factionWorkTypes: ['Field', 'Security'], gang: true},\\n\\t\\t'Tetrads': {faction: 'Tetrads', factionWorkTypes: ['Field', 'Security'], gang: true},\\n\\t\\t'Speakers for the Dead': {\\n\\t\\t\\tfaction: 'Speakers for the Dead',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tgang: true\\n\\t\\t},\\n\\t\\t'.': {server: '.', faction: 'The Dark Army', factionWorkTypes: ['Hacking', 'Field'], gang: true},\\n\\t\\t'The Syndicate': {faction: 'The Syndicate', factionWorkTypes: ['Hacking', 'Field', 'Security'], gang: true},\\n\\t\\t'Rothman University': {location: 'Sector-12', server: 'rothman-uni', university: 'Rothman University'},\\n\\t\\t'ZB Institute of Technology': {\\n\\t\\t\\tlocation: 'Volhaven',\\n\\t\\t\\tserver: 'zb-institute',\\n\\t\\t\\tuniversity: 'ZB Institute of Technology'\\n\\t\\t},\\n\\t\\t'Summit University': {location: 'Aevum', server: 'summit-university', university: 'Summit University'},\\n\\t\\t'Crush Fitness': {location: 'Aevum', server: 'crush-fitness', gym: 'Crush Fitness Gym'},\\n\\t\\t'Millenium Fitness Network': {location: 'Volhaven', server: 'millenium-fitness', gym: 'Millenium Fitness Gym'},\\n\\t\\t'Iron Gym Network': {location: 'Sector-12', server: 'iron-gym', gym: 'Iron Gym'},\\n\\t\\t'Powerhouse Fitness': {location: 'Sector-12', server: 'powerhouse-fitness', gym: 'Powerhouse Gym'},\\n\\t\\t'Snap Fitness': {location: 'Aevum', server: 'snap-fitness', gym: 'Snap Fitness Gym'},\\n\\t\\t'Silhouette': {faction: 'Silhouette', factionWorkTypes: ['Hacking', 'Field']},\\n\\t\\t'Tian Di Hui': {faction: 'Tian Di Hui', factionWorkTypes: ['Hacking', 'Security']},\\n\\t\\t'Netburners': {faction: 'Netburners', factionWorkTypes: ['Hacking']},\\n\\t\\t'Aevum': {\\n\\t\\t\\tlocation: 'Aevum',\\n\\t\\t\\tfaction: 'Aevum',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcity: true\\n\\t\\t},\\n\\t\\t'Sector-12': {\\n\\t\\t\\tlocation: 'Sector-12',\\n\\t\\t\\tfaction: 'Sector-12',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcity: true\\n\\t\\t},\\n\\t\\t'Chongqing': {\\n\\t\\t\\tlocation: 'Chongqing',\\n\\t\\t\\tfaction: 'Chongqing',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcity: true\\n\\t\\t},\\n\\t\\t'New Tokyo': {\\n\\t\\t\\tlocation: 'New Tokyo',\\n\\t\\t\\tfaction: 'New Tokyo',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcity: true\\n\\t\\t},\\n\\t\\t'Ishima': {\\n\\t\\t\\tlocation: 'Ishima',\\n\\t\\t\\tfaction: 'Ishima',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcity: true\\n\\t\\t},\\n\\t\\t'Volhaven': {\\n\\t\\t\\tlocation: 'Volhaven',\\n\\t\\t\\tfaction: 'Volhaven',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcity: true\\n\\t\\t},\\n\\t\\t'NWO': {\\n\\t\\t\\tlocation: 'Volhaven',\\n\\t\\t\\tserver: 'nwo',\\n\\t\\t\\tfaction: 'NWO',\\n\\t\\t\\tcompany: 'NWO',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'Delta One': {\\n\\t\\t\\tlocation: 'Sector-12',\\n\\t\\t\\tserver: 'deltaone',\\n\\t\\t\\tcompany: 'Delta One',\\n\\t\\t\\tcompanyPositions: ['IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'Central Intelligence Agency': {\\n\\t\\t\\tlocation: 'Sector-12',\\n\\t\\t\\tcompany: 'Central Intelligence Agency',\\n\\t\\t\\tcompanyPositions: ['Agent', 'IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'National Security Agency': {\\n\\t\\t\\tlocation: 'Sector-12',\\n\\t\\t\\tcompany: 'National Security Agency',\\n\\t\\t\\tcompanyPositions: ['Agent', 'IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'Aevum Police Headquarters': {\\n\\t\\t\\tlocation: 'Aevum', server: 'aevum-police',\\n\\t\\t\\tcompany: 'Aevum Police Headquarters',\\n\\t\\t\\tcompanyPositions: ['Security', 'Software']\\n\\t\\t},\\n\\t\\t'Carmichael Security': {\\n\\t\\t\\tlocation: 'Sector-12',\\n\\t\\t\\tcompany: 'Carmichael Security',\\n\\t\\t\\tcompanyPositions: ['Agent', 'IT', 'Security', 'Software Consultant', 'Software']\\n\\t\\t},\\n\\t\\t'Galactic Cybersystems': {\\n\\t\\t\\tlocation: 'Aevum', server: 'galactic-cyber',\\n\\t\\t\\tcompany: 'Galactic Cybersystems',\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Software Consultant', 'Software']\\n\\t\\t},\\n\\t\\t'Noodle Bar': {\\n\\t\\t\\tlocation: 'New Tokyo', server: 'n00dles',\\n\\t\\t\\tcompany: 'Noodle Bar',\\n\\t\\t\\tcompanyPositions: ['Waiter', 'part-time Waiter']\\n\\t\\t},\\n\\t\\t'InfoComm': {server: 'infocomm'},\\n\\t\\t'Taiyang Digital': {server: 'taiyang-digital'},\\n\\t\\t'ZB Defense Industries': {server: 'zb-def'},\\n\\t\\t'Applied Energetics': {server: 'applied-energetics'},\\n\\t\\t'Zeus Medical': {server: 'zeus-med'},\\n\\t\\t'UnitaLife Group': {server: 'unitalife'},\\n\\t\\t'The Hub': {server: 'the-hub'},\\n\\t\\t'Johnson Orthopedics': {server: 'johnson-ortho'},\\n\\t\\t'ZER0 Nightclub': {server: 'zero'},\\n\\t\\t'Nectar Nightclub Network': {server: 'nectar-net'},\\n\\t\\t'Neo Nightclub Network': {server: 'neo-net'},\\n\\t\\t'Silver Helix': {server: 'silver-helix'},\\n\\t\\t'HongFang Teahouse': {server: 'hong-fang-tea'},\\n\\t\\t'HaraKiri Sushi Bar Network': {server: 'harakiri-sushi'},\\n\\t\\t'Phantasy Club': {server: 'phantasy'},\\n\\t\\t'Max Hardware Store': {server: 'max-hardware'},\\n\\t\\t'Helios': {server: 'The-Cave'},\\n\\t\\t'w0r1d_d43m0n': {server: 'w0r1d_d43m0n'},\\n\\t\\t'The Covenant': {faction: 'The Covenant', factionWorkTypes: ['Hacking', 'Field']},\\n\\t\\t'Daedalus': {faction: 'Daedalus', factionWorkTypes: ['Hacking', 'Field']},\\n\\t\\t'Illuminati': {faction: 'Illuminati', factionWorkTypes: ['Hacking', 'Field']},\\n\\t\\t'Iker Molina Casino': {location: 'Aevum'},\\n\\t\\t'Sector-12 City Hall': {location: 'Sector-12'},\\n\\t\\t'Arcade': {location: 'New Tokyo'},\\n\\t\\t'0x6C1': {location: 'Ishima'},\\n\\t\\t'Hospital': {general: true},\\n\\t\\t'The Slums': {general: true},\\n\\t\\t'Travel Agency': {general: true},\\n\\t\\t'World Stock Exchange': {general: true},\\n\\t\\t'Bladeburners': {location: 'Sector-12', faction: 'Bladeburners'},\\n\\t\\t'Church of the Machine God': {location: 'Chongqing', faction: 'Church of the Machine God'}\\n\\t};\\n}\\n\\n/**\\n *\\n * @return {string[]}\\n */\\nexport function getFactions() {\\n\\treturn Object.values(getOrganisations()).filter(v => v.faction).map(v => v.faction);\\n}\\n\\n/**\\n *\\n * @return {string[]}\\n */\\nexport function getCompanies() {\\n\\treturn Object.values(getOrganisations()).filter(v => v.company).map(v => v.company);\\n}\\n\\n/**\\n *\\n * @return {string[]}\\n */\\nexport function getGangs() {\\n\\treturn Object.values(getOrganisations()).filter(v => v.gang).map(v => v.faction);\\n}\\n\\n/**\\n *\\n * @returns {string[]}\\n */\\nexport function getCities() {\\n\\treturn Object.values(getOrganisations()).filter(v => v.city).map(v => v.location);\\n}\\n\\n/**\\n *\\n * @return {string[]}\\n */\\nexport function getGyms() {\\n\\treturn Object.values(getOrganisations()).filter(v => v.gym).map(v => v.gym);\\n}\\n\\n/**\\n *\\n * @return {string[]}\\n */\\nexport function getUniversities() {\\n\\treturn Object.values(getOrganisations()).filter(v => v.university).map(v => v.university);\\n}\\n\\n/**\\n *\\n * @param {string} faction\\n * @returns {string[]}\\n */\\nexport function getFactionWorktypes(faction) {\\n\\treturn Object.values(getOrganisations()).find(v => v.faction === faction).factionWorkTypes;\\n}\\n\\n/**\\n *\\n * @param {string} faction\\n * @returns {string[]}\\n */\\nexport function getCompanyPositions(company) {\\n\\treturn Object.values(getOrganisations()).find(v => v.company === company).companyPositions;\\n}\\n\\n/**\\n *\\n * @param {string} symbol\\n * @returns {string}\\n */\\nexport function symbolToServer(symbol) {\\n\\tfor (const v of Object.values(getOrganisations())) if (v.stockSymbol === symbol) return v.server;\\n}\\n\\n/**\\n *\\n * @param {string} gym\\n * @return {string}\\n */\\nexport function getGymLocation(gym) {\\n\\tfor (const v of Object.values(getOrganisations())) if (v.gym === gym) return v.location;\\n}\\n\\n/**\\n *\\n * @param {string} university\\n * @return {string}\\n */\\nexport function getUniversityLocation(university) {\\n\\tfor (const v of Object.values(getOrganisations())) if (v.university === university) return v.location;\\n}\\n\\n/**\\n *\\n * @return {string[]}\\n */\\nexport function getCrimes() {\\n\\treturn ['shoplift', 'rob', 'mug', 'larceny', 'drugs', 'bond', 'traffic', 'homicide', 'grand', 'kidnap',\\n\\t\\t'assassinate', 'heist'];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} minimumRam\\n */\\nexport function deployBatchers(ns, minimumRam = 2 ** 14) {\\n\\tconst scripts = getScripts();\\n\\tconst servers = getAccessibleServers(ns);\\n\\tconst hackables = getOptimalHackable(ns, servers);\\n\\t// filter and sort servers according to RAM\\n\\tconst hosts = servers.filter(server => ns.getServerMaxRam(server) >= minimumRam).sort((a, b) => ns.getServerMaxRam(b) - ns.getServerMaxRam(a));\\n\\t// Deploy batchers\\n\\tfor (let i = 0; i < Math.min(hosts.length, hackables.length); i++) {\\n\\t\\tif (!ns.isRunning(scripts.batcher, hosts[i], hackables[i])) {\\n\\t\\t\\tns.scriptKill(scripts.batcher, hosts[i]);\\n\\t\\t\\tns.exec(scripts.batcher, hosts[i], 1, hackables[i]);\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n */\\nexport function manageAndHack(ns) {\\n\\tconst scripts = getScripts();\\n\\tconst servers = getAccessibleServers(ns);\\n\\tconst hackables = getOptimalHackable(ns, servers);\\n\\tconst [freeRams, filteredHackables] = getFreeRams(ns, servers, hackables);\\n\\tconst hackstates = getHackStates(ns, servers, filteredHackables);\\n\\tfor (const target of filteredHackables) {\\n\\t\\tconst money = ns.getServerMoneyAvailable(target);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\t\\tconst sec = ns.getServerSecurityLevel(target);\\n\\t\\tconst secDiff = sec - minSec;\\n\\t\\tif (secDiff > 0) {\\n\\t\\t\\tconst threads = Math.ceil(secDiff * 20) - hackstates.get(target).weaken;\\n\\t\\t\\tif (threads > 0 && !findPlaceToRun(ns, scripts.weaken, threads, freeRams, target)) return;\\n\\t\\t}\\n\\t\\tlet moneyPercent = money / maxMoney;\\n\\t\\tif (moneyPercent === 0) moneyPercent = 0.1;\\n\\t\\tif (moneyPercent < 0.9) {\\n\\t\\t\\tconst threads = Math.ceil(ns.growthAnalyze(target, 1 / moneyPercent)) - hackstates.get(target).grow;\\n\\t\\t\\tif (threads > 0 && !findPlaceToRun(ns, scripts.grow, threads, freeRams, target)) return;\\n\\t\\t}\\n\\t\\tif (moneyPercent > 0.75 && secDiff < 50) {\\n\\t\\t\\tlet threads = Math.floor(ns.hackAnalyzeThreads(target, money - (0.4 * maxMoney))) - hackstates.get(target).hack;\\n\\t\\t\\tif (threads > 0 && !findPlaceToRun(ns, scripts.hack, threads, freeRams, target)) return;\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} servers\\n * @param {string[]} hackables\\n * @returns {Object<number, number, number>}\\n */\\nfunction getHackStates(ns, servers, hackables) {\\n\\tconst scripts = getScripts();\\n\\tconst hackstates = new Map();\\n\\tfor (let server of servers.values()) {\\n\\t\\tfor (let hackable of hackables.values()) {\\n\\t\\t\\tlet weakenScript = ns.getRunningScript(scripts.weaken, server, hackable);\\n\\t\\t\\tlet growScript = ns.getRunningScript(scripts.grow, server, hackable);\\n\\t\\t\\tlet hackScript = ns.getRunningScript(scripts.hack, server, hackable);\\n\\t\\t\\tif (hackstates.has(hackable)) {\\n\\t\\t\\t\\thackstates.get(hackable).weaken += !weakenScript ? 0 : weakenScript.threads;\\n\\t\\t\\t\\thackstates.get(hackable).grow += !growScript ? 0 : growScript.threads;\\n\\t\\t\\t\\thackstates.get(hackable).hack += !hackScript ? 0 : hackScript.threads;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\thackstates.set(hackable, {\\n\\t\\t\\t\\t\\tweaken: !weakenScript ? 0 : weakenScript.threads,\\n\\t\\t\\t\\t\\tgrow: !growScript ? 0 : growScript.threads,\\n\\t\\t\\t\\t\\thack: !hackScript ? 0 : hackScript.threads\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn hackstates;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n */\\nexport function updateOverview(ns) {\\n\\tconst doc = eval('document');\\n\\tconst hook0 = doc.getElementById('overview-extra-hook-0');\\n\\tconst hook1 = doc.getElementById('overview-extra-hook-1');\\n\\ttry {\\n\\t\\tconst headers = [];\\n\\t\\tconst values = [];\\n\\t\\theaders.push(`Income\\\\u00A0`);\\n\\t\\tvalues.push(`${formatMoney(ns, ns.getScriptIncome()[0])}`);\\n\\t\\theaders.push(`Karma`);\\n\\t\\tvalues.push(`${formatNumber(ns, ns.heart.break())}`);\\n\\t\\thook0.innerText = headers.join('\\\\n');\\n\\t\\thook1.innerText = values.join('\\\\n');\\n\\t} catch (err) {\\n\\t\\tns.print(`ERROR: Update Skipped: ${String(err)}`);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} server\\n * @returns {null|string[]}\\n */\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} parent\\n * @param {string} host\\n * @param {string} server\\n * @param {string[]} route\\n * @returns {boolean}\\n */\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {string[]}\\n */\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) ns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\treturn serverList;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} server\\n * @returns {boolean}\\n */\\nexport function hackServer(ns, server) {\\n\\tif (ns.getServerRequiredHackingLevel(server) > ns.getHackingLevel()) return false;\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe', 'home')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe', 'home')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe', 'home')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe', 'home')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe', 'home')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {string[]}\\n */\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server) && !server.startsWith('hacknet-node-'));\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} script\\n * @param {number} threads\\n * @param {Object<string, number>[]} freeRams\\n * @param {*[]} scriptArgs\\n * @returns {boolean}\\n */\\nexport function findPlaceToRun(ns, script, threads, freeRams, ...scriptArgs) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThreads = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tconst host = freeRams[0].host;\\n\\t\\tconst ram = freeRams[0].freeRam;\\n\\t\\tif (ram < scriptRam) freeRams.shift();\\n\\t\\telse if (ram < scriptRam * remainingThreads) { // Put as many threads as we can\\n\\t\\t\\tlet threadsForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadsForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThreads -= threadsForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else { // All remaining threads were placed\\n\\t\\t\\tns.exec(script, host, remainingThreads, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThreads;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} servers\\n * @param {string[]} hackables\\n * @param {boolean} occupy\\n * @returns {Object<string, number>[] | [Object<string, number>[], string[]]}\\n */\\nexport function getFreeRams(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (const server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.batcher, server)) { // Check if we have a batcher running on this server\\n\\t\\t\\tconst process = ns.ps(server).find(s => s.filename === scripts.batcher); // Find the process of the batcher\\n\\t\\t\\tunhackables.push(process.args[0]); // Don't hack the target of the batcher\\n\\t\\t\\tif (!occupy) continue; // Check if we want to run scripts on the host\\n\\t\\t}\\n\\t\\tconst freeRam = getFreeRam(ns, server);\\n\\t\\tif (freeRam > 0) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tconst filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} server\\n * @return {number}\\n */\\nexport function getFreeRam(ns, server, ignoreNonManagerScripts = false) {\\n\\tconst data = readFromFile(ns, getPortNumbers().reservedRam);\\n\\tconst reservedRam = (data[server] ?? [{'ram': 0}]).reduce((a, b) => a + b.ram, 0);\\n\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server) - reservedRam;\\n\\tif (ignoreNonManagerScripts) {\\n\\t\\tconst managerScripts = getManagerScripts();\\n\\t\\tns.ps(server).forEach(p => {\\n\\t\\t\\tconst script = p.filename;\\n\\t\\t\\tif (!managerScripts.includes(script)) freeRam += ns.getScriptRam(script, server) * p.threads;\\n\\t\\t});\\n\\t}\\n\\treturn freeRam;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} servers\\n * @param {number} cores\\n * @returns {string[]}\\n */\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores)[0] - targetCost(ns, a, cores)[0]);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} target\\n * @param {number} cores\\n * @param {number} hackPercent\\n * @param {number} freeRam\\n * @returns {[number, number, number]}\\n */\\nexport function targetCost(ns, target, cores = 1, hackPercent = 0.5, freeRam = 2 ** 15) {\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\n\\t// RAM calculations\\n\\n\\t// Hack threads per hack percent\\n\\tconst hackThreads = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread\\n\\tconst weakenThreadsAfterHack = weakenThreadsPerHackThread * hackThreads;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed\\n\\tconst growThreads = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsAfterGrow = weakenThreadsPerGrowThread * growThreads;\\n\\t// Cycle RAM\\n\\tconst cycleRam = hackThreads * hackRam + growThreads * growRam + (weakenThreadsAfterHack + weakenThreadsAfterGrow) * weakenRam;\\n\\t// Number of cycles in one cycle group\\n\\tconst cycleCount = Math.floor(freeRam / cycleRam);\\n\\t// Group RAM\\n\\tconst groupRam = cycleRam * cycleCount;\\n\\n\\t// Stolen money calculations\\n\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per cycle\\n\\tconst averageMoneyPerCycle = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per group\\n\\tconst averageMoneyPerGroup = averageMoneyPerCycle * cycleCount;\\n\\n\\t// Time taken calculations\\n\\n\\t// Time taken for weaken\\n\\tconst weakenTime = form.weakenTime(server, player);\\n\\t// Time taken from one cycle to the next\\n\\tconst cycleDelay = weakenTime / cycleCount;\\n\\t// Time taken from one group to the next\\n\\tconst groupDelay = cycleDelay * cycleCount; // equivalent to weaken time\\n\\n\\t// Cost function calculations\\n\\n\\t// Average Money per unit Ram per unit time\\n\\tconst averageMoneyPerRamPerTime = averageMoneyPerGroup / (2 * groupDelay * groupRam);\\n\\t// Average money stolen per unit Ram\\n\\tconst averageMoneyPerRam = averageMoneyPerRamPerTime * (2 * groupDelay);\\n\\t// Average money stolen per unit time\\n\\tconst averageMoneyPerTime = averageMoneyPerGroup * groupRam;\\n\\n\\t// Cost\\n\\treturn [averageMoneyPerRamPerTime, averageMoneyPerRam, averageMoneyPerTime];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} server\\n * @returns {number}\\n */\\nexport function altTargetCost(ns, server) { // Doesn't use Formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\n/**\\n *\\n * @returns {Object<string, number>[]}\\n */\\nexport function getUsefulPrograms() {\\n\\treturn [\\n\\t\\t{name: 'BruteSSH.exe', level: 50},\\n\\t\\t{name: 'FTPCrack.exe', level: 100},\\n\\t\\t{name: 'relaySMTP.exe', level: 300},\\n\\t\\t{name: 'HTTPWorm.exe', level: 400},\\n\\t\\t{name: 'SQLInject.exe', level: 800}\\n\\t];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} server\\n * @returns {boolean}\\n */\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (const script of getPromptScripts()) if (ns.scriptRunning(script, server)) return true;\\n\\treturn false;\\n}\\n\\n/**\\n *\\n * @returns {string[]}\\n */\\nfunction getPromptScripts() {\\n\\tconst scripts = getScripts();\\n\\treturn [\\n\\t\\tscripts.joinFactions,\\n\\t\\tscripts.upgradeHomeRam,\\n\\t\\tscripts.upgradeHomeCores,\\n\\t\\t'/augmentations/install.js',\\n\\t\\t'/augmentations/purchase.js',\\n\\t\\t'/build/script-remover.js'\\n\\t];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} script\\n * @param {string} server\\n * @returns {boolean}\\n */\\nexport function enoughRam(ns, script, server = ns.getHostname(), threads = 1) {\\n\\treturn ns.getScriptRam(script, server) * threads <= getFreeRam(ns, server);\\n}\\n\\n/**\\n *\\n * @returns {Object<number>}\\n */\\nexport function getPortNumbers() {\\n\\treturn {\\n\\t\\treservedRam: 1,\\n\\t\\tgang: 2,\\n\\t\\tcorp: 3,\\n\\t\\taugmentations: 4,\\n\\t\\thack: 5,\\n\\t\\tbladeburner: 7,\\n\\t\\tstock: 8,\\n\\t\\thacknet: 9,\\n\\t\\tsleeve: 10,\\n\\t\\tstanek: 13\\n\\t};\\n}\\n\\n/**\\n *\\n * @param {number} portNumber\\n * @returns {Object<*>}\\n */\\nexport function defaultPortData(portNumber) {\\n\\tswitch (portNumber) {\\n\\t\\tcase 1:\\n\\t\\t\\treturn {'home': [{'ram': 64, 'server': 'DEF', 'pid': 'DEF'}]};\\n\\t\\tcase 2:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 3:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 4:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 5:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 6:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 7:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 8:\\n\\t\\t\\treturn {long: [], short: []};\\n\\t\\tcase 9:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 10:\\n\\t\\t\\treturn Object.fromEntries(Array.from({length: 8}, (_, i) =>\\n\\t\\t\\t\\t[i, {\\n\\t\\t\\t\\t\\tautopilot: true,\\n\\t\\t\\t\\t\\tusefulCombat: false,\\n\\t\\t\\t\\t\\tusefulHacking: false,\\n\\t\\t\\t\\t\\tusefulFaction: false,\\n\\t\\t\\t\\t\\tusefulCompany: false\\n\\t\\t\\t\\t}]));\\n\\t\\tcase 11:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 12:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 13:\\n\\t\\t\\treturn {pattern: 'starter', maxCharges: 50};\\n\\t\\tcase 14:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 15:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 16:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 17:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 18:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 19:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 20:\\n\\t\\t\\treturn undefined;\\n\\t\\tdefault:\\n\\t\\t\\tthrow new Error(`Trying to use an invalid port: ${portNumber}. Only ports 1-20 are valid.`);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function initData(ns) {\\n\\tfor (let i = 1; i <= 20; i++) {\\n\\t\\tif (!ns.fileExists(`/data/${i}.txt`)) await writeToFile(ns, i, defaultPortData(i));\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} portNumber\\n * @return {Promise<void>}\\n */\\nexport async function resetData(ns, portNumber) {\\n\\tawait writeToFile(ns, portNumber, defaultPortData(portNumber));\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} portNumber\\n * @param {boolean} write\\n * @param {boolean} clear\\n * @returns {Object<*>}\\n */\\nexport function getDataFromPort(ns, portNumber, write = true, clear = true) {\\n\\tconst port = ns.getPortHandle(portNumber);\\n\\tconst data = port.empty() ? defaultPortData(portNumber) : port.read();\\n\\tif (clear) port.clear();\\n\\tif (write) port.write(data);\\n\\treturn data;\\n}\\n\\n/**\\n *\\n * @param {number} portNumber\\n * @returns {string}\\n */\\nexport function getFileHandle(portNumber) {\\n\\treturn `/data/${portNumber}.txt`;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} handle\\n * @param {*} data\\n * @param {string} mode\\n */\\nexport async function writeToFile(ns, portNumber, data, mode = 'w') {\\n\\tif (typeof data !== 'string') data = JSON.stringify(data);\\n\\tawait ns.write(getFileHandle(portNumber), data, mode);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} portNumber\\n * @param {boolean} saveToFile\\n * @param {string} mode\\n * @returns {Object<*>}\\n */\\nexport function readFromFile(ns, portNumber) {\\n\\tconst data = ns.read(getFileHandle(portNumber));\\n\\treturn data ? JSON.parse(data) : defaultPortData(portNumber);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} portNumber\\n * @param {Object<*>} data\\n * @param {string} mode\\n * @returns {Promise<void>}\\n */\\nexport async function modifyFile(ns, portNumber, dataToModify, mode = 'w') {\\n\\tconst data = readFromFile(ns, portNumber);\\n\\tconst updatedData = recursiveModify(data, dataToModify);\\n\\tawait writeToFile(ns, portNumber, updatedData, mode);\\n}\\n\\n/**\\n *\\n * @param {Object<*>} data\\n * @param {Object<*>} dataToModify\\n * @returns {Object<*>}\\n */\\nfunction recursiveModify(data, dataToModify) {\\n\\tfor (const [key, val] of Object.entries(dataToModify)) {\\n\\t\\tif (typeof val === 'object' && !Array.isArray(val) && data[key]) {\\n\\t\\t\\tconst _data = data[key];\\n\\t\\t\\trecursiveModify(_data, val);\\n\\t\\t\\tdata[key] = _data;\\n\\t\\t} else data[key] = val;\\n\\t}\\n\\treturn data;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} server\\n * @param {ram} number\\n * @returns {Promise<void>}\\n */\\nexport async function reserveRam(ns, server, ram) {\\n\\tconst portNumber = getPortNumbers().reservedRam;\\n\\tconst data = readFromFile(ns, portNumber);\\n\\tconst updatedData = data[server];\\n\\tupdatedData.push({'ram': ram, 'server': ns.getRunningScript().server, 'pid': ns.getRunningScript().pid});\\n\\tconst dataToModify = {[server]: updatedData};\\n\\tawait modifyFile(ns, portNumber, dataToModify);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} server\\n * @returns {Promise<void>}\\n */\\nexport async function unreserveRam(ns, server) {\\n\\tconst portNumber = getPortNumbers().reservedRam;\\n\\tconst scriptHost = ns.getRunningScript().server;\\n\\tconst pid = ns.getRunningScript().pid;\\n\\tconst data = readFromFile(ns, portNumber);\\n\\tconst updatedData = data[server].filter(e => e.server !== scriptHost || e.pid !== pid);\\n\\tconst dataToModify = {[server]: updatedData};\\n\\tawait modifyFile(ns, portNumber, dataToModify);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function updateReservedRam(ns) {\\n\\tconst portNumber = getPortNumbers().reservedRam;\\n\\tconst data = readFromFile(ns, portNumber);\\n\\tconst updatedData = {};\\n\\tObject.entries(data).forEach(([k, v]) => updatedData[k] = v.filter(e => e.pid === 'DEF' || ns.ps(e.server).some(s => s.pid === e.pid)));\\n\\tawait writeToFile(ns, portNumber, updatedData);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} n\\n * @return {string}\\n */\\nexport function formatNumber(ns, n) {\\n\\treturn isNaN(n) ? 'NaN' : ns.nFormat(n, '0.000a');\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} n\\n * @return {string}\\n */\\nexport function formatMoney(ns, n) {\\n\\treturn isNaN(n) ? 'NaN' : ns.nFormat(n, '$0.000a');\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} b\\n * @return {string}\\n */\\nexport function formatBinary(ns, b) {\\n\\treturn isNaN(b) ? 'NaN' : ns.nFormat(b, '0.00b');\\n}\\n\\n/**\\n *\\n * @param {number} n\\n * @param {number} round\\n * @return {string}\\n */\\nexport function formatPercentage(n, round = 2) {\\n\\treturn isNaN(n) ? 'NaN' : `${n.toFixed(round)}%`;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} t\\n * @param {boolean} milliPrecision\\n * @return {string}\\n */\\nexport function formatTime(ns, t, milliPrecision = false) {\\n\\treturn isNaN(t) ? 'NaN' : ns.tFormat(t, milliPrecision);\\n}\\n\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":27.8,\"server\":\"home\",\"moduleSequenceNumber\":30067,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeCores\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getFactionWorktypes} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tlet factions = ns.getPlayer().factions.filter(f => f !== 'Church of the Machine God' && f !== 'Bladeburner');\\n\\t\\tif (ns.gang.inGang()) factions = factions.filter(f => ns.gang.getGangInformation().faction !== f);\\n\\t\\tconst faction = await ns.prompt(`Work for faction?`, {type: 'select', choices: ['None', ...factions]});\\n\\t\\tif (faction === 'None') break;\\n\\t\\tconst worktype = await ns.prompt(`Type of Work?`, {type: 'select', choices: getFactionWorktypes(faction)});\\n\\t\\tconst rep = Number(await ns.prompt(`Work until how much reputation? (Leave empty to work indefinitely)`, {type: 'text'}));\\n\\t\\tif (!rep) {\\n\\t\\t\\tns.workForFaction(faction, worktype, ns.isFocused());\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\twhile (ns.getFactionRep(faction) < rep) {\\n\\t\\t\\tns.workForFaction(faction, worktype, ns.isFocused());\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/factions/work.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///dcd3a641-67d7-4717-8239-3565e4e123e8\",\"moduleSequenceNumber\":63911},{\"filename\":\"/factions/work.js\",\"url\":\"blob:file:///c5c6252b-8c46-48e4-9e69-4441e662ddc2\",\"moduleSequenceNumber\":73536}],\"dependents\":[],\"ramUsage\":9.2,\"server\":\"home\",\"moduleSequenceNumber\":30068,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.isFocused\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tfor (let faction of ns.args) {\\n\\t\\tif (await ns.prompt(`Join ${faction}?`)) ns.joinFaction(faction);\\n\\t}\\n}\",\"filename\":\"/factions/join-factions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/factions/join-factions.js\",\"url\":\"blob:file:///676a015a-cbbf-4d07-bcce-06e48ff393f4\",\"moduleSequenceNumber\":27170}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":30069,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {copyScriptsToAll, findPlaceToRun, getAccessibleServers, getFreeRams, getScripts} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tawait copyScriptsToAll(ns);\\n\\tconst threads = Number.MAX_SAFE_INTEGER;\\n\\tconst scripts = getScripts();\\n\\tlet i = 0;\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\tconst servers = getAccessibleServers(ns);\\n\\t\\tconst freeRams = getFreeRams(ns, servers);\\n\\t\\tfindPlaceToRun(ns, scripts.share, threads, freeRams, i);\\n\\t\\ti++;\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"/factions/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ad0b64d3-f5d5-4bb8-8484-c9324a0b7f23\",\"moduleSequenceNumber\":602226},{\"filename\":\"/factions/share.js\",\"url\":\"blob:file:///bf6a5a6a-b132-4607-a542-43de49de92c9\",\"moduleSequenceNumber\":620342}],\"dependents\":[],\"ramUsage\":12.2,\"server\":\"home\",\"moduleSequenceNumber\":30070,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getCrimes} from '/utils.js';\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, options) {\\n\\treturn [...getCrimes()];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\tns.tail(); // Necessary to exit script\\n\\t\\tawait ns.sleep(ns.commitCrime(ns.args[0] ?? ns.getPlayer().strength < 50 ? 'mug' : 'homicide') + 100);\\n\\t}\\n}\",\"filename\":\"/crime/automate.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///bc51491a-7d35-4c40-a63f-cc8cfa842941\",\"moduleSequenceNumber\":13001},{\"filename\":\"/crime/automate.js\",\"url\":\"blob:file:///3fbcb862-ac4f-47e8-afba-fb05cb0ea067\",\"moduleSequenceNumber\":18759}],\"dependents\":[],\"ramUsage\":7.1,\"server\":\"home\",\"moduleSequenceNumber\":30071,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedVariable\\n\\nimport {getCompanies, getCompanyPositions} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tconst companies = getCompanies();\\n\\t\\tconst company = await ns.prompt(`Work for company?`, {type: 'select', choices: ['None', ...companies]});\\n\\t\\tif (company === 'None') break;\\n\\t\\tconst position = await ns.prompt(`Company position?`, {type: 'select', choices: getCompanyPositions(company)});\\n\\t\\tconst rep = Number(await ns.prompt(`Work until how much reputation? (Leave empty to work indefinitely)`, {type: 'text'}));\\n\\t\\tif (!rep) {\\n\\t\\t\\tns.applyToCompany(company, position);\\n\\t\\t\\tif (!ns.workForCompany(company, ns.isFocused())) throw new Error(`Could not work for company (Not enough qualifications?)`);\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\twhile (ns.getCompanyRep(company) < rep) {\\n\\t\\t\\tns.applyToCompany(company, position);\\n\\t\\t\\tif (!ns.workForCompany(company, ns.isFocused())) throw new Error(`Could not work for company (Not enough qualifications?)`);\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/company/work.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///45090513-891e-4f80-a123-21b9fe8cf62c\",\"moduleSequenceNumber\":520046},{\"filename\":\"/company/work.js\",\"url\":\"blob:file:///f0f6a470-a8e4-4da9-b08e-ebba7dafbaa9\",\"moduleSequenceNumber\":619906}],\"dependents\":[],\"ramUsage\":8.7,\"server\":\"home\",\"moduleSequenceNumber\":30072,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.applyToCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.workForCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.isFocused\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getCompanyRep\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst programs = ['ServerProfiler.exe', 'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe'];\\n\\tfor (const program of programs) {\\n\\t\\twhile (!ns.fileExists(program, 'home')) {\\n\\t\\t\\tns.createProgram(program, ns.isFocused());\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t\\tns.tprint(`${program} created`);\\n\\t}\\n}\",\"filename\":\"/player/create-programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/player/create-programs.js\",\"url\":\"blob:file:///b1f585e9-1380-48f2-b19f-7c09d3440d68\",\"moduleSequenceNumber\":13661}],\"dependents\":[],\"ramUsage\":6.8,\"server\":\"home\",\"moduleSequenceNumber\":30073,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.createProgram\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.isFocused\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedVariable\\n\\nimport {getGymLocation} from 'utils.js';\\n\\nlet level;\\nlet gym;\\n\\nconst argsSchema = [\\n\\t['str', false],\\n\\t['def', false],\\n\\t['dex', false],\\n\\t['agi', false],\\n\\t['all', false],\\n\\t['level', 100],\\n\\t['gym', 'Powerhouse Gym']\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, options) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst options = ns.flags(argsSchema);\\n\\tlevel = options.level;\\n\\tgym = options.gym;\\n\\tif (!ns.travelToCity(getGymLocation(gym))) throw new Error(`Could not travel to correct location`);\\n\\tif (options.str || options.all) await workOutStr(ns);\\n\\tif (options.def || options.all) await workOutDef(ns);\\n\\tif (options.dex || options.all) await workOutDex(ns);\\n\\tif (options.agi || options.all) await workOutAgi(ns);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @return {Promise<void>}\\n */\\nasync function workOutStr(ns) {\\n\\tns.gymWorkout(gym, 'str');\\n\\twhile (ns.getPlayer().strength < level) {\\n\\t\\tif (ns.getPlayer().className !== 'training your strength at a gym') break;\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @return {Promise<void>}\\n */\\nasync function workOutDef(ns) {\\n\\tns.gymWorkout(gym, 'def');\\n\\twhile (ns.getPlayer().defense < level) {\\n\\t\\tif (ns.getPlayer().className !== 'training your defense at a gym') break;\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @return {Promise<void>}\\n */\\nasync function workOutDex(ns) {\\n\\tns.gymWorkout(gym, 'dex');\\n\\twhile (ns.getPlayer().dexterity < level) {\\n\\t\\tif (ns.getPlayer().className !== 'training your dexterity at a gym') break;\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @return {Promise<void>}\\n */\\nasync function workOutAgi(ns) {\\n\\tns.gymWorkout(gym, 'agi');\\n\\twhile (ns.getPlayer().agility < level) {\\n\\t\\tif (ns.getPlayer().className !== 'training your agility at a gym') break;\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\",\"filename\":\"/player/gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///9e427069-0f41-4820-8241-3c959e5aea81\",\"moduleSequenceNumber\":798442},{\"filename\":\"/player/gym.js\",\"url\":\"blob:file:///94ddb5d0-dfc9-459e-92ac-4e3211479db4\",\"moduleSequenceNumber\":939356}],\"dependents\":[],\"ramUsage\":7.1,\"server\":\"home\",\"moduleSequenceNumber\":30074,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.gymWorkout\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedVariable\\n\\nimport {getUniversityLocation} from 'utils.js';\\n\\nlet level;\\nlet course;\\nlet university;\\n\\nconst argsSchema = [\\n\\t['university', 'ZB Institute of Technology'],\\n\\t['course', 'Leadership'],\\n\\t['level', 100]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, options) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst options = ns.flags(argsSchema);\\n\\tlevel = options.level;\\n\\tcourse = options.course;\\n\\tuniversity = options.university;\\n\\tns.travelToCity(getUniversityLocation(university));\\n\\tif (options.course === 'Computer Science' ||\\n\\t\\toptions.course === 'Data Structures' ||\\n\\t\\toptions.course === 'Networks' ||\\n\\t\\toptions.course === 'Algorithms') await studyHack(ns);\\n\\telse if (options.course === 'Management' ||\\n\\t\\toptions.course === 'Leadership') await studyCha(ns);\\n\\telse throw new Error(`Invalid course`);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @return {Promise<void>}\\n */\\nasync function studyHack(ns) {\\n\\tns.universityCourse(university, course);\\n\\twhile (ns.getPlayer().hacking < level) {\\n\\t\\tif (ns.getPlayer().workType !== 'Studying or Taking a class at university') break;\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @return {Promise<void>}\\n */\\nasync function studyCha(ns) {\\n\\tns.universityCourse(university, course);\\n\\twhile (ns.getPlayer().charisma < level) {\\n\\t\\tif (ns.getPlayer().workType !== 'Studying or Taking a class at university') break;\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\",\"filename\":\"/player/university.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.1,\"server\":\"home\",\"moduleSequenceNumber\":30075,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.universityCourse\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {formatMoney} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst cost = ns.getUpgradeHomeCoresCost();\\n\\tif (await ns.prompt(`Upgrade home Cores for ${formatMoney(ns, cost)}?`)) {\\n\\t\\tif (ns.upgradeHomeCores()) ns.tprint(`Home cores upgraded.`);\\n\\t\\telse ns.tprint(`Could not upgrade home cores.`);\\n\\t}\\n}\",\"filename\":\"/player/upgrade-home-cores.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///0fcd70e3-cf53-4306-8e55-475293c09ea6\",\"moduleSequenceNumber\":1549},{\"filename\":\"/player/upgrade-home-cores.js\",\"url\":\"blob:file:///5dc294fe-aff1-40b4-a0bd-78e35cf46a23\",\"moduleSequenceNumber\":93894}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":30076,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeCoresCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeCores\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {formatMoney} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst cost = ns.getUpgradeHomeRamCost();\\n\\tif (await ns.prompt(`Upgrade home RAM for ${formatMoney(ns, cost)}?`)) {\\n\\t\\tif (ns.upgradeHomeRam()) ns.tprint(`Home RAM upgraded.`);\\n\\t\\telse ns.tprint(`Could not upgrade home RAM.`);\\n\\t}\\n}\",\"filename\":\"/player/upgrade-home-ram.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ad70b65e-9e98-485a-8cfc-d89c409dc740\",\"moduleSequenceNumber\":1549},{\"filename\":\"/player/upgrade-home-ram.js\",\"url\":\"blob:file:///1265b784-9463-4489-b2ed-b82b888b96a3\",\"moduleSequenceNumber\":92186}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":30077,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getPortNumbers, readFromFile} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst [target, delay] = ns.args;\\n\\tconst data = readFromFile(ns, getPortNumbers().stock).long;\\n\\tconst stock = data.includes(target);\\n\\tif (delay) await ns.sleep(delay);\\n\\tawait ns.grow(target, {stock: stock});\\n}\",\"filename\":\"/daemons/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///78e652bc-ccff-47af-b45d-b452a0b1a9f1\",\"moduleSequenceNumber\":24391},{\"filename\":\"/daemons/grow.js\",\"url\":\"blob:file:///d3056e2d-d6d0-437b-8d7d-094d0365b920\",\"moduleSequenceNumber\":27084}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":30078,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getPortNumbers, readFromFile} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst [target, delay] = ns.args;\\n\\tconst data = readFromFile(ns, getPortNumbers().stock).short;\\n\\tconst stock = data.includes(target);\\n\\tif (delay) await ns.sleep(delay);\\n\\tawait ns.hack(target, {stock: stock});\\n}\",\"filename\":\"/daemons/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///a3922d52-bcfb-4f5f-a827-4d9c8c17d40b\",\"moduleSequenceNumber\":1549},{\"filename\":\"/daemons/hack.js\",\"url\":\"blob:file:///d100d379-058a-4c84-b7e3-9ce1a5d3fa3a\",\"moduleSequenceNumber\":47772}],\"dependents\":[],\"ramUsage\":4.2,\"server\":\"home\",\"moduleSequenceNumber\":30079,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst [target, delay] = ns.args;\\n\\tif (delay) await ns.sleep(delay);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"/daemons/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/daemons/weaken.js\",\"url\":\"blob:file:///3604b7f3-3614-4e33-8c3c-c91e047c7113\",\"moduleSequenceNumber\":27085}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":30080,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/daemons/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/daemons/share.js\",\"url\":\"blob:file:///aae7a637-e7b1-4d0f-9bf3-40ca268de7bf\",\"moduleSequenceNumber\":620343}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":30081,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tacceptStanek(ns);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n */\\nexport function acceptStanek(ns) {\\n\\tns.travelToCity('Chongqing');\\n\\tns.goToLocation('Church of the Machine God');\\n\\t[...eval('document').getElementsByTagName('*')].find(e => e.innerText === 'Accept Stanek\\\\'s Gift').click();\\n}\",\"filename\":\"/stanek/accept.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/stanek/accept.js\",\"url\":\"blob:file:///4b89aef7-6ebe-45a5-9119-4f7c2ecd16c9\",\"moduleSequenceNumber\":1647355}],\"dependents\":[],\"ramUsage\":8.6,\"server\":\"home\",\"moduleSequenceNumber\":30082,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.goToLocation\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tawait ns.stanek.chargeFragment(ns.args[0], ns.args[1]);\\n}\",\"filename\":\"/daemons/charge.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/daemons/charge.js\",\"url\":\"blob:file:///c2427979-137d-4439-b04b-0497ebad0484\",\"moduleSequenceNumber\":580825}],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":30083,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.chargeFragment\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {formatMoney, getFactions} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst file = '/texts/augmentations-list.txt';\\n\\tconst factions = getFactions();\\n\\tawait ns.write(file, '', 'w');\\n\\tfor (const faction of factions) {\\n\\t\\tawait ns.write(file, `\\\\n\\\\n----- ${faction} -----\\\\n`, 'a');\\n\\t\\tconst augmentations = ns.getAugmentationsFromFaction(faction);\\n\\t\\tfor (const augmentation of augmentations) {\\n\\t\\t\\tif (augmentation !== 'NeuroFlux Governor') {\\n\\t\\t\\t\\tawait ns.write(file, `\\\\n--- ${augmentation} ---\\\\n`, 'a');\\n\\t\\t\\t\\tconst stats = Object.entries(ns.getAugmentationStats(augmentation));\\n\\t\\t\\t\\tif (stats.length > 0) for (const [stat, multiplier] of stats) await ns.write(file, `${stat}: ${multiplier}\\\\n`, 'a');\\n\\t\\t\\t\\telse await ns.write(file, `Special\\\\n`, 'a');\\n\\t\\t\\t\\tconst price = ns.getAugmentationPrice(augmentation);\\n\\t\\t\\t\\tconst repReq = ns.getAugmentationRepReq(augmentation);\\n\\t\\t\\t\\tconst prereq = ns.getAugmentationPrereq(augmentation);\\n\\t\\t\\t\\tawait ns.write(file, `Price: ${formatMoney(ns, price)}\\\\n`, 'a');\\n\\t\\t\\t\\tawait ns.write(file, `Rep: ${formatNumber(ns, repReq)}\\\\n`, 'a');\\n\\t\\t\\t\\tif (prereq.length > 0) await ns.write(file, `Prereq: ${prereq}\\\\n`, 'a');\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/augmentations/lister.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///5c14d4dc-eede-4061-8ee6-7cf78cbd9eec\",\"moduleSequenceNumber\":1458},{\"filename\":\"/augmentations/lister.js\",\"url\":\"blob:file:///b4926226-31e7-42f2-85e6-5992752345dd\",\"moduleSequenceNumber\":8478}],\"dependents\":[],\"ramUsage\":21.6,\"server\":\"home\",\"moduleSequenceNumber\":30084,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getScripts} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tif (await ns.prompt('Install augmentations?')) ns.installAugmentations(getScripts().cortex);\\n}\",\"filename\":\"/augmentations/install.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///e260ceff-faa6-4e07-94f6-93da2b8436e6\",\"moduleSequenceNumber\":10734},{\"filename\":\"/augmentations/install.js\",\"url\":\"blob:file:///b248e110-9cb2-4cf8-bbb5-051be5e4a16e\",\"moduleSequenceNumber\":24340}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":30085,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.installAugmentations\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedVariable\\n\\nimport {\\n\\tisUseful,\\n\\tisUsefulBladeburner,\\n\\tisUsefulCombat,\\n\\tisUsefulCompany,\\n\\tisUsefulCrime,\\n\\tisUsefulFaction,\\n\\tisUsefulFocus,\\n\\tisUsefulHacking,\\n\\tisUsefulHackingSkill,\\n\\tisUsefulHacknet,\\n\\tisUsefulPrograms\\n} from '/augmentations/utils.js';\\nimport {formatMoney, getFactions, getScripts} from '/utils.js';\\n\\nconst argsSchema = [\\n\\t['hacking', false],\\n\\t['combat', false],\\n\\t['crime', false],\\n\\t['company', false],\\n\\t['hacknet', false],\\n\\t['programs', false],\\n\\t['faction', false],\\n\\t['bladeburner', false],\\n\\t['focus', false],\\n\\t['hacking-skill', false],\\n\\t['all', false],\\n\\t['install', false]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, args) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst options = ns.flags(argsSchema);\\n\\tconst scripts = getScripts();\\n\\t// Check criteria for determining what augmentations are useful\\n\\tconst criteria = [];\\n\\tif (options.hacking || options.all) criteria.push(isUsefulHacking);\\n\\tif (options.combat || options.all) criteria.push(isUsefulCombat);\\n\\tif (options.crime || options.all) criteria.push(isUsefulCrime);\\n\\tif (options.company || options.all) criteria.push(isUsefulCompany);\\n\\tif (options.hacknet || options.all) criteria.push(isUsefulHacknet);\\n\\tif (options.programs || options.all) criteria.push(isUsefulPrograms);\\n\\tif (options.faction || options.all) criteria.push(isUsefulFaction);\\n\\tif (options.bladeburner || options.all) criteria.push(isUsefulBladeburner);\\n\\tif (options.focus || options.all) criteria.push(isUsefulFocus);\\n\\tif (options['hacking-skill'] || options.all) criteria.push(isUsefulHackingSkill);\\n\\t// Augmentation price increase\\n\\tconst sf11Level = ns.getOwnedSourceFiles().find(s => s.n === 11)?.lvl;\\n\\tlet mult = 0;\\n\\tif (sf11Level) for (let i = 0; i < sf11Level; i++) mult += 4 / Math.pow(2, i);\\n\\tconst inc = 1.9 * (1 - mult / 100);\\n\\t// Get all useful and purchasable augmentations\\n\\tlet augmentations = [];\\n\\tfor (const faction of getFactions()) {\\n\\t\\tfor (const aug of ns.getAugmentationsFromFaction(faction)) {\\n\\t\\t\\tif (isUseful(ns, criteria, aug) && isPurchasable(ns, faction, aug, augmentations)) {\\n\\t\\t\\t\\taugmentations.push(\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tfaction: faction,\\n\\t\\t\\t\\t\\t\\tname: aug,\\n\\t\\t\\t\\t\\t\\tprice: ns.getAugmentationPrice(aug)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Sell stocks before buying augmentations\\n\\tif (ns.getPlayer().hasTixApiAccess) { // Check if player has TIX API\\n\\t\\t// Check if player has any stocks\\n\\t\\tlet stocks = false;\\n\\t\\tfor (let sym of ns.stock.getSymbols()) {\\n\\t\\t\\tlet pos = ns.stock.getPosition(sym);\\n\\t\\t\\tif (pos[0] > 0 || pos[2] > 0) {\\n\\t\\t\\t\\tstocks = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Ask if player wants to sell stocks\\n\\t\\tif (stocks && await ns.prompt(`Do you want to sell all shares?`)) ns.exec(scripts.stock, 'home', 1, '--liquidate');\\n\\t}\\n\\t// Sell hashes before buying augmentations\\n\\tif (ns.getPlayer().bitNodeN === 9 || ns.getOwnedSourceFiles().some(s => s.n === 9)) { // Check if player has hacknet servers\\n\\t\\t// Check if player has any hashes\\n\\t\\tif (ns.hacknet.numHashes() > 0 && await ns.prompt(`Do you want to sell all hashes?`)) {\\n\\t\\t\\t// Kill hacknet manager\\n\\t\\t\\tns.scriptKill(scripts.hacknet, 'home');\\n\\t\\t\\twhile (ns.hacknet.numHashes() > 4) {\\n\\t\\t\\t\\t// Sell all hashes\\n\\t\\t\\t\\tns.hacknet.spendHashes('Sell for Money');\\n\\t\\t\\t\\tawait ns.sleep(1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Check if there are any purchasable augmentations\\n\\tif (augmentations.length > 0) {\\n\\t\\t// Sort augmentations according to their price\\n\\t\\taugmentations.sort((a, b) => {\\n\\t\\t\\tif (b.price > a.price) return 1;\\n\\t\\t\\telse if (a.price > b.price) return -1;\\n\\t\\t\\telse return ns.getAugmentationPrereq(b.name).length - ns.getAugmentationPrereq(a.name).length;\\n\\t\\t});\\n\\t\\t// Fit in augs before their prereqs\\n\\t\\tconst tempAugs = [];\\n\\t\\tconst coveredIndices = [];\\n\\t\\tfor (let [i, aug] of augmentations.entries()) {\\n\\t\\t\\tif (coveredIndices.includes(i)) continue;\\n\\t\\t\\tlet prereq = ns.getAugmentationPrereq(aug.name);\\n\\t\\t\\tif (prereq.length > 0) recursiveFit(ns, augmentations, tempAugs, coveredIndices, prereq[0]);\\n\\t\\t\\ttempAugs.push(aug);\\n\\t\\t}\\n\\t\\t// Deep copy augmentations\\n\\t\\taugmentations = JSON.parse(JSON.stringify(tempAugs));\\n\\t\\t// Calculate price of augs\\n\\t\\tlet stringAugs = '';\\n\\t\\tlet totalPrice = 0;\\n\\t\\tfor (let [i, aug] of augmentations.entries()) {\\n\\t\\t\\tlet updatedAugPrice = aug.price * inc ** i;\\n\\t\\t\\tstringAugs += `${aug.name}: ${formatMoney(ns, aug.price)} (${formatMoney(ns, updatedAugPrice)}). `;\\n\\t\\t\\ttotalPrice += updatedAugPrice;\\n\\t\\t}\\n\\t\\t// Prompt user for buying augmentations\\n\\t\\tif (await ns.prompt(`${stringAugs}Buy augmentations for ${formatMoney(ns, totalPrice)}?`)) {\\n\\t\\t\\tfor (let aug of augmentations) {\\n\\t\\t\\t\\tif (ns.purchaseAugmentation(aug.faction, aug.name)) {\\n\\t\\t\\t\\t\\tns.tprint(`Purchased ${aug.name} from ${aug.faction} for ${formatMoney(ns, aug.price)}`);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.tprint(`Could not purchase ${aug.name} from ${aug.faction}`);\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Prompt user for purchasing NeuroFlux Governor\\n\\tif (await ns.prompt(`Purchase NeuroFlux Governor levels?`)) {\\n\\t\\tlet highestRepFaction;\\n\\t\\tlet highestRep = 0;\\n\\t\\tfor (let faction of getFactions()) {\\n\\t\\t\\t// Cannot buy NFG from gangs\\n\\t\\t\\tif (ns.gang.inGang() && ns.gang.getGangInformation().faction === faction) continue;\\n\\t\\t\\t// Cannot buy NFG from Bladeburners\\n\\t\\t\\tif (faction === 'Bladeburners') continue;\\n\\t\\t\\t// Take highest reputation faction\\n\\t\\t\\tif (ns.getFactionRep(faction) > highestRep) {\\n\\t\\t\\t\\thighestRep = ns.getFactionRep(faction);\\n\\t\\t\\t\\thighestRepFaction = faction;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tlet counter = 0;\\n\\t\\twhile (ns.purchaseAugmentation(highestRepFaction, 'NeuroFlux Governor')) {\\n\\t\\t\\tcounter++;\\n\\t\\t}\\n\\t\\tns.tprint(`Purchased ${counter} levels of NeuroFlux Governor`);\\n\\t}\\n\\t// Check if The Red Pill is available\\n\\tif (ns.getPlayer().factions.includes('Daedalus') &&\\n\\t\\tns.getFactionRep('Daedalus') >= 2.5e6 &&\\n\\t\\t!ns.getOwnedAugmentations(true).includes('The Red Pill')) {\\n\\t\\tif (await ns.prompt(`Purchase The Red Pill?`)) {\\n\\t\\t\\tif (ns.purchaseAugmentation('Daedalus', 'The Red Pill')) ns.tprint(`Purchased The Red Pill`);\\n\\t\\t\\telse {\\n\\t\\t\\t\\tns.tprint(`Could not purchase The Red Pill`);\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Ask to install augmentations\\n\\tif (options.install && await ns.prompt('Install augmentations?')) {\\n\\t\\tns.installAugmentations('cortex.js');\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} augmentations\\n * @param {string[]} tempAugs\\n * @param {number[]} coveredIndices\\n * @param {string[]} prereq\\n */\\nfunction recursiveFit(ns, augmentations, tempAugs, coveredIndices, prereq) {\\n\\tlet index = augmentations.findIndex(aug => aug.name === prereq);\\n\\tif (index >= 0) { // Fit in aug before their prereq\\n\\t\\tcoveredIndices.push(index);\\n\\t\\tlet prereq = ns.getAugmentationPrereq(augmentations[index].name);\\n\\t\\tif (prereq.length > 0) recursiveFit(ns, augmentations, tempAugs, coveredIndices, prereq[0]);\\n\\t\\ttempAugs.push(augmentations[index]);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} faction\\n * @param {string} name\\n * @param {string[]} augmentations\\n * @returns {boolean}\\n */\\nfunction isPurchasable(ns, faction, name, augmentations) {\\n\\tlet facRep = ns.getFactionRep(faction);\\n\\tlet price = ns.getAugmentationPrice(name);\\n\\tlet repReq = ns.getAugmentationRepReq(name);\\n\\treturn !(facRep < repReq || // Faction reputation prerequisite\\n\\t\\tns.getServerMoneyAvailable('home') < price || // Check if it is able to be bought\\n\\t\\taugmentations.some(aug => aug.name === name) || // Check to see if it can be bought from another faction\\n\\t\\tns.getOwnedAugmentations(true).includes(name) // Check if already bought\\n\\t);\\n}\",\"filename\":\"/augmentations/purchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///f1bd0a36-ff82-4bd4-b362-2dbfb866b74e\",\"moduleSequenceNumber\":10734},{\"filename\":\"/augmentations/utils.js\",\"url\":\"blob:file:///c27578e8-ea0e-4e13-95d1-8c3c18cf5a84\",\"moduleSequenceNumber\":10700},{\"filename\":\"/augmentations/purchase.js\",\"url\":\"blob:file:///16701fd7-7fa7-4082-ace1-f63bd376763d\",\"moduleSequenceNumber\":22822}],\"dependents\":[],\"ramUsage\":56.5,\"server\":\"home\",\"moduleSequenceNumber\":30086,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.installAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {resetData} from '/utils.js';\\n\\nconst argsSchema = [\\n\\t['all', false]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, args) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @return {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst options = ns.flags(argsSchema);\\n\\tif (!options.all && options._.length === 0) throw new Error(`Must specify which port(s) or --all`);\\n\\tif (options.all) for (let i = 1; i <= 20; i++) await resetData(ns, i);\\n\\telse for (let i of options._) await resetData(ns, i);\\n}\",\"filename\":\"/tools/reset-port.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///a6772353-4994-4904-99c0-9d6f594633cf\",\"moduleSequenceNumber\":1455},{\"filename\":\"/tools/reset-port.js\",\"url\":\"blob:file:///3bb832e7-65d3-4665-a0a3-b1ab58b3fd05\",\"moduleSequenceNumber\":4213}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":30087,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {copyScriptsToAll, findPlaceToRun, getAccessibleServers, getFreeRams, getScripts} from 'utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tawait copyScriptsToAll(ns);\\n\\tconst threads = Number.MAX_SAFE_INTEGER;\\n\\tconst scripts = getScripts();\\n\\tconst target = 'joesguns';\\n\\tconst level = ns.getServerRequiredHackingLevel(target);\\n\\twhile (ns.getPlayer().hacking < level) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tlet i = 0;\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\tconst servers = getAccessibleServers(ns);\\n\\t\\tconst freeRams = getFreeRams(ns, servers);\\n\\t\\tfindPlaceToRun(ns, scripts.grow, threads, freeRams, target, 0, i);\\n\\t\\tfindPlaceToRun(ns, scripts.weaken, threads, freeRams, target, 0, i);\\n\\t\\ti++;\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"/player/hacking-farm.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///41cd8367-85bf-4c2b-8049-cf0f0dc1c837\",\"moduleSequenceNumber\":24391},{\"filename\":\"/player/hacking-farm.js\",\"url\":\"blob:file:///a6b802a1-bfc3-43d4-8e36-ebbf321fdc8d\",\"moduleSequenceNumber\":27086}],\"dependents\":[],\"ramUsage\":10.6,\"server\":\"home\",\"moduleSequenceNumber\":30088,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {formatMoney, formatTime, getCities} from '/utils.js';\\n\\nconst argsSchema = [\\n\\t['trips-per-cycle', 1e4],\\n\\t['money-threshold', 1e12]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, args) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst options = ns.flags(argsSchema);\\n\\tconst tripsPerCycle = options['trips-per-cycle'];\\n\\tconst moneyThreshold = options['money-threshold'];\\n\\tns.print(`trips-per-cycle: ${tripsPerCycle}`);\\n\\tns.print(`money-threshold: ${formatMoney(ns, moneyThreshold)}`);\\n\\tconst cities = getCities();\\n\\tconst citiesLength = cities.length;\\n\\tlet justStarted = true;\\n\\tlet previousInt = ns.getPlayer().intelligence;\\n\\tlet currentInt = previousInt;\\n\\tlet previousLevelTime = Date.now();\\n\\tlet levelupTime;\\n\\tlet cycles = 0;\\n\\tlet duration = 0;\\n\\tlet tripsPerLevel = 0;\\n\\tlet tripsPerMs = 0;\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\twhile (ns.getPlayer().money > moneyThreshold) {\\n\\t\\t\\tfor (let i = 0; i < tripsPerCycle; i++) cities.forEach(city => ns.travelToCity(city));\\n\\t\\t\\tawait ns.sleep(1);\\n\\t\\t\\tcycles++;\\n\\t\\t\\tif (previousInt !== ns.getPlayer().intelligence) {\\n\\t\\t\\t\\tcurrentInt = ns.getPlayer().intelligence;\\n\\t\\t\\t\\tlevelupTime = Date.now();\\n\\t\\t\\t\\tduration = levelupTime - previousLevelTime;\\n\\t\\t\\t\\ttripsPerLevel = cycles * tripsPerCycle * citiesLength;\\n\\t\\t\\t\\ttripsPerMs = Math.floor(tripsPerLevel / duration);\\n\\t\\t\\t\\tns.print(`Level Up: Int ${currentInt}` + (justStarted ? ` partial ` : ` full `) +\\n\\t\\t\\t\\t\\t`level in ${formatTime(ns, duration)} & ${formatMoney(ns, tripsPerLevel)} travels`);\\n\\t\\t\\t\\tns.print(`Approximately ${tripsPerMs} trips/ms`);\\n\\t\\t\\t\\tpreviousLevelTime = levelupTime;\\n\\t\\t\\t\\tpreviousInt = currentInt;\\n\\t\\t\\t\\tjustStarted = false;\\n\\t\\t\\t\\tcycles = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.sleep(10000);\\n\\t\\tns.print(`Below money threshold, waiting 10 seconds`);\\n\\t}\\n}\",\"filename\":\"/player/intelligence-farm.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///b1547040-2cc9-4464-bf5a-444081770ac4\",\"moduleSequenceNumber\":1473},{\"filename\":\"/player/intelligence-farm.js\",\"url\":\"blob:file:///3416bd78-3eb3-409d-b36c-42dee93123ba\",\"moduleSequenceNumber\":5736}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":30089,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"hacknet-node-0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/build/scripts.txt\",\"text\":\"cortex.js\\nutils.js\\naugmentations/install.js\\naugmentations/lister.js\\naugmentations/purchase.js\\naugmentations/utils.js\\nbladeburner/autopilot.js\\nbuild/download-bitburner-scripts.js\\nbuild/script-remover.js\\nbuild/scripts.txt\\nbuild/update.js\\ncompany/work.js\\ncontracts/contractor.js\\ncorporation/autopilot.js\\ncrime/automate.js\\ndaemons/charge.js\\ndaemons/grow.js\\ndaemons/hack.js\\ndaemons/share.js\\ndaemons/weaken.js\\nexploits/bypass.js\\nexploits/dev-menu.js\\nexploits/edit-save-file.js\\nexploits/n00dles.js\\nexploits/prototype-tampering.js\\nexploits/rainbow.js\\nexploits/time-compression.js\\nexploits/unclickable.js\\nexploits/undocumented-function-call.js\\nfactions/join-factions.js\\nfactions/share.js\\nfactions/work.js\\ngang/manager.js\\nhacking/backdoor.js\\nhacking/batcher.js\\nhacknet/hash-spender.js\\nhacknet/manager.js\\nplayer/create-programs.js\\nplayer/hacking-farm.js\\nplayer/gym.js\\nplayer/intelligence-farm.js\\nplayer/university.js\\nplayer/upgrade-home-cores.js\\nplayer/upgrade-home-ram.js\\nsleeve/autopilot.js\\nsleeve/company.js\\nsleeve/crime.js\\nsleeve/faction.js\\nsleeve/gym.js\\nsleeve/reset.js\\nsleeve/shock-recovery.js\\nsleeve/synchronize.js\\nsleeve/university.js\\nsleeve/utils.js\\nstanek/accept.js\\nstanek/controller.js\\nstanek/reset-charges.js\\nstanek/save.js\\nstanek/set.js\\nstanek/utils.js\\nstock-market/autopilot.js\\ntexts/augmentations-list.txt\\ntexts/bitnode-order.txt\\ntools/analyze-server.js\\ntools/bitnode-multipliers.js\\ntools/connect.js\\ntools/cost-pserv.js\\ntools/favor.js\\ntools/get-all-text.js\\ntools/hackable-servers.js\\ntools/karma.js\\ntools/monitor.js\\ntools/player.js\\ntools/pserv-buyer.js\\ntools/reputation.js\\ntools/reset-port.js\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/texts/augmentations-list.txt\",\"text\":\"\\n\\n----- ECorp -----\\n\\n--- Graphene Bionic Spine Upgrade ---\\nstrength_mult: 1.6\\ndefense_mult: 1.6\\ndexterity_mult: 1.6\\nagility_mult: 1.6\\nPrice: $6.000b\\nRep: 1.625m\\nPrereq: Bionic Spine\\n\\n--- Graphene Bionic Legs Upgrade ---\\nagility_mult: 2.5\\nPrice: $4.500b\\nRep: 750.000k\\nPrereq: Bionic Legs\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- PC Direct-Neural Interface ---\\nhacking_mult: 1.08\\ncompany_rep_mult: 1.3\\nPrice: $3.750b\\nRep: 375.000k\\n\\n--- PC Direct-Neural Interface Optimization Submodule ---\\nhacking_mult: 1.1\\ncompany_rep_mult: 1.75\\nPrice: $4.500b\\nRep: 500.000k\\nPrereq: PC Direct-Neural Interface\\n\\n--- ECorp HVMind Implant ---\\nhacking_grow_mult: 3\\nPrice: $5.500b\\nRep: 1.500m\\n\\n\\n----- MegaCorp -----\\n\\n--- Graphene Bionic Legs Upgrade ---\\nagility_mult: 2.5\\nPrice: $4.500b\\nRep: 750.000k\\nPrereq: Bionic Legs\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- CordiARC Fusion Reactor ---\\nstrength_mult: 1.35\\ndefense_mult: 1.35\\ndexterity_mult: 1.35\\nagility_mult: 1.35\\nstrength_exp_mult: 1.35\\ndefense_exp_mult: 1.35\\ndexterity_exp_mult: 1.35\\nagility_exp_mult: 1.35\\nPrice: $5.000b\\nRep: 1.125m\\n\\n\\n----- Blade Industries -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- PC Direct-Neural Interface ---\\nhacking_mult: 1.08\\ncompany_rep_mult: 1.3\\nPrice: $3.750b\\nRep: 375.000k\\n\\n--- PC Direct-Neural Interface Optimization Submodule ---\\nhacking_mult: 1.1\\ncompany_rep_mult: 1.75\\nPrice: $4.500b\\nRep: 500.000k\\nPrereq: PC Direct-Neural Interface\\n\\n--- HyperSight Corneal Implant ---\\ndexterity_mult: 1.4\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.750b\\nRep: 150.000k\\n\\n--- Neotra ---\\nstrength_mult: 1.55\\ndefense_mult: 1.55\\nPrice: $2.875b\\nRep: 562.500k\\n\\n\\n----- Clarke Incorporated -----\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Neuronal Densification ---\\nhacking_mult: 1.15\\nhacking_exp_mult: 1.1\\nhacking_speed_mult: 1.03\\nPrice: $1.375b\\nRep: 187.500k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- FocusWire ---\\nhacking_exp_mult: 1.05\\nstrength_exp_mult: 1.05\\ndefense_exp_mult: 1.05\\ndexterity_exp_mult: 1.05\\nagility_exp_mult: 1.05\\ncharisma_exp_mult: 1.05\\ncompany_rep_mult: 1.1\\nwork_money_mult: 1.2\\nPrice: $900.000m\\nRep: 75.000k\\n\\n--- ADR-V2 Pheromone Gene ---\\ncompany_rep_mult: 1.2\\nfaction_rep_mult: 1.2\\nPrice: $550.000m\\nRep: 62.500k\\n\\n--- nextSENS Gene Modification ---\\nhacking_mult: 1.2\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\ndexterity_mult: 1.2\\nagility_mult: 1.2\\ncharisma_mult: 1.2\\nPrice: $1.925b\\nRep: 437.500k\\n\\n\\n----- OmniTek Incorporated -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- PC Direct-Neural Interface ---\\nhacking_mult: 1.08\\ncompany_rep_mult: 1.3\\nPrice: $3.750b\\nRep: 375.000k\\n\\n--- OmniTek InfoLoad ---\\nhacking_mult: 1.2\\nhacking_exp_mult: 1.25\\nPrice: $2.875b\\nRep: 625.000k\\n\\n\\n----- Four Sigma -----\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- FocusWire ---\\nhacking_exp_mult: 1.05\\nstrength_exp_mult: 1.05\\ndefense_exp_mult: 1.05\\ndexterity_exp_mult: 1.05\\nagility_exp_mult: 1.05\\ncharisma_exp_mult: 1.05\\ncompany_rep_mult: 1.1\\nwork_money_mult: 1.2\\nPrice: $900.000m\\nRep: 75.000k\\n\\n--- PC Direct-Neural Interface ---\\nhacking_mult: 1.08\\ncompany_rep_mult: 1.3\\nPrice: $3.750b\\nRep: 375.000k\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- ADR-V2 Pheromone Gene ---\\ncompany_rep_mult: 1.2\\nfaction_rep_mult: 1.2\\nPrice: $550.000m\\nRep: 62.500k\\n\\n--- Neurotrainer III ---\\nhacking_exp_mult: 1.2\\nstrength_exp_mult: 1.2\\ndefense_exp_mult: 1.2\\ndexterity_exp_mult: 1.2\\nagility_exp_mult: 1.2\\ncharisma_exp_mult: 1.2\\nPrice: $130.000m\\nRep: 25.000k\\n\\n\\n----- KuaiGong International -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- FocusWire ---\\nhacking_exp_mult: 1.05\\nstrength_exp_mult: 1.05\\ndefense_exp_mult: 1.05\\ndexterity_exp_mult: 1.05\\nagility_exp_mult: 1.05\\ncharisma_exp_mult: 1.05\\ncompany_rep_mult: 1.1\\nwork_money_mult: 1.2\\nPrice: $900.000m\\nRep: 75.000k\\n\\n--- HyperSight Corneal Implant ---\\ndexterity_mult: 1.4\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.750b\\nRep: 150.000k\\n\\n--- Photosynthetic Cells ---\\nstrength_mult: 1.4\\ndefense_mult: 1.4\\nagility_mult: 1.4\\nPrice: $2.750b\\nRep: 562.500k\\n\\n\\n----- CyberSec -----\\n\\n--- BitWire ---\\nhacking_mult: 1.05\\nPrice: $10.000m\\nRep: 3.750k\\n\\n--- Synaptic Enhancement Implant ---\\nhacking_speed_mult: 1.03\\nPrice: $7.500m\\nRep: 2.000k\\n\\n--- Cranial Signal Processors - Gen I ---\\nhacking_mult: 1.05\\nhacking_speed_mult: 1.01\\nPrice: $70.000m\\nRep: 10.000k\\n\\n--- Cranial Signal Processors - Gen II ---\\nhacking_mult: 1.07\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.02\\nPrice: $125.000m\\nRep: 18.750k\\nPrereq: Cranial Signal Processors - Gen I\\n\\n--- Neurotrainer I ---\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $4.000m\\nRep: 1.000k\\n\\n\\n----- BitRunners -----\\n\\n--- Artificial Bio-neural Network Implant ---\\nhacking_mult: 1.12\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.15\\nPrice: $3.000b\\nRep: 275.000k\\n\\n--- Enhanced Myelin Sheathing ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.1\\nhacking_speed_mult: 1.03\\nPrice: $1.375b\\nRep: 100.000k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Neural Accelerator ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.15\\nhacking_money_mult: 1.2\\nPrice: $1.750b\\nRep: 200.000k\\n\\n--- Cranial Signal Processors - Gen III ---\\nhacking_mult: 1.09\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.15\\nPrice: $550.000m\\nRep: 50.000k\\nPrereq: Cranial Signal Processors - Gen II\\n\\n--- Cranial Signal Processors - Gen IV ---\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.2\\nhacking_grow_mult: 1.25\\nPrice: $1.100b\\nRep: 125.000k\\nPrereq: Cranial Signal Processors - Gen III\\n\\n--- Cranial Signal Processors - Gen V ---\\nhacking_mult: 1.3\\nhacking_money_mult: 1.25\\nhacking_grow_mult: 1.75\\nPrice: $2.250b\\nRep: 250.000k\\nPrereq: Cranial Signal Processors - Gen IV\\n\\n--- Neurotrainer II ---\\nhacking_exp_mult: 1.15\\nstrength_exp_mult: 1.15\\ndefense_exp_mult: 1.15\\ndexterity_exp_mult: 1.15\\nagility_exp_mult: 1.15\\ncharisma_exp_mult: 1.15\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- BitRunners Neurolink ---\\nhacking_mult: 1.15\\nhacking_exp_mult: 1.2\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nPrice: $4.375b\\nRep: 875.000k\\n\\n\\n----- Bachman & Associates -----\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- FocusWire ---\\nhacking_exp_mult: 1.05\\nstrength_exp_mult: 1.05\\ndefense_exp_mult: 1.05\\ndexterity_exp_mult: 1.05\\nagility_exp_mult: 1.05\\ncharisma_exp_mult: 1.05\\ncompany_rep_mult: 1.1\\nwork_money_mult: 1.2\\nPrice: $900.000m\\nRep: 75.000k\\n\\n--- ADR-V2 Pheromone Gene ---\\ncompany_rep_mult: 1.2\\nfaction_rep_mult: 1.2\\nPrice: $550.000m\\nRep: 62.500k\\n\\n--- SmartJaw ---\\ncharisma_mult: 1.5\\ncharisma_exp_mult: 1.5\\ncompany_rep_mult: 1.25\\nfaction_rep_mult: 1.25\\nPrice: $2.750b\\nRep: 375.000k\\n\\n\\n----- Fulcrum Secret Technologies -----\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Graphene Bone Lacings ---\\nstrength_mult: 1.7\\ndefense_mult: 1.7\\nPrice: $4.250b\\nRep: 1.125m\\n\\n--- Graphene Bionic Spine Upgrade ---\\nstrength_mult: 1.6\\ndefense_mult: 1.6\\ndexterity_mult: 1.6\\nagility_mult: 1.6\\nPrice: $6.000b\\nRep: 1.625m\\nPrereq: Bionic Spine\\n\\n--- Graphene Bionic Legs Upgrade ---\\nagility_mult: 2.5\\nPrice: $4.500b\\nRep: 750.000k\\nPrereq: Bionic Legs\\n\\n--- Artificial Bio-neural Network Implant ---\\nhacking_mult: 1.12\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.15\\nPrice: $3.000b\\nRep: 275.000k\\n\\n--- Enhanced Myelin Sheathing ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.1\\nhacking_speed_mult: 1.03\\nPrice: $1.375b\\nRep: 100.000k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- PC Direct-Neural Interface Optimization Submodule ---\\nhacking_mult: 1.1\\ncompany_rep_mult: 1.75\\nPrice: $4.500b\\nRep: 500.000k\\nPrereq: PC Direct-Neural Interface\\n\\n--- PC Direct-Neural Interface NeuroNet Injector ---\\nhacking_mult: 1.1\\nhacking_speed_mult: 1.05\\ncompany_rep_mult: 2\\nPrice: $7.500b\\nRep: 1.500m\\nPrereq: PC Direct-Neural Interface\\n\\n\\n----- NiteSec -----\\n\\n--- BitWire ---\\nhacking_mult: 1.05\\nPrice: $10.000m\\nRep: 3.750k\\n\\n--- Artificial Synaptic Potentiation ---\\nhacking_exp_mult: 1.05\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.02\\nPrice: $80.000m\\nRep: 6.250k\\n\\n--- Neural-Retention Enhancement ---\\nhacking_exp_mult: 1.25\\nPrice: $250.000m\\nRep: 20.000k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Cranial Signal Processors - Gen II ---\\nhacking_mult: 1.07\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.02\\nPrice: $125.000m\\nRep: 18.750k\\nPrereq: Cranial Signal Processors - Gen I\\n\\n--- Cranial Signal Processors - Gen III ---\\nhacking_mult: 1.09\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.15\\nPrice: $550.000m\\nRep: 50.000k\\nPrereq: Cranial Signal Processors - Gen II\\n\\n--- Neurotrainer II ---\\nhacking_exp_mult: 1.15\\nstrength_exp_mult: 1.15\\ndefense_exp_mult: 1.15\\ndexterity_exp_mult: 1.15\\nagility_exp_mult: 1.15\\ncharisma_exp_mult: 1.15\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- CRTX42-AA Gene Modification ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nPrice: $225.000m\\nRep: 45.000k\\n\\n\\n----- The Black Hand -----\\n\\n--- Artificial Synaptic Potentiation ---\\nhacking_exp_mult: 1.05\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.02\\nPrice: $80.000m\\nRep: 6.250k\\n\\n--- Enhanced Myelin Sheathing ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.1\\nhacking_speed_mult: 1.03\\nPrice: $1.375b\\nRep: 100.000k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Cranial Signal Processors - Gen III ---\\nhacking_mult: 1.09\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.15\\nPrice: $550.000m\\nRep: 50.000k\\nPrereq: Cranial Signal Processors - Gen II\\n\\n--- Cranial Signal Processors - Gen IV ---\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.2\\nhacking_grow_mult: 1.25\\nPrice: $1.100b\\nRep: 125.000k\\nPrereq: Cranial Signal Processors - Gen III\\n\\n--- The Black Hand ---\\nhacking_mult: 1.1\\nstrength_mult: 1.15\\ndexterity_mult: 1.15\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.1\\nPrice: $550.000m\\nRep: 100.000k\\n\\n\\n----- Slum Snakes -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- LuminCloaking-V1 Skin Implant ---\\nagility_mult: 1.05\\ncrime_money_mult: 1.1\\nPrice: $5.000m\\nRep: 1.500k\\n\\n--- LuminCloaking-V2 Skin Implant ---\\ndefense_mult: 1.1\\nagility_mult: 1.1\\ncrime_money_mult: 1.25\\nPrice: $30.000m\\nRep: 5.000k\\nPrereq: LuminCloaking-V1 Skin Implant\\n\\n--- SmartSonar Implant ---\\ndexterity_mult: 1.1\\ndexterity_exp_mult: 1.15\\ncrime_money_mult: 1.25\\nPrice: $75.000m\\nRep: 22.500k\\n\\n\\n----- Tetrads -----\\n\\n--- HemoRecirculator ---\\nstrength_mult: 1.08\\ndefense_mult: 1.08\\ndexterity_mult: 1.08\\nagility_mult: 1.08\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- LuminCloaking-V1 Skin Implant ---\\nagility_mult: 1.05\\ncrime_money_mult: 1.1\\nPrice: $5.000m\\nRep: 1.500k\\n\\n--- LuminCloaking-V2 Skin Implant ---\\ndefense_mult: 1.1\\nagility_mult: 1.1\\ncrime_money_mult: 1.25\\nPrice: $30.000m\\nRep: 5.000k\\nPrereq: LuminCloaking-V1 Skin Implant\\n\\n--- Power Recirculation Core ---\\nhacking_mult: 1.05\\nstrength_mult: 1.05\\ndefense_mult: 1.05\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\ncharisma_mult: 1.05\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $180.000m\\nRep: 25.000k\\n\\n--- Bionic Arms ---\\nstrength_mult: 1.3\\ndexterity_mult: 1.3\\nPrice: $275.000m\\nRep: 62.500k\\n\\n\\n----- Speakers for the Dead -----\\n\\n--- Unstable Circadian Modulator ---\\ncharisma_mult: 1.5\\ncharisma_exp_mult: 2\\nPrice: $5.000b\\nRep: 362.500k\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- The Shadow's Simulacrum ---\\ncompany_rep_mult: 1.15\\nfaction_rep_mult: 1.15\\nPrice: $400.000m\\nRep: 37.500k\\n\\n--- Graphene BrachiBlades Upgrade ---\\nstrength_mult: 1.4\\ndefense_mult: 1.4\\ncrime_money_mult: 1.3\\ncrime_success_mult: 1.1\\nPrice: $2.500b\\nRep: 225.000k\\nPrereq: BrachiBlades\\n\\n\\n----- The Dark Army -----\\n\\n--- HemoRecirculator ---\\nstrength_mult: 1.08\\ndefense_mult: 1.08\\ndexterity_mult: 1.08\\nagility_mult: 1.08\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- The Shadow's Simulacrum ---\\ncompany_rep_mult: 1.15\\nfaction_rep_mult: 1.15\\nPrice: $400.000m\\nRep: 37.500k\\n\\n--- Power Recirculation Core ---\\nhacking_mult: 1.05\\nstrength_mult: 1.05\\ndefense_mult: 1.05\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\ncharisma_mult: 1.05\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $180.000m\\nRep: 25.000k\\n\\n--- Graphene Bionic Arms Upgrade ---\\nstrength_mult: 1.85\\ndexterity_mult: 1.85\\nPrice: $3.750b\\nRep: 500.000k\\nPrereq: Bionic Arms\\n\\n\\n----- The Syndicate -----\\n\\n--- HemoRecirculator ---\\nstrength_mult: 1.08\\ndefense_mult: 1.08\\ndexterity_mult: 1.08\\nagility_mult: 1.08\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- The Shadow's Simulacrum ---\\ncompany_rep_mult: 1.15\\nfaction_rep_mult: 1.15\\nPrice: $400.000m\\nRep: 37.500k\\n\\n--- Power Recirculation Core ---\\nhacking_mult: 1.05\\nstrength_mult: 1.05\\ndefense_mult: 1.05\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\ncharisma_mult: 1.05\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $180.000m\\nRep: 25.000k\\n\\n--- BrachiBlades ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ncrime_money_mult: 1.15\\ncrime_success_mult: 1.1\\nPrice: $90.000m\\nRep: 12.500k\\n\\n\\n----- Silhouette -----\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- TITN-41 Gene-Modification Injection ---\\ncharisma_mult: 1.15\\ncharisma_exp_mult: 1.15\\nPrice: $190.000m\\nRep: 25.000k\\n\\n--- ADR-V2 Pheromone Gene ---\\ncompany_rep_mult: 1.2\\nfaction_rep_mult: 1.2\\nPrice: $550.000m\\nRep: 62.500k\\n\\n\\n----- Tian Di Hui -----\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- Social Negotiation Assistant (S.N.A) ---\\ncompany_rep_mult: 1.15\\nfaction_rep_mult: 1.15\\nwork_money_mult: 1.1\\nPrice: $30.000m\\nRep: 6.250k\\n\\n--- Neuroreceptor Management Implant ---\\nSpecial\\nPrice: $550.000m\\nRep: 75.000k\\n\\n\\n----- Netburners -----\\n\\n--- Hacknet Node CPU Architecture Neural-Upload ---\\nhacknet_node_money_mult: 1.15\\nhacknet_node_purchase_cost_mult: 0.85\\nPrice: $11.000m\\nRep: 3.750k\\n\\n--- Hacknet Node Cache Architecture Neural-Upload ---\\nhacknet_node_money_mult: 1.1\\nhacknet_node_level_cost_mult: 0.85\\nPrice: $5.500m\\nRep: 2.500k\\n\\n--- Hacknet Node NIC Architecture Neural-Upload ---\\nhacknet_node_money_mult: 1.1\\nhacknet_node_purchase_cost_mult: 0.9\\nPrice: $4.500m\\nRep: 1.875k\\n\\n--- Hacknet Node Kernel Direct-Neural Interface ---\\nhacknet_node_money_mult: 1.25\\nPrice: $40.000m\\nRep: 7.500k\\n\\n--- Hacknet Node Core Direct-Neural Interface ---\\nhacknet_node_money_mult: 1.45\\nPrice: $60.000m\\nRep: 12.500k\\n\\n\\n----- Aevum -----\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Synaptic Enhancement Implant ---\\nhacking_speed_mult: 1.03\\nPrice: $7.500m\\nRep: 2.000k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Neurotrainer I ---\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $4.000m\\nRep: 1.000k\\n\\n--- PCMatrix ---\\ncharisma_mult: 1.0777\\ncharisma_exp_mult: 1.0777\\ncompany_rep_mult: 1.0777\\nfaction_rep_mult: 1.0777\\ncrime_money_mult: 1.0777\\ncrime_success_mult: 1.0777\\nwork_money_mult: 1.777\\nPrice: $2.000b\\nRep: 100.000k\\n\\n\\n----- Sector-12 -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- CashRoot Starter Kit ---\\nSpecial\\nPrice: $125.000m\\nRep: 12.500k\\n\\n\\n----- Chongqing -----\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Neuregen Gene Modification ---\\nhacking_exp_mult: 1.4\\nPrice: $375.000m\\nRep: 37.500k\\n\\n\\n----- New Tokyo -----\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- NutriGen Implant ---\\nstrength_exp_mult: 1.2\\ndefense_exp_mult: 1.2\\ndexterity_exp_mult: 1.2\\nagility_exp_mult: 1.2\\nPrice: $2.500m\\nRep: 6.250k\\n\\n\\n----- Ishima -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- INFRARET Enhancement ---\\ndexterity_mult: 1.1\\ncrime_money_mult: 1.1\\ncrime_success_mult: 1.25\\nPrice: $30.000m\\nRep: 7.500k\\n\\n\\n----- Volhaven -----\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- DermaForce Particle Barrier ---\\ndefense_mult: 1.4\\nPrice: $50.000m\\nRep: 15.000k\\n\\n\\n----- NWO -----\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- Neurotrainer III ---\\nhacking_exp_mult: 1.2\\nstrength_exp_mult: 1.2\\ndefense_exp_mult: 1.2\\ndexterity_exp_mult: 1.2\\nagility_exp_mult: 1.2\\ncharisma_exp_mult: 1.2\\nPrice: $130.000m\\nRep: 25.000k\\n\\n--- Power Recirculation Core ---\\nhacking_mult: 1.05\\nstrength_mult: 1.05\\ndefense_mult: 1.05\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\ncharisma_mult: 1.05\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $180.000m\\nRep: 25.000k\\n\\n--- Xanipher ---\\nhacking_mult: 1.2\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\ndexterity_mult: 1.2\\nagility_mult: 1.2\\ncharisma_mult: 1.2\\nhacking_exp_mult: 1.15\\nstrength_exp_mult: 1.15\\ndefense_exp_mult: 1.15\\ndexterity_exp_mult: 1.15\\nagility_exp_mult: 1.15\\ncharisma_exp_mult: 1.15\\nPrice: $4.250b\\nRep: 875.000k\\n\\n--- Hydroflame Left Arm ---\\nstrength_mult: 2.7\\nPrice: $2.500t\\nRep: 1.250m\\n\\n\\n----- The Covenant -----\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Graphene Bone Lacings ---\\nstrength_mult: 1.7\\ndefense_mult: 1.7\\nPrice: $4.250b\\nRep: 1.125m\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- SPTN-97 Gene Modification ---\\nhacking_mult: 1.15\\nstrength_mult: 1.75\\ndefense_mult: 1.75\\ndexterity_mult: 1.75\\nagility_mult: 1.75\\nPrice: $4.875b\\nRep: 1.250m\\n\\n\\n----- Daedalus -----\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- The Red Pill ---\\nSpecial\\nPrice: $0.000\\nRep: 2.500m\\n\\n\\n----- Illuminati -----\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- QLink ---\\nhacking_mult: 1.75\\nhacking_chance_mult: 2.5\\nhacking_speed_mult: 2\\nhacking_money_mult: 4\\nPrice: $25.000t\\nRep: 1.875m\\n\\n\\n----- Bladeburners -----\\n\\n--- EsperTech Bladeburner Eyewear ---\\ndexterity_mult: 1.05\\nbladeburner_success_chance_mult: 1.03\\nPrice: $165.000m\\nRep: 1.250k\\n\\n--- EMS-4 Recombination ---\\nbladeburner_stamina_gain_mult: 1.02\\nbladeburner_analysis_mult: 1.05\\nbladeburner_success_chance_mult: 1.03\\nPrice: $275.000m\\nRep: 2.500k\\n\\n--- ORION-MKIV Shoulder ---\\nstrength_mult: 1.05\\ndefense_mult: 1.05\\ndexterity_mult: 1.05\\nbladeburner_success_chance_mult: 1.04\\nPrice: $550.000m\\nRep: 6.250k\\n\\n--- Hyperion Plasma Cannon V1 ---\\nbladeburner_success_chance_mult: 1.06\\nPrice: $2.750b\\nRep: 12.500k\\n\\n--- Hyperion Plasma Cannon V2 ---\\nbladeburner_success_chance_mult: 1.08\\nPrice: $5.500b\\nRep: 25.000k\\nPrereq: Hyperion Plasma Cannon V1\\n\\n--- GOLEM Serum ---\\nstrength_mult: 1.07\\ndefense_mult: 1.07\\ndexterity_mult: 1.07\\nagility_mult: 1.07\\nbladeburner_stamina_gain_mult: 1.05\\nPrice: $11.000b\\nRep: 31.250k\\n\\n--- Vangelis Virus ---\\ndexterity_exp_mult: 1.1\\nbladeburner_analysis_mult: 1.1\\nbladeburner_success_chance_mult: 1.04\\nPrice: $2.750b\\nRep: 18.750k\\n\\n--- Vangelis Virus 3.0 ---\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nbladeburner_analysis_mult: 1.15\\nbladeburner_success_chance_mult: 1.05\\nPrice: $11.000b\\nRep: 37.500k\\nPrereq: Vangelis Virus\\n\\n--- I.N.T.E.R.L.I.N.K.E.D ---\\nstrength_exp_mult: 1.05\\ndefense_exp_mult: 1.05\\ndexterity_exp_mult: 1.05\\nagility_exp_mult: 1.05\\nbladeburner_max_stamina_mult: 1.1\\nPrice: $5.500b\\nRep: 25.000k\\n\\n--- Blade's Runners ---\\nagility_mult: 1.05\\nbladeburner_max_stamina_mult: 1.05\\nbladeburner_stamina_gain_mult: 1.05\\nPrice: $8.250b\\nRep: 20.000k\\n\\n--- BLADE-51b Tesla Armor ---\\nstrength_mult: 1.04\\ndefense_mult: 1.04\\ndexterity_mult: 1.04\\nagility_mult: 1.04\\nbladeburner_stamina_gain_mult: 1.02\\nbladeburner_success_chance_mult: 1.03\\nPrice: $1.375b\\nRep: 12.500k\\n\\n--- BLADE-51b Tesla Armor: Power Cells Upgrade ---\\nbladeburner_max_stamina_mult: 1.05\\nbladeburner_stamina_gain_mult: 1.02\\nbladeburner_success_chance_mult: 1.05\\nPrice: $2.750b\\nRep: 18.750k\\nPrereq: BLADE-51b Tesla Armor\\n\\n--- BLADE-51b Tesla Armor: Energy Shielding Upgrade ---\\ndefense_mult: 1.05\\nbladeburner_success_chance_mult: 1.06\\nPrice: $5.500b\\nRep: 21.250k\\nPrereq: BLADE-51b Tesla Armor\\n\\n--- BLADE-51b Tesla Armor: Unibeam Upgrade ---\\nbladeburner_success_chance_mult: 1.08\\nPrice: $16.500b\\nRep: 31.250k\\nPrereq: BLADE-51b Tesla Armor\\n\\n--- BLADE-51b Tesla Armor: Omnibeam Upgrade ---\\nbladeburner_success_chance_mult: 1.1\\nPrice: $27.500b\\nRep: 62.500k\\nPrereq: BLADE-51b Tesla Armor: Unibeam Upgrade\\n\\n--- BLADE-51b Tesla Armor: IPU Upgrade ---\\nbladeburner_analysis_mult: 1.15\\nbladeburner_success_chance_mult: 1.02\\nPrice: $1.100b\\nRep: 15.000k\\nPrereq: BLADE-51b Tesla Armor\\n\\n--- The Blade's Simulacrum ---\\nSpecial\\nPrice: $150.000b\\nRep: 1.250k\\n\\n\\n----- Church of the Machine God -----\\n\\n--- Stanek's Gift - Genesis ---\\nhacking_mult: 0.9\\nstrength_mult: 0.9\\ndefense_mult: 0.9\\ndexterity_mult: 0.9\\nagility_mult: 0.9\\ncharisma_mult: 0.9\\nhacking_exp_mult: 0.9\\nstrength_exp_mult: 0.9\\ndefense_exp_mult: 0.9\\ndexterity_exp_mult: 0.9\\nagility_exp_mult: 0.9\\ncharisma_exp_mult: 0.9\\nhacking_chance_mult: 0.9\\nhacking_speed_mult: 0.9\\nhacking_money_mult: 0.9\\nhacking_grow_mult: 0.9\\ncompany_rep_mult: 0.9\\nfaction_rep_mult: 0.9\\ncrime_money_mult: 0.9\\ncrime_success_mult: 0.9\\nwork_money_mult: 0.9\\nhacknet_node_money_mult: 0.9\\nhacknet_node_purchase_cost_mult: 1.1\\nhacknet_node_ram_cost_mult: 1.1\\nhacknet_node_core_cost_mult: 1.1\\nhacknet_node_level_cost_mult: 1.1\\nPrice: $0.000\\nRep: 0.000\\n\\n--- Stanek's Gift - Awakening ---\\nhacking_mult: 1.0555555555555556\\nstrength_mult: 1.0555555555555556\\ndefense_mult: 1.0555555555555556\\ndexterity_mult: 1.0555555555555556\\nagility_mult: 1.0555555555555556\\ncharisma_mult: 1.0555555555555556\\nhacking_exp_mult: 1.0555555555555556\\nstrength_exp_mult: 1.0555555555555556\\ndefense_exp_mult: 1.0555555555555556\\ndexterity_exp_mult: 1.0555555555555556\\nagility_exp_mult: 1.0555555555555556\\ncharisma_exp_mult: 1.0555555555555556\\nhacking_chance_mult: 1.0555555555555556\\nhacking_speed_mult: 1.0555555555555556\\nhacking_money_mult: 1.0555555555555556\\nhacking_grow_mult: 1.0555555555555556\\ncompany_rep_mult: 1.0555555555555556\\nfaction_rep_mult: 1.0555555555555556\\ncrime_money_mult: 1.0555555555555556\\ncrime_success_mult: 1.0555555555555556\\nwork_money_mult: 1.0555555555555556\\nhacknet_node_money_mult: 1.0555555555555556\\nhacknet_node_purchase_cost_mult: 0.9545454545454545\\nhacknet_node_ram_cost_mult: 0.9545454545454545\\nhacknet_node_core_cost_mult: 0.9545454545454545\\nhacknet_node_level_cost_mult: 0.9545454545454545\\nPrice: $0.000\\nRep: 1.000m\\nPrereq: Stanek's Gift - Genesis\\n\\n--- Stanek's Gift - Serenity ---\\nhacking_mult: 1.0526315789473684\\nstrength_mult: 1.0526315789473684\\ndefense_mult: 1.0526315789473684\\ndexterity_mult: 1.0526315789473684\\nagility_mult: 1.0526315789473684\\ncharisma_mult: 1.0526315789473684\\nhacking_exp_mult: 1.0526315789473684\\nstrength_exp_mult: 1.0526315789473684\\ndefense_exp_mult: 1.0526315789473684\\ndexterity_exp_mult: 1.0526315789473684\\nagility_exp_mult: 1.0526315789473684\\ncharisma_exp_mult: 1.0526315789473684\\nhacking_chance_mult: 1.0526315789473684\\nhacking_speed_mult: 1.0526315789473684\\nhacking_money_mult: 1.0526315789473684\\nhacking_grow_mult: 1.0526315789473684\\ncompany_rep_mult: 1.0526315789473684\\nfaction_rep_mult: 1.0526315789473684\\ncrime_money_mult: 1.0526315789473684\\ncrime_success_mult: 1.0526315789473684\\nwork_money_mult: 1.0526315789473684\\nhacknet_node_money_mult: 1.0526315789473684\\nhacknet_node_purchase_cost_mult: 0.9523809523809523\\nhacknet_node_ram_cost_mult: 0.9523809523809523\\nhacknet_node_core_cost_mult: 0.9523809523809523\\nhacknet_node_level_cost_mult: 0.9523809523809523\\nPrice: $0.000\\nRep: 100.000m\\nPrereq: Stanek's Gift - Awakening\\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/texts/bitnode-order.txt\",\"text\":\"1.1  -> 1.2  -> 1.3     Max SF1 28% All\\n5.1                     Int, Formulas & getBitNodeMultipliers()\\n4.1  -> 4.2  -> 4.3     Max SF4 Singularity Functions\\n5.2  -> 5.3             Max SF5 14% Hacking\\n2.1  -> 2.2  -> 2.3     Max SF2 42% Crime & Charisma, Gangs\\n3.1                     Corps\\n12.1                    NFG-1\\n6.1                     Bladeburner\\n7.1                     Bladeburner API\\n10.1 -> 10.2 -> 10.3    Max SF 10 8 Sleeves max memory\\n6.2  -> 6.3             Max SF6 14% Combat\\n7.2  -> 7.3             Max SF7 14% Bladeburner\\n3.2  -> 3.3             Max SF3 14% Company Salary and Charisma, Office API & Warehouse API\\n11.1 -> 11.2 -> 11.3    Max SF11 56% Company Salary and Reputation Gain, 7% Augmentation Price Decrease, Favored Reputation\\n9.1  -> 9.2  -> 9.3     Max SF9 14% Hacknet, Hacknet Servers, 128 GiB RAM, Bitnode Server\\n12.2                    NFG-2\\n13.1 -> 13.2 -> 13.3    Max SF13 +3 size Stanek's Gift, Church of the Machine God\\n12.3 -> 12.4            NFG-4\\n8.1  -> 8.2  -> 8.3     Max SF8, 21% Grow, WSE Account and TIX API, Shorting Stocks, Limit/Stop Orders\\n12.5 -> ...\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/2.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/3.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/4.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/5.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/6.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/7.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/8.txt\",\"text\":\"{\\\"long\\\":[\\\"4sigma\\\"],\\\"short\\\":[]}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/9.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/10.txt\",\"text\":\"{\\\"0\\\":{\\\"autopilot\\\":false,\\\"usefulCombat\\\":false,\\\"usefulHacking\\\":false,\\\"usefulFaction\\\":false,\\\"usefulCompany\\\":false},\\\"1\\\":{\\\"autopilot\\\":false,\\\"usefulCombat\\\":false,\\\"usefulHacking\\\":false,\\\"usefulFaction\\\":false,\\\"usefulCompany\\\":false},\\\"2\\\":{\\\"autopilot\\\":false,\\\"usefulCombat\\\":false,\\\"usefulHacking\\\":false,\\\"usefulFaction\\\":false,\\\"usefulCompany\\\":false},\\\"3\\\":{\\\"autopilot\\\":false,\\\"usefulCombat\\\":false,\\\"usefulHacking\\\":false,\\\"usefulFaction\\\":false,\\\"usefulCompany\\\":false},\\\"4\\\":{\\\"autopilot\\\":false,\\\"usefulCombat\\\":false,\\\"usefulHacking\\\":false,\\\"usefulFaction\\\":false,\\\"usefulCompany\\\":false},\\\"5\\\":{\\\"autopilot\\\":false,\\\"usefulCombat\\\":false,\\\"usefulHacking\\\":false,\\\"usefulFaction\\\":false,\\\"usefulCompany\\\":false},\\\"6\\\":{\\\"autopilot\\\":false,\\\"usefulCombat\\\":false,\\\"usefulHacking\\\":false,\\\"usefulFaction\\\":false,\\\"usefulCompany\\\":false},\\\"7\\\":{\\\"autopilot\\\":false,\\\"usefulCombat\\\":false,\\\"usefulHacking\\\":false,\\\"usefulFaction\\\":false,\\\"usefulCompany\\\":false}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/11.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/12.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/13.txt\",\"text\":\"{\\\"pattern\\\":\\\"hacking\\\",\\\"maxCharges\\\":\\\"20\\\"}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/14.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/15.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/16.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/17.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/18.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/19.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/20.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/1.txt\",\"text\":\"{\\\"home\\\":[{\\\"ram\\\":64,\\\"server\\\":\\\"DEF\\\",\\\"pid\\\":\\\"DEF\\\"}]}\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":4.167999999999998,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"94.2.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":51410207917,\"moneyMax\":1285255197925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1350,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"65.9.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":55627701161,\"moneyMax\":1390692529025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1274,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"15.3.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":21320157699,\"moneyMax\":533003942475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1017,\"serverGrowth\":68}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"56.8.6.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":26961906447,\"moneyMax\":674047661175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1192,\"serverGrowth\":67}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"79.4.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":38146137982,\"moneyMax\":953653449550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1300,\"serverGrowth\":86}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"4.9.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"ecorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":17369723251,\"moneyMax\":434243081275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1107,\"serverGrowth\":74}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"23.7.4.3\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"blade\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":20701227020,\"moneyMax\":517530675500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1055,\"serverGrowth\":96}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"1.0.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":17003786130,\"moneyMax\":425094653250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1139,\"serverGrowth\":77}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"94.2.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":27115907973,\"moneyMax\":677897699325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1082,\"serverGrowth\":95}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"44.2.7.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1491397454,\"moneyMax\":37284936350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1027,\"serverGrowth\":97}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"23.6.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1103,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"76.6.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":1195265465,\"moneyMax\":29881636625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":932,\"serverGrowth\":91}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"68.3.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":844300609,\"moneyMax\":21107515225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":931,\"serverGrowth\":61}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"38.6.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":668750886,\"moneyMax\":16718772150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":906,\"serverGrowth\":72}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"87.2.9.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":677658328,\"moneyMax\":16941458200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":821,\"serverGrowth\":72}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"52.1.4.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":723569012,\"moneyMax\":18089225300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":886,\"serverGrowth\":65}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"36.1.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":965399150,\"moneyMax\":24134978750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":901,\"serverGrowth\":88}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"48.6.1.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"infocomm\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1118024402,\"moneyMax\":27950610050,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":891,\"serverGrowth\":81}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"71.8.2.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":843541472,\"moneyMax\":21088536800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":813,\"serverGrowth\":71}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"52.6.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"helios\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":658891244,\"moneyMax\":16472281100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":864,\"serverGrowth\":72}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"49.1.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":872581292,\"moneyMax\":21814532300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":72}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"70.2.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":791637957,\"moneyMax\":19790948925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":848,\"serverGrowth\":75}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"32.9.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1175100775,\"moneyMax\":29377519375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":913,\"serverGrowth\":62}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"84.8.5.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"icarus\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":997868687,\"moneyMax\":24946717175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":861,\"serverGrowth\":68}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"39.3.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":1039564610,\"moneyMax\":25989115250,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":787,\"serverGrowth\":66}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"26.5.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":714236334,\"moneyMax\":17855908350,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":815,\"serverGrowth\":74}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"57.8.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":700841595,\"moneyMax\":17521039875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":801,\"serverGrowth\":70}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"61.8.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1657636350,\"moneyMax\":41440908750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":849,\"serverGrowth\":56}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"82.4.6.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1542738023,\"moneyMax\":38568450575,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":756,\"serverGrowth\":86}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"29.7.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":1137208861,\"moneyMax\":28430221525,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":792,\"serverGrowth\":71}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"76.5.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1339351876,\"moneyMax\":33483796900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":803,\"serverGrowth\":70}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"17.2.2.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":1014203032,\"moneyMax\":25355075800,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":775,\"serverGrowth\":70}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"99.4.9.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":791104334,\"moneyMax\":19777608350,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":709,\"serverGrowth\":58}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"93.5.0.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":560410191,\"moneyMax\":14010254775,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":524,\"serverGrowth\":50}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"88.3.5.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":703470294,\"moneyMax\":17586757350,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":547,\"serverGrowth\":56}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"53.5.1.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":280223854,\"moneyMax\":7005596350,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":419,\"serverGrowth\":33}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"85.6.1.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":248634397,\"moneyMax\":6215859925,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":408,\"serverGrowth\":43}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"5.2.0.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"computek\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":897509747,\"moneyMax\":22437743675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":755,\"serverGrowth\":83}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"75.3.7.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":214057613,\"moneyMax\":5351440325,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":456,\"serverGrowth\":49}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"30.9.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":494671489,\"moneyMax\":12366787225,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":561,\"serverGrowth\":62}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"31.6.5.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\",\"lexo-corp\",\"rho-construction\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":357543213,\"moneyMax\":8938580325,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":415,\"serverGrowth\":45}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"19.2.6.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":37,\"minDifficulty\":12,\"moneyAvailable\":181588379,\"moneyMax\":4539709475,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":324,\"serverGrowth\":45}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"9.7.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":230434746,\"moneyMax\":5760868650,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":384,\"serverGrowth\":53}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"36.5.1.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":425,\"serverGrowth\":70}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"89.5.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":70872079,\"moneyMax\":1771801975,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":294,\"serverGrowth\":36}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"66.1.7.8\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"0.4.7.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"9.3.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"47.7.1.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"27.9.8.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"9.6.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"hong-fang-tea\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"4.4.5.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"20.8.0.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"86.3.1.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"max-hardware\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"90.5.3.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"80.4.5.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"57.3.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"39.4.5.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"netlink\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":34,\"hackDifficulty\":34,\"minDifficulty\":11,\"moneyAvailable\":63182588,\"moneyMax\":1579564700,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":217,\"serverGrowth\":38}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"3.4.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":47531752,\"moneyMax\":1188293800,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":255,\"serverGrowth\":30}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"87.5.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"8.8.9.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\",\"aerocorp\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":499,\"serverGrowth\":32}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"5.2.9.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1030,\"serverGrowth\":58}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"74.8.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":679,\"serverGrowth\":55}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"32.1.2.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":506,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"97.9.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":359,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"58.1.3.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":206,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"45.6.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":525,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"41.0.4.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"hong-fang-tea\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":55,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"68.0.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"60.3.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"hacknet-node-0\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-0\",\"httpPortOpen\":false,\"ip\":\"26.4.4.8\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":5,\"cores\":10,\"hashCapacity\":1024,\"hashRate\":0.4517937549253192,\"level\":100,\"onlineTimeSeconds\":11.79999999999999,\"totalHashesGenerated\":5.3311663081187595}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":21046.11853594078,\"lastPrice\":21047,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.44,\"b\":true,\"otlkMag\":19.000795767499675,\"otlkMagForecast\":69.00039788374984,\"cap\":392125896,\"spreadPerc\":0.4,\"shareTxForMovement\":51678,\"shareTxUntilMovement\":51678,\"totalShares\":114000000,\"maxShares\":22800000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":26889.254106734486,\"lastPrice\":26888,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.49,\"b\":true,\"otlkMag\":19.000886195624638,\"otlkMagForecast\":68.99955690218768,\"cap\":417806725,\"spreadPerc\":0.2,\"shareTxForMovement\":50387,\"shareTxUntilMovement\":50387,\"totalShares\":89300000,\"maxShares\":17900000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":15648.042579168321,\"lastPrice\":15647,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":12.999133793750357,\"otlkMagForecast\":62.99956689687518,\"cap\":213425243,\"spreadPerc\":0.5,\"shareTxForMovement\":86034,\"shareTxUntilMovement\":86034,\"totalShares\":102300000,\"maxShares\":20500000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":10988.309673180453,\"lastPrice\":10989,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":true,\"otlkMag\":11.99924611500031,\"otlkMagForecast\":61.99962305750015,\"cap\":245430948,\"spreadPerc\":0.1,\"shareTxForMovement\":45830,\"shareTxUntilMovement\":45830,\"totalShares\":136500000,\"maxShares\":27300000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":42752.807793280095,\"lastPrice\":42750,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":11.999211847500323,\"otlkMagForecast\":62.00039407624984,\"cap\":798823386,\"spreadPerc\":0.3,\"shareTxForMovement\":30012,\"shareTxUntilMovement\":30012,\"totalShares\":42100000,\"maxShares\":8400000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":74478.76876324529,\"lastPrice\":74486,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.02,\"b\":true,\"otlkMag\":17.001650551249323,\"otlkMagForecast\":66.99917472437534,\"cap\":235351521,\"spreadPerc\":0.9,\"shareTxForMovement\":72387,\"shareTxUntilMovement\":72387,\"totalShares\":26900000,\"maxShares\":5400000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":16735.709645407413,\"lastPrice\":16737,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":true,\"otlkMag\":9.999228981250317,\"otlkMagForecast\":60.000385509374844,\"cap\":407603598,\"spreadPerc\":0.4,\"shareTxForMovement\":65930,\"shareTxUntilMovement\":65930,\"totalShares\":113500000,\"maxShares\":22700000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":31739.223528327046,\"lastPrice\":31743,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.25,\"b\":true,\"otlkMag\":16.00190374999922,\"otlkMagForecast\":66.00095187499961,\"cap\":405432600,\"spreadPerc\":0.2,\"shareTxForMovement\":68466,\"shareTxUntilMovement\":68466,\"totalShares\":63000000,\"maxShares\":12600000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":21117.371811038964,\"lastPrice\":21119,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":true,\"otlkMag\":7.000539713124779,\"otlkMagForecast\":56.99973014343761,\"cap\":347804360,\"spreadPerc\":0.3,\"shareTxForMovement\":73937,\"shareTxUntilMovement\":73937,\"totalShares\":56800000,\"maxShares\":11400000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":10591.675447644096,\"lastPrice\":10591,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":9.999362243750262,\"otlkMagForecast\":59.99968112187513,\"cap\":176949530,\"spreadPerc\":0.5,\"shareTxForMovement\":49444,\"shareTxUntilMovement\":49444,\"totalShares\":85000000,\"maxShares\":17000000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":14006.839913558404,\"lastPrice\":14006,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":8.999460286875221,\"otlkMagForecast\":58.99973014343761,\"cap\":346072797,\"spreadPerc\":0.5,\"shareTxForMovement\":66768,\"shareTxUntilMovement\":66768,\"totalShares\":58900000,\"maxShares\":11800000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":11805.157222448011,\"lastPrice\":11806,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":7.000499734374794,\"otlkMagForecast\":56.9997501328126,\"cap\":42999319,\"spreadPerc\":0.6,\"shareTxForMovement\":76658,\"shareTxUntilMovement\":76658,\"totalShares\":84700000,\"maxShares\":16900000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":21276.602566041915,\"lastPrice\":21278,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":7.499507404687702,\"otlkMagForecast\":57.50024629765615,\"cap\":256642092,\"spreadPerc\":0.8,\"shareTxForMovement\":96493,\"shareTxUntilMovement\":96493,\"totalShares\":37600000,\"maxShares\":7500000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":25365.792746801955,\"lastPrice\":25367,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":10.000475937499804,\"otlkMagForecast\":59.9997620312501,\"cap\":313302279,\"spreadPerc\":0.3,\"shareTxForMovement\":42588,\"shareTxUntilMovement\":42588,\"totalShares\":35500000,\"maxShares\":7100000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":15492.855293954648,\"lastPrice\":15492,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":true,\"otlkMag\":5.999668747500136,\"otlkMagForecast\":55.99983437375007,\"cap\":153075759,\"spreadPerc\":0.8,\"shareTxForMovement\":104058,\"shareTxUntilMovement\":104058,\"totalShares\":41300000,\"maxShares\":8300000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":8612.450735571783,\"lastPrice\":8613,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":4.4971300968761785,\"otlkMagForecast\":54.50143495156191,\"cap\":32643385,\"spreadPerc\":0.6,\"shareTxForMovement\":99306,\"shareTxUntilMovement\":99306,\"totalShares\":69700000,\"maxShares\":13900000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":23890.362673994812,\"lastPrice\":23892,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":8.50058254749976,\"otlkMagForecast\":58.49970872625012,\"cap\":196162626,\"spreadPerc\":0.6,\"shareTxForMovement\":79329,\"shareTxUntilMovement\":79329,\"totalShares\":29500000,\"maxShares\":5900000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":27151.5764477806,\"lastPrice\":27150,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":10.49939032406275,\"otlkMagForecast\":60.49969516203137,\"cap\":170312835,\"spreadPerc\":1,\"shareTxForMovement\":98469,\"shareTxUntilMovement\":98469,\"totalShares\":25600000,\"maxShares\":5100000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":20419.457653780653,\"lastPrice\":20418,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":5.000356953124854,\"otlkMagForecast\":55.000178476562425,\"cap\":308554719,\"spreadPerc\":1.1,\"shareTxForMovement\":70214,\"shareTxUntilMovement\":70214,\"totalShares\":29400000,\"maxShares\":5900000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":5271.6953213047045,\"lastPrice\":5273,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.6,\"b\":true,\"otlkMag\":1.4962876875015245,\"otlkMagForecast\":51.49814384375076,\"cap\":21500481,\"spreadPerc\":1.1,\"shareTxForMovement\":20781,\"shareTxUntilMovement\":20781,\"totalShares\":85300000,\"maxShares\":17100000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":6613.830906917159,\"lastPrice\":6613,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.32,\"b\":true,\"otlkMag\":5.99924611500031,\"otlkMagForecast\":55.99962305750015,\"cap\":85461534,\"spreadPerc\":0.6,\"shareTxForMovement\":93469,\"shareTxUntilMovement\":93469,\"totalShares\":45400000,\"maxShares\":9100000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":6968.444388554817,\"lastPrice\":6968,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":2,\"otlkMagForecast\":51.5,\"cap\":50714666,\"spreadPerc\":0.7,\"shareTxForMovement\":64438,\"shareTxUntilMovement\":64438,\"totalShares\":25800000,\"maxShares\":5200000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":4045.2722378266476,\"lastPrice\":4046,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.89,\"b\":true,\"otlkMag\":10.00179904374926,\"otlkMagForecast\":59.99910047812537,\"cap\":89604880,\"spreadPerc\":1.2,\"shareTxForMovement\":37341,\"shareTxUntilMovement\":37341,\"totalShares\":59300000,\"maxShares\":11900000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":3985.599329056004,\"lastPrice\":3985,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.58,\"b\":true,\"otlkMag\":2.995488112501853,\"otlkMagForecast\":52.99774405625092,\"cap\":22856688,\"spreadPerc\":0.6,\"shareTxForMovement\":88814,\"shareTxUntilMovement\":88814,\"totalShares\":50200000,\"maxShares\":10000000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":3746.679026691264,\"lastPrice\":3747,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.9,\"b\":true,\"otlkMag\":4.003426749998593,\"otlkMagForecast\":54.0017133749993,\"cap\":72434654,\"spreadPerc\":1.1,\"shareTxForMovement\":75734,\"shareTxUntilMovement\":75734,\"totalShares\":49400000,\"maxShares\":9900000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":2852.6433951572362,\"lastPrice\":2852,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.37,\"b\":true,\"otlkMag\":0,\"otlkMagForecast\":51.5,\"cap\":4051078,\"spreadPerc\":1.1,\"shareTxForMovement\":22858,\"shareTxUntilMovement\":22858,\"totalShares\":20300000,\"maxShares\":4100000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":4437.5775980825565,\"lastPrice\":4438,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1,\"b\":false,\"otlkMag\":0.5,\"otlkMagForecast\":50,\"cap\":7769864,\"spreadPerc\":1.2,\"shareTxForMovement\":48000,\"shareTxUntilMovement\":48000,\"totalShares\":13500000,\"maxShares\":2700000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":1599.8827375947228,\"lastPrice\":1600,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":2,\"otlkMagForecast\":48.5,\"cap\":11490472,\"spreadPerc\":0.7,\"shareTxForMovement\":158297,\"shareTxUntilMovement\":158297,\"totalShares\":28100000,\"maxShares\":5600000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":2751.376685929721,\"lastPrice\":2752,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.38,\"b\":false,\"otlkMag\":1,\"otlkMagForecast\":50.5,\"cap\":62805103,\"spreadPerc\":1.4,\"shareTxForMovement\":22141,\"shareTxUntilMovement\":22141,\"totalShares\":10900000,\"maxShares\":2200000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":1199.6551396358573,\"lastPrice\":1200,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.02,\"b\":true,\"otlkMag\":0,\"otlkMagForecast\":50.5,\"cap\":10315278,\"spreadPerc\":1.3,\"shareTxForMovement\":24224,\"shareTxUntilMovement\":24224,\"totalShares\":35000000,\"maxShares\":7000000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":1351.2109012324133,\"lastPrice\":1351,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.64,\"b\":true,\"otlkMag\":13.502107451249135,\"otlkMagForecast\":63.501053725624566,\"cap\":2917509,\"spreadPerc\":1,\"shareTxForMovement\":49980,\"shareTxUntilMovement\":49980,\"totalShares\":74000000,\"maxShares\":14800000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":23785.743233414287,\"lastPrice\":23784,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":7.99941364500024,\"otlkMagForecast\":58.00029317749988,\"cap\":193713664,\"spreadPerc\":0.4,\"shareTxForMovement\":180220,\"shareTxUntilMovement\":180220,\"totalShares\":15100000,\"maxShares\":3000000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":20276.119357405787,\"lastPrice\":20275,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":true,\"otlkMag\":11.00060729624975,\"otlkMagForecast\":60.99969635187512,\"cap\":39681313,\"spreadPerc\":0.3,\"shareTxForMovement\":196912,\"shareTxUntilMovement\":196912,\"totalShares\":20700000,\"maxShares\":4100000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":29,\"lastUpdate\":1652769316062,\"ticksUntilCycle\":74}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":5,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":0,\"MaxLogCapacity\":20,\"MaxPortCapacity\":20,\"MaxTerminalCapacity\":200,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":true,\"SuppressTIXPopup\":true,\"SuppressSavedGameToast\":true,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":true,\"ExcludeRunningScriptsFromSave\":true,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#7389DC\",\"primary\":\"#7389DC\",\"primarydark\":\"#5964F1\",\"successlight\":\"#00CC00\",\"success\":\"#20DF20\",\"successdark\":\"#0CB80C\",\"errorlight\":\"#EA5558\",\"error\":\"#EC4145\",\"errordark\":\"#E82528\",\"secondarylight\":\"#AAA\",\"secondary\":\"#D6D6D6\",\"secondarydark\":\"#4E4E4E\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#1C4FB3\",\"welllight\":\"#999999\",\"well\":\"#35383C\",\"white\":\"#FFFFFF\",\"black\":\"#202225\",\"hp\":\"#FF5656\",\"money\":\"#43FF43\",\"hack\":\"#FFAB3D\",\"combat\":\"#D8DAFF\",\"cha\":\"#FF51D9\",\"int\":\"#6495ed\",\"rep\":\"#FFFF30\",\"disabled\":\"#474B51\",\"backgroundprimary\":\"#171719\",\"backgroundsecondary\":\"#262729\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-1,\"y\":2,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}}}","VersionSave":"15","AllGangsSave":"{\"Slum Snakes\":{\"power\":1745.4425937651042,\"territory\":1},\"Tetrads\":{\"power\":1653.5830593052767,\"territory\":0},\"The Syndicate\":{\"power\":1665.9068899291847,\"territory\":0},\"The Dark Army\":{\"power\":1618.1027796271358,\"territory\":0},\"Speakers for the Dead\":{\"power\":740.2024024191043,\"territory\":0},\"NiteSec\":{\"power\":1641.677108419533,\"territory\":0},\"The Black Hand\":{\"power\":737.7868684600755,\"territory\":0}}","LastExportBonus":"1652692760727","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}