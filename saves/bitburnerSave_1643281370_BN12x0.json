{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":667,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":2,\"intelligence\":125,\"hacking_chance_mult\":1.608778718035818,\"hacking_speed_mult\":1.6257950003620143,\"hacking_money_mult\":1.53217020765316,\"hacking_grow_mult\":1.53217020765316,\"hacking_exp\":53413667.935756795,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":25301.671355712468,\"hacking_mult\":1.807462889713242,\"strength_mult\":1.344008954081719,\"defense_mult\":1.344008954081719,\"dexterity_mult\":1.344008954081719,\"agility_mult\":1.344008954081719,\"charisma_mult\":2.0611721319797245,\"hacking_exp_mult\":1.685387228418476,\"strength_exp_mult\":1.4784098494898912,\"defense_exp_mult\":1.4784098494898912,\"dexterity_exp_mult\":1.4784098494898912,\"agility_exp_mult\":1.4784098494898912,\"charisma_exp_mult\":1.4784098494898912,\"company_rep_mult\":1.7001713269133747,\"faction_rep_mult\":1.7001713269133747,\"money\":32709219583.20456,\"city\":\"Aevum\",\"location\":\"ECorp\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\"],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"NiteSec\",\"Chongqing\",\"Tian Di Hui\",\"The Black Hand\",\"BitRunners\"],\"factionInvitations\":[\"CyberSec\"],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":4,\"name\":\"NeuroFlux Governor\"}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":3,\"n\":5},{\"lvl\":3,\"n\":4},{\"lvl\":3,\"n\":2},{\"lvl\":1,\"n\":3}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.9084927147960409,\"crime_success_mult\":1.9084927147960409,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"Chongqing\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.2528080842627714,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":1.333766684310302,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":42.87625109096606,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":226.20682965902665,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":50,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":42200,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.5966826374490826,\"hacknet_node_money_mult\":1.344008954081719,\"hacknet_node_purchase_cost_mult\":0.6854293056939906,\"hacknet_node_ram_cost_mult\":0.6854293056939906,\"hacknet_node_core_cost_mult\":0.6854293056939906,\"hacknet_node_level_cost_mult\":0.6854293056939906,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":12,\"lastUpdate\":1643281370105,\"totalPlaytime\":3584475600,\"playtimeSinceLastAug\":49242400,\"playtimeSinceLastBitnode\":80082400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":900000000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":402974198464,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-161310460076.91162,\"total\":32708219583.20456,\"work\":0,\"servers\":-209818418803.88385,\"other\":-37100000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":900000000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":412306051709.32336,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-161310460076.91162,\"total\":32943968733.605255,\"work\":444663.5068538353,\"servers\":-214461622545.68866,\"other\":-44600000,\"augmentations\":-4445845016.62468}},\"scriptProdSinceLastAug\":402974198464,\"exploits\":[\"N00dles\",\"UndocumentedFunctionCall\",\"Bypass\",\"PrototypeTampering\",\"RealityAlteration\",\"Unclickable\",\"TimeCompression\",\"EditSaveFile\",\"YoureNotMeantToAccessThis\"],\"achievements\":[{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641679889873},{\"ID\":\"NITESEC\",\"unlockedOn\":1641679889924},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641679889930},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641679889937},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641679889950},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641679889959},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641679889967},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1641679889976},{\"ID\":\"SF1.1\",\"unlockedOn\":1641679889988},{\"ID\":\"SF4.1\",\"unlockedOn\":1641679889998},{\"ID\":\"SF5.1\",\"unlockedOn\":1641679890005},{\"ID\":\"NS2\",\"unlockedOn\":1641679890014},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1641679890023},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1641679890030},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641679890036},{\"ID\":\"TOR\",\"unlockedOn\":1641679890048},{\"ID\":\"BYPASS\",\"unlockedOn\":1641679890061},{\"ID\":\"PROTOTYPETAMPERING\",\"unlockedOn\":1641679890067},{\"ID\":\"UNCLICKABLE\",\"unlockedOn\":1641679890073},{\"ID\":\"UNDOCUMENTEDFUNCTIONCALL\",\"unlockedOn\":1641679890083},{\"ID\":\"TIMECOMPRESSION\",\"unlockedOn\":1641679890090},{\"ID\":\"REALITYALTERATION\",\"unlockedOn\":1641679890099},{\"ID\":\"N00DLES\",\"unlockedOn\":1641679890109},{\"ID\":\"EDITSAVEFILE\",\"unlockedOn\":1641679890117},{\"ID\":\"DEVMENU\",\"unlockedOn\":1641679890130},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641681211658},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641687973510},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641721856386},{\"ID\":\"UNACHIEVABLE\",\"unlockedOn\":1641722341982},{\"ID\":\"FROZE\",\"unlockedOn\":1641734437104},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1641817424050},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1641903848242},{\"ID\":\"4S\",\"unlockedOn\":1641907336632},{\"ID\":\"DONATION\",\"unlockedOn\":1641907396617},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641908663322},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1641918704987},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1641937453791},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1641982053228},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1641982113197},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1641984580423},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1641985300316},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641991378620},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1641999052675},{\"ID\":\"WORKOUT\",\"unlockedOn\":1642334647833},{\"ID\":\"INDECISIVE\",\"unlockedOn\":1642343484769},{\"ID\":\"FAST_BN\",\"unlockedOn\":1642768530890},{\"ID\":\"GANG\",\"unlockedOn\":1642772019491},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1642804547259},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1642841548633},{\"ID\":\"SF2.1\",\"unlockedOn\":1642849051433},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1643025332087},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1643025332093},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1643025332094},{\"ID\":\"GANG_TERRITORY\",\"unlockedOn\":1643032932296},{\"ID\":\"CORPORATION\",\"unlockedOn\":1643059508902},{\"ID\":\"CORPORATION_BRIBE\",\"unlockedOn\":1643193348323},{\"ID\":\"CORPORATION_REAL_ESTATE\",\"unlockedOn\":1643194428307},{\"ID\":\"CORPORATION_PROD_1000\",\"unlockedOn\":1643195028369},{\"ID\":\"MONEY_1Q\",\"unlockedOn\":1643197062119},{\"ID\":\"QUEUE_40\",\"unlockedOn\":1643198982091},{\"ID\":\"MAX_RAM\",\"unlockedOn\":1643200021662},{\"ID\":\"SF3.1\",\"unlockedOn\":1643201341872}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":3,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"94.5.4.1\",\"isConnectedTo\":true,\"maxRam\":16384,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"Formulas.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\"],\"ramUsed\":9313.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"cortex.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15788213.926078185,\"onlineMoneyMade\":66018270519,\"onlineRunningTime\":49242.4099999628,\"pid\":1,\"ramUsage\":54.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///fcef7233-6e11-427d-9346-114f0e7e5aba\",\"moduleSequenceNumber\":486},{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///5e8176cd-5ffe-47e1-a8dd-d54fd7ed3227\",\"moduleSequenceNumber\":486},{\"filename\":\"/utils/contractor.js\",\"url\":\"blob:file:///b90acba7-f7e1-4f85-9ef1-1ea5f1162230\",\"moduleSequenceNumber\":947},{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///6b264210-9ddd-422c-8ad5-b7a26f41937d\",\"moduleSequenceNumber\":486},{\"filename\":\"/hacking/hack-manager.js\",\"url\":\"blob:file:///cc207d78-bb6e-43ec-8fef-fcb3d9b58624\",\"moduleSequenceNumber\":929},{\"filename\":\"cortex.js\",\"url\":\"blob:file:///554804b6-8a16-45aa-837c-d66d87573166\",\"moduleSequenceNumber\":6542}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/ui/overview.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49242.4099999628,\"pid\":2,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/ui/overview.js\",\"url\":\"blob:file:///5406800c-7ce1-452d-990c-510d8bc34ad1\",\"moduleSequenceNumber\":6555}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1558854.7071440225,\"onlineMoneyMade\":93369383700,\"onlineRunningTime\":5134.209999998382,\"pid\":4901,\"ramUsage\":8.3,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///56e0cc7f-853a-4bf0-a810-863218e397ad\",\"moduleSequenceNumber\":54073},{\"filename\":\"/hacking/daemon.js\",\"url\":\"blob:file:///83e21ff7-f5b8-4800-99e4-c1419c8d9584\",\"moduleSequenceNumber\":80065}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":143.21000000000058,\"pid\":19694,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1004,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///78e9031b-873b-4490-b4dd-b5f7a4434ed5\",\"moduleSequenceNumber\":54936}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":143.21000000000058,\"pid\":19695,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":81,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///7d3a8a62-b95c-409d-a5e6-ae4d75a83734\",\"moduleSequenceNumber\":54935}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":105.41000000000095,\"pid\":19852,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":57,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///7d3a8a62-b95c-409d-a5e6-ae4d75a83734\",\"moduleSequenceNumber\":54935}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",192925.25863218025,0],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.01000000000083,\"pid\":19868,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":183,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///1407defb-33e7-4856-b76c-85f17a3dcdf1\",\"moduleSequenceNumber\":55867}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",0,0],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.01000000000083,\"pid\":19869,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":8,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///7d3a8a62-b95c-409d-a5e6-ae4d75a83734\",\"moduleSequenceNumber\":54935}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",65821.55882744974,0],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.01000000000083,\"pid\":19870,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":678,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///78e9031b-873b-4490-b4dd-b5f7a4434ed5\",\"moduleSequenceNumber\":54936}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",22697.089250844732,0],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.01000000000083,\"pid\":19871,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":55,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///7d3a8a62-b95c-409d-a5e6-ae4d75a83734\",\"moduleSequenceNumber\":54935}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",192925.25863218025,1],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.610000000000156,\"pid\":20056,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":183,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///1407defb-33e7-4856-b76c-85f17a3dcdf1\",\"moduleSequenceNumber\":55867}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",0,1],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.610000000000156,\"pid\":20057,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":8,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///7d3a8a62-b95c-409d-a5e6-ae4d75a83734\",\"moduleSequenceNumber\":54935}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",65821.55882744974,1],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.610000000000156,\"pid\":20058,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":678,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///78e9031b-873b-4490-b4dd-b5f7a4434ed5\",\"moduleSequenceNumber\":54936}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",22697.089250844732,1],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.610000000000156,\"pid\":20059,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":55,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///7d3a8a62-b95c-409d-a5e6-ae4d75a83734\",\"moduleSequenceNumber\":54935}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/stock-market/stock-market.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.40999999999997,\"pid\":20198,\"ramUsage\":19.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/stock-market/stock-market.js\",\"url\":\"blob:file:///3f613969-7780-4227-a33a-13a0356e9e86\",\"moduleSequenceNumber\":9150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":20247,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1274,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///78e9031b-873b-4490-b4dd-b5f7a4434ed5\",\"moduleSequenceNumber\":54936}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":20248,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":102,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///7d3a8a62-b95c-409d-a5e6-ae4d75a83734\",\"moduleSequenceNumber\":54935}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",192925.25863218025,2],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000002,\"pid\":20249,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":183,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///1407defb-33e7-4856-b76c-85f17a3dcdf1\",\"moduleSequenceNumber\":55867}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",0,2],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000002,\"pid\":20250,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":8,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///7d3a8a62-b95c-409d-a5e6-ae4d75a83734\",\"moduleSequenceNumber\":54935}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",65821.55882744974,2],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000002,\"pid\":20251,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":678,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///78e9031b-873b-4490-b4dd-b5f7a4434ed5\",\"moduleSequenceNumber\":54936}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",22697.089250844732,2],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000002,\"pid\":20252,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":55,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///7d3a8a62-b95c-409d-a5e6-ae4d75a83734\",\"moduleSequenceNumber\":54935}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main() {\\n\\tlet boxes = Array.from(eval('document').querySelectorAll('[class*=MuiBox-root]'));\\n\\tlet box = boxes.find(x => hasPlayer(x));\\n\\n\\tif (box) {\\n\\t\\tlet props = getProps(box);\\n\\t\\tprops.router.toDevMenu();\\n\\t}\\n}\\n\\nfunction getProps(obj) {\\n\\treturn Object.entries(obj).find(entry => entry[0].startsWith('__reactProps'))[1].children.props;\\n}\\n\\nfunction hasPlayer(obj) {\\n\\ttry {\\n\\t\\treturn !!getProps(obj).player;\\n\\t} catch (err) {\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/exploits/dev-menu.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/exploits/dev-menu.js\",\"url\":\"blob:file:///0b983167-dada-4071-8c15-200ae61f0c33\"}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":54052,\"_hash\":\"b03b9cede60b50447d1f38b2e370d36f9517e5d1b9accfc2ed19d72569cd3499\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///56e0cc7f-853a-4bf0-a810-863218e397ad\",\"moduleSequenceNumber\":54073},{\"filename\":\"/hacking/daemon.js\",\"url\":\"blob:file:///83e21ff7-f5b8-4800-99e4-c1419c8d9584\",\"moduleSequenceNumber\":80065}],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"home\",\"moduleSequenceNumber\":80065,\"_hash\":\"c3ca17a56df6b613ed91932e42a70387a783e9cb47b5cfc31bb8061753f01b12\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAccessibleServers, getOptimalHackable, getScripts} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tconst scripts = getScripts();\\n\\tconst servers = getAccessibleServers(ns);\\n\\tconst hackables = getOptimalHackable(ns, servers);\\n\\n\\tfor (let script of Object.values(scripts)) {\\n\\t\\tns.scriptKill(script, 'home');\\n\\t}\\n\\tns.exec(scripts.daemon, 'home', 1, hackables[0]);\\n\\n\\tfor (let [i, host] of ns.getPurchasedServers().entries()) {\\n\\t\\tif (i < hackables.length) {\\n\\t\\t\\tfor (let script of Object.values(scripts)) {\\n\\t\\t\\t\\tns.scriptKill(script, host);\\n\\t\\t\\t}\\n\\t\\t\\tns.exec(scripts.daemon, host, 1, hackables[i + 1]);\\n\\t\\t} else break;\\n\\t}\\n}\",\"filename\":\"/hacking/deploy-daemons.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///837a37ce-2cb9-497c-853f-1940f3f1fc40\",\"moduleSequenceNumber\":54073},{\"filename\":\"/hacking/deploy-daemons.js\",\"url\":\"blob:file:///bd49f24e-59f8-4b0c-8ba9-bfe4f202b0ac\",\"moduleSequenceNumber\":80064}],\"dependents\":[],\"ramUsage\":10.8,\"server\":\"home\",\"moduleSequenceNumber\":80064,\"_hash\":\"e07c7eeee9dea647b8c311043faf667a8094d6cc2dbaac5b50d84eeb2bcae064\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///78e9031b-873b-4490-b4dd-b5f7a4434ed5\",\"moduleSequenceNumber\":54936}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":54936,\"_hash\":\"d4919ca0b839149d0836473b5a11aa73a718df89acac9fdc22b51ab4173c1321\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n\\tcopyScriptsToAll,\\n\\tfindPlaceToRun,\\n\\tgetAccessibleServers,\\n\\tgetFreeRam,\\n\\tgetOptimalHackable,\\n\\tgetScripts\\n} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tawait copyScriptsToAll(ns);\\n\\twhile (true) {\\n\\t\\tmanageAndHack(ns);\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\nexport function manageAndHack(ns) {\\n\\tconst scripts = getScripts();\\n\\tconst servers = getAccessibleServers(ns);\\n\\tconst hackables = getOptimalHackable(ns, servers);\\n\\tconst [freeRams, filteredHackables] = getFreeRam(ns, servers, hackables);\\n\\tconst hackstates = getHackStates(ns, servers, filteredHackables);\\n\\tfor (let target of filteredHackables) {\\n\\t\\tlet money = ns.getServerMoneyAvailable(target);\\n\\t\\tlet maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tlet minSec = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet sec = ns.getServerSecurityLevel(target);\\n\\n\\t\\tlet secDiff = sec - minSec;\\n\\t\\tif (secDiff > 0) {\\n\\t\\t\\tlet threads = Math.ceil(secDiff * 20) - hackstates.get(target).weaken;\\n\\t\\t\\tif (threads > 0) {\\n\\t\\t\\t\\tif (!findPlaceToRun(ns, scripts.weaken, threads, freeRams, [target])) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tlet moneyPercent = money / maxMoney;\\n\\t\\tif (moneyPercent === 0) moneyPercent = 0.1;\\n\\t\\tif (moneyPercent < 0.9) {\\n\\t\\t\\tlet threads = Math.ceil(ns.growthAnalyze(target, 1 / moneyPercent)) - hackstates.get(target).grow;\\n\\t\\t\\tif (threads > 0) {\\n\\t\\t\\t\\tif (!findPlaceToRun(ns, scripts.grow, threads, freeRams, [target])) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (moneyPercent > 0.75 && secDiff < 50) {\\n\\t\\t\\tlet threads = Math.floor(ns.hackAnalyzeThreads(target, money - (0.4 * maxMoney))) - hackstates.get(target).hack;\\n\\t\\t\\tif (threads > 0) {\\n\\t\\t\\t\\tif (!findPlaceToRun(ns, scripts.hack, threads, freeRams, [target])) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction getHackStates(ns, servers, hackables) {\\n\\tconst scripts = getScripts();\\n\\tconst hackstates = new Map();\\n\\tfor (let server of servers.values()) {\\n\\t\\tfor (let hackable of hackables.values()) {\\n\\t\\t\\tlet weakenScript = ns.getRunningScript(scripts.weaken, server, hackable);\\n\\t\\t\\tlet growScript = ns.getRunningScript(scripts.grow, server, hackable);\\n\\t\\t\\tlet hackScript = ns.getRunningScript(scripts.hack, server, hackable);\\n\\t\\t\\tif (hackstates.has(hackable)) {\\n\\t\\t\\t\\thackstates.get(hackable).weaken += !weakenScript ? 0 : weakenScript.threads;\\n\\t\\t\\t\\thackstates.get(hackable).grow += !growScript ? 0 : growScript.threads;\\n\\t\\t\\t\\thackstates.get(hackable).hack += !hackScript ? 0 : hackScript.threads;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\thackstates.set(hackable, {\\n\\t\\t\\t\\t\\tweaken: !weakenScript ? 0 : weakenScript.threads,\\n\\t\\t\\t\\t\\tgrow: !growScript ? 0 : growScript.threads,\\n\\t\\t\\t\\t\\thack: !hackScript ? 0 : hackScript.threads\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn hackstates;\\n}\",\"filename\":\"/hacking/hack-manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///83b5725c-9a1f-4255-9c2c-a476cc9cd556\",\"moduleSequenceNumber\":486},{\"filename\":\"/hacking/hack-manager.js\",\"url\":\"blob:file:///a3f0d0b4-758b-4827-9d83-4f01487c68f9\",\"moduleSequenceNumber\":929}],\"dependents\":[],\"ramUsage\":12.85,\"server\":\"home\",\"moduleSequenceNumber\":54056,\"_hash\":\"b32ae978a334b77e54be495f88ea81520a1b0604cb6a8b1dffd28dfa89f97207\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///1407defb-33e7-4856-b76c-85f17a3dcdf1\",\"moduleSequenceNumber\":55867}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":55867,\"_hash\":\"e069d60f0f0c6197182950d3c3105a36cae3b096c5b47e4eeff3d2e011a163d1\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///7d3a8a62-b95c-409d-a5e6-ae4d75a83734\",\"moduleSequenceNumber\":54935}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":54935,\"_hash\":\"08854ec21e551e0919facae4cf4276671f7ea728815f06750286cba970c1dfca\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const commission = 100000;\\nconst samplingLength = 30;\\n\\nfunction predictState(samples) {\\n\\tconst limits = [null, null, null, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 11, 12, 12, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 19, 19, 20];\\n\\tlet inc = 0;\\n\\tfor (let i = 0; i < samples.length; ++i) {\\n\\t\\tconst total = i + 1;\\n\\t\\tconst idx = samples.length - total;\\n\\t\\tif (samples[idx] > 1) {\\n\\t\\t\\tinc++;\\n\\t\\t}\\n\\t\\tconst limit = limits[i];\\n\\t\\tif (limit === null) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (inc >= limit) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\tif ((total - inc) >= limit) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t}\\n\\treturn 0;\\n}\\n\\nfunction posNegDiff(samples) {\\n\\tconst pos = samples.reduce((acc, curr) => acc + (curr > 1. ? 1 : 0), 0);\\n\\treturn Math.abs(samples.length - 2 * pos);\\n}\\n\\nfunction posNegRatio(samples) {\\n\\tconst pos = samples.reduce((acc, curr) => acc + (curr > 1. ? 1 : 0), 0);\\n\\treturn Math.round(100 * (2 * pos / samples.length - 1));\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"ALL\\\");\\n\\tlet symLastPrice = {};\\n\\tlet symChanges = {};\\n\\tfor (const sym of ns.stock.getSymbols()) {\\n\\t\\tsymLastPrice[sym] = ns.stock.getPrice(sym);\\n\\t\\tsymChanges[sym] = []\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(2000);\\n\\n\\t\\tif (symLastPrice['FSIG'] === ns.stock.getPrice('FSIG')) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tfor (const sym of ns.stock.getSymbols()) {\\n\\t\\t\\tconst current = ns.stock.getPrice(sym);\\n\\t\\t\\tsymChanges[sym].push(current / symLastPrice[sym]);\\n\\t\\t\\tsymLastPrice[sym] = current;\\n\\t\\t\\tif (symChanges[sym].length > samplingLength) {\\n\\t\\t\\t\\tsymChanges[sym] = symChanges[sym].slice(symChanges[sym].length - samplingLength);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tconst prioritizedSymbols = [...ns.stock.getSymbols()];\\n\\t\\tprioritizedSymbols.sort((a, b) => posNegDiff(symChanges[b]) - posNegDiff(symChanges[a]));\\n\\n\\t\\tfor (const sym of prioritizedSymbols) {\\n\\t\\t\\tconst positions = ns.stock.getPosition(sym);\\n\\t\\t\\tconst longShares = positions[0];\\n\\t\\t\\tconst longPrice = positions[1];\\n\\t\\t\\tconst shortShares = positions[2];\\n\\t\\t\\tconst shortPrice = positions[3];\\n\\t\\t\\tconst state = predictState(symChanges[sym]);\\n\\t\\t\\tconst ratio = posNegRatio(symChanges[sym]);\\n\\t\\t\\tconst bidPrice = ns.stock.getBidPrice(sym);\\n\\t\\t\\tconst askPrice = ns.stock.getAskPrice(sym);\\n\\t\\t\\tif (longShares <= 0 && shortShares <= 0 && ns.stock.getPrice(sym) < 30000) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (longShares > 0) {\\n\\t\\t\\t\\tconst cost = longShares * longPrice;\\n\\t\\t\\t\\tconst profit = longShares * (bidPrice - longPrice) - 2 * commission;\\n\\t\\t\\t\\tif (state < 0) {\\n\\t\\t\\t\\t\\tconst sellPrice = ns.stock.sell(sym, longShares);\\n\\t\\t\\t\\t\\tif (sellPrice > 0) {\\n\\t\\t\\t\\t\\t\\tns.print(`SOLD (long) ${sym}. Profit: ${ns.nFormat(profit, \\\"0.000a\\\")}`);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.print(`${sym} (${ratio}): ${ns.nFormat(profit + cost, \\\"0.000a\\\")} / ${ns.nFormat(profit, \\\"0.000a\\\")} (${(profit / cost * 100).toFixed(2)}%)`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (shortShares > 0) {\\n\\t\\t\\t\\tconst cost = shortShares * shortPrice;\\n\\t\\t\\t\\tconst profit = shortShares * (shortPrice - askPrice) - 2 * commission;\\n\\t\\t\\t\\tif (state > 0) {\\n\\t\\t\\t\\t\\tconst sellPrice = ns.stock.sellShort(sym, shortShares);\\n\\t\\t\\t\\t\\tif (sellPrice > 0) {\\n\\t\\t\\t\\t\\t\\tns.print(`SOLD (short) ${sym}. Profit: ${ns.nFormat(profit, \\\"0.000a\\\")}`);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.print(`${sym} (${ratio}): ${ns.nFormat(profit + cost, \\\"0.000a\\\")} / ${ns.nFormat(profit, \\\"0.000a\\\")} (${(profit / cost * 100).toFixed(2)}%)`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tconst money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\t\\t\\tif (state > 0) {\\n\\t\\t\\t\\t\\tconst sharesToBuy = Math.min(10000, ns.stock.getMaxShares(sym), Math.floor((money - commission) / askPrice));\\n\\t\\t\\t\\t\\tif (ns.stock.buy(sym, sharesToBuy) > 0) {\\n\\t\\t\\t\\t\\t\\tns.print(`BOUGHT (long) ${sym}.`);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// else if (state < 0 ) {\\n\\t\\t\\t\\t//   const sharesToBuy = Math.min(10000, ns.stock.getMaxShares(sym), Math.floor((money - commission) / bidPrice));\\n\\t\\t\\t\\t//   if (ns.stock.short(sym, sharesToBuy) > 0) {\\n\\t\\t\\t\\t//     ns.print(`BOUGHT (short) ${sym}.`);\\n\\t\\t\\t\\t//   }\\n\\t\\t\\t\\t// }\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/stock-market/early-stock-market.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.2,\"server\":\"home\",\"moduleSequenceNumber\":54059,\"_hash\":\"0890e76738fe633d9a1eb148bba50d4c190523f9ee2a3df71b15d621ba9a506f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Requires access to the TIX API and the 4S Mkt Data API\\nconst fracL = 0.1; // Fraction of assets to keep as cash in hand\\nconst fracH = 0.2;\\nconst commission = 100000; // Buy or sell commission\\n\\nfunction refresh(ns, stocks, myStocks) {\\n\\tlet corpus = ns.getServerMoneyAvailable('home');\\n\\tmyStocks.length = 0;\\n\\tfor (let stock of stocks) {\\n\\t\\tlet sym = stock.sym;\\n\\t\\tstock.price = ns.stock.getPrice(sym);\\n\\t\\t[stock.shares, stock.buyPrice] = ns.stock.getPosition(sym);\\n\\t\\tstock.vol = ns.stock.getVolatility(sym);\\n\\t\\tstock.prob = 2 * (ns.stock.getForecast(sym) - 0.5);\\n\\t\\tstock.expRet = stock.vol * stock.prob / 2;\\n\\t\\tcorpus += stock.price * stock.shares;\\n\\t\\tif (stock.shares > 0) myStocks.push(stock);\\n\\t}\\n\\tstocks.sort((a, b) => b.expRet - a.expRet);\\n\\treturn corpus;\\n}\\n\\nfunction buy(ns, stock, numShares) {\\n\\tlet price = ns.stock.buy(stock.sym, numShares);\\n\\tlet totalPrice = price * numShares\\n\\tif (price) ns.print(`Bought ${numShares} shares of ${stock.sym} for ${ns.nFormat(totalPrice, '$0.000a')}`);\\n}\\n\\nfunction sell(ns, stock, numShares) {\\n\\tlet price = ns.stock.sell(stock.sym, numShares);\\n\\tlet profit = numShares * (stock.price - stock.buyPrice) - 2 * commission;\\n\\tif (price) ns.print(`Sold ${numShares} shares of ${stock.sym} for a profit of ${ns.nFormat(profit, '$0.000a')}`);\\n}\\n\\nexport async function main(ns) {\\n\\t//Initialise\\n\\tns.disableLog('ALL');\\n\\tconst stocks = [];\\n\\tconst myStocks = [];\\n\\n\\tfor (let sym of ns.stock.getSymbols()) {\\n\\t\\tstocks.push({sym: sym});\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tlet corpus = refresh(ns, stocks, myStocks);\\n\\t\\t// Sell underperforming shares\\n\\t\\tfor (let myStock of myStocks) {\\n\\t\\t\\tif (stocks[0].expRet > myStock.expRet) {\\n\\t\\t\\t\\tsell(ns, myStock, myStock.shares);\\n\\t\\t\\t\\tcorpus -= commission;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Sell shares if not enough cash in hand\\n\\t\\tfor (let myStock of myStocks) {\\n\\t\\t\\tif (ns.getServerMoneyAvailable('home') < fracL * corpus) {\\n\\t\\t\\t\\tlet cashNeeded = corpus * fracH - ns.getServerMoneyAvailable('home') + commission;\\n\\t\\t\\t\\tlet numShares = Math.ceil(cashNeeded / myStock.price);\\n\\t\\t\\t\\tsell(ns, myStock, numShares);\\n\\t\\t\\t\\tcorpus -= commission;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Buy shares with cash remaining in hand\\n\\t\\tlet cashToSpend = ns.getServerMoneyAvailable('home') - fracH * corpus;\\n\\t\\tlet numShares = Math.floor((cashToSpend - commission) / stocks[0].price);\\n\\t\\tif (numShares > ns.stock.getMaxShares(stocks[0].sym)) numShares = ns.stock.getMaxShares(stocks[0].sym);\\n\\t\\tif ((numShares * stocks[0].expRet * stocks[0].price) > commission) buy(ns, stocks[0], numShares);\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"/stock-market/stock-market.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/stock-market/stock-market.js\",\"url\":\"blob:file:///e5d0a359-4201-4fb0-a5b2-e40cf71bbc4f\",\"moduleSequenceNumber\":144669}],\"dependents\":[],\"ramUsage\":19.7,\"server\":\"home\",\"moduleSequenceNumber\":144669,\"_hash\":\"ca81c8c0412629b3e18e85ad1998d2eac9761df2b274f7a9a284c377cac51203\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst server = ns.args[0];\\n\\tconst usedRam = ns.getServerUsedRam(server);\\n\\tconst maxRam = ns.getServerMaxRam(server);\\n\\tconst money = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst minSec = ns.getServerMinSecurityLevel(server);\\n\\tconst sec = ns.getServerSecurityLevel(server);\\n\\n\\tns.tprint(`\\n${server}:\\n    RAM        : ${ns.nFormat(usedRam * 1000 ** 3, \\\"0.00b\\\")} / ${ns.nFormat(maxRam * 1000 ** 3, \\\"0.00b\\\")} (${(usedRam / maxRam * 100).toFixed(2)}%)\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)}\\n    hack time  : ${ns.tFormat(ns.getHackTime(server))}\\n    grow time  : ${ns.tFormat(ns.getGrowTime(server))}\\n    weaken time: ${ns.tFormat(ns.getWeakenTime(server))}\\n    grow x2    : ${Math.ceil(ns.growthAnalyze(server, 2))} threads\\n    grow x3    : ${Math.ceil(ns.growthAnalyze(server, 3))} threads\\n    grow x4    : ${Math.ceil(ns.growthAnalyze(server, 4))} threads\\n    hack 10%   : ${Math.floor(0.1 / ns.hackAnalyze(server))} threads\\n    hack 25%   : ${Math.floor(0.25 / ns.hackAnalyze(server))} threads\\n    hack 50%   : ${Math.floor(0.5 / ns.hackAnalyze(server))} threads\\n    hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/tools/analyze-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/tools/analyze-server.js\",\"url\":\"blob:file:///b0c61b47-12c8-41d9-bbb2-adf3b8063f1a\",\"moduleSequenceNumber\":108883}],\"dependents\":[],\"ramUsage\":5.35,\"server\":\"home\",\"moduleSequenceNumber\":108883,\"_hash\":\"6619cc0c1589e2f49c33c30e904029c7c743566bf011fc5b60dc419a8a18df87\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst mults = ns.getBitNodeMultipliers();\\n\\tfor (let [mult, val] of Object.entries(mults)) {\\n\\t\\tns.tprint(`${mult}: ${val}`);\\n\\t}\\n}\",\"filename\":\"/tools/bitnode-multipliers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/tools/bitnode-multipliers.js\",\"url\":\"blob:file:///4b79ecff-7551-4610-bcf3-0667b2532f33\",\"moduleSequenceNumber\":80995}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":80995,\"_hash\":\"1b05da9eaa009ff6c1ea4327f0928a1b9a84baca2b54e41f2732e27a3ed8d76f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst cost = ns.getPurchasedServerCost(Math.pow(2, ns.args[0]));\\n\\tns.tprint(ns.nFormat(cost, '$0.000a') + ' / ' + ns.nFormat(cost * 25, '$0.000a'));\\n}\",\"filename\":\"/tools/cost-pserv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/tools/cost-pserv.js\",\"url\":\"blob:file:///fd5c0d9f-3a26-40b4-b3ae-9e77b1fad41f\",\"moduleSequenceNumber\":91206}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"home\",\"moduleSequenceNumber\":91206,\"_hash\":\"eb5525ca20ffef2475d020610dafdbb753f15035ae52f347f9dd19b6aa4a620f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst favor = 1 + Math.floor(Math.log((ns.args[0] + 25000) / 25500) / Math.log(1.02));\\n\\tns.tprint(favor);\\n}\",\"filename\":\"/tools/favor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":54064,\"_hash\":\"6ad751e0df0ec6fbb7d5566bba9ffd5bf774eb0a307aa21712094760add3d41d\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getServers} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tconst servers = getServers(ns);\\n\\tfor (let server of servers) {\\n\\t\\tlet files = ns.ls(server);\\n\\t\\tfor (let file of files) {\\n\\t\\t\\tif (file.endsWith('.lit') || file.endsWith('.txt')) {\\n\\t\\t\\t\\tawait ns.scp(file, server, 'home');\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/tools/get-all-text.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///475c3128-f4c8-41e2-9b48-e27f3e6c3f25\",\"moduleSequenceNumber\":103401},{\"filename\":\"/tools/get-all-text.js\",\"url\":\"blob:file:///07ec6154-ae09-45ed-be61-81d5f61bf25b\",\"moduleSequenceNumber\":104252}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":54065,\"_hash\":\"c97e515d9ca69432b40b8181133b05c5a67cacc9e33fc6715be4c6ca073fc025\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAccessibleServers, getOptimalHackable} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tconst servers = getAccessibleServers(ns);\\n\\tconst hackable = getOptimalHackable(ns, servers);\\n\\tfor (let [i, host] of hackable.entries()) {\\n\\t\\tlet growth = ns.getServerGrowth(host);\\n\\t\\tlet money = ns.nFormat(ns.getServerMaxMoney(host), \\\"0.000a\\\");\\n\\t\\tlet minSec = ns.getServerMinSecurityLevel(host);\\n\\t\\tns.tprint(`${i + 1}: Maximum Money: ${money}, Growth: ${growth}, Min Security: ${minSec}, Server: ${host}`);\\n\\t}\\n}\",\"filename\":\"/tools/hackable-servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///298aa034-2ffd-42b4-bd1c-34ff7bda1d37\",\"moduleSequenceNumber\":481},{\"filename\":\"/tools/hackable-servers.js\",\"url\":\"blob:file:///cf5ef7f6-1fd5-44b4-8e84-7f6d2b5b0fce\",\"moduleSequenceNumber\":8740}],\"dependents\":[],\"ramUsage\":6.35,\"server\":\"home\",\"moduleSequenceNumber\":54066,\"_hash\":\"77f8678e5689e1a51b3f032bc619bf3f1b569fb1a361527d4ce8e1565a9feb3d\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst karma = ns.heart.break();\\n\\tns.tprint(karma.toFixed(2));\\n}\",\"filename\":\"/tools/karma.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/tools/karma.js\",\"url\":\"blob:file:///496d16bb-93ef-4781-b17c-d2fc700adbba\",\"moduleSequenceNumber\":153601}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":54067,\"_hash\":\"8529bd972efba9e73eb14e6c6dedebe5a94dc535af954e63001249f18366aa70\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tns.tail();\\n\\tns.disableLog('ALL');\\n\\twhile (true) {\\n\\t\\tconst server = ns.args[0];\\n\\t\\tlet money = ns.getServerMoneyAvailable(server);\\n\\t\\tif (money === 0) money = 1;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\t\\tconst minSec = ns.getServerMinSecurityLevel(server);\\n\\t\\tconst sec = ns.getServerSecurityLevel(server);\\n\\t\\tns.clearLog(server);\\n\\t\\tns.print(`${server}:`);\\n\\t\\tns.print(` $       : ${ns.nFormat(money, '$0.000a')} / ${ns.nFormat(maxMoney, '$0.000a')} (${(money / maxMoney * 100).toFixed(2)}%)`);\\n\\t\\tns.print(` security: +${sec - minSec}`);\\n\\t\\tns.print(` hack    : ${ns.getHackTime(server)} (t=${Math.ceil(ns.hackAnalyzeThreads(server, money))})`);\\n\\t\\tns.print(` grow    : ${ns.getGrowTime(server)} (t=${Math.ceil(ns.growthAnalyze(server, maxMoney / money))})`);\\n\\t\\tns.print(` weaken  : ${ns.getWeakenTime(server)} (t=${Math.ceil((sec - minSec) * 20)})`);\\n\\t\\tawait ns.sleep(20);\\n\\t}\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/tools/monitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/tools/monitor.js\",\"url\":\"blob:file:///16c211c5-546f-4f03-86af-0e1d4975cacd\",\"moduleSequenceNumber\":8280}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"home\",\"moduleSequenceNumber\":54068,\"_hash\":\"893c12e0ba4f315c62804972ae8d701f79995bced0cb1efe4b3bc26a3fba651f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAccessibleServers, getOptimalHackable, getScripts, scriptsToCopy} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tconst power = ns.args[0];\\n\\n\\tif (power < 0 || power > 20) {\\n\\t\\tns.tprint(`Invalid RAM amount.`);\\n\\t\\tns.exit();\\n\\t}\\n\\n\\tconst servers = getAccessibleServers(ns);\\n\\tconst hackables = getOptimalHackable(ns, servers);\\n\\n\\tconst targetRam = Math.pow(2, power);\\n\\tfor (let i = 0; i < ns.getPurchasedServerLimit(); i++) {\\n\\t\\tlet server = 'pserv-' + i;\\n\\t\\tlet cost = ns.getPurchasedServerCost(targetRam);\\n\\t\\twhile (ns.getServerMoneyAvailable('home') < cost) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t\\tif (ns.serverExists(server)) {\\n\\t\\t\\tif (ns.getServerMaxRam(server) < targetRam) {\\n\\t\\t\\t\\tns.killall(server);\\n\\t\\t\\t\\tns.deleteServer(server);\\n\\t\\t\\t} else continue;\\n\\t\\t}\\n\\t\\tns.tprint(`Buying server: ${server}, target RAM: ${targetRam}`);\\n\\t\\tns.purchaseServer(server, targetRam);\\n\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\tns.exec(getScripts().daemon, server, 1, hackables[i + 1]);\\n\\t}\\n}\",\"filename\":\"/tools/pserv-buyer.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///39c0ee93-cf9d-49ac-ad26-6fb70cbe401c\",\"moduleSequenceNumber\":54073},{\"filename\":\"/tools/pserv-buyer.js\",\"url\":\"blob:file:///08a936d1-2a56-4fe0-a0b5-5baf586b1bf4\",\"moduleSequenceNumber\":91671}],\"dependents\":[],\"ramUsage\":13.7,\"server\":\"home\",\"moduleSequenceNumber\":91671,\"_hash\":\"56c2d141ea865d967ca9c6c4f957758f2fa9da467ecafc722271bee972d6116a\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst reputation = Math.ceil(25500 * Math.exp(Math.log(1.02) * (ns.args[0] - 1)) - 25000);\\n\\tns.tprint(ns.nFormat(reputation, '0.000a'));\\n}\",\"filename\":\"/tools/reputation.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/tools/reputation.js\",\"url\":\"blob:file:///aa33c0f3-e8d2-4e13-8fde-ebda6c4aec9b\"}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":54070,\"_hash\":\"182648057b1c1b5efc12614517609fa0b5dd94312c4a74359ddbbb214c62bb5f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {hackServer, routeFinder} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tconst server = ns.args[0];\\n\\tconst route = routeFinder(ns, server);\\n\\tif (route && hackServer(ns, server)) {\\n\\t\\tfor (let serv of route) {\\n\\t\\t\\tns.connect(serv);\\n\\t\\t}\\n\\t\\tns.tprint(`Installing backdoor on ${server}.`);\\n\\t\\tawait ns.installBackdoor();\\n\\t\\tns.tprint(`Backdoor successfully installed on ${server}.`);\\n\\t\\tfor (let serv of route.reverse()) {\\n\\t\\t\\tns.connect(serv);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/utils/backdoor.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///f15d10b5-075f-408a-ac53-be0614c7f80b\",\"moduleSequenceNumber\":54073},{\"filename\":\"/utils/backdoor.js\",\"url\":\"blob:file:///f2bf3d70-2a2f-4e0d-ad6f-78b8db0742ab\",\"moduleSequenceNumber\":54932}],\"dependents\":[],\"ramUsage\":6.55,\"server\":\"home\",\"moduleSequenceNumber\":54932,\"_hash\":\"15f2594f57ee82215c23c8012705bc1dbfd417836b99e2a808214f4cb0b3a681\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getServers, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tcontractor(ns);\\n}\\n\\nexport function contractor(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tlet files = ns.ls(server, '.cct');\\n\\t\\tfor (let file of files) {\\n\\t\\t\\tlet contract = ns.codingcontract.getContractType(file, server);\\n\\t\\t\\tlet data = ns.codingcontract.getData(file, server);\\n\\t\\t\\tlet solution;\\n\\t\\t\\tswitch (contract) {\\n\\t\\t\\t\\tcase 'Find Largest Prime Factor':\\n\\t\\t\\t\\t\\tsolution = largestPrimeFactor(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\t\\t\\tsolution = subarrayMaxSum(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Spiralize Matrix':\\n\\t\\t\\t\\t\\tsolution = spiralizeMatrix(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Minimum Path Sum in a Triangle':\\n\\t\\t\\t\\t\\tsolution = minPathSum(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\t\\t\\tsolution = uniquePathsI(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\t\\t\\tsolution = uniquePathsII(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Algorithmic Stock Trader I':\\n\\t\\t\\t\\t\\tsolution = stockTrader(1, data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\t\\t\\tsolution = stockTrader(Math.floor(data.length / 2), data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Algorithmic Stock Trader III':\\n\\t\\t\\t\\t\\tsolution = stockTrader(2, data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Algorithmic Stock Trader IV':\\n\\t\\t\\t\\t\\tsolution = stockTrader(...data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Generate IP Addresses':\\n\\t\\t\\t\\t\\tsolution = genIPAddresses(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\t\\t\\tsolution = mergeOverlappingIntervals(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Array Jumping Game':\\n\\t\\t\\t\\t\\tsolution = arrayJumpingGame(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\t\\t\\tsolution = totalWaysToSum(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Find All Valid Math Expressions':\\n\\t\\t\\t\\t\\tsolution = validMathExpressions(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Sanitize Parentheses in Expression':\\n\\t\\t\\t\\t\\tsolution = sanitizeParentheses(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\tprintBoth(ns, `Found ${file} on ${server} of type: ${contract}.`)\\n\\t\\t\\t}\\n\\t\\t\\tlet result = ns.codingcontract.attempt(solution, file, server, {returnReward: true});\\n\\t\\t\\tif (result) {\\n\\t\\t\\t\\tprintBoth(ns, `Solved ${file} on ${server} of type: ${contract}. ${result}.`);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tprintBoth(ns, `Could not solve ${file} on ${server} of type: ${contract}.`);\\n\\t\\t\\t\\tprintBoth(ns, `Disabling contractor.`);\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn true;\\n}\\n\\nfunction largestPrimeFactor(n) {\\n\\tlet maxPrime = 0;\\n\\twhile (n % 2 === 0) {\\n\\t\\tn = Math.floor(n / 2);\\n\\t\\tmaxPrime = 2;\\n\\t}\\n\\tfor (let i = 3; i <= Math.floor(Math.sqrt(n)) + 1; i = i + 2) {\\n\\t\\twhile (n % i === 0) {\\n\\t\\t\\tn = Math.floor(n / i);\\n\\t\\t\\tmaxPrime = i;\\n\\t\\t}\\n\\t}\\n\\tif (n > 2) maxPrime = n;\\n\\n\\treturn maxPrime;\\n}\\n\\nfunction subarrayMaxSum(array) {\\n\\tconst sumReduce = (a, b) => a + b;\\n\\tlet maxSum = -Infinity;\\n\\tlet sum;\\n\\tfor (let i = 0; i < array.length; i++) {\\n\\t\\tfor (let j = i; j < array.length; j++) {\\n\\t\\t\\tsum = array.slice(i, j + 1).reduce(sumReduce);\\n\\t\\t\\tif (sum > maxSum) maxSum = sum;\\n\\t\\t}\\n\\t}\\n\\treturn maxSum;\\n}\\n\\nfunction spiralizeMatrix(matrix) {\\n\\tconst rows = matrix.length;\\n\\tconst cols = matrix[0].length;\\n\\n\\tlet maxrow = rows - 1;\\n\\tlet maxcol = cols - 1;\\n\\tlet minrow = 0;\\n\\tlet mincol = 0;\\n\\n\\tlet row = 0;\\n\\tlet col = 0;\\n\\n\\tlet list = [];\\n\\twhile (list.length < rows * cols) {\\n\\t\\tif (maxrow >= minrow) {\\n\\t\\t\\tfor (col; col <= maxcol; col++) {\\n\\t\\t\\t\\tlist.push(matrix[row][col]);\\n\\t\\t\\t}\\n\\t\\t\\tminrow++;\\n\\t\\t\\trow++;\\n\\t\\t\\tcol--;\\n\\t\\t}\\n\\t\\tif (maxcol >= mincol) {\\n\\t\\t\\tfor (row; row <= maxrow; row++) {\\n\\t\\t\\t\\tlist.push(matrix[row][col]);\\n\\t\\t\\t}\\n\\t\\t\\tmaxcol--;\\n\\t\\t\\tcol--;\\n\\t\\t\\trow--;\\n\\t\\t}\\n\\t\\tif (minrow <= maxrow) {\\n\\t\\t\\tfor (col; col >= mincol; col--) {\\n\\t\\t\\t\\tlist.push(matrix[row][col]);\\n\\t\\t\\t}\\n\\t\\t\\tmaxrow--;\\n\\t\\t\\tcol++;\\n\\t\\t\\trow--;\\n\\t\\t}\\n\\t\\tif (mincol <= maxcol) {\\n\\t\\t\\tfor (row; row >= minrow; row--) {\\n\\t\\t\\t\\tlist.push(matrix[row][col]);\\n\\t\\t\\t}\\n\\t\\t\\tmincol++;\\n\\t\\t\\trow++;\\n\\t\\t\\tcol++;\\n\\t\\t}\\n\\t}\\n\\treturn list;\\n}\\n\\nfunction minPathSum(data) {\\n\\tconst totalPaths = Math.pow(2, data.length - 1);\\n\\tlet minSum = Infinity;\\n\\tfor (let i = 0; i < totalPaths; i++) {\\n\\t\\tlet bin = i.toString(2);\\n\\t\\twhile (bin.length < data.length - 1) {\\n\\t\\t\\tbin = '0' + bin;\\n\\t\\t}\\n\\n\\t\\tlet sum = data[0][0];\\n\\t\\tlet k = 0;\\n\\t\\tfor (let j = 1; j < data.length; j++) {\\n\\t\\t\\tlet index = parseInt(bin.charAt(j - 1));\\n\\t\\t\\tk += index;\\n\\t\\t\\tsum += data[j][k];\\n\\t\\t}\\n\\n\\t\\tif (sum < minSum) minSum = sum;\\n\\t}\\n\\treturn minSum;\\n}\\n\\nfunction uniquePathsI(data) {\\n\\tconst [m, n] = data;\\n\\n\\tconst f = [];\\n\\tconst x = factorial(f, m + n - 2);\\n\\tconst y = factorial(f, m - 1);\\n\\tconst z = factorial(f, n - 1);\\n\\n\\treturn x / (y * z);\\n}\\n\\nfunction factorial(f, n) {\\n\\tif (n === 0 || n === 1) return 1;\\n\\tif (f[n] > 0) return f[n];\\n\\treturn f[n] = n * factorial(f, n - 1);\\n}\\n\\nfunction uniquePathsII(grid) {\\n\\tconst gridSum = [];\\n\\tfor (let i of grid) {\\n\\t\\tgridSum.push(i.slice());\\n\\t}\\n\\tfor (let i = 0; i < gridSum.length; i++) {\\n\\t\\tfor (let j = 0; j < gridSum[0].length; j++) {\\n\\t\\t\\tif (gridSum[i][j] === 1) {\\n\\t\\t\\t\\tgridSum[i][j] = 0;\\n\\t\\t\\t} else if (i === 0 && j === 0) {\\n\\t\\t\\t\\tgridSum[0][0] = 1;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tgridSum[i][j] = (i > 0 ? gridSum[i - 1][j] : 0) + (j > 0 ? gridSum[i][j - 1] : 0);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn gridSum[gridSum.length - 1][gridSum[0].length - 1];\\n}\\n\\nfunction stockTrader(maxTrades, stockPrices) {\\n\\tlet tempStr = '[0';\\n\\tfor (let i = 0; i < stockPrices.length - 1; i++) {\\n\\t\\ttempStr += ',0';\\n\\t}\\n\\ttempStr += ']';\\n\\tlet tempArr = '[' + tempStr;\\n\\tfor (let i = 0; i < maxTrades - 1; i++) {\\n\\t\\ttempArr += ',' + tempStr;\\n\\t}\\n\\ttempArr += ']';\\n\\n\\tconst highestProfit = JSON.parse(tempArr);\\n\\n\\tfor (let i = 0; i < maxTrades; i++) {\\n\\t\\tfor (let j = 0; j < stockPrices.length - 1; j++) {\\n\\t\\t\\tfor (let k = j + 1; k < stockPrices.length; k++) {\\n\\t\\t\\t\\tif (i > 0 && j > 0 && k > 0) {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t} else if (i > 0 && j > 0) {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t} else if (i > 0 && k > 0) {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t} else if (j > 0 && k > 0) {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn highestProfit[maxTrades - 1][stockPrices.length - 1];\\n}\\n\\nfunction genIPAddresses(string) {\\n\\tconst ips = [];\\n\\tfor (let i = 1; i < string.length - 2; i++) {\\n\\t\\tfor (let j = i + 1; j < string.length - 1; j++) {\\n\\t\\t\\tfor (let k = j + 1; k < string.length; k++) {\\n\\t\\t\\t\\tconst ip = [\\n\\t\\t\\t\\t\\tstring.slice(0, i),\\n\\t\\t\\t\\t\\tstring.slice(i, j),\\n\\t\\t\\t\\t\\tstring.slice(j, k),\\n\\t\\t\\t\\t\\tstring.slice(k)\\n\\t\\t\\t\\t];\\n\\n\\t\\t\\t\\tlet isValid = true;\\n\\t\\t\\t\\tip.forEach(seg => {\\n\\t\\t\\t\\t\\tisValid = isValid && isValidIpSegment(seg)\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\tif (isValid) ips.push(ip.join('.'));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn ips;\\n}\\n\\nfunction isValidIpSegment(segment) {\\n\\treturn !((segment[0] === '0' && segment !== '0') || segment > 255);\\n}\\n\\nfunction mergeOverlappingIntervals(array) {\\n\\tarray.sort((a, b) => a[0] - b[0]);\\n\\n\\tconst intervals = [array[0].slice()];\\n\\tfor (let interval of array) {\\n\\t\\tlet [x1, y1] = interval;\\n\\t\\tlet [, y2] = intervals[intervals.length - 1];\\n\\n\\t\\tif (y2 >= x1) intervals[intervals.length - 1][1] = Math.max(y1, y2);\\n\\t\\telse intervals.push(interval.slice());\\n\\t}\\n\\treturn intervals;\\n}\\n\\nfunction arrayJumpingGame(array) {\\n\\tconst reachable = new Array(array.length).fill(0);\\n\\treachable[0] = 1;\\n\\tfor (let i = 0; i < array.length; i++) {\\n\\t\\tlet num = array[i];\\n\\t\\tfor (let j = 1; j <= num; j++) {\\n\\t\\t\\tif (i + j === array.length) break;\\n\\t\\t\\treachable[i + j] = 1;\\n\\t\\t}\\n\\t}\\n\\treturn reachable.includes(0) ? 0 : 1;\\n}\\n\\nfunction totalWaysToSum(n) {\\n\\tconst table = [1];\\n\\tfor (let i = 0; i < n; i++) {\\n\\t\\ttable.push(0);\\n\\t}\\n\\tfor (let i = 1; i < n; i++) {\\n\\t\\tfor (let j = i; j <= n; j++) {\\n\\t\\t\\ttable[j] += table[j - i];\\n\\t\\t}\\n\\t}\\n\\treturn table[n];\\n}\\n\\nfunction validMathExpressions(data) {\\n\\tconst [digits, target] = data;\\n\\tconst valid = [];\\n\\tfor (let i = 0; i < 4 ** (digits.length - 1); i++) {\\n\\t\\tlet j = i.toString(4);\\n\\t\\twhile (j.length < digits.length - 1) {\\n\\t\\t\\tj = '0' + j;\\n\\t\\t}\\n\\t\\tif (digits[0] === '0' && j[0] === '0') continue;\\n\\n\\t\\tlet expr = digits[0];\\n\\t\\tfor (let k = 1; k < digits.length; k++) {\\n\\t\\t\\tif (digits[k] === '0' && j[k] === '0' && j[k - 1] !== '0') break;\\n\\n\\t\\t\\tlet op;\\n\\t\\t\\tswitch (j[k - 1]) {\\n\\t\\t\\t\\tcase '0':\\n\\t\\t\\t\\t\\top = '';\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase '1':\\n\\t\\t\\t\\t\\top = '+';\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase '2':\\n\\t\\t\\t\\t\\top = '-';\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase '3':\\n\\t\\t\\t\\t\\top = '*';\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\texpr += op + digits[k];\\n\\t\\t}\\n\\t\\tif (eval(expr) === target) valid.push(expr);\\n\\t}\\n\\treturn valid;\\n}\\n\\nfunction sanitizeParentheses(data) {\\n\\tconst valid = new Set('');\\n\\tlet min = data.length;\\n\\tfor (let i = 0; i < 2 ** data.length; i++) {\\n\\t\\tlet j = i.toString(2);\\n\\t\\twhile (j.length < data.length) {\\n\\t\\t\\tj = '0' + j;\\n\\t\\t}\\n\\n\\t\\tlet str = '';\\n\\t\\tlet deletions = 0;\\n\\t\\tfor (let k = 0; k < j.length; k++) {\\n\\t\\t\\tif (j[k] === '1' || (data[k] !== '(' && data[k] !== ')')) str += data[k];\\n\\t\\t\\telse deletions++;\\n\\t\\t}\\n\\t\\tif (deletions > min) continue;\\n\\n\\t\\tlet count = 0;\\n\\t\\tlet neg = false;\\n\\t\\tfor (let k of str) {\\n\\t\\t\\tif (k === '(') count++;\\n\\t\\t\\telse if (k === ')') count--;\\n\\t\\t\\tif (count < 0) neg = true;\\n\\t\\t}\\n\\t\\tif (count > 0 || neg) continue;\\n\\n\\t\\tif (deletions === min) valid.add(str);\\n\\t\\telse if (deletions < min) {\\n\\t\\t\\tmin = deletions;\\n\\t\\t\\tvalid.clear();\\n\\t\\t\\tvalid.add(str);\\n\\t\\t}\\n\\t}\\n\\treturn [...valid];\\n}\",\"filename\":\"/utils/contractor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///f129f32e-d6f0-484b-983b-dceb360c0447\",\"moduleSequenceNumber\":486},{\"filename\":\"/utils/contractor.js\",\"url\":\"blob:file:///bcfb3a4a-de85-4940-9d11-35c722420159\",\"moduleSequenceNumber\":947}],\"dependents\":[],\"ramUsage\":22,\"server\":\"home\",\"moduleSequenceNumber\":54072,\"_hash\":\"ced9c7d182cf22e24107c0e45f9b9fecb6bb67f55aa84baea4e6864fbfb82dc6\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"home\",\"moduleSequenceNumber\":54073,\"_hash\":\"2d91ac381e37a0b91b2f3adc6013a583a652522325d8ae932659ad808c31b06e\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst cost = ns.getUpgradeHomeCoresCost();\\n\\tif (await ns.prompt(`Upgrade home Cores for ${ns.nFormat(cost, '$0.000a')}?`)) {\\n\\t\\tif (ns.upgradeHomeCores()) ns.tprint(`Home cores upgraded.`);\\n\\t\\telse ns.tprint(`Could not upgrade home cores.`);\\n\\t}\\n}\",\"filename\":\"/utils/upgrade-home-cores.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/upgrade-home-cores.js\",\"url\":\"blob:file:///19fb0786-69dd-4fdb-b828-5f274dee63b0\",\"moduleSequenceNumber\":76813}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":76813,\"_hash\":\"c57e487d129ba403d908146c518de853c0b7f8c21f82fd1ca1a2a8625ef1924d\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getUpgradeHomeCoresCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"upgradeHomeCores\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst cost = ns.getUpgradeHomeRamCost();\\n\\tif (await ns.prompt(`Upgrade home RAM for ${ns.nFormat(cost, '$0.000a')}?`)) {\\n\\t\\tif (ns.upgradeHomeRam()) ns.tprint(`Home RAM upgraded.`);\\n\\t\\telse ns.tprint(`Could not upgrade home RAM.`);\\n\\t}\\n}\",\"filename\":\"/utils/upgrade-home-ram.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/upgrade-home-ram.js\",\"url\":\"blob:file:///a5a18456-2b2a-4f48-b37c-05e3f8af4f7d\",\"moduleSequenceNumber\":80063}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":80063,\"_hash\":\"9bd02e826e8b0b326cd48d9e77389f9581ad678d35d4bb519e5a531cd27643d1\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst url = 'https://raw.githubusercontent.com/mirkoconsiglio/Bitburner-scripts/master';\\n\\tconst listOfScripts = `build/scripts.txt`;\\n\\tns.tprint('----- Downloading scripts -----');\\n\\ttry {\\n\\t\\tns.tprint(`Downloading ${listOfScripts}`);\\n\\t\\tlet download = await ns.wget(`${url}/${listOfScripts}`, '/' + listOfScripts);\\n\\t\\tif (!download) throw listOfScripts;\\n\\t\\tlet scripts = ns.read('/' + listOfScripts).split('\\\\n');\\n\\t\\tfor (let script of scripts) {\\n\\t\\t\\tns.tprint(`Downloading ${script}`);\\n\\t\\t\\tif (script.includes('/')) download = await ns.wget(`${url}/${script}`, '/' + script);\\n\\t\\t\\telse download = await ns.wget(`${url}/${script}`, script);\\n\\t\\t\\tif (!download) throw script;\\n\\t\\t}\\n\\t\\tns.tprint('----- Download complete -----');\\n\\t} catch (script) {\\n\\t\\tns.tprint(`Could not download ${script}`);\\n\\t}\\n}\",\"filename\":\"/build/download-bitburner-scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/build/download-bitburner-scripts.js\",\"url\":\"blob:file:///4baa4400-2d2d-4d89-be31-4cb63b5585a0\",\"moduleSequenceNumber\":9401}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":54076,\"_hash\":\"db6be36921ed3570f27656ff3709a77330179d053163e571a78ce453593dcaa2\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst scriptsToKeep = ['/build/scripts.txt', '/build/download-bitburner-scripts.js'];\\n\\tns.read('/build/scripts.txt').split('\\\\n').forEach((script) => {\\n\\t\\tif (script.includes('/')) scriptsToKeep.push('/' + script);\\n\\t\\telse scriptsToKeep.push(script);\\n\\t});\\n\\tlet files = ns.ls('home').filter(file =>\\n\\t\\tfile.endsWith('.js') || file.endsWith('.txt'));\\n\\tfor (let file of files) {\\n\\t\\tif (!scriptsToKeep.includes(file)) {\\n\\t\\t\\tif (await ns.prompt(`Delete ${file}?`)) {\\n\\t\\t\\t\\tns.rm(file, 'home');\\n\\t\\t\\t\\tns.tprint(`Deleted ${file}`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/build/script-remover.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/build/script-remover.js\",\"url\":\"blob:file:///4f33502b-4b73-4f9d-967e-9a492d40d979\",\"moduleSequenceNumber\":23936}],\"dependents\":[],\"ramUsage\":2.8,\"server\":\"home\",\"moduleSequenceNumber\":54077,\"_hash\":\"b0e886a683c819af301969714eb16bdedfa567fa40525eda9475ea32decb7185\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const fs = require('fs');\\nconst path = require('path');\\n\\nfunction getFilesRecursive(dir, arrayOfFiles) {\\n\\ttry {\\n\\t\\tlet files = fs.readdirSync(dir);\\n\\t\\tarrayOfFiles = arrayOfFiles || [];\\n\\t\\tfiles.forEach(function (file) {\\n\\t\\t\\tlet subfile = path.join(dir, file);\\n\\t\\t\\tif (fs.statSync(subfile).isDirectory()) {\\n\\t\\t\\t\\tarrayOfFiles = getFilesRecursive(subfile, arrayOfFiles);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tarrayOfFiles.push(subfile);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\treturn arrayOfFiles.filter(file => (path.extname(file) === '.txt' || path.extname(file) === '.js'));\\n\\t} catch (err) {\\n\\t\\tconsole.log(err);\\n\\t}\\n}\\n\\nfunction getFiles(dir = __dirname) {\\n\\tlet files = getFilesRecursive(`${dir}`);\\n\\tlet relativeFiles = [];\\n\\tfiles.forEach(file => relativeFiles.push(path.relative(dir, file).replace(/\\\\\\\\/g, '/')));\\n\\treturn relativeFiles;\\n}\\n\\nfunction writeToFile(filename, str) {\\n\\tfs.writeFile(filename, str, (err) => {\\n\\t\\tif (err) console.log(err);\\n\\t\\telse console.log(\\\"File written successfully\\\");\\n\\t});\\n}\\n\\nlet dir = path.join(__dirname, '../');\\nlet files = getFiles(`${dir}`);\\nlet str = files.join('\\\\n');\\nwriteToFile('scripts.txt', str);\\n\\n\",\"filename\":\"/build/scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/build/scripts.js\",\"url\":\"blob:file:///464d4a93-457e-41c9-831b-d4fcbbac1ba1\"}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":54078,\"_hash\":\"3473c2d539d998d8b3b634cc14a0eac375726fbef43b2e87d2dcd692214e5877\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getFactions} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tconst file = '/texts/augmentations-list.txt';\\n\\tconst factions = getFactions();\\n\\tawait ns.write(file, '', 'w');\\n\\tfor (let faction of factions) {\\n\\t\\tawait ns.write(file, `\\\\n\\\\n----- ${faction} -----\\\\n`, 'a');\\n\\t\\tlet augmentations = ns.getAugmentationsFromFaction(faction);\\n\\t\\tfor (let augmentation of augmentations) {\\n\\t\\t\\tif (augmentation !== 'NeuroFlux Governor') {\\n\\t\\t\\t\\tawait ns.write(file, `\\\\n--- ${augmentation} ---\\\\n`, 'a');\\n\\t\\t\\t\\tlet stats = Object.entries(ns.getAugmentationStats(augmentation));\\n\\t\\t\\t\\tif (stats.length > 0) {\\n\\t\\t\\t\\t\\tfor (let [stat, multiplier] of stats) {\\n\\t\\t\\t\\t\\t\\tawait ns.write(file, `${stat}: ${multiplier}\\\\n`, 'a');\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else await ns.write(file, `Special\\\\n`, 'a');\\n\\t\\t\\t\\tlet price = ns.getAugmentationPrice(augmentation);\\n\\t\\t\\t\\tlet repReq = ns.getAugmentationRepReq(augmentation);\\n\\t\\t\\t\\tlet prereq = ns.getAugmentationPrereq(augmentation);\\n\\t\\t\\t\\tawait ns.write(file, `Price: ${ns.nFormat(price, '$0.000a')}\\\\n`, 'a');\\n\\t\\t\\t\\tawait ns.write(file, `Rep: ${ns.nFormat(repReq, '0.000a')}\\\\n`, 'a');\\n\\t\\t\\t\\tif (prereq.length > 0) await ns.write(file, `Prereq: ${prereq}\\\\n`, 'a');\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/augmentations/augmentation-lister.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///fad2fc9e-0906-46cf-a438-bf116ecca3ce\"},{\"filename\":\"/augmentations/augmentation-lister.js\",\"url\":\"blob:file:///cf831238-f22e-4af7-aa68-e7952a415cbf\"}],\"dependents\":[],\"ramUsage\":21.6,\"server\":\"home\",\"moduleSequenceNumber\":54079,\"_hash\":\"bd25c96a052b2f33e71068fcfea7938d3eaa6185fd7fa1e293754881ac8b047f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationPrereq\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (await ns.prompt('Install augmentations?')) {\\n\\t\\tns.installAugmentations('cortex.js');\\n\\t}\\n}\",\"filename\":\"/augmentations/install-augmentations.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/augmentations/install-augmentations.js\",\"url\":\"blob:file:///ccccfe54-67fa-41c5-8667-103eec962b8e\",\"moduleSequenceNumber\":8258}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":54080,\"_hash\":\"8a066dfc9d8c94acfd0d08b21a945d5603826885b8ac6496266433258cb9462f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installAugmentations\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n\\tisUsefulBladeburner,\\n\\tisUsefulCombat,\\n\\tisUsefulCompany,\\n\\tisUsefulGeneral,\\n\\tisUsefulHacking,\\n\\tisUsefulHacknet,\\n\\tisUseful,\\n\\tisPurchasable\\n} from '/augmentations/utils.js';\\nimport { getFactions } from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tconst args = ns.flags([\\n\\t\\t['hacking', false],\\n\\t\\t['combat', false],\\n\\t\\t['company', false],\\n\\t\\t['hacknet', false],\\n\\t\\t['bladeburner', false],\\n\\t\\t['install', false]\\n\\t]);\\n\\t// Check criterions for determining if augmentations are useful\\n\\tconst criterions = [isUsefulGeneral];\\n\\tif (args.hacking) criterions.push(isUsefulHacking);\\n\\tif (args.combat) criterions.push(isUsefulCombat);\\n\\tif (args.company) criterions.push(isUsefulCompany);\\n\\tif (args.hacknet) criterions.push(isUsefulHacknet);\\n\\tif (args.bladeburner) criterions.push(isUsefulBladeburner);\\n\\n\\tlet augmentations = [];\\n\\tfor (let faction of getFactions()) {\\n\\t\\tfor (let aug of ns.getAugmentationsFromFaction(faction)) {\\n\\t\\t\\tif (isUseful(ns, criterions, aug) && isPurchasable(ns, faction, aug, augmentations)) {\\n\\t\\t\\t\\taugmentations.push(\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tfaction: faction,\\n\\t\\t\\t\\t\\t\\tname: aug,\\n\\t\\t\\t\\t\\t\\tprice: ns.getAugmentationPrice(aug)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tif (ns.getPlayer().hasTixApiAccess) { // Check if player has TIX API\\n\\t\\t// Check if player has any stocks\\n\\t\\tlet stocks = false;\\n\\t\\tfor (let sym of ns.stock.getSymbols()) {\\n\\t\\t\\tlet pos = ns.stock.getPosition(sym);\\n\\t\\t\\tif (pos[0] > 0 || pos[2] > 0) {\\n\\t\\t\\t\\tstocks = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Ask if player wants to sell stocks\\n\\t\\tif (stocks && await ns.prompt(`Do you want to sell all shares?`)) {\\n\\t\\t\\t// Kill stock script\\n\\t\\t\\tns.scriptKill('/stock-market/stock-market.js', 'home');\\n\\t\\t\\t// Sell all stocks\\n\\t\\t\\tfor (let sym of ns.stock.getSymbols()) {\\n\\t\\t\\t\\tns.stock.sell(sym, ns.stock.getMaxShares(sym));\\n\\t\\t\\t\\tif (ns.getPlayer().bitNodeN === 8 || ns.getOwnedSourceFiles().some(s => s.n === 8 && s.lvl > 1)) {\\n\\t\\t\\t\\t\\tns.stock.sellShort(sym, ns.stock.getMaxShares(sym));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Check if there are any purchasable augmentations\\n\\tif (augmentations.length > 0) {\\n\\t\\t// Sort augmentations according to their price\\n\\t\\taugmentations.sort((a, b) => {\\n\\t\\t\\tif (b.price > a.price) return 1;\\n\\t\\t\\telse if (a.price > b.price) return -1;\\n\\t\\t\\telse return ns.getAugmentationPrereq(b.name).length - ns.getAugmentationPrereq(a.name).length;\\n\\t\\t});\\n\\t\\t// Fit in augs before their prereqs\\n\\t\\tconst tempAugs = [];\\n\\t\\tconst coveredIndices = [];\\n\\t\\tfor (let [i, aug] of augmentations.entries()) {\\n\\t\\t\\tif (coveredIndices.includes(i)) continue;\\n\\t\\t\\tlet prereq = ns.getAugmentationPrereq(aug.name);\\n\\t\\t\\tif (prereq.length > 0) recursiveFit(ns, augmentations, tempAugs, coveredIndices, prereq[0]);\\n\\t\\t\\ttempAugs.push(aug);\\n\\t\\t}\\n\\t\\t// Deep copy augmentations\\n\\t\\taugmentations = JSON.parse(JSON.stringify(tempAugs));\\n\\t\\t// Calculate price of augs\\n\\t\\tlet stringAugs = '';\\n\\t\\tlet totalPrice = 0;\\n\\t\\tfor (let [i, aug] of augmentations.entries()) {\\n\\t\\t\\tlet updatedAugPrice = aug.price * 1.9 ** i;\\n\\t\\t\\tstringAugs += `${aug.name}: ${ns.nFormat(aug.price, '$0.000a')} (${ns.nFormat(updatedAugPrice, '$0.000a')}). `;\\n\\t\\t\\ttotalPrice += updatedAugPrice;\\n\\t\\t}\\n\\t\\t// Prompt user for buying augmentations\\n\\t\\tif (await ns.prompt(`${stringAugs}Buy augmentations for ${ns.nFormat(totalPrice, '0.000a')}?`)) {\\n\\t\\t\\tfor (let aug of augmentations) {\\n\\t\\t\\t\\tif (ns.purchaseAugmentation(aug.faction, aug.name)) {\\n\\t\\t\\t\\t\\tns.tprint(`Purchased ${aug.name} from ${aug.faction} for ${ns.nFormat(aug.price, '0.000a')}`);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.tprint(`Could not purchase ${aug.name} from ${aug.faction}`);\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Prompt user for purchasing NeuroFlux Governor\\n\\tif (await ns.prompt(`Purchase NeuroFlux Governor levels?`)) {\\n\\t\\tlet highestRepFaction;\\n\\t\\tlet highestRep = 0;\\n\\t\\tfor (let faction of getFactions()) {\\n\\t\\t\\tif (ns.getFactionRep(faction) > highestRep) {\\n\\t\\t\\t\\thighestRep = ns.getFactionRep(faction);\\n\\t\\t\\t\\thighestRepFaction = faction;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tlet counter = 0;\\n\\t\\twhile (ns.purchaseAugmentation(highestRepFaction, 'NeuroFlux Governor')) {\\n\\t\\t\\tcounter++;\\n\\t\\t}\\n\\t\\tns.tprint(`Purchased ${counter} levels of NeuroFlux Governor.`);\\n\\t}\\n\\t// Check if The Red Pill is available\\n\\tif (ns.getPlayer().factions.includes('Daedalus') &&\\n\\t\\tns.getFactionRep('Daedalus') >= 2.5e6 &&\\n\\t\\t!ns.getOwnedAugmentations(true).includes('The Red Pill')) {\\n\\t\\tif (await ns.prompt(`Purchase The Red Pill?`)) {\\n\\t\\t\\tif (ns.purchaseAugmentation('Daedalus', 'The Red Pill')) {\\n\\t\\t\\t\\tns.tprint(`Purchased The Red Pill`);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.tprint(`Could not purchase The Red Pill`);\\n\\t\\t\\t\\tns.exit();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Ask to purchase 4S market data and its TIX API\\n\\tif (ns.getPlayer().hasTixApiAccess) {\\n\\t\\tif (!ns.getPlayer().has4SDataTixApi && ns.getServerMoneyAvailable('home') >= 25e9) {\\n\\t\\t\\tif (await ns.prompt(`Purchase 4S Data TIX API?`)) ns.stock.purchase4SMarketDataTixApi();\\n\\t\\t}\\n\\t\\tif (!ns.getPlayer().has4SData && ns.getServerMoneyAvailable('home') >= 1e9) {\\n\\t\\t\\tif (await ns.prompt(`Purchase 4S Data?`)) ns.stock.purchase4SMarketData();\\n\\t\\t}\\n\\t}\\n\\t// Ask to install augmentations\\n\\tif (args.install && await ns.prompt('Install augmentations?')) {\\n\\t\\tns.installAugmentations('cortex.js');\\n\\t}\\n}\\n\\nfunction recursiveFit(ns, augmentations, tempAugs, coveredIndices, prereq) {\\n\\tlet index = augmentations.findIndex(aug => aug.name === prereq);\\n\\tif (index >= 0) { // Fit in aug before their prereq\\n\\t\\tcoveredIndices.push(index);\\n\\t\\tlet prereq = ns.getAugmentationPrereq(augmentations[index].name);\\n\\t\\tif (prereq.length > 0) recursiveFit(ns, augmentations, tempAugs, coveredIndices, prereq[0])\\n\\t\\ttempAugs.push(augmentations[index]);\\n\\t}\\n}\",\"filename\":\"/augmentations/purchase-augmentations.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///91571c21-4c31-46d3-9574-d91289d99e7c\",\"moduleSequenceNumber\":54073},{\"filename\":\"/augmentations/utils.js\",\"url\":\"blob:file:///6b2e18dd-bb5e-4aae-bd5b-b716d8e459a0\",\"moduleSequenceNumber\":54098},{\"filename\":\"/augmentations/purchase-augmentations.js\",\"url\":\"blob:file:///34017799-512a-4fdc-916f-4d44c37ca87e\",\"moduleSequenceNumber\":93331}],\"dependents\":[],\"ramUsage\":64.2,\"server\":\"home\",\"moduleSequenceNumber\":93331,\"_hash\":\"15edb8d90bc4681e3c936d58821bbb62a2340e51ccbdbf99c549d27ae6c0631e\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.purchase4SMarketDataTixApi\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchase4SMarketData\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"installAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst programs = ['ServerProfiler.exe', 'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe'];\\n\\tfor (let program of programs) {\\n\\t\\tif (ns.createProgram(program)) {\\n\\t\\t\\twhile (ns.isBusy()) {\\n\\t\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\t}\\n\\t\\t\\tns.tprint(`${program} created.`)\\n\\t\\t} else ns.tprint(`${program} already owned.`);\\n\\t}\\n}\",\"filename\":\"/automators/create-programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/automators/create-programs.js\",\"url\":\"blob:file:///52af3896-2ac7-431d-8f09-b11f02836a63\",\"moduleSequenceNumber\":119656}],\"dependents\":[],\"ramUsage\":7.1,\"server\":\"home\",\"moduleSequenceNumber\":54082,\"_hash\":\"23bf50230925b528f8afcd5a82ff485a028f337b2a40df5857995964a82f1de7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":5},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst crime = ns.args[0];\\n\\tconst interval = 100;\\n\\twhile (true) {\\n\\t\\tns.tail(); // Necessary to exit script\\n\\t\\tawait ns.sleep(ns.commitCrime(crime) + interval);\\n\\t}\\n}\",\"filename\":\"/automators/crime.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/automators/crime.js\",\"url\":\"blob:file:///aa62eeef-82f1-4db8-98f0-5d0a5cf20df7\",\"moduleSequenceNumber\":1385}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":54083,\"_hash\":\"5afe747a7e7b9f2069722291907b20105f3f0cdb3673bb7d3c9d4b5aa65de498\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['str', false],\\n\\t\\t['def', false],\\n\\t\\t['dex', false],\\n\\t\\t['agi', false],\\n\\t\\t['all', false],\\n\\t\\t['gym', 'Powerhouse Gym'],\\n\\t\\t['level', 0]\\n\\t]);\\n\\n\\tif (args.gym === 'Crush Fitness Gym' || args.gym === 'Snap Fitness Gym') ns.travelToCity('Aevum');\\n\\telse if (args.gym === 'Iron Gym' || args.gym === 'Powerhouse Gym') ns.travelToCity('Sector 12');\\n\\telse if (args.gym === 'Millenium Fitness Gym') ns.travelToCity('Volhaven');\\n\\telse {\\n\\t\\tns.tprint(`Invalid gym.`);\\n\\t\\tns.exit();\\n\\t}\\n\\n\\tif (args.str || args.all) await workOutStr(ns, args.gym, args.level);\\n\\tif (args.def || args.all) await workOutDef(ns, args.gym, args.level);\\n\\tif (args.dex || args.all) await workOutDex(ns, args.gym, args.level);\\n\\tif (args.agi || args.all) await workOutAgi(ns, args.gym, args.level);\\n}\\n\\nasync function workOutStr(ns, gym, level) {\\n\\tns.gymWorkout(gym, 'str');\\n\\twhile (ns.getPlayer().strength < level) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\\n\\nasync function workOutDef(ns, gym, level) {\\n\\tns.gymWorkout(gym, 'def');\\n\\twhile (ns.getPlayer().defense < level) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\\n\\nasync function workOutDex(ns, gym, level) {\\n\\tns.gymWorkout(gym, 'dex');\\n\\twhile (ns.getPlayer().dexterity < level) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\\n\\nasync function workOutAgi(ns, gym, level) {\\n\\tns.gymWorkout(gym, 'agi');\\n\\twhile (ns.getPlayer().agility < level) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\",\"filename\":\"/automators/gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.1,\"server\":\"home\",\"moduleSequenceNumber\":54084,\"_hash\":\"58cb574b807a84bb60647917d01b2a8cefcc141e8757655a7e7bedb174ff1896\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gymWorkout\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst args = ns.flags([\\n\\t\\t['university', 'ZB Institute of Technology'],\\n\\t\\t['course', 'Leadership'],\\n\\t\\t['level', 0]\\n\\t]);\\n\\n\\tif (args.university === 'Summit University') ns.travelToCity('Aevum');\\n\\telse if (args.university === 'Rothman University') ns.travelToCity('Sector 12');\\n\\telse if (args.university === 'ZB Institute of Technology') ns.travelToCity('Volhaven');\\n\\telse {\\n\\t\\tns.tprint(`Invalid university.`);\\n\\t\\tns.exit();\\n\\t}\\n\\n\\tif (args.course === 'Computer Science' ||\\n\\t\\targs.course === 'Data Structures' ||\\n\\t\\targs.course === 'Networks' ||\\n\\t\\targs.course === 'Algorithms') await studyHack(ns, args.university, args.course, args.level);\\n\\telse if (args.course === 'Management' ||\\n\\t\\targs.course === 'Leadership') await studyCha(ns, args.university, args.course, args.level);\\n\\telse {\\n\\t\\tns.tprint(`Invalid course.`);\\n\\t\\tns.exit();\\n\\t}\\n}\\n\\nasync function studyHack(ns, university, course, level) {\\n\\tns.universityCourse(university, course);\\n\\twhile (ns.getPlayer().hacking < level) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\\n\\nasync function studyCha(ns, university, course, level) {\\n\\tns.universityCourse(university, course);\\n\\twhile (ns.getPlayer().charisma < level) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\",\"filename\":\"/automators/university.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/automators/university.js\",\"url\":\"blob:file:///a3e141e1-c7bc-460d-8b43-7f660d324c22\",\"moduleSequenceNumber\":780}],\"dependents\":[],\"ramUsage\":7.1,\"server\":\"home\",\"moduleSequenceNumber\":54085,\"_hash\":\"758cec1ad7ee460c513bf8605ced9271ec2d2fa4c0f4205c5ae4cac727d8eba7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"universityCourse\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tfor (let faction of ns.args) {\\n\\t\\tif (await ns.prompt(`Join ${faction}?`)) ns.joinFaction(faction);\\n\\t}\\n}\",\"filename\":\"/utils/join-factions.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/join-factions.js\",\"url\":\"blob:file:///abcca21f-01f6-422b-a0da-e5a76e4935ab\",\"moduleSequenceNumber\":55878}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":55878,\"_hash\":\"29c866dfa3854eada42152cff58ab4a049972b02b145257ef70f2da8486028aa\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"joinFaction\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {manageAndHack} from '/hacking/hack-manager.js';\\nimport {contractor} from '/utils/contractor.js';\\nimport {copyScriptsToAll, getAccessibleServers, printBoth, promptScriptRunning} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\t// Copy necessary scripts to all servers\\n\\tawait copyScriptsToAll(ns);\\n\\n\\tconst upgradeRamTimer = 5 * 60 * 1000; // 5 minutes\\n\\tconst upgradeCoresTimer = 5 * 60 * 1000; // 5 minutes\\n\\tconst usefulPrograms = [\\n\\t\\t['BruteSSH.exe', 50],\\n\\t\\t['FTPCrack.exe', 100],\\n\\t\\t['relaySMTP.exe', 300],\\n\\t\\t['HTTPWorm.exe', 400],\\n\\t\\t['SQLInject.exe', 800]\\n\\t];\\n\\n\\tlet contractorOnline = true;\\n\\tlet askedFactions = [];\\n\\tlet upgradeRamTime = upgradeRamTimer;\\n\\tlet upgradeCoresTime = upgradeCoresTimer;\\n\\n\\twhile (true) {\\n\\t\\tconst player = ns.getPlayer();\\n\\n\\t\\t// UI\\n\\t\\tns.exec('/ui/overview.js', 'home');\\n\\n\\t\\t// Heal player\\n\\t\\tif (player.hp < player.max_hp) {\\n\\t\\t\\tlet cost = ns.hospitalize();\\n\\t\\t\\tprintBoth(ns, `Player hospitalized for ${ns.nFormat(cost, '$0.000a')}`);\\n\\t\\t}\\n\\n\\t\\t// Contract solver (disables itself if any solution was incorrect)\\n\\t\\tif (contractorOnline) contractorOnline = contractor(ns);\\n\\n\\t\\t// Stock market\\n\\t\\tif (ns.getPlayer().has4SDataTixApi && !ns.isRunning('/stock-market/stock-market.js', 'home')) {\\n\\t\\t\\tns.exec('/stock-market/stock-market.js', 'home');\\n\\t\\t}\\n\\n\\t\\t// Gang manager\\n\\t\\tif ((ns.getPlayer().bitNodeN === 2 || (ns.getOwnedSourceFiles().some(s => s.n === 2 && s.lvl >= 1) &&\\n\\t\\t\\tns.heart.break() <= -54e3)) && ns.gang.inGang() && !(ns.isRunning('/gang/combat-gang.js', 'home') ||\\n\\t\\t\\tns.isRunning('/gang/hacking-gang.js', 'home'))) {\\n\\t\\t\\tif (ns.gang.getGangInformation().isHacking) ns.exec('/gang/hacking-gang.js', 'home');\\n\\t\\t\\telse ns.exec('/gang/combat-gang.js', 'home');\\n\\t\\t\\tprintBoth(ns, `Started gang manager`);\\n\\t\\t}\\n\\n\\t\\t// Purchase TOR\\n\\t\\tif (ns.purchaseTor()) printBoth(ns, `Purchased TOR router`);\\n\\t\\t// Purchase only useful programs\\n\\t\\tif (player.tor) {\\n\\t\\t\\tfor (let [program, hackingLevel] of usefulPrograms) {\\n\\t\\t\\t\\tif (!ns.fileExists(program) && player.hacking >= hackingLevel) {\\n\\t\\t\\t\\t\\tif (ns.purchaseProgram(program)) printBoth(ns, `Purchased ${program}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Upgrade home RAM\\n\\t\\tif (ns.getUpgradeHomeRamCost() <= ns.getServerMoneyAvailable('home') &&\\n\\t\\t\\tns.getTimeSinceLastAug() - upgradeRamTime > upgradeRamTimer &&\\n\\t\\t\\t!promptScriptRunning(ns, 'home')) {\\n\\t\\t\\tns.exec('/utils/upgrade-home-ram.js', 'home', 1);\\n\\t\\t\\tupgradeRamTime = ns.getTimeSinceLastAug();\\n\\t\\t}\\n\\t\\t// Upgrade home cores\\n\\t\\tif (ns.getUpgradeHomeCoresCost() <= ns.getServerMoneyAvailable('home') &&\\n\\t\\t\\tns.getTimeSinceLastAug() - upgradeCoresTime > upgradeCoresTimer &&\\n\\t\\t\\t!promptScriptRunning(ns, 'home')) {\\n\\t\\t\\tns.exec('/utils/upgrade-home-cores.js', 'home', 1);\\n\\t\\t\\tupgradeCoresTime = ns.getTimeSinceLastAug();\\n\\t\\t}\\n\\n\\t\\t// Backdoor servers\\n\\t\\tfor (let server of getAccessibleServers(ns)) {\\n\\t\\t\\tif (!(server === 'home' || server === 'w0r1d_d43m0n' ||\\n\\t\\t\\t\\tns.getServer(server).backdoorInstalled ||\\n\\t\\t\\t\\tns.isRunning('/utils/backdoor.js', 'home', server))) {\\n\\t\\t\\t\\tns.print(`Installing backdoor on ${server}`);\\n\\t\\t\\t\\tns.exec('/utils/backdoor.js', 'home', 1, server);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Simple hack manager\\n\\t\\tmanageAndHack(ns);\\n\\n\\t\\t// Check faction invites\\n\\t\\tlet factions = ns.checkFactionInvitations().filter(faction => !askedFactions.includes(faction));\\n\\t\\tif (factions.length > 0 && !promptScriptRunning(ns, 'home')) {\\n\\t\\t\\tns.print(`Request to join ${factions}`);\\n\\t\\t\\tns.exec('/utils/join-factions.js', 'home', 1, ...factions);\\n\\t\\t\\taskedFactions = askedFactions.concat(factions); // Don't ask again\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"cortex.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///fcef7233-6e11-427d-9346-114f0e7e5aba\",\"moduleSequenceNumber\":486},{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///5e8176cd-5ffe-47e1-a8dd-d54fd7ed3227\",\"moduleSequenceNumber\":486},{\"filename\":\"/utils/contractor.js\",\"url\":\"blob:file:///b90acba7-f7e1-4f85-9ef1-1ea5f1162230\",\"moduleSequenceNumber\":947},{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///6b264210-9ddd-422c-8ad5-b7a26f41937d\",\"moduleSequenceNumber\":486},{\"filename\":\"/hacking/hack-manager.js\",\"url\":\"blob:file:///cc207d78-bb6e-43ec-8fef-fcb3d9b58624\",\"moduleSequenceNumber\":929},{\"filename\":\"cortex.js\",\"url\":\"blob:file:///554804b6-8a16-45aa-837c-d66d87573166\",\"moduleSequenceNumber\":6542}],\"dependents\":[],\"ramUsage\":54.2,\"server\":\"home\",\"moduleSequenceNumber\":54087,\"_hash\":\"7f18fa8326af637cbac3875144fb01f69969bc9e2986856dedb97b35526bfcb3\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hospitalize\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getTimeSinceLastAug\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getUpgradeHomeCoresCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {routeFinder} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tconst server = ns.args[0];\\n\\tconst route = routeFinder(ns, server);\\n\\tif (route) {\\n\\t\\tfor (let serv of route) {\\n\\t\\t\\tns.connect(serv);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/tools/connect.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///45d74aaa-1e13-48f0-8774-98a3344fa645\",\"moduleSequenceNumber\":23086},{\"filename\":\"/tools/connect.js\",\"url\":\"blob:file:///0c55e468-fd9a-4b2a-9a3f-0221e12de39d\",\"moduleSequenceNumber\":32322}],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"home\",\"moduleSequenceNumber\":54088,\"_hash\":\"b17a3e15d50101bb20a99629e19f87c1f2f8ca1d2cc4f7b60323548fe3f992a8\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getFactions} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\tconst factions = getFactions();\\n\\tconst args = ns.flags([\\n\\t\\t['hacking', false],\\n\\t\\t['field', false],\\n\\t\\t['security', false]\\n\\t]);\\n\\n\\tlet workType;\\n\\tif (args.hacking) workType = 'Hacking Contracts';\\n\\telse if (args.field) workType = 'Field Work';\\n\\telse if (args.security) workType = 'Security Work';\\n\\telse {\\n\\t\\tns.tprint(`Invalid work type.`);\\n\\t\\tns.exit();\\n\\t}\\n\\n\\tfor (let i = 0; i < args._.length; i += 2) {\\n\\t\\tlet faction = factions.find(faction => faction.toLowerCase() === args._[i]);\\n\\t\\tif (faction) {\\n\\t\\t\\tns.tprint(`Working for ${faction}.`);\\n\\t\\t\\twhile (ns.getFactionRep(faction) < args._[i + 1]) {\\n\\t\\t\\t\\tns.workForFaction(faction, workType, ns.isFocused());\\n\\t\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\t}\\n\\t\\t} else ns.tprint(`Could not find faction.`);\\n\\t}\\n}\",\"filename\":\"/automators/faction.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///11ca6908-0b24-4034-85de-acc1b7f1328e\",\"moduleSequenceNumber\":407},{\"filename\":\"/automators/faction.js\",\"url\":\"blob:file:///f197a9e7-59a6-4764-b5ae-7a248fbca883\",\"moduleSequenceNumber\":772}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":54089,\"_hash\":\"9cac24b8a357a70e8ea58f6a7b7fed227bec230949d839d410e2e819ec2b7640\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"isFocused\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/share.js\",\"url\":\"blob:file:///a17497ef-7f66-4bba-8999-1dd6397df271\",\"moduleSequenceNumber\":50019}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":54090,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n\\tcopyScriptsToAll,\\n\\tfindPlaceToRun,\\n\\tgetAccessibleServers,\\n\\tgetFreeRam,\\n\\tgetScripts\\n} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tawait copyScriptsToAll(ns);\\n\\tconst threads = Number.MAX_VALUE;\\n\\tconst scripts = getScripts();\\n\\tlet i = 0;\\n\\twhile (true) {\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\t\\tfindPlaceToRun(ns, scripts.grow, threads, freeRams, ['joesguns', 0, i]);\\n\\t\\tfindPlaceToRun(ns, scripts.weaken, threads, freeRams, ['joesguns', 0, i]);\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"/automators/exp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///ad0dddb5-7ac9-4338-87dc-5f3edef01dda\",\"moduleSequenceNumber\":8280},{\"filename\":\"/automators/exp.js\",\"url\":\"blob:file:///a8112ade-a53a-4e63-be6a-1af9f282a478\",\"moduleSequenceNumber\":9630}],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"home\",\"moduleSequenceNumber\":54091,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n\\tcopyScriptsToAll,\\n\\tfindPlaceToRun,\\n\\tgetAccessibleServers,\\n\\tgetFreeRam,\\n\\tgetOptimalHackable,\\n\\tgetScripts\\n} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tawait copyScriptsToAll(ns);\\n\\tconst threads = Number.MAX_VALUE;\\n\\tconst scripts = getScripts();\\n\\twhile (true) {\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet hackables = getOptimalHackable(ns, servers);\\n\\t\\tlet [freeRams, filteredHackables] = getFreeRam(ns, servers, hackables, true);\\n\\t\\tfor (let target of filteredHackables.reverse()) {\\n\\t\\t\\tfindPlaceToRun(ns, scripts.share, threads, freeRams);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"/automators/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///28dddad5-86b2-49d1-b23d-4370fa8f3ba7\",\"moduleSequenceNumber\":49472},{\"filename\":\"/automators/share.js\",\"url\":\"blob:file:///3d18238c-081f-4581-b5aa-b9468407fb61\",\"moduleSequenceNumber\":49946}],\"dependents\":[],\"ramUsage\":12.05,\"server\":\"home\",\"moduleSequenceNumber\":54092,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tns.disableLog('ALL')\\n\\n\\tif (!ns.gang.inGang()) {\\n\\t\\tns.tprint(`You need to join a gang first.`);\\n\\t\\tns.exit();\\n\\t} else if (ns.gang.getGangInformation().isHacking) {\\n\\t\\tns.tprint(`Not a combat gang.`);\\n\\t\\tns.exit();\\n\\t}\\n\\n\\tconst gangJoined = ns.gang.getGangInformation().faction;\\n\\tconst otherGangs = Object.entries(ns.gang.getOtherGangInformation()).filter(([faction]) => faction !== gangJoined);\\n\\tconst strength_level = 500;\\n\\n\\tlet c = 0;\\n\\twhile (true) {\\n\\t\\t// Check for recruits\\n\\t\\tif (ns.gang.canRecruitMember()) {\\n\\t\\t\\tlet name = 'gangsta-' + c;\\n\\t\\t\\tns.gang.recruitMember(name);\\n\\t\\t\\tns.gang.setMemberTask(name, 'Train Combat');\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\t// Get gang info\\n\\t\\tconst myGang = ns.gang.getGangInformation();\\n\\t\\tconst gangRoster = Array.from(ns.gang.getMemberNames(), (name) => ns.gang.getMemberInformation(name));\\n\\t\\t//Update Log\\n\\t\\tns.clearLog();\\n\\t\\tns.print(`Gang: ${gangJoined}`);\\n\\t\\tns.print(`Gang Warfare: ${myGang.territoryWarfareEngaged}`);\\n\\t\\tfor (let gangMember of gangRoster) ns.print(`${gangMember.name} - ${gangMember.task}`);\\n\\t\\t// Check for ascensions\\n\\t\\tfor (let gangMember of gangRoster) {\\n\\t\\t\\tif (!ns.gang.getAscensionResult(gangMember.name)) continue;\\n\\t\\t\\tif (ns.gang.getAscensionResult(gangMember.name).str >= asc_mult(gangMember)) ns.gang.ascendMember(gangMember.name);\\n\\t\\t}\\n\\t\\t// Check for equipment purchases\\n\\t\\tpurchaseEquipment(ns, gangRoster, strength_level);\\n\\t\\t// Assign tasks\\n\\t\\tconst clashChance = Array.from(otherGangs, ([faction]) => ns.gang.getChanceToWinClash(faction));\\n\\t\\tlet warfareCounter = 0;\\n\\t\\tfor (let gangMember of gangRoster) {\\n\\t\\t\\tif (gangMember.str < strength_level) ns.gang.setMemberTask(gangMember.name, 'Train Combat');\\n\\t\\t\\telse if (myGang.wantedPenalty < 0.9) ns.gang.setMemberTask(gangMember.name, 'Vigilante Justice');\\n\\t\\t\\telse if (gangRoster.length < 12) ns.gang.setMemberTask(gangMember.name, 'Terrorism');\\n\\t\\t\\telse if (clashChance.some(s => s < 0.8) && myGang.territory < 1 && warfareCounter < 6) {\\n\\t\\t\\t\\tns.gang.setMemberTask(gangMember.name, 'Territory Warfare');\\n\\t\\t\\t\\twarfareCounter++;\\n\\t\\t\\t} else ns.gang.setMemberTask(gangMember.name, 'Human Trafficking');\\n\\t\\t}\\n\\t\\t// Territory warfare checks\\n\\t\\tif (myGang.territory < 1 && fightForTerritory(ns, otherGangs)) ns.gang.setTerritoryWarfare(true);\\n\\t\\telse ns.gang.setTerritoryWarfare(false);\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\nfunction purchaseEquipment(ns, gangRoster, strength_level) {\\n\\tconst allEquipment = ns.gang.getEquipmentNames();\\n\\tconst strEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).str).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\tconst defEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).def).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\tconst dexEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).dex).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\tconst agiEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).agi).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\tconst chaEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).cha).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\tconst hackEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).hack).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\tconst orderedEquipment = [...new Set([...strEquipment, ...defEquipment, ...dexEquipment, ...agiEquipment, ...chaEquipment, ...hackEquipment])];\\n\\tfor (let gangMember of gangRoster) {\\n\\t\\tif (gangMember.str < strength_level) continue;\\n\\t\\tfor (let equipment of orderedEquipment) {\\n\\t\\t\\tif (!gangMember.upgrades.includes(equipment) && !gangMember.augmentations.includes(equipment) &&\\n\\t\\t\\t\\t!ns.gang.purchaseEquipment(gangMember.name, equipment)) break;\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction fightForTerritory(ns, otherGangs) {\\n\\tlet averageWinChance = 0;\\n\\tfor (let [faction, info] of otherGangs) {\\n\\t\\taverageWinChance += info.territory * ns.gang.getChanceToWinClash(faction);\\n\\t}\\n\\treturn averageWinChance / (1 - ns.gang.getGangInformation().territory) >= 0.7;\\n}\\n\\nfunction asc_mult(gangMember) {\\n\\treturn Math.max(1.6 + (1 - gangMember.str_asc_mult) / 58, 1.1);\\n}\",\"filename\":\"/gang/combat-gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/gang/combat-gang.js\",\"url\":\"blob:file:///631cbfb8-3c2d-47b7-aa4a-00fd1180ce95\",\"moduleSequenceNumber\":165114}],\"dependents\":[],\"ramUsage\":35.7,\"server\":\"home\",\"moduleSequenceNumber\":54093,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getOtherGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getChanceToWinClash\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setTerritoryWarfare\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentStats\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tns.disableLog('ALL')\\n\\n\\tif (!ns.gang.inGang()) {\\n\\t\\tns.tprint(`You need to join a gang first.`);\\n\\t\\tns.exit();\\n\\t} else if (!ns.gang.getGangInformation().isHacking) {\\n\\t\\tns.tprint(`Not a hacking gang.`);\\n\\t\\tns.exit();\\n\\t}\\n\\n\\tconst gangJoined = ns.gang.getGangInformation().faction;\\n\\tconst hack_level = 500;\\n\\n\\tlet c = 0;\\n\\twhile (true) {\\n\\t\\t// Check for recruits\\n\\t\\tif (ns.gang.canRecruitMember()) {\\n\\t\\t\\tlet name = 'hackerman-' + c;\\n\\t\\t\\tns.gang.recruitMember(name);\\n\\t\\t\\tns.gang.setMemberTask(name, 'Train Hacking');\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\t// Get gang info\\n\\t\\tconst myGang = ns.gang.getGangInformation();\\n\\t\\tconst gangRoster = Array.from(ns.gang.getMemberNames(), (name) => ns.gang.getMemberInformation(name));\\n\\t\\t//Update Log\\n\\t\\tns.clearLog();\\n\\t\\tns.print(`Gang: ${gangJoined}`);\\n\\t\\tns.print(`Gang Warfare: ${myGang.territoryWarfareEngaged}`);\\n\\t\\tfor (let gangMember of gangRoster) ns.print(`${gangMember.name} - ${gangMember.task}`);\\n\\t\\t// Check for ascensions\\n\\t\\tfor (let gangMember of gangRoster) {\\n\\t\\t\\tif (!ns.gang.getAscensionResult(gangMember.name)) continue;\\n\\t\\t\\tif (ns.gang.getAscensionResult(gangMember.name).hack >= asc_mult(gangMember)) ns.gang.ascendMember(gangMember.name);\\n\\t\\t}\\n\\t\\t// Check for equipment purchases\\n\\t\\tpurchaseEquipment(ns, gangRoster, hack_level);\\n\\t\\t// Assign tasks\\n\\t\\tfor (let gangMember of gangRoster) {\\n\\t\\t\\tif (gangMember.hack < hack_level) ns.gang.setMemberTask(gangMember.name, 'Train Hacking');\\n\\t\\t\\telse if (myGang.wantedPenalty < 0.9) ns.gang.setMemberTask(gangMember.name, 'Ethical Hacking');\\n\\t\\t\\telse if (gangRoster.length < 12) ns.gang.setMemberTask(gangMember.name, 'Cyberterrorism');\\n\\t\\t\\telse ns.gang.setMemberTask(gangMember.name, 'Money Laundering');\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\nfunction purchaseEquipment(ns, gangRoster, hack_level) {\\n\\tconst allEquipment = ns.gang.getEquipmentNames();\\n\\tconst hackEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).hack).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\tconst chaEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).cha).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\tconst orderedEquipment = [...new Set([...hackEquipment, ...chaEquipment])];\\n\\tfor (let gangMember of gangRoster) {\\n\\t\\tif (gangMember.hack < hack_level) continue;\\n\\t\\tfor (let equipment of orderedEquipment) {\\n\\t\\t\\tif (!gangMember.upgrades.includes(equipment) && !gangMember.augmentations.includes(equipment) &&\\n\\t\\t\\t\\t!ns.gang.purchaseEquipment(gangMember.name, equipment)) break;\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction asc_mult(gangMember) {\\n\\treturn Math.max(1.6 + (1 - gangMember.hack_asc_mult) / 58, 1.1);\\n}\",\"filename\":\"/gang/hacking-gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/gang/hacking-gang.js\",\"url\":\"blob:file:///aa3e5ada-b21f-4103-ba61-daf5ca6dae45\",\"moduleSequenceNumber\":143734}],\"dependents\":[],\"ramUsage\":27.7,\"server\":\"home\",\"moduleSequenceNumber\":54094,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentStats\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\tconst doc = eval('document');\\n\\tconst hook0 = doc.getElementById('overview-extra-hook-0');\\n\\tconst hook1 = doc.getElementById('overview-extra-hook-1');\\n\\twhile (true) {\\n\\t\\ttry {\\n\\t\\t\\tconst headers = [];\\n\\t\\t\\tconst values = [];\\n\\t\\t\\theaders.push(`Income\\\\u00A0`);\\n\\t\\t\\tvalues.push(`${ns.nFormat(ns.getScriptIncome()[0], '$0.000a')}`);\\n\\t\\t\\theaders.push(`Karma`);\\n\\t\\t\\tvalues.push(ns.heart.break());\\n\\t\\t\\thook0.innerText = headers.join('\\\\n');\\n\\t\\t\\thook1.innerText = values.join('\\\\n');\\n\\t\\t} catch (err) {\\n\\t\\t\\tns.print(`ERROR: Update Skipped: ${String(err)}`);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"/ui/overview.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/ui/overview.js\",\"url\":\"blob:file:///e81d0685-a2da-430c-bfbd-e2344331d35a\",\"moduleSequenceNumber\":54930}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":54930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer();\\n\\tconst server = ns.getServer(target);\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\n\\tconst chance = form.hackChance(server, player); // Chance to hack at min sec\\n\\tconst hackPercent = form.hackPercent(server, player) * 500; // Percent to hack by 1 thread at min sec\\n\\tconst time = form.weakenTime(server, player); // Time to weaken server ~ time for 1 cycle\\n\\tconst moneyPerHackThread = server.moneyMax * hackPercent; // Money per 1 hack thread\\n\\tconst growPercent = form.growPercent(server, 1, player, 1) // Percent to grow by 1 thread at min sec\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent); // grow threads per hack percent\\n\\tns.tprint(hackPercent);\\n\\tns.tprint(growThreadsPerHackPercent);\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///62eed4a7-9b83-4f76-b01c-aaed9f446886\",\"moduleSequenceNumber\":136898}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":136898,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const fs = require('fs');\\nconst path = require('path');\\nconst http = require('https');\\n\\nfunction getFilesRecursive(dir, arrayOfFiles) {\\n\\ttry {\\n\\t\\tlet files = fs.readdirSync(dir);\\n\\t\\tarrayOfFiles = arrayOfFiles || [];\\n\\t\\tfiles.forEach(function (file) {\\n\\t\\t\\tlet subfile = path.join(dir, file);\\n\\t\\t\\tif (fs.statSync(subfile).isDirectory()) {\\n\\t\\t\\t\\tarrayOfFiles = getFilesRecursive(subfile, arrayOfFiles);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tarrayOfFiles.push(subfile);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\treturn arrayOfFiles.filter(file => (path.extname(file) === '.txt' || path.extname(file) === '.js'));\\n\\t} catch (err) {\\n\\t\\tconsole.log(err);\\n\\t}\\n}\\n\\nfunction getFiles(dir = __dirname) {\\n\\tlet files = getFilesRecursive(`${dir}`);\\n\\tlet relativeFiles = [];\\n\\tfiles.forEach(file => relativeFiles.push(path.relative(dir, file).replace(/\\\\\\\\/g, '/')));\\n\\treturn relativeFiles;\\n}\\n\\nfunction writeToFile(filename, str) {\\n\\tfs.writeFile(filename, str, (err) => {\\n\\t\\tif (err) console.log(err);\\n\\t\\telse console.log(\\\"File written successfully\\\");\\n\\t});\\n}\\n\\nconst dir = path.join(__dirname, '../');\\nconst files = getFiles(`${dir}`);\\nconst str = files.join('\\\\n');\\nwriteToFile('scripts.txt', str);\\n\\nconst index = fs.createWriteStream('../types/index.d.ts');\\nhttp.get('https://raw.githubusercontent.com/danielyxie/bitburner/dev/src/ScriptEditor/NetscriptDefinitions.d.ts',\\n\\tfunction (response) {\\n\\t\\tresponse.pipe(index);\\n\\t});\",\"filename\":\"/build/update.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":54097,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function isUseful(ns, criterions, name) {\\n\\tfor (let criterion of criterions) {\\n\\t\\tif (criterion(ns, name)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function isPurchasable(ns, faction, name, augmentations) {\\n\\tlet facRep = ns.getFactionRep(faction);\\n\\tlet price = ns.getAugmentationPrice(name);\\n\\tlet repReq = ns.getAugmentationRepReq(name);\\n\\n\\treturn !(facRep < repReq || // Faction reputation prerequisite\\n\\t\\tns.getServerMoneyAvailable('home') < price || // Check if it is able to be bought\\n\\t\\taugmentations.some(aug => aug.name === name) || // Check to see if it can be bought from another faction\\n\\t\\tns.getOwnedAugmentations(true).includes(name) // Check if already bought\\n\\t);\\n}\",\"filename\":\"/augmentations/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":17.7,\"server\":\"home\",\"moduleSequenceNumber\":54098,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Company work automator\",\"filename\":\"/automators/work.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":54099,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Requires WarehouseAPI and OfficeAPI\\nimport {getJobs} from '/corporation/utils.js';\\nimport {getCities} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\t// Check if script works\\n\\tconst sourceFiles = ns.getOwnedSourceFiles();\\n\\tif (sourceFiles[3] !== 3 && !ns.corporation.hasUnlockUpgrade('Warehouse API')) throw new Error(`This script requires the Warehouse API`);\\n\\tif (sourceFiles[3] !== 3 && !ns.corporation.hasUnlockUpgrade('Office API')) throw new Error(`This script requires the Office API`);\\n\\tif (ns.getBitNodeMultipliers().CorporationValuation !== 1) throw new Error(`This script does not know how to deal with BitNodes that have a valuation modifier`);\\n\\t// Set up\\n\\tconst cities = getCities();\\n\\tconst jobs = getJobs();\\n\\tconst division1 = 'Agriculture';\\n\\tconst division2 = 'Tobacco';\\n\\t// Part 1\\n\\tawait part1(ns, cities, jobs, division1);\\n\\t// Part 2\\n\\tawait part2(ns, cities, jobs, division1);\\n\\t// Part 3\\n\\tawait part3(ns, cities, jobs, division2);\\n\\t// Autopilot\\n\\tawait autopilot(ns, cities, jobs, division2);\\n}\\n\\nexport async function part1(ns, cities, jobs, division) {\\n\\tconst corp = ns.corporation;\\n\\t// Expand to division and get smart supply\\n\\tcorp.expandIndustry('Agriculture', division);\\n\\tcorp.unlockUpgrade('Smart Supply');\\n\\tcorp.setSmartSupply(division, 'Sector-12', true);\\n\\tfor (let city of cities) {\\n\\t\\t// Purchase warehouse\\n\\t\\tcorp.purchaseWarehouse(division, city);\\n\\t\\t// Hire three employees\\n\\t\\tfor (let i = 0; i < 3; i++) {\\n\\t\\t\\tcorp.hireEmployee(division, city);\\n\\t\\t}\\n\\t\\tawait corp.setAutoJobAssignment(division, city, 'Operations', 1);\\n\\t\\tawait corp.setAutoJobAssignment(division, city, 'Engineer', 1);\\n\\t\\tawait corp.setAutoJobAssignment(division, city, 'Business', 1);\\n\\t\\t// Upgrade warehouse twice\\n\\t\\tfor (let i = 0; i < 2; i++) {\\n\\t\\t\\tcorp.upgradeWarehouse(division, city);\\n\\t\\t}\\n\\t\\t// Start selling material\\n\\t\\tcorp.sellMaterial(division, city, 'Food', 'MAX', 'MP');\\n\\t\\tcorp.sellMaterial(division, city, 'Plants', 'MAX', 'MP');\\n\\t}\\n\\t// Hire advert\\n\\tcorp.hireAdVert(division);\\n}\\n\\nexport async function part2(ns, cities, jobs, division) {\\n\\tconst corp = ns.corporation;\\n\\t// Get upgrades\\n\\tfor (let i = 0; i < 2; i++) {\\n\\t\\tcorp.levelUpgrade('FocusWires');\\n\\t\\tcorp.levelUpgrade('Neural Accelerators');\\n\\t\\tcorp.levelUpgrade('Speech Processor Implants');\\n\\t\\tcorp.levelUpgrade('Speech Processor Implants');\\n\\t\\tcorp.levelUpgrade('Smart Factories');\\n\\t}\\n\\t// Boost production\\n\\tfor (let city of cities) {\\n\\t\\tcorp.buyMaterial(division, city, 'Hardware', 12.5);\\n\\t\\tcorp.buyMaterial(division, city, 'AI Cores', 7.5);\\n\\t\\tcorp.buyMaterial(division, city, 'Real Estate', 2700);\\n\\t\\twhile (true) {\\n\\t\\t\\tlet hardware = corp.getMaterial(division, city, 'Hardware');\\n\\t\\t\\tlet aiCores = corp.getMaterial(division, city, 'AI Cores');\\n\\t\\t\\tlet realEstate = corp.getMaterial(division, city, 'Real Estate');\\n\\n\\t\\t\\tif (hardware.qty >= 125) corp.buyMaterial(division, city, 'Hardware', 0);\\n\\t\\t\\tif (aiCores.qty >= 75) corp.buyMaterial(division, city, 'AI Cores', 0);\\n\\t\\t\\tif (realEstate.qty >= 27000) corp.buyMaterial(division, city, 'Real Estate', 0);\\n\\t\\t\\tif (hardware.qty >= 125 && aiCores.qty >= 75 && realEstate.qty >= 27000) break;\\n\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t}\\n\\t// Wait for investment offer of $210b\\n\\twhile (corp.getInvestmentOffer() < 210e9) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tcorp.acceptInvestmentOffer();\\n\\t// Upgrade office size to nine\\n\\tfor (let city of cities) {\\n\\t\\tcorp.upgradeOfficeSize(division, city, 6);\\n\\t\\tawait corp.setAutoJobAssignment(division, city, 'Operations', 2);\\n\\t\\tawait corp.setAutoJobAssignment(division, city, 'Engineer', 2);\\n\\t\\tawait corp.setAutoJobAssignment(division, city, 'Business', 1);\\n\\t\\tawait corp.setAutoJobAssignment(division, city, 'Management', 2);\\n\\t\\tawait corp.setAutoJobAssignment(division, city, 'Research & Development', 2);\\n\\t}\\n\\t// Upgrade factories and storage\\n\\tfor (let i = 0; i < 10; i++) {\\n\\t\\tcorp.levelUpgrade('Smart Factories');\\n\\t\\tcorp.levelUpgrade('Smart Storage');\\n\\t}\\n\\t// Upgrade warehouses\\n\\tfor (let city of cities) {\\n\\t\\tfor (let i = 0; i < 7; i++) {\\n\\t\\t\\tcorp.upgradeWarehouse(division, city);\\n\\t\\t}\\n\\t}\\n\\t// Boost production\\n\\tfor (let city of cities) {\\n\\t\\tcorp.buyMaterial(division, city, 'Hardware', 267.5);\\n\\t\\tcorp.buyMaterial(division, city, 'Robots', 9.6);\\n\\t\\tcorp.buyMaterial(division, city, 'AI Cores', 244.5);\\n\\t\\tcorp.buyMaterial(division, city, 'Real Estate', 11940);\\n\\t\\twhile (true) {\\n\\t\\t\\tlet hardware = corp.getMaterial(division, city, 'Hardware');\\n\\t\\t\\tlet robots = corp.getMaterial(division, city, 'Robots');\\n\\t\\t\\tlet aiCores = corp.getMaterial(division, city, 'AI Cores');\\n\\t\\t\\tlet realEstate = corp.getMaterial(division, city, 'Real Estate');\\n\\n\\t\\t\\tif (hardware.qty >= 2800) corp.buyMaterial(division, city, 'Hardware', 0);\\n\\t\\t\\tif (robots.qty >= 96) corp.buyMaterial(division, city, 'Robots', 0);\\n\\t\\t\\tif (aiCores.qty >= 2520) corp.buyMaterial(division, city, 'AI Cores', 0);\\n\\t\\t\\tif (realEstate.qty >= 146400) corp.buyMaterial(division, city, 'Real Estate', 0);\\n\\t\\t\\tif (hardware.qty >= 2800 && robots.qty >= 96 && aiCores.qty >= 2520 && realEstate.qty >= 146400) break;\\n\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t}\\n\\t// Wait for investment offer of $5t\\n\\twhile (corp.getInvestmentOffer() < 5e12) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tcorp.acceptInvestmentOffer();\\n\\t// Upgrade warehouses\\n\\tfor (let city of cities) {\\n\\t\\tfor (let i = 0; i < 9; i++) {\\n\\t\\t\\tcorp.upgradeWarehouse(division, city);\\n\\t\\t}\\n\\t}\\n\\t// Boost production\\n\\tfor (let city of cities) {\\n\\t\\tcorp.buyMaterial(division, city, 'Hardware', 650);\\n\\t\\tcorp.buyMaterial(division, city, 'Robots', 63);\\n\\t\\tcorp.buyMaterial(division, city, 'AI Cores', 375);\\n\\t\\tcorp.buyMaterial(division, city, 'Real Estate', 8400);\\n\\t\\twhile (true) {\\n\\t\\t\\tlet hardware = corp.getMaterial(division, city, 'Hardware');\\n\\t\\t\\tlet robots = corp.getMaterial(division, city, 'Robots');\\n\\t\\t\\tlet aiCores = corp.getMaterial(division, city, 'AI Cores');\\n\\t\\t\\tlet realEstate = corp.getMaterial(division, city, 'Real Estate');\\n\\n\\t\\t\\tif (hardware.qty >= 9300) corp.buyMaterial(division, city, 'Hardware', 0);\\n\\t\\t\\tif (robots.qty >= 726) corp.buyMaterial(division, city, 'Robots', 0);\\n\\t\\t\\tif (aiCores.qty >= 6270) corp.buyMaterial(division, city, 'AI Cores', 0);\\n\\t\\t\\tif (realEstate.qty >= 230400) corp.buyMaterial(division, city, 'Real Estate', 0);\\n\\t\\t\\tif (hardware.qty >= 9300 && robots.qty >= 726 && aiCores.qty >= 6270 && realEstate.qty >= 230400) break;\\n\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport async function part3(ns, cities, jobs, division) {\\n\\tconst corp = ns.corporation;\\n\\t// Expand into tobacco industry\\n\\tcorp.expandIndustry('Tobacco', division);\\n\\tfor (let city of cities) {\\n\\t\\t// Purchase warehouse\\n\\t\\tcorp.purchaseWarehouse(division, city);\\n\\t\\tif (city === 'Aevum') {\\n\\t\\t\\t// Upgrade Office size to 60\\n\\t\\t\\tcorp.upgradeOfficeSize(division, city, 27);\\n\\t\\t\\t// Hire 60 employees\\n\\t\\t\\tfor (let i = 0; i < 30; i++) {\\n\\t\\t\\t\\tcorp.hireEmployee(division, city);\\n\\t\\t\\t}\\n\\t\\t\\tawait corp.setAutoJobAssignment(division, city, 'Operations', 6);\\n\\t\\t\\tawait corp.setAutoJobAssignment(division, city, 'Engineer', 6);\\n\\t\\t\\tawait corp.setAutoJobAssignment(division, city, 'Business', 6);\\n\\t\\t\\tawait corp.setAutoJobAssignment(division, city, 'Management', 6);\\n\\t\\t\\tawait corp.setAutoJobAssignment(division, city, 'Research & Development', 6);\\n\\t\\t} else {\\n\\t\\t\\t// Upgrade Office size to nine\\n\\t\\t\\tcorp.upgradeOfficeSize(division, city, 6);\\n\\t\\t\\t// Hire nine employees\\n\\t\\t\\tfor (let i = 0; i < 9; i++) {\\n\\t\\t\\t\\tcorp.hireEmployee(division, city);\\n\\t\\t\\t}\\n\\t\\t\\tawait corp.setAutoJobAssignment(division, city, 'Operations', 2);\\n\\t\\t\\tawait corp.setAutoJobAssignment(division, city, 'Engineer', 2);\\n\\t\\t\\tawait corp.setAutoJobAssignment(division, city, 'Business', 1);\\n\\t\\t\\tawait corp.setAutoJobAssignment(division, city, 'Management', 2);\\n\\t\\t\\tawait corp.setAutoJobAssignment(division, city, 'Research & Development', 2);\\n\\t\\t}\\n\\t}\\n\\t// Start making Tobacco v1\\n\\tif (!corp.getProduct(division, 'Tobacco v1')) corp.makeProduct(division, 'Aevum', 'Tobacco v1', 1e9, 1e9);\\n\\t// Get upgrades\\n\\twhile (true) {\\n\\t\\tif (corp.getUpgradeLevel('Wilson Analytics') < 14) corp.levelUpgrade('Wilson Analytics');\\n\\t\\tif (corp.getUpgradeLevel('FocusWires') < 20) corp.levelUpgrade('FocusWires');\\n\\t\\tif (corp.getUpgradeLevel('Neural Accelerators') < 20) corp.levelUpgrade('Neural Accelerators');\\n\\t\\tif (corp.getUpgradeLevel('Speech Processor Implants') < 20) corp.levelUpgrade('Speech Processor Implants');\\n\\t\\tif (corp.getUpgradeLevel('Nuoptimal Nootropic Injector Implants') < 20) corp.levelUpgrade('Nuoptimal Nootropic Injector Implants');\\n\\n\\t\\tif (corp.getUpgradeLevel('Wilson Analytics') >= 14 &&\\n\\t\\t\\tcorp.getUpgradeLevel('FocusWires') >= 20 &&\\n\\t\\t\\tcorp.getUpgradeLevel('Neural Accelerators') >= 20 &&\\n\\t\\t\\tcorp.getUpgradeLevel('Speech Processor Implants') >= 20 &&\\n\\t\\t\\tcorp.getUpgradeLevel('Nuoptimal Nootropic Injector Implants') >= 20) break;\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\t// Wait for Tobacco v1 to finish\\n\\twhile (corp.getProduct(division, 'Tobacco v1').developmentProgress < 100) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\t// Start selling Tobacco v1 in all cities\\n\\tcorp.sellProduct(division, 'Aevum', 'Tobacco v1', 'MAX', 'MP*2', true);\\n\\t// Start making Tobacco v2\\n\\tif (!corp.getProduct(division, 'Tobacco v2')) corp.makeProduct(division, 'Aevum', 'Tobacco v2', 1e9, 1e9);\\n\\t// Upgrade Aevum office size\\n\\twhile (corp.getOffice(division, 'Aevum').size < 60) {\\n\\t\\tcorp.upgradeOfficeSize(division, 'Aevum', 30);\\n\\t\\t// Start selling Tobacco v2 and start making Tobacco v3 if it finishes\\n\\t\\tif (corp.getProduct(division, 'Tobacco v2').developmentProgress === 100) {\\n\\t\\t\\tcorp.sellProduct(division, 'Aevum', 'Tobacco v2', 'MAX', 'MP*4', true);\\n\\t\\t\\tif (!corp.getProduct(division, 'Tobacco v3')) corp.makeProduct(division, 'Aevum', 'Tobacco v3', 1e9, 1e9);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tawait corp.setAutoJobAssignment(division, 'Aevum', 'Operations', 12);\\n\\tawait corp.setAutoJobAssignment(division, 'Aevum', 'Engineer', 12);\\n\\tawait corp.setAutoJobAssignment(division, 'Aevum', 'Business', 12);\\n\\tawait corp.setAutoJobAssignment(division, 'Aevum', 'Management', 12);\\n\\tawait corp.setAutoJobAssignment(division, 'Aevum', 'Research & Development', 12);\\n\\t// Wait for Tobacco v2 to finish\\n\\twhile (corp.getProduct(division, 'Tobacco v2').developmentProgress < 100) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tcorp.sellProduct(division, 'Aevum', 'Tobacco v2', 'MAX', 'MP*4', true);\\n\\tif (!corp.getProduct(division, 'Tobacco v3')) corp.makeProduct(division, 'Aevum', 'Tobacco v3', 1e9, 1e9);\\n}\\n\\nexport async function autopilot(ns, cities, jobs, division) {\\n\\tconst corp = ns.corporation;\\n\\t// Autopilot\\n\\tfor (let version = 3; version < 20; version++) {\\n\\t\\t// TODO: autopilot\\n\\t}\\n}\",\"filename\":\"/corporation/start.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1033,\"server\":\"home\",\"moduleSequenceNumber\":54100,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function getJobs() {\\n\\treturn ['Operations', 'Engineer', 'Business', 'Management', 'Research & Development'];\\n}\",\"filename\":\"/corporation/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":54101,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/build/scripts.txt\",\"text\":\"cortex.js\\nutils/upgrade-home-ram.js\\nutils/join-factions.js\\nutils/contractor.js\\nutils/utils.js\\nutils/upgrade-home-cores.js\\nutils/backdoor.js\\nutils/share.js\\ntexts/augmentations-list.txt\\ntexts/bitnode-order.txt\\nstock-market/early-stock-market.js\\nstock-market/stock-market.js\\nexploits/dev-menu.js\\nbuild/script-remover.js\\nbuild/update.js\\nbuild/scripts.txt\\nbuild/download-bitburner-scripts.js\\naugmentations/augmentation-lister.js\\naugmentations/install-augmentations.js\\naugmentations/purchase-augmentations.js\\naugmentations/utils.js\\nhacking/deploy-daemons.js\\nhacking/grow.js\\nhacking/daemon.js\\nhacking/hack-manager.js\\nhacking/weaken.js\\nhacking/hack.js\\ntools/karma.js\\ntools/cost-pserv.js\\ntools/favor.js\\ntools/bitnode-multipliers.js\\ntools/hackable-servers.js\\ntools/get-all-text.js\\ntools/connect.js\\ntools/reputation.js\\ntools/pserv-buyer.js\\ntools/analyze-server.js\\ntools/monitor.js\\nautomators/crime.js\\nautomators/gym.js\\nautomators/exp.js\\nautomators/faction.js\\nautomators/university.js\\nautomators/create-programs.js\\nautomators/share.js\\nautomators/work.js\\ngang/combat-gang.js\\ngang/hacking-gang.js\\nui/overview.js\\ncorporation/start.js\\ncorporation/utils.js\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/texts/augmentations-list.txt\",\"text\":\"\\n\\n----- CyberSec -----\\n\\n--- BitWire ---\\nhacking_mult: 1.05\\nPrice: $10.000m\\nRep: 3.750k\\n\\n--- Synaptic Enhancement Implant ---\\nhacking_speed_mult: 1.03\\nPrice: $7.500m\\nRep: 2.000k\\n\\n--- Cranial Signal Processors - Gen I ---\\nhacking_mult: 1.05\\nhacking_speed_mult: 1.01\\nPrice: $70.000m\\nRep: 10.000k\\n\\n--- Cranial Signal Processors - Gen II ---\\nhacking_mult: 1.07\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.02\\nPrice: $125.000m\\nRep: 18.750k\\nPrereq: Cranial Signal Processors - Gen I\\n\\n--- Neurotrainer I ---\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $4.000m\\nRep: 1.000k\\n\\n\\n----- Tian Di Hui -----\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- Social Negotiation Assistant (S.N.A) ---\\ncompany_rep_mult: 1.15\\nfaction_rep_mult: 1.15\\nwork_money_mult: 1.1\\nPrice: $30.000m\\nRep: 6.250k\\n\\n--- Neuroreceptor Management Implant ---\\nSpecial\\nPrice: $550.000m\\nRep: 75.000k\\n\\n\\n----- Netburners -----\\n\\n--- Hacknet Node CPU Architecture Neural-Upload ---\\nhacknet_node_money_mult: 1.15\\nhacknet_node_purchase_cost_mult: 0.85\\nPrice: $11.000m\\nRep: 3.750k\\n\\n--- Hacknet Node Cache Architecture Neural-Upload ---\\nhacknet_node_money_mult: 1.1\\nhacknet_node_level_cost_mult: 0.85\\nPrice: $5.500m\\nRep: 2.500k\\n\\n--- Hacknet Node NIC Architecture Neural-Upload ---\\nhacknet_node_money_mult: 1.1\\nhacknet_node_purchase_cost_mult: 0.9\\nPrice: $4.500m\\nRep: 1.875k\\n\\n--- Hacknet Node Kernel Direct-Neural Interface ---\\nhacknet_node_money_mult: 1.25\\nPrice: $40.000m\\nRep: 7.500k\\n\\n--- Hacknet Node Core Direct-Neural Interface ---\\nhacknet_node_money_mult: 1.45\\nPrice: $60.000m\\nRep: 12.500k\\n\\n\\n----- Sector-12 -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- CashRoot Starter Kit ---\\nSpecial\\nPrice: $125.000m\\nRep: 12.500k\\n\\n\\n----- Chongqing -----\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Neuregen Gene Modification ---\\nhacking_exp_mult: 1.4\\nPrice: $375.000m\\nRep: 37.500k\\n\\n\\n----- New Tokyo -----\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- NutriGen Implant ---\\nstrength_exp_mult: 1.2\\ndefense_exp_mult: 1.2\\ndexterity_exp_mult: 1.2\\nagility_exp_mult: 1.2\\nPrice: $2.500m\\nRep: 6.250k\\n\\n\\n----- Ishima -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- INFRARET Enhancement ---\\ndexterity_mult: 1.1\\ncrime_money_mult: 1.1\\ncrime_success_mult: 1.25\\nPrice: $30.000m\\nRep: 7.500k\\n\\n\\n----- Aevum -----\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Synaptic Enhancement Implant ---\\nhacking_speed_mult: 1.03\\nPrice: $7.500m\\nRep: 2.000k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Neurotrainer I ---\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $4.000m\\nRep: 1.000k\\n\\n--- PCMatrix ---\\ncharisma_mult: 1.0777\\ncharisma_exp_mult: 1.0777\\ncompany_rep_mult: 1.0777\\nfaction_rep_mult: 1.0777\\ncrime_money_mult: 1.0777\\ncrime_success_mult: 1.0777\\nwork_money_mult: 1.777\\nPrice: $2.000b\\nRep: 100.000k\\n\\n\\n----- Volhaven -----\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- DermaForce Particle Barrier ---\\ndefense_mult: 1.4\\nPrice: $50.000m\\nRep: 15.000k\\n\\n\\n----- NiteSec -----\\n\\n--- BitWire ---\\nhacking_mult: 1.05\\nPrice: $10.000m\\nRep: 3.750k\\n\\n--- Artificial Synaptic Potentiation ---\\nhacking_exp_mult: 1.05\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.02\\nPrice: $80.000m\\nRep: 6.250k\\n\\n--- Neural-Retention Enhancement ---\\nhacking_exp_mult: 1.25\\nPrice: $250.000m\\nRep: 20.000k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Cranial Signal Processors - Gen II ---\\nhacking_mult: 1.07\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.02\\nPrice: $125.000m\\nRep: 18.750k\\nPrereq: Cranial Signal Processors - Gen I\\n\\n--- Cranial Signal Processors - Gen III ---\\nhacking_mult: 1.09\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.15\\nPrice: $550.000m\\nRep: 50.000k\\nPrereq: Cranial Signal Processors - Gen II\\n\\n--- Neurotrainer II ---\\nhacking_exp_mult: 1.15\\nstrength_exp_mult: 1.15\\ndefense_exp_mult: 1.15\\ndexterity_exp_mult: 1.15\\nagility_exp_mult: 1.15\\ncharisma_exp_mult: 1.15\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- CRTX42-AA Gene Modification ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nPrice: $225.000m\\nRep: 45.000k\\n\\n\\n----- The Black Hand -----\\n\\n--- Artificial Synaptic Potentiation ---\\nhacking_exp_mult: 1.05\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.02\\nPrice: $80.000m\\nRep: 6.250k\\n\\n--- Enhanced Myelin Sheathing ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.1\\nhacking_speed_mult: 1.03\\nPrice: $1.375b\\nRep: 100.000k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Cranial Signal Processors - Gen III ---\\nhacking_mult: 1.09\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.15\\nPrice: $550.000m\\nRep: 50.000k\\nPrereq: Cranial Signal Processors - Gen II\\n\\n--- Cranial Signal Processors - Gen IV ---\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.2\\nhacking_grow_mult: 1.25\\nPrice: $1.100b\\nRep: 125.000k\\nPrereq: Cranial Signal Processors - Gen III\\n\\n--- The Black Hand ---\\nhacking_mult: 1.1\\nstrength_mult: 1.15\\ndexterity_mult: 1.15\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.1\\nPrice: $550.000m\\nRep: 100.000k\\n\\n\\n----- BitRunners -----\\n\\n--- Artificial Bio-neural Network Implant ---\\nhacking_mult: 1.12\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.15\\nPrice: $3.000b\\nRep: 275.000k\\n\\n--- Enhanced Myelin Sheathing ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.1\\nhacking_speed_mult: 1.03\\nPrice: $1.375b\\nRep: 100.000k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Neural Accelerator ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.15\\nhacking_money_mult: 1.2\\nPrice: $1.750b\\nRep: 200.000k\\n\\n--- Cranial Signal Processors - Gen III ---\\nhacking_mult: 1.09\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.15\\nPrice: $550.000m\\nRep: 50.000k\\nPrereq: Cranial Signal Processors - Gen II\\n\\n--- Cranial Signal Processors - Gen IV ---\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.2\\nhacking_grow_mult: 1.25\\nPrice: $1.100b\\nRep: 125.000k\\nPrereq: Cranial Signal Processors - Gen III\\n\\n--- Cranial Signal Processors - Gen V ---\\nhacking_mult: 1.3\\nhacking_money_mult: 1.25\\nhacking_grow_mult: 1.75\\nPrice: $2.250b\\nRep: 250.000k\\nPrereq: Cranial Signal Processors - Gen IV\\n\\n--- Neurotrainer II ---\\nhacking_exp_mult: 1.15\\nstrength_exp_mult: 1.15\\ndefense_exp_mult: 1.15\\ndexterity_exp_mult: 1.15\\nagility_exp_mult: 1.15\\ncharisma_exp_mult: 1.15\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- BitRunners Neurolink ---\\nhacking_mult: 1.15\\nhacking_exp_mult: 1.2\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nPrice: $4.375b\\nRep: 875.000k\\n\\n\\n----- ECorp -----\\n\\n--- Graphene Bionic Spine Upgrade ---\\nstrength_mult: 1.6\\ndefense_mult: 1.6\\ndexterity_mult: 1.6\\nagility_mult: 1.6\\nPrice: $6.000b\\nRep: 1.625m\\nPrereq: Bionic Spine\\n\\n--- Graphene Bionic Legs Upgrade ---\\nagility_mult: 2.5\\nPrice: $4.500b\\nRep: 750.000k\\nPrereq: Bionic Legs\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- PC Direct-Neural Interface ---\\nhacking_mult: 1.08\\ncompany_rep_mult: 1.3\\nPrice: $3.750b\\nRep: 375.000k\\n\\n--- PC Direct-Neural Interface Optimization Submodule ---\\nhacking_mult: 1.1\\ncompany_rep_mult: 1.75\\nPrice: $4.500b\\nRep: 500.000k\\nPrereq: PC Direct-Neural Interface\\n\\n--- ECorp HVMind Implant ---\\nhacking_grow_mult: 3\\nPrice: $5.500b\\nRep: 1.500m\\n\\n\\n----- MegaCorp -----\\n\\n--- Graphene Bionic Legs Upgrade ---\\nagility_mult: 2.5\\nPrice: $4.500b\\nRep: 750.000k\\nPrereq: Bionic Legs\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- CordiARC Fusion Reactor ---\\nstrength_mult: 1.35\\ndefense_mult: 1.35\\ndexterity_mult: 1.35\\nagility_mult: 1.35\\nstrength_exp_mult: 1.35\\ndefense_exp_mult: 1.35\\ndexterity_exp_mult: 1.35\\nagility_exp_mult: 1.35\\nPrice: $5.000b\\nRep: 1.125m\\n\\n\\n----- KuaiGong International -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- FocusWire ---\\nhacking_exp_mult: 1.05\\nstrength_exp_mult: 1.05\\ndefense_exp_mult: 1.05\\ndexterity_exp_mult: 1.05\\nagility_exp_mult: 1.05\\ncharisma_exp_mult: 1.05\\ncompany_rep_mult: 1.1\\nwork_money_mult: 1.2\\nPrice: $900.000m\\nRep: 75.000k\\n\\n--- HyperSight Corneal Implant ---\\ndexterity_mult: 1.4\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.750b\\nRep: 150.000k\\n\\n--- Photosynthetic Cells ---\\nstrength_mult: 1.4\\ndefense_mult: 1.4\\nagility_mult: 1.4\\nPrice: $2.750b\\nRep: 562.500k\\n\\n\\n----- Four Sigma -----\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- FocusWire ---\\nhacking_exp_mult: 1.05\\nstrength_exp_mult: 1.05\\ndefense_exp_mult: 1.05\\ndexterity_exp_mult: 1.05\\nagility_exp_mult: 1.05\\ncharisma_exp_mult: 1.05\\ncompany_rep_mult: 1.1\\nwork_money_mult: 1.2\\nPrice: $900.000m\\nRep: 75.000k\\n\\n--- PC Direct-Neural Interface ---\\nhacking_mult: 1.08\\ncompany_rep_mult: 1.3\\nPrice: $3.750b\\nRep: 375.000k\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- ADR-V2 Pheromone Gene ---\\ncompany_rep_mult: 1.2\\nfaction_rep_mult: 1.2\\nPrice: $550.000m\\nRep: 62.500k\\n\\n--- Neurotrainer III ---\\nhacking_exp_mult: 1.2\\nstrength_exp_mult: 1.2\\ndefense_exp_mult: 1.2\\ndexterity_exp_mult: 1.2\\nagility_exp_mult: 1.2\\ncharisma_exp_mult: 1.2\\nPrice: $130.000m\\nRep: 25.000k\\n\\n\\n----- NWO -----\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- Neurotrainer III ---\\nhacking_exp_mult: 1.2\\nstrength_exp_mult: 1.2\\ndefense_exp_mult: 1.2\\ndexterity_exp_mult: 1.2\\nagility_exp_mult: 1.2\\ncharisma_exp_mult: 1.2\\nPrice: $130.000m\\nRep: 25.000k\\n\\n--- Power Recirculation Core ---\\nhacking_mult: 1.05\\nstrength_mult: 1.05\\ndefense_mult: 1.05\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\ncharisma_mult: 1.05\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $180.000m\\nRep: 25.000k\\n\\n--- Xanipher ---\\nhacking_mult: 1.2\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\ndexterity_mult: 1.2\\nagility_mult: 1.2\\ncharisma_mult: 1.2\\nhacking_exp_mult: 1.15\\nstrength_exp_mult: 1.15\\ndefense_exp_mult: 1.15\\ndexterity_exp_mult: 1.15\\nagility_exp_mult: 1.15\\ncharisma_exp_mult: 1.15\\nPrice: $4.250b\\nRep: 875.000k\\n\\n--- Hydroflame Left Arm ---\\nstrength_mult: 2.7\\nPrice: $2.500t\\nRep: 1.250m\\n\\n\\n----- Blade Industries -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- PC Direct-Neural Interface ---\\nhacking_mult: 1.08\\ncompany_rep_mult: 1.3\\nPrice: $3.750b\\nRep: 375.000k\\n\\n--- PC Direct-Neural Interface Optimization Submodule ---\\nhacking_mult: 1.1\\ncompany_rep_mult: 1.75\\nPrice: $4.500b\\nRep: 500.000k\\nPrereq: PC Direct-Neural Interface\\n\\n--- HyperSight Corneal Implant ---\\ndexterity_mult: 1.4\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.750b\\nRep: 150.000k\\n\\n--- Neotra ---\\nstrength_mult: 1.55\\ndefense_mult: 1.55\\nPrice: $2.875b\\nRep: 562.500k\\n\\n\\n----- OmniTek Incorporated -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- PC Direct-Neural Interface ---\\nhacking_mult: 1.08\\ncompany_rep_mult: 1.3\\nPrice: $3.750b\\nRep: 375.000k\\n\\n--- OmniTek InfoLoad ---\\nhacking_mult: 1.2\\nhacking_exp_mult: 1.25\\nPrice: $2.875b\\nRep: 625.000k\\n\\n\\n----- Bachman & Associates -----\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- FocusWire ---\\nhacking_exp_mult: 1.05\\nstrength_exp_mult: 1.05\\ndefense_exp_mult: 1.05\\ndexterity_exp_mult: 1.05\\nagility_exp_mult: 1.05\\ncharisma_exp_mult: 1.05\\ncompany_rep_mult: 1.1\\nwork_money_mult: 1.2\\nPrice: $900.000m\\nRep: 75.000k\\n\\n--- ADR-V2 Pheromone Gene ---\\ncompany_rep_mult: 1.2\\nfaction_rep_mult: 1.2\\nPrice: $550.000m\\nRep: 62.500k\\n\\n--- SmartJaw ---\\ncharisma_mult: 1.5\\ncharisma_exp_mult: 1.5\\ncompany_rep_mult: 1.25\\nfaction_rep_mult: 1.25\\nPrice: $2.750b\\nRep: 375.000k\\n\\n\\n----- Clarke Incorporated -----\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Neuronal Densification ---\\nhacking_mult: 1.15\\nhacking_exp_mult: 1.1\\nhacking_speed_mult: 1.03\\nPrice: $1.375b\\nRep: 187.500k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- FocusWire ---\\nhacking_exp_mult: 1.05\\nstrength_exp_mult: 1.05\\ndefense_exp_mult: 1.05\\ndexterity_exp_mult: 1.05\\nagility_exp_mult: 1.05\\ncharisma_exp_mult: 1.05\\ncompany_rep_mult: 1.1\\nwork_money_mult: 1.2\\nPrice: $900.000m\\nRep: 75.000k\\n\\n--- ADR-V2 Pheromone Gene ---\\ncompany_rep_mult: 1.2\\nfaction_rep_mult: 1.2\\nPrice: $550.000m\\nRep: 62.500k\\n\\n--- nextSENS Gene Modification ---\\nhacking_mult: 1.2\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\ndexterity_mult: 1.2\\nagility_mult: 1.2\\ncharisma_mult: 1.2\\nPrice: $1.925b\\nRep: 437.500k\\n\\n\\n----- Fulcrum Secret Technologies -----\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Graphene Bone Lacings ---\\nstrength_mult: 1.7\\ndefense_mult: 1.7\\nPrice: $4.250b\\nRep: 1.125m\\n\\n--- Graphene Bionic Spine Upgrade ---\\nstrength_mult: 1.6\\ndefense_mult: 1.6\\ndexterity_mult: 1.6\\nagility_mult: 1.6\\nPrice: $6.000b\\nRep: 1.625m\\nPrereq: Bionic Spine\\n\\n--- Graphene Bionic Legs Upgrade ---\\nagility_mult: 2.5\\nPrice: $4.500b\\nRep: 750.000k\\nPrereq: Bionic Legs\\n\\n--- Artificial Bio-neural Network Implant ---\\nhacking_mult: 1.12\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.15\\nPrice: $3.000b\\nRep: 275.000k\\n\\n--- Enhanced Myelin Sheathing ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.1\\nhacking_speed_mult: 1.03\\nPrice: $1.375b\\nRep: 100.000k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- PC Direct-Neural Interface Optimization Submodule ---\\nhacking_mult: 1.1\\ncompany_rep_mult: 1.75\\nPrice: $4.500b\\nRep: 500.000k\\nPrereq: PC Direct-Neural Interface\\n\\n--- PC Direct-Neural Interface NeuroNet Injector ---\\nhacking_mult: 1.1\\nhacking_speed_mult: 1.05\\ncompany_rep_mult: 2\\nPrice: $7.500b\\nRep: 1.500m\\nPrereq: PC Direct-Neural Interface\\n\\n\\n----- Slum Snakes -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- LuminCloaking-V1 Skin Implant ---\\nagility_mult: 1.05\\ncrime_money_mult: 1.1\\nPrice: $5.000m\\nRep: 1.500k\\n\\n--- LuminCloaking-V2 Skin Implant ---\\ndefense_mult: 1.1\\nagility_mult: 1.1\\ncrime_money_mult: 1.25\\nPrice: $30.000m\\nRep: 5.000k\\nPrereq: LuminCloaking-V1 Skin Implant\\n\\n--- SmartSonar Implant ---\\ndexterity_mult: 1.1\\ndexterity_exp_mult: 1.15\\ncrime_money_mult: 1.25\\nPrice: $75.000m\\nRep: 22.500k\\n\\n\\n----- Tetrads -----\\n\\n--- HemoRecirculator ---\\nstrength_mult: 1.08\\ndefense_mult: 1.08\\ndexterity_mult: 1.08\\nagility_mult: 1.08\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- LuminCloaking-V1 Skin Implant ---\\nagility_mult: 1.05\\ncrime_money_mult: 1.1\\nPrice: $5.000m\\nRep: 1.500k\\n\\n--- LuminCloaking-V2 Skin Implant ---\\ndefense_mult: 1.1\\nagility_mult: 1.1\\ncrime_money_mult: 1.25\\nPrice: $30.000m\\nRep: 5.000k\\nPrereq: LuminCloaking-V1 Skin Implant\\n\\n--- Power Recirculation Core ---\\nhacking_mult: 1.05\\nstrength_mult: 1.05\\ndefense_mult: 1.05\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\ncharisma_mult: 1.05\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $180.000m\\nRep: 25.000k\\n\\n--- Bionic Arms ---\\nstrength_mult: 1.3\\ndexterity_mult: 1.3\\nPrice: $275.000m\\nRep: 62.500k\\n\\n\\n----- Silhouette -----\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- TITN-41 Gene-Modification Injection ---\\ncharisma_mult: 1.15\\ncharisma_exp_mult: 1.15\\nPrice: $190.000m\\nRep: 25.000k\\n\\n--- ADR-V2 Pheromone Gene ---\\ncompany_rep_mult: 1.2\\nfaction_rep_mult: 1.2\\nPrice: $550.000m\\nRep: 62.500k\\n\\n\\n----- Speakers for the Dead -----\\n\\n--- Unstable Circadian Modulator ---\\nPrice: $5.000b\\nRep: 362.500k\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- The Shadow's Simulacrum ---\\ncompany_rep_mult: 1.15\\nfaction_rep_mult: 1.15\\nPrice: $400.000m\\nRep: 37.500k\\n\\n--- Graphene BrachiBlades Upgrade ---\\nstrength_mult: 1.4\\ndefense_mult: 1.4\\ncrime_money_mult: 1.3\\ncrime_success_mult: 1.1\\nPrice: $2.500b\\nRep: 225.000k\\nPrereq: BrachiBlades\\n\\n\\n----- The Dark Army -----\\n\\n--- HemoRecirculator ---\\nstrength_mult: 1.08\\ndefense_mult: 1.08\\ndexterity_mult: 1.08\\nagility_mult: 1.08\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- The Shadow's Simulacrum ---\\ncompany_rep_mult: 1.15\\nfaction_rep_mult: 1.15\\nPrice: $400.000m\\nRep: 37.500k\\n\\n--- Power Recirculation Core ---\\nhacking_mult: 1.05\\nstrength_mult: 1.05\\ndefense_mult: 1.05\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\ncharisma_mult: 1.05\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $180.000m\\nRep: 25.000k\\n\\n--- Graphene Bionic Arms Upgrade ---\\nstrength_mult: 1.85\\ndexterity_mult: 1.85\\nPrice: $3.750b\\nRep: 500.000k\\nPrereq: Bionic Arms\\n\\n\\n----- The Syndicate -----\\n\\n--- HemoRecirculator ---\\nstrength_mult: 1.08\\ndefense_mult: 1.08\\ndexterity_mult: 1.08\\nagility_mult: 1.08\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- The Shadow's Simulacrum ---\\ncompany_rep_mult: 1.15\\nfaction_rep_mult: 1.15\\nPrice: $400.000m\\nRep: 37.500k\\n\\n--- Power Recirculation Core ---\\nhacking_mult: 1.05\\nstrength_mult: 1.05\\ndefense_mult: 1.05\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\ncharisma_mult: 1.05\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $180.000m\\nRep: 25.000k\\n\\n--- BrachiBlades ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ncrime_money_mult: 1.15\\ncrime_success_mult: 1.1\\nPrice: $90.000m\\nRep: 12.500k\\n\\n\\n----- The Covenant -----\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Graphene Bone Lacings ---\\nstrength_mult: 1.7\\ndefense_mult: 1.7\\nPrice: $4.250b\\nRep: 1.125m\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- SPTN-97 Gene Modification ---\\nhacking_mult: 1.15\\nstrength_mult: 1.75\\ndefense_mult: 1.75\\ndexterity_mult: 1.75\\nagility_mult: 1.75\\nPrice: $4.875b\\nRep: 1.250m\\n\\n\\n----- Daedalus -----\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- The Red Pill ---\\nSpecial\\nPrice: $0.000\\nRep: 2.500m\\n\\n\\n----- Illuminati -----\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- QLink ---\\nhacking_mult: 1.75\\nhacking_chance_mult: 2.5\\nhacking_speed_mult: 2\\nhacking_money_mult: 4\\nPrice: $25.000t\\nRep: 1.875m\\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/texts/bitnode-order.txt\",\"text\":\"1.1 -> 1.2 -> 1.3   Max SF1 28% all\\n5.1                 Int, Formulas & getBitNodeMultipliers()\\n4.1 -> 4.2 -> 4.3   Max SF4 Singularity functions\\n5.2 -> 5.3          Max SF5 14% hacking\\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/texts/todo.txt\",\"text\":\"Company work automator\\nUpdate hackable cost function using formulas\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":4.167999999999998,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"7.9.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":54924,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":54925,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":54926,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"ecorp\",\"moduleSequenceNumber\":54927}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":54928,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"ecorp\",\"moduleSequenceNumber\":54929,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":36998488336,\"moneyMax\":924962208400,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1217,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"87.6.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":54912,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":54913,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":54914,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"megacorp\",\"moduleSequenceNumber\":54915}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":54916,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"megacorp\",\"moduleSequenceNumber\":54917,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":59290312530,\"moneyMax\":1482257813250,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1301,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"54.5.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":54828,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":54829,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":54830,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"b-and-a\",\"moduleSequenceNumber\":54831}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":54832,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"b-and-a\",\"moduleSequenceNumber\":54833,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"4sigma\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":124.5,\"hackDifficulty\":124.5,\"minDifficulty\":42,\"moneyAvailable\":25857168063,\"moneyMax\":646429201575,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":977,\"serverGrowth\":69}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"33.8.5.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":54840,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":54841,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":54842,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"blade\",\"moduleSequenceNumber\":54843}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"blade\",\"moduleSequenceNumber\":54844,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"blade\",\"moduleSequenceNumber\":54845,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":142.5,\"hackDifficulty\":142.5,\"minDifficulty\":48,\"moneyAvailable\":14073780221,\"moneyMax\":351844505525,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":943,\"serverGrowth\":79}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"62.3.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":54852,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":54853,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":54854,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"nwo\",\"moduleSequenceNumber\":54855}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"nwo\",\"moduleSequenceNumber\":54856,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nwo\",\"moduleSequenceNumber\":54857,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"4sigma\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":39352579623,\"moneyMax\":983814490575,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1170,\"serverGrowth\":73}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"66.5.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":54864,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":54865,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":54866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"clarkinc\",\"moduleSequenceNumber\":54867}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":54868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"clarkinc\",\"moduleSequenceNumber\":54869,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82.5,\"hackDifficulty\":82.5,\"minDifficulty\":28,\"moneyAvailable\":15039729189,\"moneyMax\":375993229725,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":954,\"serverGrowth\":53}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"23.0.6.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":54792,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":54793,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":54794,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"omnitek\",\"moduleSequenceNumber\":54795}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":54796,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnitek\",\"moduleSequenceNumber\":54797,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"helios\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":141,\"hackDifficulty\":141,\"minDifficulty\":47,\"moneyAvailable\":18653011442,\"moneyMax\":466325286050,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":946,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"40.3.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":54780,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":54781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":54782,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"4sigma\",\"moduleSequenceNumber\":54783}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":54784,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"4sigma\",\"moduleSequenceNumber\":54785,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"blade\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91.5,\"hackDifficulty\":91.5,\"minDifficulty\":31,\"moneyAvailable\":19589866734,\"moneyMax\":489746668350,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1133,\"serverGrowth\":80}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"76.6.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":54804,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":54805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":54806,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":54807}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":54808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":54809,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":147,\"hackDifficulty\":147,\"minDifficulty\":49,\"moneyAvailable\":27220399630,\"moneyMax\":680509990750,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1200,\"serverGrowth\":97}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"53.8.7.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":54732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":54733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":54734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":54735}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":54736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":54737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"titan-labs\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":136.5,\"hackDifficulty\":136.5,\"minDifficulty\":46,\"moneyAvailable\":1445668305,\"moneyMax\":36141707625,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1223,\"serverGrowth\":97}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"65.4.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":54888,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":54889,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":54890,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":54891}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":54892,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":54893,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1500,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"3.8.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":54756,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":54757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":54758,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"stormtech\",\"moduleSequenceNumber\":54759}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":54760,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"stormtech\",\"moduleSequenceNumber\":54761,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"microdyne\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":130.5,\"hackDifficulty\":130.5,\"minDifficulty\":44,\"moneyAvailable\":1137277021,\"moneyMax\":28431925525,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1067,\"serverGrowth\":92}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"76.4.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":54612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":54613,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":54614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"defcomm\",\"moduleSequenceNumber\":54615}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":54616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"defcomm\",\"moduleSequenceNumber\":54617,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":136.5,\"hackDifficulty\":136.5,\"minDifficulty\":46,\"moneyAvailable\":917861208,\"moneyMax\":22946530200,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":871,\"serverGrowth\":69}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"87.9.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":54636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":54637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":54638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"infocomm\",\"moduleSequenceNumber\":54639}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":54640,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"infocomm\",\"moduleSequenceNumber\":54641,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"solaris\",\"titan-labs\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":121.5,\"hackDifficulty\":121.5,\"minDifficulty\":41,\"moneyAvailable\":899198235,\"moneyMax\":22479955875,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":892,\"serverGrowth\":67}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"48.9.2.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":54744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":54745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":54746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"helios\",\"moduleSequenceNumber\":54747}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"helios\",\"moduleSequenceNumber\":54748,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"helios\",\"moduleSequenceNumber\":54749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":133.5,\"hackDifficulty\":133.5,\"minDifficulty\":45,\"moneyAvailable\":669971601,\"moneyMax\":16749290025,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":891,\"serverGrowth\":72}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"75.9.1.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":54768,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":54769,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":54770,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"vitalife\",\"moduleSequenceNumber\":54771}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":54772,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"vitalife\",\"moduleSequenceNumber\":54773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"microdyne\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":127.5,\"hackDifficulty\":127.5,\"minDifficulty\":43,\"moneyAvailable\":732392412,\"moneyMax\":18309810300,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":818,\"serverGrowth\":69}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"18.1.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":54600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":54601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":54602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"icarus\",\"moduleSequenceNumber\":54603}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"icarus\",\"moduleSequenceNumber\":54604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"icarus\",\"moduleSequenceNumber\":54605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnia\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":132,\"hackDifficulty\":132,\"minDifficulty\":44,\"moneyAvailable\":958212000,\"moneyMax\":23955300000,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":884,\"serverGrowth\":92}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"14.1.3.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":54624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":54625,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":54626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"univ-energy\",\"moduleSequenceNumber\":54627}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":54628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"univ-energy\",\"moduleSequenceNumber\":54629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":130.5,\"hackDifficulty\":130.5,\"minDifficulty\":44,\"moneyAvailable\":1176946162,\"moneyMax\":29423654050,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":844,\"serverGrowth\":88}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"69.8.2.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":54684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":54685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":54686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"titan-labs\",\"moduleSequenceNumber\":54687}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":54688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"titan-labs\",\"moduleSequenceNumber\":54689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":114,\"hackDifficulty\":114,\"minDifficulty\":38,\"moneyAvailable\":774171352,\"moneyMax\":19354283800,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":857,\"serverGrowth\":60}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"37.6.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":54708,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":54709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":54710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"microdyne\",\"moduleSequenceNumber\":54711}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":54712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"microdyne\",\"moduleSequenceNumber\":54713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":109.5,\"hackDifficulty\":109.5,\"minDifficulty\":37,\"moneyAvailable\":521188891,\"moneyMax\":13029722275,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":813,\"serverGrowth\":70}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"87.3.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":54648,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":54649,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":54650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":54651}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":54652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":54653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":106.5,\"hackDifficulty\":106.5,\"minDifficulty\":36,\"moneyAvailable\":851080809,\"moneyMax\":21277020225,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":931,\"serverGrowth\":79}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"93.0.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":54504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":54505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":54506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":54507}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":54508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":54509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88.5,\"hackDifficulty\":88.5,\"minDifficulty\":30,\"moneyAvailable\":846426002,\"moneyMax\":21160650050,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":843,\"serverGrowth\":71}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"49.2.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":54528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":54529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":54530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"aerocorp\",\"moduleSequenceNumber\":54531}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":54532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"aerocorp\",\"moduleSequenceNumber\":54533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":120,\"hackDifficulty\":120,\"minDifficulty\":40,\"moneyAvailable\":1083869530,\"moneyMax\":27096738250,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":923,\"serverGrowth\":56}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"83.8.5.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":54552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":54553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":54554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"omnia\",\"moduleSequenceNumber\":54555}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"omnia\",\"moduleSequenceNumber\":54556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnia\",\"moduleSequenceNumber\":54557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":135,\"hackDifficulty\":135,\"minDifficulty\":45,\"moneyAvailable\":959347036,\"moneyMax\":23983675900,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":869,\"serverGrowth\":64}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"97.6.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":54672,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":54673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":54674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"zb-def\",\"moduleSequenceNumber\":54675}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":54676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zb-def\",\"moduleSequenceNumber\":54677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":911615448,\"moneyMax\":22790386200,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":795,\"serverGrowth\":74}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"2.2.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":54696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":54697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":54698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":54699}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":54700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":54701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94.5,\"hackDifficulty\":94.5,\"minDifficulty\":32,\"moneyAvailable\":879191997,\"moneyMax\":21979799925,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":836,\"serverGrowth\":72}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"93.8.5.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":54576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":54577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":54578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"solaris\",\"moduleSequenceNumber\":54579}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"solaris\",\"moduleSequenceNumber\":54580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"solaris\",\"moduleSequenceNumber\":54581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112.5,\"hackDifficulty\":112.5,\"minDifficulty\":38,\"moneyAvailable\":857282404,\"moneyMax\":21432060100,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":842,\"serverGrowth\":78}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"91.9.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":54540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":54541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":54542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"deltaone\",\"moduleSequenceNumber\":54543}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":54544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"deltaone\",\"moduleSequenceNumber\":54545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"global-pharm\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":124.5,\"hackDifficulty\":124.5,\"minDifficulty\":42,\"moneyAvailable\":1383239614,\"moneyMax\":34580990350,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":841,\"serverGrowth\":53}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"20.9.8.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":54492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":54493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":54494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"global-pharm\",\"moduleSequenceNumber\":54495}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":54496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"global-pharm\",\"moduleSequenceNumber\":54497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112.5,\"hackDifficulty\":112.5,\"minDifficulty\":38,\"moneyAvailable\":1549372003,\"moneyMax\":38734300075,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":810,\"serverGrowth\":80}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"22.0.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":54660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":54661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":54662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"nova-med\",\"moduleSequenceNumber\":54663}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":54664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nova-med\",\"moduleSequenceNumber\":54665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"icarus\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100.5,\"hackDifficulty\":100.5,\"minDifficulty\":34,\"moneyAvailable\":1115331973,\"moneyMax\":27883299325,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":829,\"serverGrowth\":74}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"70.3.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":54588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":54589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":54590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"zeus-med\",\"moduleSequenceNumber\":54591}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":54592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zeus-med\",\"moduleSequenceNumber\":54593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112.5,\"hackDifficulty\":112.5,\"minDifficulty\":38,\"moneyAvailable\":1335477780,\"moneyMax\":33386944500,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":847,\"serverGrowth\":79}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"9.8.3.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":54564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":54565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":54566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"unitalife\",\"moduleSequenceNumber\":54567}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":54568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"unitalife\",\"moduleSequenceNumber\":54569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112.5,\"hackDifficulty\":112.5,\"minDifficulty\":38,\"moneyAvailable\":1064698682,\"moneyMax\":26617467050,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":811,\"serverGrowth\":72}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"8.4.3.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":54432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":54433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":54434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":54435}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":54436,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":54437,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":746308399,\"moneyMax\":18657709975,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":687,\"serverGrowth\":59}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"59.1.0.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1587.2100000002254,\"pid\":14478,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"threads\":12,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///8f1c665d-1c61-4a6d-8c59-395e609dede4\",\"moduleSequenceNumber\":89813}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":112.01000000000104,\"pid\":19831,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"threads\":24,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///3e5d83ff-80b7-4ade-a733-16ecd9ae129d\",\"moduleSequenceNumber\":88884}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///c6b5b3a7-c59a-434d-83c6-5d3680e88624\",\"moduleSequenceNumber\":102665}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":102665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///3e5d83ff-80b7-4ade-a733-16ecd9ae129d\",\"moduleSequenceNumber\":88884}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":88884,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///8f1c665d-1c61-4a6d-8c59-395e609dede4\",\"moduleSequenceNumber\":89813}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":89813,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"rho-construction\",\"moduleSequenceNumber\":54471}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":54472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"rho-construction\",\"moduleSequenceNumber\":54473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"catalyst\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":88.5,\"hackDifficulty\":38.37999999999997,\"minDifficulty\":30,\"moneyAvailable\":5435014418.924871,\"moneyMax\":13716092125,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":478,\"serverGrowth\":59}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"45.4.9.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":904.010000000068,\"pid\":16876,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"threads\":18,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///1f4cb094-0d31-4f70-81ad-c578ab861c12\",\"moduleSequenceNumber\":102663}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":54444,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///1f4cb094-0d31-4f70-81ad-c578ab861c12\",\"moduleSequenceNumber\":102663}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":102663,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":54446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":54447}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":54448,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":54449,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":75,\"hackDifficulty\":45.52800000000001,\"minDifficulty\":25,\"moneyAvailable\":16071798225,\"moneyMax\":16071798225,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":577,\"serverGrowth\":52}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"93.5.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.6099999999818,\"pid\":18446,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":9,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///50deab11-8e41-44d6-8d0b-972f7ac9c8fc\",\"moduleSequenceNumber\":71707}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///4439859a-e541-4cdd-a778-cb66662c9847\",\"moduleSequenceNumber\":72172}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":72172,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///2d928b70-863b-4ea5-9389-e1ffd5ff7a8d\",\"moduleSequenceNumber\":71242}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":71242,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///50deab11-8e41-44d6-8d0b-972f7ac9c8fc\",\"moduleSequenceNumber\":71707}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":71707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"aevum-police\",\"moduleSequenceNumber\":54483}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":54484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"aevum-police\",\"moduleSequenceNumber\":54485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":112.5,\"hackDifficulty\":112.5,\"minDifficulty\":38,\"moneyAvailable\":315774877,\"moneyMax\":7894371925,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":440,\"serverGrowth\":41}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"73.1.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.6099999999818,\"pid\":18445,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":9,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///6d608753-d2a1-4965-8fab-2c4b80b9a5fa\",\"moduleSequenceNumber\":67520}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///3f73fa32-e2c8-43e2-903b-afb9fbf1fcaf\",\"moduleSequenceNumber\":71240}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":71240,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///2d840164-a1e0-43d3-97ea-b8f85e2864fd\",\"moduleSequenceNumber\":65658}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":65658,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///6d608753-d2a1-4965-8fab-2c4b80b9a5fa\",\"moduleSequenceNumber\":67520}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":67520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":54387}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":54388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":54389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"netlink\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":69,\"hackDifficulty\":23,\"minDifficulty\":23,\"moneyAvailable\":2333097229.0778084,\"moneyMax\":4768927575,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":404,\"serverGrowth\":35}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"19.2.3.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":54360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":54361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":54362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"zb-institute\",\"moduleSequenceNumber\":54363}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":54364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zb-institute\",\"moduleSequenceNumber\":54365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":126,\"hackDifficulty\":126,\"minDifficulty\":42,\"moneyAvailable\":899064064,\"moneyMax\":22476601600,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":744,\"serverGrowth\":75}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"78.0.1.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1587.2100000002254,\"pid\":14475,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":32,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///ada1087b-96f3-4804-a564-a6fee2a6a7dc\",\"moduleSequenceNumber\":80994}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.00999999999994,\"pid\":20173,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":4,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///882b84c8-10a8-40d3-85df-d005a113ac4d\",\"moduleSequenceNumber\":76814}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///1f482e65-3504-40d0-bc97-387d5bbe7d8a\",\"moduleSequenceNumber\":102664}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":102664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///882b84c8-10a8-40d3-85df-d005a113ac4d\",\"moduleSequenceNumber\":76814}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":76814,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///ada1087b-96f3-4804-a564-a6fee2a6a7dc\",\"moduleSequenceNumber\":80994}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":80994,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"summit-uni\",\"moduleSequenceNumber\":54399}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":54400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":54401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":84,\"hackDifficulty\":92.584,\"minDifficulty\":28,\"moneyAvailable\":550034402.2530019,\"moneyMax\":8105087700,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":460,\"serverGrowth\":46}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"94.5.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":54420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":54421,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":54422,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"syscore\",\"moduleSequenceNumber\":54423}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"syscore\",\"moduleSequenceNumber\":54424,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"syscore\",\"moduleSequenceNumber\":54425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":420059749,\"moneyMax\":10501493725,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":615,\"serverGrowth\":69}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"35.4.9.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1587.2100000002254,\"pid\":14482,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///8109f698-4992-4eab-a7cc-98a987c69894\",\"moduleSequenceNumber\":66590}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":112.01000000000104,\"pid\":19830,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":35,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///7706e7a1-f247-4552-9ce3-504036f906a5\",\"moduleSequenceNumber\":66589}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///1325e5a4-588f-4997-bdd2-830b6b75e4fe\",\"moduleSequenceNumber\":70774}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":70774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///7706e7a1-f247-4552-9ce3-504036f906a5\",\"moduleSequenceNumber\":66589}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":66589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///8109f698-4992-4eab-a7cc-98a987c69894\",\"moduleSequenceNumber\":66590}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":66590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"catalyst\",\"moduleSequenceNumber\":54411}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":54412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"catalyst\",\"moduleSequenceNumber\":54413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"netlink\",\"rho-construction\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":103.5,\"hackDifficulty\":103.5,\"minDifficulty\":35,\"moneyAvailable\":501163669,\"moneyMax\":12529091725,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":414,\"serverGrowth\":40}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"81.1.0.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1587.2100000002254,\"pid\":14474,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":33,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///0b88ae6f-6f21-4dfe-9707-170aebbdf1cc\",\"moduleSequenceNumber\":56813}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.00999999999994,\"pid\":20175,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":3,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///76954797-f8ad-479b-a16a-5058bdc219f1\",\"moduleSequenceNumber\":59140}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///8471336d-0182-4aa1-8ede-80ccfc6f7fb5\",\"moduleSequenceNumber\":71241}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":71241,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///76954797-f8ad-479b-a16a-5058bdc219f1\",\"moduleSequenceNumber\":59140}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":59140,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///0b88ae6f-6f21-4dfe-9707-170aebbdf1cc\",\"moduleSequenceNumber\":56813}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":56813,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"the-hub\",\"moduleSequenceNumber\":54291}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":54292,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"the-hub\",\"moduleSequenceNumber\":54293,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"neo-net\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":64.5,\"hackDifficulty\":22,\"minDifficulty\":22,\"moneyAvailable\":4614348800,\"moneyMax\":4614348800,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":302,\"serverGrowth\":49}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"3.2.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":54300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":54301,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":54302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"comptek\",\"moduleSequenceNumber\":54303}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"comptek\",\"moduleSequenceNumber\":54304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"comptek\",\"moduleSequenceNumber\":54305,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"neo-net\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":91.5,\"hackDifficulty\":91.5,\"minDifficulty\":31,\"moneyAvailable\":224755123,\"moneyMax\":5618878075,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":321,\"serverGrowth\":65}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"20.9.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":528.0099999999825,\"pid\":18233,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":7,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///00fe842f-2e4d-4480-92b8-a03748fa0f99\",\"moduleSequenceNumber\":66124}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.6099999999818,\"pid\":18449,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":2,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///0a70268e-0af9-4d9c-866b-7ff5f7cb8417\",\"moduleSequenceNumber\":69844}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///66d42a55-d1c1-48b2-ab3d-7d809169bf5d\",\"moduleSequenceNumber\":71239}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":71239,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///00fe842f-2e4d-4480-92b8-a03748fa0f99\",\"moduleSequenceNumber\":66124}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":66124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///0a70268e-0af9-4d9c-866b-7ff5f7cb8417\",\"moduleSequenceNumber\":69844}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":69844,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"netlink\",\"moduleSequenceNumber\":54315}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"netlink\",\"moduleSequenceNumber\":54316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"netlink\",\"moduleSequenceNumber\":54317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"summit-uni\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":112.5,\"hackDifficulty\":112.5,\"minDifficulty\":38,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":409,\"serverGrowth\":67}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"38.6.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":54336,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":54337,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":54338,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":54339}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":54340,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":54341,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":79.5,\"hackDifficulty\":79.5,\"minDifficulty\":27,\"moneyAvailable\":70255903,\"moneyMax\":1756397575,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":265,\"serverGrowth\":53}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"19.4.6.0\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.6099999999818,\"pid\":18448,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///e26ec10e-ed51-4d41-a962-7e8fad6f57fb\",\"moduleSequenceNumber\":65659}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///7b362be6-f169-4484-a395-ee739c8f66e5\",\"moduleSequenceNumber\":62871}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":62871,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///984cb1e0-0d40-4449-9626-1da24ee27da8\",\"moduleSequenceNumber\":54938}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":54938,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///e26ec10e-ed51-4d41-a962-7e8fad6f57fb\",\"moduleSequenceNumber\":65659}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":65659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"n00dles\",\"moduleSequenceNumber\":54111}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":54112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"n00dles\",\"moduleSequenceNumber\":54113,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1.5,\"hackDifficulty\":1.1480000000000001,\"minDifficulty\":1,\"moneyAvailable\":1410881,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"57.7.6.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1587.2100000002254,\"pid\":14481,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///309a1867-43eb-433b-921f-358ecaf83a29\",\"moduleSequenceNumber\":62397}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":907.0100000000687,\"pid\":16866,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":4,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///10b330c6-9372-4248-8d1e-94958c06e93c\",\"moduleSequenceNumber\":54937}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///83a78cb6-385a-468d-a328-101e7b0ab60f\",\"moduleSequenceNumber\":62865}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":62865,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///10b330c6-9372-4248-8d1e-94958c06e93c\",\"moduleSequenceNumber\":54937}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":54937,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///309a1867-43eb-433b-921f-358ecaf83a29\",\"moduleSequenceNumber\":62397}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":62397,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":54123}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":54124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":54125,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":15.303999999999938,\"minDifficulty\":5,\"moneyAvailable\":19111831.075287446,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"99.0.4.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":625.4100000000046,\"pid\":17849,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":9,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///4d7e17ae-1ee8-453e-b72f-1938e13b9cb6\",\"moduleSequenceNumber\":55879}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///05067df6-4ef5-48d0-b7d5-6512cd739c51\",\"moduleSequenceNumber\":55868}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":55868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///4d7e17ae-1ee8-453e-b72f-1938e13b9cb6\",\"moduleSequenceNumber\":55879}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":55879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///f07d7c10-cc0f-48b6-ae67-6415b4fc2aba\",\"moduleSequenceNumber\":62399}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":62399,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":54135}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":54136,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":54137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5.023999999999999,\"minDifficulty\":5,\"moneyAvailable\":29093724,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"26.2.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":625.4100000000046,\"pid\":17850,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":9,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///057076fc-46f3-4f60-a935-070d9f7c2b9a\",\"moduleSequenceNumber\":55873}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///918171c2-93be-4ae0-ae09-3d03f402cb46\",\"moduleSequenceNumber\":62866}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":62866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///057076fc-46f3-4f60-a935-070d9f7c2b9a\",\"moduleSequenceNumber\":55873}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":55873,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///72ecbc60-b969-4c44-89bf-8e3f38909477\",\"moduleSequenceNumber\":67519}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":67519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"joesguns\",\"moduleSequenceNumber\":54147}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":54148,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"joesguns\",\"moduleSequenceNumber\":54149,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":12.760000000000032,\"minDifficulty\":8,\"moneyAvailable\":24976641,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"62.0.2.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":907.0100000000687,\"pid\":16861,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":18,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///56c58385-eed3-4e3d-8977-3c9543e581c0\",\"moduleSequenceNumber\":55870}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///3bdf3ac8-979a-4a88-a733-ed0e2d556993\",\"moduleSequenceNumber\":62395}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":62395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///56c58385-eed3-4e3d-8977-3c9543e581c0\",\"moduleSequenceNumber\":55870}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":55870,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///fe830d2f-6b2f-4f71-b414-eb1e4a50e939\",\"moduleSequenceNumber\":56809}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":56809,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"zer0\",\"moduleSequenceNumber\":54195}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"zer0\",\"moduleSequenceNumber\":54196,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zer0\",\"moduleSequenceNumber\":54197,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"n00dles\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"14.7.5.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":625.4100000000046,\"pid\":17853,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":2,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///9532f2c7-2b0b-47e0-afda-6d781a8713eb\",\"moduleSequenceNumber\":55876}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":361.0099999999881,\"pid\":18883,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":7,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///fff4d2ff-2a1a-4616-b889-610397a67723\",\"moduleSequenceNumber\":69843}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///23bac131-d057-4ae9-b9f0-10ca24a42331\",\"moduleSequenceNumber\":62869}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":62869,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///9532f2c7-2b0b-47e0-afda-6d781a8713eb\",\"moduleSequenceNumber\":55876}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":55876,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///fff4d2ff-2a1a-4616-b889-610397a67723\",\"moduleSequenceNumber\":69843}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":69843,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"nectar-net\",\"moduleSequenceNumber\":54219}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":54220,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":54221,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":10.654000000000002,\"minDifficulty\":10,\"moneyAvailable\":31437967.181080658,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"47.1.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":907.0100000000687,\"pid\":16864,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///159f17b3-898b-44af-8a66-2b493fcbc634\",\"moduleSequenceNumber\":55872}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5211bdf4-1cf2-49b9-aaec-0232460cc544\",\"moduleSequenceNumber\":62396}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":62396,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///159f17b3-898b-44af-8a66-2b493fcbc634\",\"moduleSequenceNumber\":55872}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":55872,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///559fb6f7-0c59-42ea-85cc-d31dd4eadba0\",\"moduleSequenceNumber\":58673}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":58673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"neo-net\",\"moduleSequenceNumber\":54255}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":54256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"neo-net\",\"moduleSequenceNumber\":54257,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"comptek\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"13.8.6.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":112.01000000000104,\"pid\":19828,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":22,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///1a91da2d-0622-47c5-a667-f469460ab583\",\"moduleSequenceNumber\":56812}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":112.01000000000104,\"pid\":19829,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":14,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///469f2c8d-6c71-4ab6-b00e-7ee5e73c19e0\",\"moduleSequenceNumber\":59139}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///11c20b37-2ea9-4692-9582-70b7f4d715ea\",\"moduleSequenceNumber\":62398}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":62398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///469f2c8d-6c71-4ab6-b00e-7ee5e73c19e0\",\"moduleSequenceNumber\":59139}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":59139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///1a91da2d-0622-47c5-a667-f469460ab583\",\"moduleSequenceNumber\":56812}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":56812,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"silver-helix\",\"moduleSequenceNumber\":54279}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":54280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":54281,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"CSEC\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":15,\"minDifficulty\":15,\"moneyAvailable\":1125000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"8.3.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":625.4100000000046,\"pid\":17851,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":9,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///55f22d6e-ef4e-49e1-a4dc-abf18a9950ac\",\"moduleSequenceNumber\":55874}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///02027b36-81fe-406e-9818-cb95c6c767cf\",\"moduleSequenceNumber\":62867}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":62867,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///55f22d6e-ef4e-49e1-a4dc-abf18a9950ac\",\"moduleSequenceNumber\":55874}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":55874,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///dfdf2724-a781-4a68-8846-7355df2d112f\",\"moduleSequenceNumber\":69377}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":69377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":54159}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":54160,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":54161,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":27.639999999999993,\"minDifficulty\":8,\"moneyAvailable\":4918758.9949748,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"76.5.0.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":625.4100000000046,\"pid\":17852,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":9,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///92ae5fe8-4381-49d2-bad1-4067cffa7bd1\",\"moduleSequenceNumber\":55875}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///fd7135df-a931-4966-a914-8b0904c6211a\",\"moduleSequenceNumber\":62868}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":62868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///92ae5fe8-4381-49d2-bad1-4067cffa7bd1\",\"moduleSequenceNumber\":55875}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":55875,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///8de60012-b9ba-4803-bc59-48cb2a882b89\",\"moduleSequenceNumber\":69842}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":69842,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":54171}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":54172,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":54173,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":100000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"39.0.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":907.0100000000687,\"pid\":16865,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":18,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///3d0ea609-3703-43aa-bf7b-b98d638c08e0\",\"moduleSequenceNumber\":59142}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///1d272e41-79eb-4579-a349-414c5372c5ec\",\"moduleSequenceNumber\":62864}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":62864,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///3d0ea609-3703-43aa-bf7b-b98d638c08e0\",\"moduleSequenceNumber\":59142}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":59142,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///be15a71e-441d-403f-b5ca-fd34a556f9a2\",\"moduleSequenceNumber\":56815}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":56815,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"phantasy\",\"moduleSequenceNumber\":54267}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":54268,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"phantasy\",\"moduleSequenceNumber\":54269,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":13.133999999999963,\"minDifficulty\":10,\"moneyAvailable\":230545850,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"84.3.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":907.0100000000687,\"pid\":16862,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":18,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///c39576ed-39f8-4902-9209-3226733f80f1\",\"moduleSequenceNumber\":55871}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///83550443-694c-4c0e-b126-797637521e04\",\"moduleSequenceNumber\":56810}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":56810,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///c39576ed-39f8-4902-9209-3226733f80f1\",\"moduleSequenceNumber\":55871}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":55871,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///edbd2817-bf54-4a36-b3cd-2094fc2ed522\",\"moduleSequenceNumber\":57280}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":57280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"max-hardware\",\"moduleSequenceNumber\":54207}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":54208,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":54209,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"n00dles\",\"neo-net\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":250000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"87.7.5.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":907.0100000000687,\"pid\":16863,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///0049e7bc-0085-469c-90ec-558e4abdcb05\",\"moduleSequenceNumber\":59141}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///72a68c9c-5751-4e2c-8811-218a5c7540df\",\"moduleSequenceNumber\":65193}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":65193,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///0049e7bc-0085-469c-90ec-558e4abdcb05\",\"moduleSequenceNumber\":59141}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":59141,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///5db96f6b-478d-4b05-89f4-eb7ed65b0596\",\"moduleSequenceNumber\":56814}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":56814,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"omega-net\",\"moduleSequenceNumber\":54243}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":54244,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"omega-net\",\"moduleSequenceNumber\":54245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":42,\"hackDifficulty\":14,\"minDifficulty\":14,\"moneyAvailable\":1638871925,\"moneyMax\":1638871925,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":193,\"serverGrowth\":30}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"26.9.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":54324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":54325,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":54326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":54327}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":54328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":54329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"neo-net\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":58.5,\"hackDifficulty\":58.5,\"minDifficulty\":20,\"moneyAvailable\":45135634,\"moneyMax\":1128390850,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":242,\"serverGrowth\":32}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"79.2.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":907.0100000000687,\"pid\":16860,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":18,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///94128daf-5626-4509-9f7c-02d372b020f1\",\"moduleSequenceNumber\":55869}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///728cc508-3031-40fc-9a23-ef4715f4c606\",\"moduleSequenceNumber\":62394}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":62394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///94128daf-5626-4509-9f7c-02d372b020f1\",\"moduleSequenceNumber\":55869}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":55869,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///78eaefc5-ff24-4307-b688-cfe912d100a0\",\"moduleSequenceNumber\":56808}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":56808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"iron-gym\",\"moduleSequenceNumber\":54183}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":54184,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":54185,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":17.979999999999958,\"minDifficulty\":15,\"moneyAvailable\":267916515.69785914,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"81.1.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1587.2100000002254,\"pid\":14479,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":8,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///d57e5b23-0657-4c2c-b309-4750957b8e34\",\"moduleSequenceNumber\":94888}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.00999999999994,\"pid\":20176,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///bd6ca10b-00ae-44de-8ce3-4224a892e10c\",\"moduleSequenceNumber\":93851}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///69e269c5-8467-4dfd-8f67-1bb248b3aa01\",\"moduleSequenceNumber\":94889}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":94889,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///bd6ca10b-00ae-44de-8ce3-4224a892e10c\",\"moduleSequenceNumber\":93851}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":93851,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///d57e5b23-0657-4c2c-b309-4750957b8e34\",\"moduleSequenceNumber\":94888}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":94888,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":54459}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":54460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":54461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":523,\"serverGrowth\":32}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"74.1.5.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":54876,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":54877,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":54878,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":54879}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":54880,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":54881,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\".\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82.5,\"hackDifficulty\":82.5,\"minDifficulty\":28,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":982,\"serverGrowth\":60}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"40.1.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":54516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":54517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":54518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":54519}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":54520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":54521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":701,\"serverGrowth\":49}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"69.7.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1587.2100000002254,\"pid\":14477,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"threads\":14,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///0505aa01-3b3c-4db0-bbb0-70e0a5b9f52e\",\"moduleSequenceNumber\":97481}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.00999999999994,\"pid\":20174,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"threads\":4,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///dd40f3d6-911c-4615-bd35-2438b568e56d\",\"moduleSequenceNumber\":96962}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///d31b9523-4e3c-45f9-b6ee-4c2749241cb8\",\"moduleSequenceNumber\":99554}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":99554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///dd40f3d6-911c-4615-bd35-2438b568e56d\",\"moduleSequenceNumber\":96962}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":96962,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///0505aa01-3b3c-4db0-bbb0-70e0a5b9f52e\",\"moduleSequenceNumber\":97481}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":97481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":54723}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":54724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":54725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":547,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"38.1.4.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1587.2100000002254,\"pid\":14476,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":14,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///3d8e3b39-ad80-4d0e-be76-f653cd60991c\",\"moduleSequenceNumber\":61928}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":112.01000000000104,\"pid\":19832,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":22,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///1337f6c3-5995-4441-90f8-605ebf9e3aab\",\"moduleSequenceNumber\":61463}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///0f4a06ba-1a8c-4c61-b689-0adec31fc397\",\"moduleSequenceNumber\":62393}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":62393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///1337f6c3-5995-4441-90f8-605ebf9e3aab\",\"moduleSequenceNumber\":61463}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":61463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///3d8e3b39-ad80-4d0e-be76-f653cd60991c\",\"moduleSequenceNumber\":61928}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":61928,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":54375}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":54376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":54377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":344,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"31.3.9.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1587.2100000002254,\"pid\":14473,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":70,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///087a8b71-6a72-4f6c-88eb-0bfb8ea5d2f7\",\"moduleSequenceNumber\":56811}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":112.01000000000104,\"pid\":19833,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":3,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///5318f078-25be-44ec-81f0-0e115977c8f7\",\"moduleSequenceNumber\":59138}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///39c35d26-f57e-4795-832c-8b169b3c627d\",\"moduleSequenceNumber\":63800}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":63800,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///5318f078-25be-44ec-81f0-0e115977c8f7\",\"moduleSequenceNumber\":59138}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":59138,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///087a8b71-6a72-4f6c-88eb-0bfb8ea5d2f7\",\"moduleSequenceNumber\":56811}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":56811,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":54351}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":54352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":54353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":209,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"43.3.4.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1587.2100000002254,\"pid\":14480,\"ramUsage\":1.75,\"server\":\".\",\"threads\":8,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///98bf1ac0-6de8-4f90-af25-01351ef9a55d\",\"moduleSequenceNumber\":93327}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.00999999999994,\"pid\":20177,\"ramUsage\":1.75,\"server\":\".\",\"threads\":1,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///19cfae8c-44af-41b0-9cdd-741635400409\",\"moduleSequenceNumber\":93329}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///122d491a-b4bd-404b-b83f-08a780202e7a\",\"moduleSequenceNumber\":93332}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":93332,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///19cfae8c-44af-41b0-9cdd-741635400409\",\"moduleSequenceNumber\":93329}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":93329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///98bf1ac0-6de8-4f90-af25-01351ef9a55d\",\"moduleSequenceNumber\":93327}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":93327,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\".\",\"moduleSequenceNumber\":54819}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\".\",\"moduleSequenceNumber\":54820,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\".\",\"moduleSequenceNumber\":54821,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"vitalife\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":514,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"92.7.9.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.6099999999818,\"pid\":18447,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":4,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///f61c1982-34ac-45cd-a2ca-65acc81394d4\",\"moduleSequenceNumber\":69845}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///3004b789-00de-4402-964e-d416e57646c9\",\"moduleSequenceNumber\":62870}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":62870,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///bb39d220-1d71-42df-82ba-517050f4c419\",\"moduleSequenceNumber\":55877}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":55877,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///f61c1982-34ac-45cd-a2ca-65acc81394d4\",\"moduleSequenceNumber\":69845}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":69845,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"CSEC\",\"moduleSequenceNumber\":54231}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":54232,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"CSEC\",\"moduleSequenceNumber\":54233,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":54,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"16.8.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":54900,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":54901,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":54902,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"The-Cave\",\"moduleSequenceNumber\":54903}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":54904,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"The-Cave\",\"moduleSequenceNumber\":54905,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"91.5.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"27.1.5.9\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-0\",\"httpPortOpen\":false,\"ip\":\"34.4.4.8\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1242.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/hacking/daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2492611.691421639,\"onlineMoneyMade\":79427627019,\"onlineRunningTime\":5134.209999998382,\"pid\":4902,\"ramUsage\":8.3,\"server\":\"pserv-0\",\"threads\":1,\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///249eba42-830d-492a-a641-7a901306743f\",\"moduleSequenceNumber\":91682},{\"filename\":\"/hacking/daemon.js\",\"url\":\"blob:file:///43d8e261-4516-49c9-818d-f8a680025b23\",\"moduleSequenceNumber\":91690}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",28953.004503890552,4],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":128.61000000000124,\"pid\":19746,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"threads\":705,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///6e313684-9235-4526-8838-28cbe6a71e89\",\"moduleSequenceNumber\":91737}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///d2e9a3fd-652c-4f42-9795-b7d2d2dbc8ec\",\"moduleSequenceNumber\":92242}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-0\",\"moduleSequenceNumber\":92242,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///6e313684-9235-4526-8838-28cbe6a71e89\",\"moduleSequenceNumber\":91737}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"moduleSequenceNumber\":91737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///02f46ee0-c4d2-459a-98e2-cbc54395e085\",\"moduleSequenceNumber\":91738}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"moduleSequenceNumber\":91738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///249eba42-830d-492a-a641-7a901306743f\",\"moduleSequenceNumber\":91682},{\"filename\":\"/hacking/daemon.js\",\"url\":\"blob:file:///43d8e261-4516-49c9-818d-f8a680025b23\",\"moduleSequenceNumber\":91690}],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"pserv-0\",\"moduleSequenceNumber\":91690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"pserv-0\",\"moduleSequenceNumber\":91682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-0\",\"moduleSequenceNumber\":91683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":false,\"ip\":\"83.9.5.9\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":5626.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1658.4100000002459,\"pid\":14205,\"ramUsage\":1.75,\"server\":\"pserv-1\",\"threads\":10,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///c0f2ba69-92ee-4b41-914d-aa4dc0b777e2\",\"moduleSequenceNumber\":91740}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1292.4100000001565,\"pid\":15388,\"ramUsage\":1.75,\"server\":\"pserv-1\",\"threads\":68,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///c0f2ba69-92ee-4b41-914d-aa4dc0b777e2\",\"moduleSequenceNumber\":91740}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1265.8100000001505,\"pid\":15474,\"ramUsage\":1.75,\"server\":\"pserv-1\",\"threads\":38,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///fd16a88a-45f4-4893-a98b-86eab04c1fcb\",\"moduleSequenceNumber\":91739}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.41000000000005,\"pid\":20086,\"ramUsage\":1.75,\"server\":\"pserv-1\",\"threads\":852,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///fd16a88a-45f4-4893-a98b-86eab04c1fcb\",\"moduleSequenceNumber\":91739}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.009999999999927,\"pid\":20147,\"ramUsage\":1.75,\"server\":\"pserv-1\",\"threads\":490,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///c0f2ba69-92ee-4b41-914d-aa4dc0b777e2\",\"moduleSequenceNumber\":91740}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.009999999999927,\"pid\":20148,\"ramUsage\":1.75,\"server\":\"pserv-1\",\"threads\":396,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///fd16a88a-45f4-4893-a98b-86eab04c1fcb\",\"moduleSequenceNumber\":91739}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.80999999999995,\"pid\":20182,\"ramUsage\":1.75,\"server\":\"pserv-1\",\"threads\":58,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///c0f2ba69-92ee-4b41-914d-aa4dc0b777e2\",\"moduleSequenceNumber\":91740}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.80999999999995,\"pid\":20183,\"ramUsage\":1.75,\"server\":\"pserv-1\",\"threads\":38,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///c0f2ba69-92ee-4b41-914d-aa4dc0b777e2\",\"moduleSequenceNumber\":91740}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.20999999999998,\"pid\":20207,\"ramUsage\":1.75,\"server\":\"pserv-1\",\"threads\":4,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///c0f2ba69-92ee-4b41-914d-aa4dc0b777e2\",\"moduleSequenceNumber\":91740}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.209999999999999,\"pid\":20238,\"ramUsage\":1.75,\"server\":\"pserv-1\",\"threads\":782,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///fd16a88a-45f4-4893-a98b-86eab04c1fcb\",\"moduleSequenceNumber\":91739}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.2100000000000035,\"pid\":20243,\"ramUsage\":1.75,\"server\":\"pserv-1\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///c0f2ba69-92ee-4b41-914d-aa4dc0b777e2\",\"moduleSequenceNumber\":91740}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.2100000000000035,\"pid\":20244,\"ramUsage\":1.75,\"server\":\"pserv-1\",\"threads\":141,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///fd16a88a-45f4-4893-a98b-86eab04c1fcb\",\"moduleSequenceNumber\":91739}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.010000000000002,\"pid\":20257,\"ramUsage\":1.75,\"server\":\"pserv-1\",\"threads\":131,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///fd16a88a-45f4-4893-a98b-86eab04c1fcb\",\"moduleSequenceNumber\":91739}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.6100000000000017,\"pid\":20265,\"ramUsage\":1.75,\"server\":\"pserv-1\",\"threads\":202,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///c0f2ba69-92ee-4b41-914d-aa4dc0b777e2\",\"moduleSequenceNumber\":91740}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///c9af2146-f95b-48f2-bfa4-2d224ede7889\",\"moduleSequenceNumber\":92246}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1\",\"moduleSequenceNumber\":92246,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///fd16a88a-45f4-4893-a98b-86eab04c1fcb\",\"moduleSequenceNumber\":91739}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"moduleSequenceNumber\":91739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///c0f2ba69-92ee-4b41-914d-aa4dc0b777e2\",\"moduleSequenceNumber\":91740}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"moduleSequenceNumber\":91740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///5ed47991-dc2b-41ee-8c9d-75c6ac09d8bd\",\"moduleSequenceNumber\":91695},{\"filename\":\"/hacking/daemon.js\",\"url\":\"blob:file:///26c64b8c-1fe5-4e31-845e-c1113cccd63c\",\"moduleSequenceNumber\":91703}],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"pserv-1\",\"moduleSequenceNumber\":91703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"pserv-1\",\"moduleSequenceNumber\":91695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-1\",\"moduleSequenceNumber\":91696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":false,\"ip\":\"32.1.9.7\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4920.35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"/hacking/daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2643800.76646503,\"onlineMoneyMade\":49937218678,\"onlineRunningTime\":5134.209999998382,\"pid\":4904,\"ramUsage\":8.3,\"server\":\"pserv-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///597f9166-024a-40c6-86a9-01a608daba8c\",\"moduleSequenceNumber\":91708},{\"filename\":\"/hacking/daemon.js\",\"url\":\"blob:file:///8cf23c1f-df5c-45c8-839a-0f04ce629761\",\"moduleSequenceNumber\":91716}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",67031.6944013295,0],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.21000000000019,\"pid\":20052,\"ramUsage\":1.7,\"server\":\"pserv-2\",\"threads\":118,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///6e3b99df-441a-4de6-832e-46cc6b8868ff\",\"moduleSequenceNumber\":92241}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",0,0],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.21000000000019,\"pid\":20053,\"ramUsage\":1.75,\"server\":\"pserv-2\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///45504ae1-6dde-463a-aa52-8960f7e17f21\",\"moduleSequenceNumber\":91742}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",25593.919680507617,0],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.21000000000019,\"pid\":20054,\"ramUsage\":1.75,\"server\":\"pserv-2\",\"threads\":755,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///1fcf19a4-a6d3-49ae-9dd0-f53e875d24b0\",\"moduleSequenceNumber\":91741}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",12187.580800241727,0],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.21000000000019,\"pid\":20055,\"ramUsage\":1.75,\"server\":\"pserv-2\",\"threads\":61,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///45504ae1-6dde-463a-aa52-8960f7e17f21\",\"moduleSequenceNumber\":91742}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",67031.6944013295,1],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.80999999999993,\"pid\":20150,\"ramUsage\":1.7,\"server\":\"pserv-2\",\"threads\":118,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///6e3b99df-441a-4de6-832e-46cc6b8868ff\",\"moduleSequenceNumber\":92241}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",0,1],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.80999999999993,\"pid\":20151,\"ramUsage\":1.75,\"server\":\"pserv-2\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///45504ae1-6dde-463a-aa52-8960f7e17f21\",\"moduleSequenceNumber\":91742}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",25593.919680507617,1],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.80999999999993,\"pid\":20152,\"ramUsage\":1.75,\"server\":\"pserv-2\",\"threads\":755,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///1fcf19a4-a6d3-49ae-9dd0-f53e875d24b0\",\"moduleSequenceNumber\":91741}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",12187.580800241727,1],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.80999999999993,\"pid\":20153,\"ramUsage\":1.75,\"server\":\"pserv-2\",\"threads\":61,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///45504ae1-6dde-463a-aa52-8960f7e17f21\",\"moduleSequenceNumber\":91742}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",67031.6944013295,2],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000002,\"pid\":20253,\"ramUsage\":1.7,\"server\":\"pserv-2\",\"threads\":118,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///6e3b99df-441a-4de6-832e-46cc6b8868ff\",\"moduleSequenceNumber\":92241}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",0,2],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000002,\"pid\":20254,\"ramUsage\":1.75,\"server\":\"pserv-2\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///45504ae1-6dde-463a-aa52-8960f7e17f21\",\"moduleSequenceNumber\":91742}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",25593.919680507617,2],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000002,\"pid\":20255,\"ramUsage\":1.75,\"server\":\"pserv-2\",\"threads\":755,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///1fcf19a4-a6d3-49ae-9dd0-f53e875d24b0\",\"moduleSequenceNumber\":91741}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",12187.580800241727,2],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000002,\"pid\":20256,\"ramUsage\":1.75,\"server\":\"pserv-2\",\"threads\":61,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///45504ae1-6dde-463a-aa52-8960f7e17f21\",\"moduleSequenceNumber\":91742}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///6e3b99df-441a-4de6-832e-46cc6b8868ff\",\"moduleSequenceNumber\":92241}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-2\",\"moduleSequenceNumber\":92241,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///1fcf19a4-a6d3-49ae-9dd0-f53e875d24b0\",\"moduleSequenceNumber\":91741}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"moduleSequenceNumber\":91741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///45504ae1-6dde-463a-aa52-8960f7e17f21\",\"moduleSequenceNumber\":91742}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"moduleSequenceNumber\":91742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///597f9166-024a-40c6-86a9-01a608daba8c\",\"moduleSequenceNumber\":91708},{\"filename\":\"/hacking/daemon.js\",\"url\":\"blob:file:///8cf23c1f-df5c-45c8-839a-0f04ce629761\",\"moduleSequenceNumber\":91716}],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"pserv-2\",\"moduleSequenceNumber\":91716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"pserv-2\",\"moduleSequenceNumber\":91708,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-2\",\"moduleSequenceNumber\":91709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":false,\"ip\":\"98.9.8.8\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":6920.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/hacking/daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4012759.4143017093,\"onlineMoneyMade\":53857830298,\"onlineRunningTime\":5134.209999998382,\"pid\":4905,\"ramUsage\":8.3,\"server\":\"pserv-3\",\"threads\":1,\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///66660f6d-0b2c-4113-94a5-73e2aef52345\",\"moduleSequenceNumber\":91721},{\"filename\":\"/hacking/daemon.js\",\"url\":\"blob:file:///a2f2e060-a597-44e1-b912-d3829790b258\",\"moduleSequenceNumber\":91729}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",23993.43462263966,0],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.809999999999935,\"pid\":20162,\"ramUsage\":1.7,\"server\":\"pserv-3\",\"threads\":96,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///ec1f5f39-e1bc-48f2-a947-c8b72517d053\",\"moduleSequenceNumber\":92240}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",0,0],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.809999999999935,\"pid\":20163,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":4,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///88aa1ae5-b32b-42b1-9520-cf6baed66da9\",\"moduleSequenceNumber\":91744}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",7719.62679163189,0],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.809999999999935,\"pid\":20164,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":432,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///e9b3c0af-0531-483a-b38d-f3f81d7ab8fa\",\"moduleSequenceNumber\":91743}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",2086.3856193599704,0],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.809999999999935,\"pid\":20165,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":35,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///88aa1ae5-b32b-42b1-9520-cf6baed66da9\",\"moduleSequenceNumber\":91744}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",23993.43462263966,1],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999953,\"pid\":20185,\"ramUsage\":1.7,\"server\":\"pserv-3\",\"threads\":96,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///ec1f5f39-e1bc-48f2-a947-c8b72517d053\",\"moduleSequenceNumber\":92240}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",0,1],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999953,\"pid\":20186,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":4,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///88aa1ae5-b32b-42b1-9520-cf6baed66da9\",\"moduleSequenceNumber\":91744}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",7719.62679163189,1],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999953,\"pid\":20187,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":432,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///e9b3c0af-0531-483a-b38d-f3f81d7ab8fa\",\"moduleSequenceNumber\":91743}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",2086.3856193599704,1],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999953,\"pid\":20188,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":35,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///88aa1ae5-b32b-42b1-9520-cf6baed66da9\",\"moduleSequenceNumber\":91744}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",23993.43462263966,2],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.209999999999972,\"pid\":20202,\"ramUsage\":1.7,\"server\":\"pserv-3\",\"threads\":96,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///ec1f5f39-e1bc-48f2-a947-c8b72517d053\",\"moduleSequenceNumber\":92240}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",0,2],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.209999999999972,\"pid\":20203,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":4,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///88aa1ae5-b32b-42b1-9520-cf6baed66da9\",\"moduleSequenceNumber\":91744}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",7719.62679163189,2],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.209999999999972,\"pid\":20204,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":432,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///e9b3c0af-0531-483a-b38d-f3f81d7ab8fa\",\"moduleSequenceNumber\":91743}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",2086.3856193599704,2],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.209999999999972,\"pid\":20205,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":35,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///88aa1ae5-b32b-42b1-9520-cf6baed66da9\",\"moduleSequenceNumber\":91744}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",23993.43462263966,3],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.009999999999984,\"pid\":20214,\"ramUsage\":1.7,\"server\":\"pserv-3\",\"threads\":96,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///ec1f5f39-e1bc-48f2-a947-c8b72517d053\",\"moduleSequenceNumber\":92240}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",0,3],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.009999999999984,\"pid\":20215,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":4,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///88aa1ae5-b32b-42b1-9520-cf6baed66da9\",\"moduleSequenceNumber\":91744}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",7719.62679163189,3],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.009999999999984,\"pid\":20216,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":432,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///e9b3c0af-0531-483a-b38d-f3f81d7ab8fa\",\"moduleSequenceNumber\":91743}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",2086.3856193599704,3],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.009999999999984,\"pid\":20217,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":35,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///88aa1ae5-b32b-42b1-9520-cf6baed66da9\",\"moduleSequenceNumber\":91744}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",23993.43462263966,4],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":20227,\"ramUsage\":1.7,\"server\":\"pserv-3\",\"threads\":96,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///ec1f5f39-e1bc-48f2-a947-c8b72517d053\",\"moduleSequenceNumber\":92240}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",0,4],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":20228,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":4,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///88aa1ae5-b32b-42b1-9520-cf6baed66da9\",\"moduleSequenceNumber\":91744}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",7719.62679163189,4],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":20229,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":432,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///e9b3c0af-0531-483a-b38d-f3f81d7ab8fa\",\"moduleSequenceNumber\":91743}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",2086.3856193599704,4],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":20230,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":35,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///88aa1ae5-b32b-42b1-9520-cf6baed66da9\",\"moduleSequenceNumber\":91744}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",23993.43462263966,5],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.410000000000004,\"pid\":20239,\"ramUsage\":1.7,\"server\":\"pserv-3\",\"threads\":96,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///ec1f5f39-e1bc-48f2-a947-c8b72517d053\",\"moduleSequenceNumber\":92240}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",0,5],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.410000000000004,\"pid\":20240,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":4,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///88aa1ae5-b32b-42b1-9520-cf6baed66da9\",\"moduleSequenceNumber\":91744}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",7719.62679163189,5],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.410000000000004,\"pid\":20241,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":432,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///e9b3c0af-0531-483a-b38d-f3f81d7ab8fa\",\"moduleSequenceNumber\":91743}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",2086.3856193599704,5],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.410000000000004,\"pid\":20242,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":35,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///88aa1ae5-b32b-42b1-9520-cf6baed66da9\",\"moduleSequenceNumber\":91744}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",23993.43462263966,6],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":20266,\"ramUsage\":1.7,\"server\":\"pserv-3\",\"threads\":96,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///ec1f5f39-e1bc-48f2-a947-c8b72517d053\",\"moduleSequenceNumber\":92240}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",0,6],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":20267,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":4,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///88aa1ae5-b32b-42b1-9520-cf6baed66da9\",\"moduleSequenceNumber\":91744}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",7719.62679163189,6],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":20268,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":432,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///e9b3c0af-0531-483a-b38d-f3f81d7ab8fa\",\"moduleSequenceNumber\":91743}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",2086.3856193599704,6],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":20269,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":35,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///88aa1ae5-b32b-42b1-9520-cf6baed66da9\",\"moduleSequenceNumber\":91744}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///ec1f5f39-e1bc-48f2-a947-c8b72517d053\",\"moduleSequenceNumber\":92240}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-3\",\"moduleSequenceNumber\":92240,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///e9b3c0af-0531-483a-b38d-f3f81d7ab8fa\",\"moduleSequenceNumber\":91743}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"moduleSequenceNumber\":91743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///88aa1ae5-b32b-42b1-9520-cf6baed66da9\",\"moduleSequenceNumber\":91744}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"moduleSequenceNumber\":91744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///66660f6d-0b2c-4113-94a5-73e2aef52345\",\"moduleSequenceNumber\":91721},{\"filename\":\"/hacking/daemon.js\",\"url\":\"blob:file:///a2f2e060-a597-44e1-b912-d3829790b258\",\"moduleSequenceNumber\":91729}],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"pserv-3\",\"moduleSequenceNumber\":91729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"pserv-3\",\"moduleSequenceNumber\":91721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-3\",\"moduleSequenceNumber\":91722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":false,\"ip\":\"21.0.3.6\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2456.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"/hacking/daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15196442.636075344,\"onlineMoneyMade\":20900211078,\"onlineRunningTime\":5134.209999998382,\"pid\":4906,\"ramUsage\":8.3,\"server\":\"pserv-4\",\"threads\":1,\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///227ee60e-8002-44b9-a15c-ee83a3b63998\",\"moduleSequenceNumber\":91734},{\"filename\":\"/hacking/daemon.js\",\"url\":\"blob:file:///1a9977ba-46bd-473b-a92c-4d4b06683efd\",\"moduleSequenceNumber\":91736}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",2533.468252079962,2],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999996,\"pid\":20236,\"ramUsage\":1.75,\"server\":\"pserv-4\",\"threads\":1295,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///dc67f82c-80e0-4b78-b49c-de657a4025a0\",\"moduleSequenceNumber\":91745}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",1490.2754423999786,2],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999996,\"pid\":20237,\"ramUsage\":1.75,\"server\":\"pserv-4\",\"threads\":104,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///ab2fa58e-094d-48e1-b760-71da4c453d04\",\"moduleSequenceNumber\":92245}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///0f22404e-1c47-4623-9b14-6def7b9e7b84\",\"moduleSequenceNumber\":92243}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4\",\"moduleSequenceNumber\":92243,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///dc67f82c-80e0-4b78-b49c-de657a4025a0\",\"moduleSequenceNumber\":91745}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4\",\"moduleSequenceNumber\":91745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///ab2fa58e-094d-48e1-b760-71da4c453d04\",\"moduleSequenceNumber\":92245}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4\",\"moduleSequenceNumber\":92245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///227ee60e-8002-44b9-a15c-ee83a3b63998\",\"moduleSequenceNumber\":91734},{\"filename\":\"/hacking/daemon.js\",\"url\":\"blob:file:///1a9977ba-46bd-473b-a92c-4d4b06683efd\",\"moduleSequenceNumber\":91736}],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"pserv-4\",\"moduleSequenceNumber\":91736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"pserv-4\",\"moduleSequenceNumber\":91734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-4\",\"moduleSequenceNumber\":91735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":false,\"ip\":\"29.4.2.8\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7937.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1696.210000000257,\"pid\":14076,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":98,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///d38f6814-8d39-4eb2-b2ec-a3eac8ea8d8f\",\"moduleSequenceNumber\":92763}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1587.2100000002254,\"pid\":14472,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":233,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///d38f6814-8d39-4eb2-b2ec-a3eac8ea8d8f\",\"moduleSequenceNumber\":92763}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":483.0099999999812,\"pid\":18397,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":147,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///d38f6814-8d39-4eb2-b2ec-a3eac8ea8d8f\",\"moduleSequenceNumber\":92763}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.41000000000068,\"pid\":19928,\"ramUsage\":1.7,\"server\":\"pserv-5\",\"threads\":1276,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///6113e094-089a-44b7-ac77-100f69b2657b\",\"moduleSequenceNumber\":92761}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":73.21000000000048,\"pid\":19994,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":15,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///d38f6814-8d39-4eb2-b2ec-a3eac8ea8d8f\",\"moduleSequenceNumber\":92763}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.009999999999938,\"pid\":20167,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":324,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///7846717e-da92-4f2b-9996-3c8bbd1bda96\",\"moduleSequenceNumber\":92260}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.60999999999996,\"pid\":20193,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":20,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///d38f6814-8d39-4eb2-b2ec-a3eac8ea8d8f\",\"moduleSequenceNumber\":92763}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.009999999999996,\"pid\":20231,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":91,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///d38f6814-8d39-4eb2-b2ec-a3eac8ea8d8f\",\"moduleSequenceNumber\":92763}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.009999999999996,\"pid\":20233,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":755,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///7846717e-da92-4f2b-9996-3c8bbd1bda96\",\"moduleSequenceNumber\":92260}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.2100000000000035,\"pid\":20245,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":395,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///7846717e-da92-4f2b-9996-3c8bbd1bda96\",\"moduleSequenceNumber\":92260}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.010000000000002,\"pid\":20258,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":1218,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///7846717e-da92-4f2b-9996-3c8bbd1bda96\",\"moduleSequenceNumber\":92260}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///6113e094-089a-44b7-ac77-100f69b2657b\",\"moduleSequenceNumber\":92761}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-5\",\"moduleSequenceNumber\":92761,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///7846717e-da92-4f2b-9996-3c8bbd1bda96\",\"moduleSequenceNumber\":92260}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-5\",\"moduleSequenceNumber\":92260,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///d38f6814-8d39-4eb2-b2ec-a3eac8ea8d8f\",\"moduleSequenceNumber\":92763}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-5\",\"moduleSequenceNumber\":92763,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///f22cca86-f673-4a60-b9db-ec8d3d86173a\",\"moduleSequenceNumber\":92257},{\"filename\":\"/hacking/daemon.js\",\"url\":\"blob:file:///a8bc047a-cdf6-402c-8a6f-d27144296cce\",\"moduleSequenceNumber\":92259}],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"pserv-5\",\"moduleSequenceNumber\":92259,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"pserv-5\",\"moduleSequenceNumber\":92257,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-5\",\"moduleSequenceNumber\":92258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":false,\"ip\":\"90.2.3.2\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1927.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"/hacking/daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5187020.80881793,\"onlineMoneyMade\":8043264889,\"onlineRunningTime\":5134.209999998382,\"pid\":4908,\"ramUsage\":8.3,\"server\":\"pserv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///bcfbd30b-182c-4407-ace2-57736d131975\",\"moduleSequenceNumber\":92774},{\"filename\":\"/hacking/daemon.js\",\"url\":\"blob:file:///aaec3caf-2c32-4f21-bbc3-e9bb7e545c50\",\"moduleSequenceNumber\":92776}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",15068.340584266452,0],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":20261,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"threads\":15,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///40e96144-e7e2-48e9-82ba-ae2a1c1117a7\",\"moduleSequenceNumber\":93330}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",0,0],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":20262,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///893ffb26-58ea-4969-9add-1f5ec9a06976\",\"moduleSequenceNumber\":92778}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",4563.5545769492655,0],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":20263,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":324,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///30a34d8d-946d-4e2d-9597-75675206befc\",\"moduleSequenceNumber\":92777}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",861.0480333866544,0],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":20264,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":26,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///893ffb26-58ea-4969-9add-1f5ec9a06976\",\"moduleSequenceNumber\":92778}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",15068.340584266452,1],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.21,\"pid\":20270,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"threads\":15,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///40e96144-e7e2-48e9-82ba-ae2a1c1117a7\",\"moduleSequenceNumber\":93330}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",0,1],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.21,\"pid\":20271,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///893ffb26-58ea-4969-9add-1f5ec9a06976\",\"moduleSequenceNumber\":92778}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",4563.5545769492655,1],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.21,\"pid\":20272,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":324,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///30a34d8d-946d-4e2d-9597-75675206befc\",\"moduleSequenceNumber\":92777}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",861.0480333866544,1],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.21,\"pid\":20273,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":26,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///893ffb26-58ea-4969-9add-1f5ec9a06976\",\"moduleSequenceNumber\":92778}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",15068.340584266452,2],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":20275,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"threads\":15,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///40e96144-e7e2-48e9-82ba-ae2a1c1117a7\",\"moduleSequenceNumber\":93330}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",0,2],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":20276,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///893ffb26-58ea-4969-9add-1f5ec9a06976\",\"moduleSequenceNumber\":92778}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",4563.5545769492655,2],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":20277,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":324,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///30a34d8d-946d-4e2d-9597-75675206befc\",\"moduleSequenceNumber\":92777}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",861.0480333866544,2],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":20278,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":26,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///893ffb26-58ea-4969-9add-1f5ec9a06976\",\"moduleSequenceNumber\":92778}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///40e96144-e7e2-48e9-82ba-ae2a1c1117a7\",\"moduleSequenceNumber\":93330}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-6\",\"moduleSequenceNumber\":93330,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///30a34d8d-946d-4e2d-9597-75675206befc\",\"moduleSequenceNumber\":92777}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-6\",\"moduleSequenceNumber\":92777,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///893ffb26-58ea-4969-9add-1f5ec9a06976\",\"moduleSequenceNumber\":92778}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-6\",\"moduleSequenceNumber\":92778,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///bcfbd30b-182c-4407-ace2-57736d131975\",\"moduleSequenceNumber\":92774},{\"filename\":\"/hacking/daemon.js\",\"url\":\"blob:file:///aaec3caf-2c32-4f21-bbc3-e9bb7e545c50\",\"moduleSequenceNumber\":92776}],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"pserv-6\",\"moduleSequenceNumber\":92776,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"pserv-6\",\"moduleSequenceNumber\":92774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-6\",\"moduleSequenceNumber\":92775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":false,\"ip\":\"66.8.6.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1315.8100000001618,\"pid\":15304,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":209,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///2a0a46b5-c8e4-4626-9a9f-cb4b61a3dcb7\",\"moduleSequenceNumber\":92806}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":561.00999999999,\"pid\":18083,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":16,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///2a0a46b5-c8e4-4626-9a9f-cb4b61a3dcb7\",\"moduleSequenceNumber\":92806}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":160.00999999999962,\"pid\":19613,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":21,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///2a0a46b5-c8e4-4626-9a9f-cb4b61a3dcb7\",\"moduleSequenceNumber\":92806}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":160.00999999999962,\"pid\":19614,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1311,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///f30fae2d-d4aa-4ad9-bde3-1ecd06c2ba3f\",\"moduleSequenceNumber\":92805}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":91.41000000000075,\"pid\":19898,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///2a0a46b5-c8e4-4626-9a9f-cb4b61a3dcb7\",\"moduleSequenceNumber\":92806}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":75.21000000000052,\"pid\":19984,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":425,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///f30fae2d-d4aa-4ad9-bde3-1ecd06c2ba3f\",\"moduleSequenceNumber\":92805}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.009999999999927,\"pid\":20149,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":1773,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///f30fae2d-d4aa-4ad9-bde3-1ecd06c2ba3f\",\"moduleSequenceNumber\":92805}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.60999999999996,\"pid\":20194,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":373,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///2a0a46b5-c8e4-4626-9a9f-cb4b61a3dcb7\",\"moduleSequenceNumber\":92806}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.60999999999996,\"pid\":20195,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":304,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///f30fae2d-d4aa-4ad9-bde3-1ecd06c2ba3f\",\"moduleSequenceNumber\":92805}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.2100000000000035,\"pid\":20246,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":129,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///f30fae2d-d4aa-4ad9-bde3-1ecd06c2ba3f\",\"moduleSequenceNumber\":92805}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":20274,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":115,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///f30fae2d-d4aa-4ad9-bde3-1ecd06c2ba3f\",\"moduleSequenceNumber\":92805}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///612ae638-6c1b-4e50-92c4-4ce0254cb753\",\"moduleSequenceNumber\":93328}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-7\",\"moduleSequenceNumber\":93328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///f30fae2d-d4aa-4ad9-bde3-1ecd06c2ba3f\",\"moduleSequenceNumber\":92805}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-7\",\"moduleSequenceNumber\":92805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///2a0a46b5-c8e4-4626-9a9f-cb4b61a3dcb7\",\"moduleSequenceNumber\":92806}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-7\",\"moduleSequenceNumber\":92806,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///f30746f7-64d0-412c-9dfc-764d0ebbf1a8\",\"moduleSequenceNumber\":92789},{\"filename\":\"/hacking/daemon.js\",\"url\":\"blob:file:///62e28291-1ffa-4a6a-83b1-a6a0b0e7de52\",\"moduleSequenceNumber\":92797}],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"pserv-7\",\"moduleSequenceNumber\":92797,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"pserv-7\",\"moduleSequenceNumber\":92789,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-7\",\"moduleSequenceNumber\":92790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":false,\"ip\":\"42.1.8.4\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4223.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"/hacking/daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1485285.3314169592,\"onlineMoneyMade\":20072623729,\"onlineRunningTime\":5134.209999998382,\"pid\":4910,\"ramUsage\":8.3,\"server\":\"pserv-8\",\"threads\":1,\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///2bcb803b-a2fd-44c0-88d9-ec6d38a490da\",\"moduleSequenceNumber\":92802},{\"filename\":\"/hacking/daemon.js\",\"url\":\"blob:file:///79df97c5-a452-4df5-be04-d3f8703fd0bc\",\"moduleSequenceNumber\":92804}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",108084.54489985108,1],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":397.60999999998603,\"pid\":18732,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":992,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///14c2c395-edce-4e17-9a84-af701e5962c8\",\"moduleSequenceNumber\":92808}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",63579.14405873593,1],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":397.60999999998603,\"pid\":18733,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":80,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///18dcf193-dc62-4d26-bcfa-42dd5cef9c83\",\"moduleSequenceNumber\":92807}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",254316.57623494376,2],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":270.40999999999326,\"pid\":19187,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"threads\":261,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///e8142bbd-aa71-4e70-8d82-8a72d85a96c2\",\"moduleSequenceNumber\":104738}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",0,2],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":270.40999999999326,\"pid\":19188,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":11,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///18dcf193-dc62-4d26-bcfa-42dd5cef9c83\",\"moduleSequenceNumber\":92807}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",108084.54489985108,2],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":270.40999999999326,\"pid\":19189,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":992,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///14c2c395-edce-4e17-9a84-af701e5962c8\",\"moduleSequenceNumber\":92808}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",63579.14405873593,2],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":270.40999999999326,\"pid\":19190,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":80,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///18dcf193-dc62-4d26-bcfa-42dd5cef9c83\",\"moduleSequenceNumber\":92807}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///e8142bbd-aa71-4e70-8d82-8a72d85a96c2\",\"moduleSequenceNumber\":104738}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8\",\"moduleSequenceNumber\":104738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///14c2c395-edce-4e17-9a84-af701e5962c8\",\"moduleSequenceNumber\":92808}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8\",\"moduleSequenceNumber\":92808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///18dcf193-dc62-4d26-bcfa-42dd5cef9c83\",\"moduleSequenceNumber\":92807}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8\",\"moduleSequenceNumber\":92807,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///2bcb803b-a2fd-44c0-88d9-ec6d38a490da\",\"moduleSequenceNumber\":92802},{\"filename\":\"/hacking/daemon.js\",\"url\":\"blob:file:///79df97c5-a452-4df5-be04-d3f8703fd0bc\",\"moduleSequenceNumber\":92804}],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"pserv-8\",\"moduleSequenceNumber\":92804,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) { // TODO: Update cost function using formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"pserv-8\",\"moduleSequenceNumber\":92802,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-8\",\"moduleSequenceNumber\":92803,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":1.1245,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":1986.5029045670817}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0.0041,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":139480.08341344277}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":1.0902,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":53020.809818394635}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":1.0964,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Chongqing\",\"playerReputation\":31856.085874162683}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":20.7481,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":11.882,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":11695.79137016394}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":46.7285,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":24912.13227050986,\"lastPrice\":24849.254907049937,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.47,\"b\":true,\"otlkMag\":19.010018926420756,\"otlkMagForecast\":69.07523769833101,\"cap\":112699092,\"spreadPerc\":0.4,\"shareTxForMovement\":61500,\"shareTxUntilMovement\":61500,\"totalShares\":97100000,\"maxShares\":19400000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":26366.000888092265,\"lastPrice\":26295.217740750097,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":19.0575435154793,\"otlkMagForecast\":69.0802105373187,\"cap\":56365365,\"spreadPerc\":0.1,\"shareTxForMovement\":50428,\"shareTxUntilMovement\":50428,\"totalShares\":91000000,\"maxShares\":18200000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":15850.978243751859,\"lastPrice\":15917.54137845516,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":12.829859741577636,\"otlkMagForecast\":63.06008443043408,\"cap\":285111653,\"spreadPerc\":0.1,\"shareTxForMovement\":39766,\"shareTxUntilMovement\":39766,\"totalShares\":101000000,\"maxShares\":20200000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":10733.627828002132,\"lastPrice\":10691.035186748475,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":12.150130547686594,\"otlkMagForecast\":62.026851737851985,\"cap\":19211053,\"spreadPerc\":0.2,\"shareTxForMovement\":86872,\"shareTxUntilMovement\":86872,\"totalShares\":141500000,\"maxShares\":28300000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":33860.27555846969,\"lastPrice\":33744.00768508527,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":12.046476737130877,\"otlkMagForecast\":61.995685710981725,\"cap\":320844208,\"spreadPerc\":0.3,\"shareTxForMovement\":63676,\"shareTxUntilMovement\":63676,\"totalShares\":53700000,\"maxShares\":10700000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":70085.26160424949,\"lastPrice\":69698.76524895108,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.03,\"b\":true,\"otlkMag\":16.892880807489178,\"otlkMagForecast\":66.94644040374459,\"cap\":1281177846,\"spreadPerc\":0.9,\"shareTxForMovement\":72169,\"shareTxUntilMovement\":72169,\"totalShares\":29000000,\"maxShares\":5800000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":22194.196297359522,\"lastPrice\":22293.37093193991,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.83,\"b\":true,\"otlkMag\":9.990068753981177,\"otlkMagForecast\":59.950592402686496,\"cap\":308171002,\"spreadPerc\":0.1,\"shareTxForMovement\":38147,\"shareTxUntilMovement\":38147,\"totalShares\":84800000,\"maxShares\":17000000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":30672.495390800024,\"lastPrice\":30469.089160784828,\"playerShares\":4283288,\"playerAvgPx\":30376.211003535507,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.24,\"b\":true,\"otlkMag\":15.315338551030825,\"otlkMagForecast\":66.15786672448459,\"cap\":161958526,\"spreadPerc\":0.5,\"shareTxForMovement\":71005,\"shareTxUntilMovement\":48047,\"totalShares\":66200000,\"maxShares\":13200000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":24046.72254184272,\"lastPrice\":24152.8805688784,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.82,\"b\":true,\"otlkMag\":6.931661987345008,\"otlkMagForecast\":56.965830993672505,\"cap\":288546299,\"spreadPerc\":0.3,\"shareTxForMovement\":46857,\"shareTxUntilMovement\":46857,\"totalShares\":49400000,\"maxShares\":9900000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":9044.764440017154,\"lastPrice\":9012.739828972673,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":true,\"otlkMag\":10.078703991766405,\"otlkMagForecast\":60.05561487674404,\"cap\":226959952,\"spreadPerc\":0.8,\"shareTxForMovement\":71431,\"shareTxUntilMovement\":71431,\"totalShares\":99100000,\"maxShares\":19800000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":15019.09332676164,\"lastPrice\":14967.521447547328,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":9.09733357293651,\"otlkMagForecast\":59.03447372680789,\"cap\":253841161,\"spreadPerc\":1,\"shareTxForMovement\":96847,\"shareTxUntilMovement\":96847,\"totalShares\":54900000,\"maxShares\":11000000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":12384.759567133744,\"lastPrice\":12336.276504181194,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":6.939156436574544,\"otlkMagForecast\":56.98436613653396,\"cap\":44356461,\"spreadPerc\":0.7,\"shareTxForMovement\":100014,\"shareTxUntilMovement\":100014,\"totalShares\":80700000,\"maxShares\":16100000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":15615.249899511882,\"lastPrice\":15559.961306015546,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":true,\"otlkMag\":7.469789910701716,\"otlkMagForecast\":57.48489495535086,\"cap\":228131128,\"spreadPerc\":0.9,\"shareTxForMovement\":101575,\"shareTxUntilMovement\":101575,\"totalShares\":51800000,\"maxShares\":10400000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":18160.259913427442,\"lastPrice\":18109.561499614334,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.52,\"b\":true,\"otlkMag\":10.00581921210135,\"otlkMagForecast\":59.99709039394933,\"cap\":92621741,\"spreadPerc\":0.4,\"shareTxForMovement\":60405,\"shareTxUntilMovement\":60405,\"totalShares\":49500000,\"maxShares\":9900000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":11855.451020698803,\"lastPrice\":11818.546873888865,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":true,\"otlkMag\":6.041494890037549,\"otlkMagForecast\":55.97067758143642,\"cap\":100043274,\"spreadPerc\":0.3,\"shareTxForMovement\":109468,\"shareTxUntilMovement\":109468,\"totalShares\":54400000,\"maxShares\":10900000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":14037.597505030559,\"lastPrice\":14092.766965873001,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":3.9665628505760195,\"otlkMagForecast\":54.60445051187505,\"cap\":65962742,\"spreadPerc\":0.7,\"shareTxForMovement\":61019,\"shareTxUntilMovement\":61019,\"totalShares\":42800000,\"maxShares\":8600000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":15235.693905841357,\"lastPrice\":15172.795531023909,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":8.422073681004054,\"otlkMagForecast\":58.538963159497975,\"cap\":200163829,\"spreadPerc\":1.2,\"shareTxForMovement\":112159,\"shareTxUntilMovement\":112159,\"totalShares\":46700000,\"maxShares\":9300000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":19695.801737357102,\"lastPrice\":19633.43809636104,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":true,\"otlkMag\":10.53750231512059,\"otlkMagForecast\":60.53706419929533,\"cap\":490839161,\"spreadPerc\":0.5,\"shareTxForMovement\":107515,\"shareTxUntilMovement\":107515,\"totalShares\":35300000,\"maxShares\":7100000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":17900.179829379274,\"lastPrice\":17829.149237480076,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":4.4730161282578145,\"otlkMagForecast\":55.07789470990567,\"cap\":180689121,\"spreadPerc\":0.5,\"shareTxForMovement\":76607,\"shareTxUntilMovement\":76607,\"totalShares\":33900000,\"maxShares\":6800000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":8221.742204107697,\"lastPrice\":8108.676001740018,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.59,\"b\":true,\"otlkMag\":1.972920682171345,\"otlkMagForecast\":51.263539658914326,\"cap\":195084223,\"spreadPerc\":1.2,\"shareTxForMovement\":53396,\"shareTxUntilMovement\":53396,\"totalShares\":54600000,\"maxShares\":10900000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":6910.185805906225,\"lastPrice\":6867.298672470816,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.16,\"b\":true,\"otlkMag\":5.991539872069825,\"otlkMagForecast\":55.94143430722928,\"cap\":94995535,\"spreadPerc\":0.5,\"shareTxForMovement\":44006,\"shareTxUntilMovement\":44006,\"totalShares\":44300000,\"maxShares\":8900000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":3210.8616872479656,\"lastPrice\":3219.677753960454,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.51,\"b\":true,\"otlkMag\":1.9606284370205673,\"otlkMagForecast\":50.5720801857782,\"cap\":13374614,\"spreadPerc\":0.3,\"shareTxForMovement\":120823,\"shareTxUntilMovement\":120823,\"totalShares\":56100000,\"maxShares\":11200000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":4411.791384352623,\"lastPrice\":4454.5447753931285,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.8,\"b\":true,\"otlkMag\":10.1080983220693,\"otlkMagForecast\":59.94595083896535,\"cap\":83602008,\"spreadPerc\":1,\"shareTxForMovement\":47238,\"shareTxUntilMovement\":47238,\"totalShares\":54500000,\"maxShares\":10900000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":7701.687723726822,\"lastPrice\":7634.282251711663,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.64,\"b\":true,\"otlkMag\":2.4257869106160124,\"otlkMagForecast\":52.712893455308006,\"cap\":140020906,\"spreadPerc\":1.2,\"shareTxForMovement\":48630,\"shareTxUntilMovement\":48630,\"totalShares\":26700000,\"maxShares\":5300000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":3670.6989566856896,\"lastPrice\":3688.880037173294,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.92,\"b\":true,\"otlkMag\":3.7633535189371132,\"otlkMagForecast\":53.97235464063202,\"cap\":43901364,\"spreadPerc\":0.6,\"shareTxForMovement\":89465,\"shareTxUntilMovement\":89465,\"totalShares\":49900000,\"maxShares\":10000000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":4209.365182597899,\"lastPrice\":4277.578032387689,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.01,\"b\":true,\"otlkMag\":1.2220666990661628,\"otlkMagForecast\":51.34736751031706,\"cap\":79029692,\"spreadPerc\":0.6,\"shareTxForMovement\":50653,\"shareTxUntilMovement\":50653,\"totalShares\":13100000,\"maxShares\":2600000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":6200.524296133094,\"lastPrice\":6230.901856992479,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.91,\"b\":true,\"otlkMag\":1.3097240858279,\"otlkMagForecast\":49.97233350088928,\"cap\":87330948,\"spreadPerc\":0.6,\"shareTxForMovement\":63354,\"shareTxUntilMovement\":63354,\"totalShares\":9500000,\"maxShares\":1900000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":1512.233922894006,\"lastPrice\":1506.2331524181188,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":false,\"otlkMag\":1.7924748749318273,\"otlkMagForecast\":48.470611943361035,\"cap\":26271646,\"spreadPerc\":0.6,\"shareTxForMovement\":136099,\"shareTxUntilMovement\":136099,\"totalShares\":30000000,\"maxShares\":6000000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":2440.1017880954983,\"lastPrice\":2416.553567522535,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.81,\"b\":true,\"otlkMag\":2.1948909462586808,\"otlkMagForecast\":50.09744547312934,\"cap\":47013265,\"spreadPerc\":1.3,\"shareTxForMovement\":69547,\"shareTxUntilMovement\":69547,\"totalShares\":12300000,\"maxShares\":2500000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":374.1134374650563,\"lastPrice\":379.12860849739815,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.49,\"b\":true,\"otlkMag\":2,\"otlkMagForecast\":50.5,\"cap\":6378792,\"spreadPerc\":1.1,\"shareTxForMovement\":41862,\"shareTxUntilMovement\":41862,\"totalShares\":107700000,\"maxShares\":21500000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":1312.6634641780897,\"lastPrice\":1303.7492944056607,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.27,\"b\":true,\"otlkMag\":13.295981112738732,\"otlkMagForecast\":63.64425597277595,\"cap\":20389659,\"spreadPerc\":0.7,\"shareTxForMovement\":35650,\"shareTxUntilMovement\":35650,\"totalShares\":77800000,\"maxShares\":15600000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":20179.01629543384,\"lastPrice\":20096.78761351077,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":7.9276092794763215,\"otlkMagForecast\":58.051176923236675,\"cap\":355138678,\"spreadPerc\":0.5,\"shareTxForMovement\":151295,\"shareTxUntilMovement\":151295,\"totalShares\":18100000,\"maxShares\":3600000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":18247.112914952944,\"lastPrice\":18188.360206694768,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":10.889158378163328,\"otlkMagForecast\":60.9608420699425,\"cap\":390449350,\"spreadPerc\":0.5,\"shareTxForMovement\":212067,\"shareTxUntilMovement\":212067,\"totalShares\":23300000,\"maxShares\":4700000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":25,\"lastUpdate\":1643281365191,\"ticksUntilCycle\":72}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":5,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":true,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":100,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"UseIEC60027_2\":true,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1643197074455","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1643281370330"}}