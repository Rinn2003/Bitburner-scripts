{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":140,\"hp\":34,\"max_hp\":34,\"strength\":240,\"defense\":240,\"dexterity\":273,\"agility\":273,\"charisma\":316,\"intelligence\":127,\"hacking_chance_mult\":1.4871093084964102,\"hacking_speed_mult\":1.4871093084964102,\"hacking_money_mult\":1.4871093084964102,\"hacking_grow_mult\":1.4871093084964102,\"hacking_exp\":2346098.692229697,\"strength_exp\":165855.3847863425,\"defense_exp\":164331.22819331792,\"dexterity_exp\":363187.28150271764,\"agility_exp\":358079.30190835014,\"charisma_exp\":71850.10818718035,\"intelligence_exp\":27376.814193754868,\"hacking_mult\":1.4871093084964102,\"strength_mult\":1.3044818495582544,\"defense_mult\":1.3044818495582544,\"dexterity_mult\":1.3044818495582544,\"agility_mult\":1.3044818495582544,\"charisma_mult\":2.000553364482539,\"hacking_exp_mult\":1.4871093084964102,\"strength_exp_mult\":1.3044818495582544,\"defense_exp_mult\":1.3044818495582544,\"dexterity_exp_mult\":1.3044818495582544,\"agility_exp_mult\":1.3044818495582544,\"charisma_exp_mult\":1.3044818495582544,\"company_rep_mult\":1.3044818495582544,\"faction_rep_mult\":1.3044818495582544,\"money\":16885466066.286844,\"city\":\"Sector-12\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Slum Snakes\",\"Sector-12\",\"CyberSec\",\"Bladeburners\",\"Tetrads\",\"Tian Di Hui\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"name\":\"NeuroFlux Governor\",\"level\":1}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":3,\"n\":5},{\"lvl\":3,\"n\":4},{\"lvl\":3,\"n\":2},{\"lvl\":1,\"n\":3},{\"lvl\":1,\"n\":12}],\"numPeopleKilled\":2675,\"karma\":-8101.25,\"crime_money_mult\":1.8523642263727211,\"crime_success_mult\":1.8523642263727211,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":20,\"workExpMult\":10,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":50,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.408840397522915,\"hacknet_node_money_mult\":1.3044818495582544,\"hacknet_node_purchase_cost_mult\":0.706410401014523,\"hacknet_node_ram_cost_mult\":0.706410401014523,\"hacknet_node_core_cost_mult\":0.706410401014523,\"hacknet_node_level_cost_mult\":0.706410401014523,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":{\"ctor\":\"Bladeburner\",\"data\":{\"numHosp\":73,\"moneyLost\":1024800000,\"rank\":364696.3714294433,\"maxRank\":364696.3714294433,\"skillPoints\":99227,\"totalSkillPoints\":121565,\"teamSize\":0,\"teamLost\":3,\"hpLost\":11043,\"storedCycles\":37618,\"randomEventCounter\":208,\"actionTimeToComplete\":30,\"actionTimeCurrent\":20,\"actionTimeOverflow\":0,\"action\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"Field Analysis\",\"type\":7}},\"cities\":{\"Aevum\":{\"ctor\":\"City\",\"data\":{\"name\":\"Aevum\",\"pop\":171789331,\"popEst\":141974654,\"comms\":0,\"chaos\":6.3505262460331835}},\"Chongqing\":{\"ctor\":\"City\",\"data\":{\"name\":\"Chongqing\",\"pop\":5482614050,\"popEst\":2866283600,\"comms\":23,\"chaos\":16.735995144451103}},\"Sector-12\":{\"ctor\":\"City\",\"data\":{\"name\":\"Sector-12\",\"pop\":486742549,\"popEst\":229245565,\"comms\":32,\"chaos\":56.459878204963196}},\"New Tokyo\":{\"ctor\":\"City\",\"data\":{\"name\":\"New Tokyo\",\"pop\":625399801,\"popEst\":1587976141.3633904,\"comms\":101,\"chaos\":4.623513206105083}},\"Ishima\":{\"ctor\":\"City\",\"data\":{\"name\":\"Ishima\",\"pop\":3220501140,\"popEst\":1681147189.4597404,\"comms\":70,\"chaos\":0}},\"Volhaven\":{\"ctor\":\"City\",\"data\":{\"name\":\"Volhaven\",\"pop\":2059587166,\"popEst\":298227386.51070833,\"comms\":26,\"chaos\":33.27569786476132}}},\"city\":\"Volhaven\",\"skills\":{\"Cloak\":25,\"Tracer\":5,\"Short-Circuit\":25,\"Blade's Intuition\":60,\"Digital Observer\":61,\"Overclock\":90,\"Reaper\":60,\"Evasive System\":60},\"skillMultipliers\":{\"successChanceAll\":2.8,\"successChanceStealth\":2.375,\"successChanceKill\":2.375,\"successChanceContract\":1.2,\"successChanceOperation\":3.44,\"successChanceEstimate\":1,\"actionTime\":0.09999999999999998,\"effHack\":1,\"effStr\":2.2,\"effDef\":2.2,\"effDex\":7.48,\"effAgi\":7.48,\"effCha\":1,\"effInt\":1,\"stamina\":1,\"money\":1,\"expGain\":1},\"staminaBonus\":0.8400000000000002,\"maxStamina\":445.52388979824366,\"stamina\":445.52388979824366,\"contracts\":{\"Tracking\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Tracking\",\"level\":33,\"maxLevel\":33,\"autoLevel\":true,\"baseDifficulty\":117.56739506919536,\"difficultyFac\":1.02,\"rewardFac\":1.041,\"successes\":620,\"failures\":47,\"rankGain\":0.3,\"rankLoss\":0,\"hpLoss\":0.5,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":1035.8750000000005,\"weights\":{\"hack\":0,\"str\":0.05,\"def\":0.05,\"dex\":0.35,\"agi\":0.35,\"cha\":0.1,\"int\":0.05},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.9,\"int\":1},\"teamCount\":0}},\"Bounty Hunter\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Bounty Hunter\",\"level\":19,\"maxLevel\":19,\"autoLevel\":true,\"baseDifficulty\":261.86890587386574,\"difficultyFac\":1.04,\"rewardFac\":1.085,\"successes\":221,\"failures\":99,\"rankGain\":0.9,\"rankLoss\":0,\"hpLoss\":1,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":1342.7152083333465,\"weights\":{\"hack\":0,\"str\":0.15,\"def\":0.15,\"dex\":0.25,\"agi\":0.25,\"cha\":0.1,\"int\":0.1},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.8,\"int\":0.9},\"teamCount\":0}},\"Retirement\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Retirement\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":219.2081099410551,\"difficultyFac\":1.03,\"rewardFac\":1.065,\"successes\":0,\"failures\":0,\"rankGain\":0.6,\"rankLoss\":0,\"hpLoss\":1,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":1581.7483333333548,\"weights\":{\"hack\":0,\"str\":0.2,\"def\":0.2,\"dex\":0.2,\"agi\":0.2,\"cha\":0.1,\"int\":0.1},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.8,\"int\":0.9},\"teamCount\":0}}},\"operations\":{\"Investigation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Investigation\",\"level\":16,\"maxLevel\":16,\"autoLevel\":true,\"baseDifficulty\":412.1501370515026,\"difficultyFac\":1.03,\"rewardFac\":1.07,\"successes\":143,\"failures\":9,\"rankGain\":2.2,\"rankLoss\":0.2,\"hpLoss\":0,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":843.9764583333571,\"weights\":{\"hack\":0.25,\"str\":0.05,\"def\":0.05,\"dex\":0.2,\"agi\":0.1,\"cha\":0.25,\"int\":0.1},\"decays\":{\"hack\":0.85,\"str\":0.9,\"def\":0.9,\"dex\":0.9,\"agi\":0.9,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":25}},\"Undercover Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Undercover Operation\",\"level\":36,\"maxLevel\":36,\"autoLevel\":true,\"baseDifficulty\":493.9067063505669,\"difficultyFac\":1.04,\"rewardFac\":1.09,\"successes\":707,\"failures\":2,\"rankGain\":4.4,\"rankLoss\":0.4,\"hpLoss\":2,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":313.4264583333863,\"weights\":{\"hack\":0.2,\"str\":0.05,\"def\":0.05,\"dex\":0.2,\"agi\":0.2,\"cha\":0.2,\"int\":0.1},\"decays\":{\"hack\":0.8,\"str\":0.9,\"def\":0.9,\"dex\":0.9,\"agi\":0.9,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":100}},\"Sting Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Sting Operation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":660.9123668665218,\"difficultyFac\":1.04,\"rewardFac\":1.095,\"successes\":0,\"failures\":0,\"rankGain\":5.5,\"rankLoss\":0.5,\"hpLoss\":2.5,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":950.0616666668046,\"weights\":{\"hack\":0.25,\"str\":0.05,\"def\":0.05,\"dex\":0.25,\"agi\":0.1,\"cha\":0.2,\"int\":0.1},\"decays\":{\"hack\":0.8,\"str\":0.85,\"def\":0.85,\"dex\":0.85,\"agi\":0.85,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":500}},\"Raid\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Raid\",\"level\":20,\"maxLevel\":20,\"autoLevel\":true,\"baseDifficulty\":865.4889814129672,\"difficultyFac\":1.045,\"rewardFac\":1.1,\"successes\":233,\"failures\":13,\"rankGain\":55,\"rankLoss\":2.5,\"hpLoss\":50,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":707.5539583334717,\"weights\":{\"hack\":0.1,\"str\":0.2,\"def\":0.2,\"dex\":0.2,\"agi\":0.2,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.7,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.9},\"teamCount\":0,\"reqdRank\":3000}},\"Stealth Retirement Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Stealth Retirement Operation\",\"level\":27,\"maxLevel\":27,\"autoLevel\":true,\"baseDifficulty\":940.466550967858,\"difficultyFac\":1.05,\"rewardFac\":1.11,\"successes\":402,\"failures\":2,\"rankGain\":22,\"rankLoss\":2,\"hpLoss\":10,\"hpLost\":0,\"isStealth\":true,\"isKill\":true,\"count\":7.719999999952124,\"weights\":{\"hack\":0.1,\"str\":0.1,\"def\":0.1,\"dex\":0.3,\"agi\":0.3,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.7,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.9},\"teamCount\":0,\"reqdRank\":20000}},\"Assassination\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Assassination\",\"level\":27,\"maxLevel\":27,\"autoLevel\":true,\"baseDifficulty\":1565.4038407499504,\"difficultyFac\":1.06,\"rewardFac\":1.14,\"successes\":417,\"failures\":58,\"rankGain\":44,\"rankLoss\":4,\"hpLoss\":5,\"hpLost\":0,\"isStealth\":true,\"isKill\":true,\"count\":8.016249999951691,\"weights\":{\"hack\":0.1,\"str\":0.1,\"def\":0.1,\"dex\":0.3,\"agi\":0.3,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.6,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.8},\"teamCount\":0,\"reqdRank\":50000}}},\"blackops\":{\"Operation Typhoon\":true,\"Operation Zero\":true,\"Operation X\":true,\"Operation Titan\":true,\"Operation Ares\":true,\"Operation Archangel\":true},\"logging\":{\"general\":true,\"contracts\":true,\"ops\":true,\"blackops\":true,\"events\":true},\"automateEnabled\":false,\"automateActionHigh\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"Stealth Retirement Operation\",\"type\":3}},\"automateThreshHigh\":430,\"automateActionLow\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"Hyperbolic Regeneration Chamber\",\"type\":9}},\"automateThreshLow\":350,\"consoleHistory\":[\"automate en\",\"automate dis\",\"automate status\",\"automate stamina 150 hi\",\"automate en\",\"automate stamina 170 hi\",\"automate status\",\"automate help\",\"help automate\",\"automate stamina 150 low\",\"automate stamina 210 hi\",\"automate stamina 180 low\",\"automate dis\",\"stop\",\"automate en\",\"automate stamina 290 hi\",\"automate stamina 270 lo\",\"automate status\",\"automate stamina 400 hi\",\"automate stamina 300 low\",\"automate dis\",\"automate en\",\"cls\",\"automate status\",\"automate stamina 420 hi\",\"automate stamina 350 low\",\"cls\",\"automate status\",\"automate operation Raid hi\",\"automate dis\",\"stop\",\"automate operation 'Stealth Retirement Operation' hi\",\"automate en\",\"automate dis\",\"automate status\",\"automate stamina 430 hi\",\"cls\",\"automate status\",\"automate en\",\"automate dis\",\"stop\",\"automate status\",\"automate operation 'Undercover Operation' hi\",\"automate en\",\"automate operation assassination hi\",\"automate operation Assassination hi\",\"automate operation 'Stealth Retirement Operation' hi\",\"cls\",\"automate dis\",\"stop\"],\"consoleLogs\":[\"[1/30 15:59:58] Assassination successfully completed! Gained 1,316.548 rank\",\"[1/30 16:00:08] Assassination successfully completed! Gained 1,394.863 rank\",\"[1/30 16:00:13] Intelligence indicates that the Synthoid population of Volhaven just changed significantly\",\"[1/30 16:01:04] Tensions between Synthoids and humans lead to riots in Chongqing! Chaos increased\",\"[1/30 16:01:48] Assassination successfully completed! Gained 1,404.187 rank\",\"[1/30 16:01:53] Stealth Retirement Operation successfully completed! Gained 363.667 rank\",\"[1/30 16:02:07] Raid successfully completed! Gained 275.294 rank\",\"[1/30 16:02:09] Raid successfully completed! Gained 254.659 rank\",\"[1/30 16:02:12] Raid successfully completed! Gained 296.549 rank\",\"[1/30 16:02:14] Raid successfully completed! Gained 287.058 rank\",\"[1/30 16:02:17] Raid successfully completed! Gained 334.910 rank\",\"[1/30 16:02:20] Intelligence indicates that the Synthoid population of New Tokyo just changed significantly\",\"[1/30 16:02:20] Raid successfully completed! Gained 311.617 rank\",\"[1/30 16:02:22] Raid successfully completed! Gained 317.922 rank\",\"[1/30 16:02:25] Raid successfully completed! Gained 323.093 rank\",\"[1/30 16:02:27] Raid successfully completed! Gained 321.577 rank\",\"[1/30 16:02:30] Raid successfully completed! Gained 308.545 rank\",\"[1/30 16:02:33] Raid successfully completed! Gained 328.563 rank\",\"[1/30 16:02:35] Raid successfully completed! Gained 282.587 rank\",\"[1/30 16:02:38] Raid successfully completed! Gained 286.039 rank\",\"[1/30 16:02:40] Raid successfully completed! Gained 285.338 rank\",\"[1/30 16:02:43] Raid successfully completed! Gained 288.082 rank\",\"[1/30 16:02:46] Raid successfully completed! Gained 292.043 rank\",\"[1/30 16:02:48] Raid successfully completed! Gained 277.011 rank\",\"[1/30 16:02:51] Raid successfully completed! Gained 299.264 rank\",\"[1/30 16:02:53] Raid successfully completed! Gained 289.927 rank\",\"[1/30 16:02:56] Raid successfully completed! Gained 278.237 rank\",\"[1/30 16:02:59] Raid successfully completed! Gained 325.063 rank\",\"[1/30 16:03:01] Raid successfully completed! Gained 303.763 rank\",\"[1/30 16:03:04] Raid successfully completed! Gained 305.742 rank\",\"[1/30 16:03:06] Raid successfully completed! Gained 299.398 rank\",\"[1/30 16:03:09] Raid successfully completed! Gained 331.110 rank\",\"[1/30 16:03:12] Raid successfully completed! Gained 348.882 rank\",\"[1/30 16:03:15] Raid successfully completed! Gained 368.275 rank\",\"[1/30 16:03:18] Raid successfully completed! Gained 308.025 rank\",\"[1/30 16:03:20] Raid successfully completed! Gained 327.322 rank\",\"[1/30 16:03:23] Raid successfully completed! Gained 335.579 rank\",\"[1/30 16:03:26] Raid successfully completed! Gained 369.510 rank\",\"[1/30 16:03:29] Raid successfully completed! Gained 323.728 rank\",\"[1/30 16:03:32] Raid successfully completed! Gained 362.757 rank\",\"[1/30 16:03:34] Raid successfully completed! Gained 363.595 rank\",\"[1/30 16:03:37] Raid successfully completed! Gained 322.146 rank\",\"[1/30 16:03:40] Raid successfully completed! Gained 360.406 rank\",\"[1/30 16:03:43] Raid successfully completed! Gained 344.799 rank\",\"[1/30 16:03:46] Raid successfully completed! Gained 361.408 rank\",\"> stop\",\"[1/30 16:04:07] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:04:20] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:04:32] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:04:44] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:04:57] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:05:09] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:05:22] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:05:30] Tensions between Synthoids and humans lead to riots in New Tokyo! Chaos increased\",\"[1/30 16:05:34] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:05:46] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:05:59] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:06:11] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:06:23] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:06:30] Intelligence indicates that the Synthoid population of Sector-12 just changed significantly\",\"[1/30 16:06:35] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:06:48] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:07:00] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:07:13] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:07:25] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:07:37] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:07:50] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:08:02] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:08:14] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:08:24] Intelligence indicates that the Synthoid population of New Tokyo just changed significantly\",\"[1/30 16:08:26] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:08:38] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:08:51] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:09:03] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:09:15] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:09:27] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:09:40] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:09:52] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:10:05] Tensions between Synthoids and humans lead to riots in Aevum! Chaos increased\",\"[1/30 16:10:05] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:10:17] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:10:29] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:10:42] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:10:54] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:11:06] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 4.5 stamina\",\"[1/30 16:11:23] Field analysis completed. Gained 0.1 rank, 29.7 hacking exp, and 26.1 charisma exp\",\"[1/30 16:11:29] Field analysis completed. Gained 0.1 rank, 29.7 hacking exp, and 26.1 charisma exp\",\"[1/30 16:11:35] Field analysis completed. Gained 0.1 rank, 29.7 hacking exp, and 26.1 charisma exp\",\"[1/30 16:11:41] Field analysis completed. Gained 0.1 rank, 29.7 hacking exp, and 26.1 charisma exp\",\"[1/30 16:11:47] Field analysis completed. Gained 0.1 rank, 29.7 hacking exp, and 26.1 charisma exp\",\"[1/30 16:11:53] Field analysis completed. Gained 0.1 rank, 29.7 hacking exp, and 26.1 charisma exp\",\"[1/30 16:11:55] Intelligence indicates that the Synthoid population of Aevum just changed significantly\",\"[1/30 16:11:59] Field analysis completed. Gained 0.1 rank, 29.7 hacking exp, and 26.1 charisma exp\",\"[1/30 16:12:06] Field analysis completed. Gained 0.1 rank, 29.7 hacking exp, and 26.1 charisma exp\",\"[1/30 16:12:12] Field analysis completed. Gained 0.1 rank, 29.7 hacking exp, and 26.1 charisma exp\",\"[1/30 16:12:18] Field analysis completed. Gained 0.1 rank, 29.7 hacking exp, and 26.1 charisma exp\",\"[1/30 16:12:24] Field analysis completed. Gained 0.1 rank, 29.7 hacking exp, and 26.1 charisma exp\",\"[1/30 16:12:31] Field analysis completed. Gained 0.1 rank, 29.7 hacking exp, and 26.1 charisma exp\",\"[1/30 16:12:37] Field analysis completed. Gained 0.1 rank, 29.7 hacking exp, and 26.1 charisma exp\",\"[1/30 16:12:43] Field analysis completed. Gained 0.1 rank, 29.7 hacking exp, and 26.1 charisma exp\"]}},\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":6,\"lastUpdate\":1643555567713,\"totalPlaytime\":3858671600,\"playtimeSinceLastAug\":227930800,\"playtimeSinceLastBitnode\":227930800,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":522926639.20311546,\"casino\":0,\"class\":-341760,\"codingcontract\":6412500000,\"corporation\":0,\"crime\":182487977.21639672,\"gang\":0,\"hacking\":15517695951.67214,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":-1104300000,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":16885465066.286844,\"work\":0,\"servers\":-4643203741.804813,\"other\":-2300000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":522926639.20311546,\"casino\":0,\"class\":-341760,\"codingcontract\":6412500000,\"corporation\":0,\"crime\":182487977.21639672,\"gang\":0,\"hacking\":15517695951.67214,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":-1104300000,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":16885465066.286844,\"work\":0,\"servers\":-4643203741.804813,\"other\":-2300000,\"augmentations\":0}},\"scriptProdSinceLastAug\":12186490733,\"exploits\":[\"N00dles\",\"UndocumentedFunctionCall\",\"Bypass\",\"PrototypeTampering\",\"RealityAlteration\",\"Unclickable\",\"TimeCompression\",\"EditSaveFile\",\"YoureNotMeantToAccessThis\"],\"achievements\":[{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641679889873},{\"ID\":\"NITESEC\",\"unlockedOn\":1641679889924},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641679889930},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641679889937},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641679889950},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641679889959},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641679889967},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1641679889976},{\"ID\":\"SF1.1\",\"unlockedOn\":1641679889988},{\"ID\":\"SF4.1\",\"unlockedOn\":1641679889998},{\"ID\":\"SF5.1\",\"unlockedOn\":1641679890005},{\"ID\":\"NS2\",\"unlockedOn\":1641679890014},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1641679890023},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1641679890030},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641679890036},{\"ID\":\"TOR\",\"unlockedOn\":1641679890048},{\"ID\":\"BYPASS\",\"unlockedOn\":1641679890061},{\"ID\":\"PROTOTYPETAMPERING\",\"unlockedOn\":1641679890067},{\"ID\":\"UNCLICKABLE\",\"unlockedOn\":1641679890073},{\"ID\":\"UNDOCUMENTEDFUNCTIONCALL\",\"unlockedOn\":1641679890083},{\"ID\":\"TIMECOMPRESSION\",\"unlockedOn\":1641679890090},{\"ID\":\"REALITYALTERATION\",\"unlockedOn\":1641679890099},{\"ID\":\"N00DLES\",\"unlockedOn\":1641679890109},{\"ID\":\"EDITSAVEFILE\",\"unlockedOn\":1641679890117},{\"ID\":\"DEVMENU\",\"unlockedOn\":1641679890130},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641681211658},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641687973510},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641721856386},{\"ID\":\"UNACHIEVABLE\",\"unlockedOn\":1641722341982},{\"ID\":\"FROZE\",\"unlockedOn\":1641734437104},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1641817424050},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1641903848242},{\"ID\":\"4S\",\"unlockedOn\":1641907336632},{\"ID\":\"DONATION\",\"unlockedOn\":1641907396617},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641908663322},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1641918704987},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1641937453791},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1641982053228},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1641982113197},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1641984580423},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1641985300316},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641991378620},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1641999052675},{\"ID\":\"WORKOUT\",\"unlockedOn\":1642334647833},{\"ID\":\"INDECISIVE\",\"unlockedOn\":1642343484769},{\"ID\":\"FAST_BN\",\"unlockedOn\":1642768530890},{\"ID\":\"GANG\",\"unlockedOn\":1642772019491},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1642804547259},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1642841548633},{\"ID\":\"SF2.1\",\"unlockedOn\":1642849051433},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1643025332087},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1643025332093},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1643025332094},{\"ID\":\"GANG_TERRITORY\",\"unlockedOn\":1643032932296},{\"ID\":\"CORPORATION\",\"unlockedOn\":1643059508902},{\"ID\":\"CORPORATION_BRIBE\",\"unlockedOn\":1643193348323},{\"ID\":\"CORPORATION_REAL_ESTATE\",\"unlockedOn\":1643194428307},{\"ID\":\"CORPORATION_PROD_1000\",\"unlockedOn\":1643195028369},{\"ID\":\"MONEY_1Q\",\"unlockedOn\":1643197062119},{\"ID\":\"QUEUE_40\",\"unlockedOn\":1643198982091},{\"ID\":\"MAX_RAM\",\"unlockedOn\":1643200021662},{\"ID\":\"SF3.1\",\"unlockedOn\":1643201341872},{\"ID\":\"SF12.1\",\"unlockedOn\":1643327676262},{\"ID\":\"BLADEBURNER_DIVISION\",\"unlockedOn\":1643365278774},{\"ID\":\"BLADEBURNER_OVERCLOCK\",\"unlockedOn\":1643509416134}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"94.5.4.1\",\"isConnectedTo\":true,\"maxRam\":2048,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"Formulas.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\"],\"ramUsed\":1175.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/ui/overview.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":81265.679,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":144342.41000000443,\"pid\":1,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/ui/overview.js\",\"url\":\"blob:file:///01374a23-d192-45a7-bf89-4b2fa7ee55f6\",\"moduleSequenceNumber\":9916}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"cortex.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":422865.3975810035,\"offlineMoneyMade\":0,\"offlineRunningTime\":61219.609,\"onlineExpGained\":504849.06236807094,\"onlineMoneyMade\":4848819725,\"onlineRunningTime\":18597.21000002779,\"pid\":2,\"ramUsage\":52,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///dea83436-90dd-4303-a606-4cb7e3f3003b\",\"moduleSequenceNumber\":491},{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///d5402509-ad8b-4124-a63e-39b382c3260b\",\"moduleSequenceNumber\":491},{\"filename\":\"/utils/contractor.js\",\"url\":\"blob:file:///6cc8c35c-6632-4fb6-9a52-a76e1fe68309\",\"moduleSequenceNumber\":490},{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///07307ed7-105f-4a89-b7aa-f37a23e5fc46\",\"moduleSequenceNumber\":491},{\"filename\":\"/hacking/hack-manager.js\",\"url\":\"blob:file:///e54de4c2-7db8-462d-b044-969cab6fbec7\",\"moduleSequenceNumber\":474},{\"filename\":\"cortex.js\",\"url\":\"blob:file:///644b3a9c-11ab-4a68-89f4-4cc08ddf921b\",\"moduleSequenceNumber\":939}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":150.41000000000008,\"pid\":2379,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":309,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///93e4f73c-7bd5-4fe1-be85-0b95dce0be31\",\"moduleSequenceNumber\":943}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":150.41000000000008,\"pid\":2380,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":128,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///93e4f73c-7bd5-4fe1-be85-0b95dce0be31\",\"moduleSequenceNumber\":943}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":143.21000000000006,\"pid\":2384,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///ca1e0f5b-61ac-42ce-926b-2f3fba6de088\",\"moduleSequenceNumber\":945}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.01000000000008,\"pid\":2392,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":11,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///ca1e0f5b-61ac-42ce-926b-2f3fba6de088\",\"moduleSequenceNumber\":945}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.210000000000086,\"pid\":2396,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":188,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///93e4f73c-7bd5-4fe1-be85-0b95dce0be31\",\"moduleSequenceNumber\":943}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main() {\\n\\tlet boxes = Array.from(eval('document').querySelectorAll('[class*=MuiBox-root]'));\\n\\tlet box = boxes.find(x => hasPlayer(x));\\n\\n\\tif (box) {\\n\\t\\tlet props = getProps(box);\\n\\t\\tprops.router.toDevMenu();\\n\\t}\\n}\\n\\nfunction getProps(obj) {\\n\\treturn Object.entries(obj).find(entry => entry[0].startsWith('__reactProps'))[1].children.props;\\n}\\n\\nfunction hasPlayer(obj) {\\n\\ttry {\\n\\t\\treturn !!getProps(obj).player;\\n\\t} catch (err) {\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/exploits/dev-menu.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/exploits/dev-menu.js\",\"url\":\"blob:file:///0b983167-dada-4071-8c15-200ae61f0c33\"}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":470,\"_hash\":\"b03b9cede60b50447d1f38b2e370d36f9517e5d1b9accfc2ed19d72569cd3499\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///8907bc93-2f60-48f1-bc25-0760209b2f5d\",\"moduleSequenceNumber\":491},{\"filename\":\"/hacking/daemon.js\",\"url\":\"blob:file:///64290089-5e7e-4265-8edf-a38a16412037\",\"moduleSequenceNumber\":941}],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"home\",\"moduleSequenceNumber\":471,\"_hash\":\"c3ca17a56df6b613ed91932e42a70387a783e9cb47b5cfc31bb8061753f01b12\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAccessibleServers, getOptimalHackable, getScripts} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tconst scripts = getScripts();\\n\\tconst servers = getAccessibleServers(ns);\\n\\tconst hackables = getOptimalHackable(ns, servers);\\n\\n\\tfor (let script of Object.values(scripts)) {\\n\\t\\tns.scriptKill(script, 'home');\\n\\t}\\n\\tns.exec(scripts.daemon, 'home', 1, hackables[0]);\\n\\n\\tfor (let [i, host] of ns.getPurchasedServers().entries()) {\\n\\t\\tif (i < hackables.length) {\\n\\t\\t\\tfor (let script of Object.values(scripts)) {\\n\\t\\t\\t\\tns.scriptKill(script, host);\\n\\t\\t\\t}\\n\\t\\t\\tns.exec(scripts.daemon, host, 1, hackables[i + 1]);\\n\\t\\t} else break;\\n\\t}\\n}\",\"filename\":\"/hacking/deploy-daemons.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///fb6bb2ee-4683-4852-adb3-14267b39446f\",\"moduleSequenceNumber\":491},{\"filename\":\"/hacking/deploy-daemons.js\",\"url\":\"blob:file:///1a932010-bc52-4d42-9249-a77ee9a4bd7b\",\"moduleSequenceNumber\":2390}],\"dependents\":[],\"ramUsage\":13.15,\"server\":\"home\",\"moduleSequenceNumber\":472,\"_hash\":\"e07c7eeee9dea647b8c311043faf667a8094d6cc2dbaac5b50d84eeb2bcae064\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///93e4f73c-7bd5-4fe1-be85-0b95dce0be31\",\"moduleSequenceNumber\":943}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":943,\"_hash\":\"d4919ca0b839149d0836473b5a11aa73a718df89acac9fdc22b51ab4173c1321\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n\\tcopyScriptsToAll,\\n\\tfindPlaceToRun,\\n\\tgetAccessibleServers,\\n\\tgetFreeRam,\\n\\tgetOptimalHackable,\\n\\tgetScripts\\n} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tawait copyScriptsToAll(ns);\\n\\twhile (true) {\\n\\t\\tmanageAndHack(ns);\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\nexport function manageAndHack(ns) {\\n\\tconst scripts = getScripts();\\n\\tconst servers = getAccessibleServers(ns);\\n\\tconst hackables = getOptimalHackable(ns, servers);\\n\\tconst [freeRams, filteredHackables] = getFreeRam(ns, servers, hackables);\\n\\tconst hackstates = getHackStates(ns, servers, filteredHackables);\\n\\tfor (let target of filteredHackables) {\\n\\t\\tlet money = ns.getServerMoneyAvailable(target);\\n\\t\\tlet maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tlet minSec = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet sec = ns.getServerSecurityLevel(target);\\n\\n\\t\\tlet secDiff = sec - minSec;\\n\\t\\tif (secDiff > 0) {\\n\\t\\t\\tlet threads = Math.ceil(secDiff * 20) - hackstates.get(target).weaken;\\n\\t\\t\\tif (threads > 0) {\\n\\t\\t\\t\\tif (!findPlaceToRun(ns, scripts.weaken, threads, freeRams, [target])) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tlet moneyPercent = money / maxMoney;\\n\\t\\tif (moneyPercent === 0) moneyPercent = 0.1;\\n\\t\\tif (moneyPercent < 0.9) {\\n\\t\\t\\tlet threads = Math.ceil(ns.growthAnalyze(target, 1 / moneyPercent)) - hackstates.get(target).grow;\\n\\t\\t\\tif (threads > 0) {\\n\\t\\t\\t\\tif (!findPlaceToRun(ns, scripts.grow, threads, freeRams, [target])) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (moneyPercent > 0.75 && secDiff < 50) {\\n\\t\\t\\tlet threads = Math.floor(ns.hackAnalyzeThreads(target, money - (0.4 * maxMoney))) - hackstates.get(target).hack;\\n\\t\\t\\tif (threads > 0) {\\n\\t\\t\\t\\tif (!findPlaceToRun(ns, scripts.hack, threads, freeRams, [target])) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction getHackStates(ns, servers, hackables) {\\n\\tconst scripts = getScripts();\\n\\tconst hackstates = new Map();\\n\\tfor (let server of servers.values()) {\\n\\t\\tfor (let hackable of hackables.values()) {\\n\\t\\t\\tlet weakenScript = ns.getRunningScript(scripts.weaken, server, hackable);\\n\\t\\t\\tlet growScript = ns.getRunningScript(scripts.grow, server, hackable);\\n\\t\\t\\tlet hackScript = ns.getRunningScript(scripts.hack, server, hackable);\\n\\t\\t\\tif (hackstates.has(hackable)) {\\n\\t\\t\\t\\thackstates.get(hackable).weaken += !weakenScript ? 0 : weakenScript.threads;\\n\\t\\t\\t\\thackstates.get(hackable).grow += !growScript ? 0 : growScript.threads;\\n\\t\\t\\t\\thackstates.get(hackable).hack += !hackScript ? 0 : hackScript.threads;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\thackstates.set(hackable, {\\n\\t\\t\\t\\t\\tweaken: !weakenScript ? 0 : weakenScript.threads,\\n\\t\\t\\t\\t\\tgrow: !growScript ? 0 : growScript.threads,\\n\\t\\t\\t\\t\\thack: !hackScript ? 0 : hackScript.threads\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn hackstates;\\n}\",\"filename\":\"/hacking/hack-manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///89d759e6-645a-4f45-a499-98df5621ab1e\",\"moduleSequenceNumber\":10421},{\"filename\":\"/hacking/hack-manager.js\",\"url\":\"blob:file:///1293b29b-303c-4938-b6f7-4a3a9cb7f34e\",\"moduleSequenceNumber\":10496}],\"dependents\":[],\"ramUsage\":16.2,\"server\":\"home\",\"moduleSequenceNumber\":474,\"_hash\":\"b32ae978a334b77e54be495f88ea81520a1b0604cb6a8b1dffd28dfa89f97207\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///2bf31056-5af9-4144-974c-f5d2ed5fa5f4\",\"moduleSequenceNumber\":944}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":944,\"_hash\":\"e069d60f0f0c6197182950d3c3105a36cae3b096c5b47e4eeff3d2e011a163d1\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///ca1e0f5b-61ac-42ce-926b-2f3fba6de088\",\"moduleSequenceNumber\":945}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":945,\"_hash\":\"08854ec21e551e0919facae4cf4276671f7ea728815f06750286cba970c1dfca\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const commission = 100000;\\nconst samplingLength = 30;\\n\\nfunction predictState(samples) {\\n\\tconst limits = [null, null, null, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 11, 12, 12, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 19, 19, 20];\\n\\tlet inc = 0;\\n\\tfor (let i = 0; i < samples.length; ++i) {\\n\\t\\tconst total = i + 1;\\n\\t\\tconst idx = samples.length - total;\\n\\t\\tif (samples[idx] > 1) {\\n\\t\\t\\tinc++;\\n\\t\\t}\\n\\t\\tconst limit = limits[i];\\n\\t\\tif (limit === null) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (inc >= limit) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\tif ((total - inc) >= limit) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t}\\n\\treturn 0;\\n}\\n\\nfunction posNegDiff(samples) {\\n\\tconst pos = samples.reduce((acc, curr) => acc + (curr > 1. ? 1 : 0), 0);\\n\\treturn Math.abs(samples.length - 2 * pos);\\n}\\n\\nfunction posNegRatio(samples) {\\n\\tconst pos = samples.reduce((acc, curr) => acc + (curr > 1. ? 1 : 0), 0);\\n\\treturn Math.round(100 * (2 * pos / samples.length - 1));\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"ALL\\\");\\n\\tlet symLastPrice = {};\\n\\tlet symChanges = {};\\n\\tfor (const sym of ns.stock.getSymbols()) {\\n\\t\\tsymLastPrice[sym] = ns.stock.getPrice(sym);\\n\\t\\tsymChanges[sym] = []\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(2000);\\n\\n\\t\\tif (symLastPrice['FSIG'] === ns.stock.getPrice('FSIG')) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tfor (const sym of ns.stock.getSymbols()) {\\n\\t\\t\\tconst current = ns.stock.getPrice(sym);\\n\\t\\t\\tsymChanges[sym].push(current / symLastPrice[sym]);\\n\\t\\t\\tsymLastPrice[sym] = current;\\n\\t\\t\\tif (symChanges[sym].length > samplingLength) {\\n\\t\\t\\t\\tsymChanges[sym] = symChanges[sym].slice(symChanges[sym].length - samplingLength);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tconst prioritizedSymbols = [...ns.stock.getSymbols()];\\n\\t\\tprioritizedSymbols.sort((a, b) => posNegDiff(symChanges[b]) - posNegDiff(symChanges[a]));\\n\\n\\t\\tfor (const sym of prioritizedSymbols) {\\n\\t\\t\\tconst positions = ns.stock.getPosition(sym);\\n\\t\\t\\tconst longShares = positions[0];\\n\\t\\t\\tconst longPrice = positions[1];\\n\\t\\t\\tconst shortShares = positions[2];\\n\\t\\t\\tconst shortPrice = positions[3];\\n\\t\\t\\tconst state = predictState(symChanges[sym]);\\n\\t\\t\\tconst ratio = posNegRatio(symChanges[sym]);\\n\\t\\t\\tconst bidPrice = ns.stock.getBidPrice(sym);\\n\\t\\t\\tconst askPrice = ns.stock.getAskPrice(sym);\\n\\t\\t\\tif (longShares <= 0 && shortShares <= 0 && ns.stock.getPrice(sym) < 30000) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (longShares > 0) {\\n\\t\\t\\t\\tconst cost = longShares * longPrice;\\n\\t\\t\\t\\tconst profit = longShares * (bidPrice - longPrice) - 2 * commission;\\n\\t\\t\\t\\tif (state < 0) {\\n\\t\\t\\t\\t\\tconst sellPrice = ns.stock.sell(sym, longShares);\\n\\t\\t\\t\\t\\tif (sellPrice > 0) {\\n\\t\\t\\t\\t\\t\\tns.print(`SOLD (long) ${sym}. Profit: ${ns.nFormat(profit, \\\"0.000a\\\")}`);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.print(`${sym} (${ratio}): ${ns.nFormat(profit + cost, \\\"0.000a\\\")} / ${ns.nFormat(profit, \\\"0.000a\\\")} (${(profit / cost * 100).toFixed(2)}%)`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (shortShares > 0) {\\n\\t\\t\\t\\tconst cost = shortShares * shortPrice;\\n\\t\\t\\t\\tconst profit = shortShares * (shortPrice - askPrice) - 2 * commission;\\n\\t\\t\\t\\tif (state > 0) {\\n\\t\\t\\t\\t\\tconst sellPrice = ns.stock.sellShort(sym, shortShares);\\n\\t\\t\\t\\t\\tif (sellPrice > 0) {\\n\\t\\t\\t\\t\\t\\tns.print(`SOLD (short) ${sym}. Profit: ${ns.nFormat(profit, \\\"0.000a\\\")}`);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.print(`${sym} (${ratio}): ${ns.nFormat(profit + cost, \\\"0.000a\\\")} / ${ns.nFormat(profit, \\\"0.000a\\\")} (${(profit / cost * 100).toFixed(2)}%)`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tconst money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\t\\t\\tif (state > 0) {\\n\\t\\t\\t\\t\\tconst sharesToBuy = Math.min(10000, ns.stock.getMaxShares(sym), Math.floor((money - commission) / askPrice));\\n\\t\\t\\t\\t\\tif (ns.stock.buy(sym, sharesToBuy) > 0) {\\n\\t\\t\\t\\t\\t\\tns.print(`BOUGHT (long) ${sym}.`);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// else if (state < 0 ) {\\n\\t\\t\\t\\t//   const sharesToBuy = Math.min(10000, ns.stock.getMaxShares(sym), Math.floor((money - commission) / bidPrice));\\n\\t\\t\\t\\t//   if (ns.stock.short(sym, sharesToBuy) > 0) {\\n\\t\\t\\t\\t//     ns.print(`BOUGHT (short) ${sym}.`);\\n\\t\\t\\t\\t//   }\\n\\t\\t\\t\\t// }\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/stock-market/early-stock-market.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.2,\"server\":\"home\",\"moduleSequenceNumber\":477,\"_hash\":\"0890e76738fe633d9a1eb148bba50d4c190523f9ee2a3df71b15d621ba9a506f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Requires access to the TIX API and the 4S Mkt Data API\\nconst fracL = 0.1; // Fraction of assets to keep as cash in hand\\nconst fracH = 0.2;\\nconst commission = 100000; // Buy or sell commission\\n\\nfunction refresh(ns, stocks, myStocks) {\\n\\tlet corpus = ns.getServerMoneyAvailable('home');\\n\\tmyStocks.length = 0;\\n\\tfor (let stock of stocks) {\\n\\t\\tlet sym = stock.sym;\\n\\t\\tstock.price = ns.stock.getPrice(sym);\\n\\t\\t[stock.shares, stock.buyPrice] = ns.stock.getPosition(sym);\\n\\t\\tstock.vol = ns.stock.getVolatility(sym);\\n\\t\\tstock.prob = 2 * (ns.stock.getForecast(sym) - 0.5);\\n\\t\\tstock.expRet = stock.vol * stock.prob / 2;\\n\\t\\tcorpus += stock.price * stock.shares;\\n\\t\\tif (stock.shares > 0) myStocks.push(stock);\\n\\t}\\n\\tstocks.sort((a, b) => b.expRet - a.expRet);\\n\\treturn corpus;\\n}\\n\\nfunction buy(ns, stock, numShares) {\\n\\tlet price = ns.stock.buy(stock.sym, numShares);\\n\\tlet totalPrice = price * numShares\\n\\tif (price) ns.print(`Bought ${numShares} shares of ${stock.sym} for ${ns.nFormat(totalPrice, '$0.000a')}`);\\n}\\n\\nfunction sell(ns, stock, numShares) {\\n\\tlet price = ns.stock.sell(stock.sym, numShares);\\n\\tlet profit = numShares * (stock.price - stock.buyPrice) - 2 * commission;\\n\\tif (price) ns.print(`Sold ${numShares} shares of ${stock.sym} for a profit of ${ns.nFormat(profit, '$0.000a')}`);\\n}\\n\\nexport async function main(ns) {\\n\\t//Initialise\\n\\tns.disableLog('ALL');\\n\\tconst stocks = [];\\n\\tconst myStocks = [];\\n\\n\\tfor (let sym of ns.stock.getSymbols()) {\\n\\t\\tstocks.push({sym: sym});\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tlet corpus = refresh(ns, stocks, myStocks);\\n\\t\\t// Sell underperforming shares\\n\\t\\tfor (let myStock of myStocks) {\\n\\t\\t\\tif (stocks[0].expRet > myStock.expRet) {\\n\\t\\t\\t\\tsell(ns, myStock, myStock.shares);\\n\\t\\t\\t\\tcorpus -= commission;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Sell shares if not enough cash in hand\\n\\t\\tfor (let myStock of myStocks) {\\n\\t\\t\\tif (ns.getServerMoneyAvailable('home') < fracL * corpus) {\\n\\t\\t\\t\\tlet cashNeeded = corpus * fracH - ns.getServerMoneyAvailable('home') + commission;\\n\\t\\t\\t\\tlet numShares = Math.ceil(cashNeeded / myStock.price);\\n\\t\\t\\t\\tsell(ns, myStock, numShares);\\n\\t\\t\\t\\tcorpus -= commission;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Buy shares with cash remaining in hand\\n\\t\\tlet cashToSpend = ns.getServerMoneyAvailable('home') - fracH * corpus;\\n\\t\\tlet numShares = Math.floor((cashToSpend - commission) / stocks[0].price);\\n\\t\\tif (numShares > ns.stock.getMaxShares(stocks[0].sym)) numShares = ns.stock.getMaxShares(stocks[0].sym);\\n\\t\\tif ((numShares * stocks[0].expRet * stocks[0].price) > commission) buy(ns, stocks[0], numShares);\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"/stock-market/stock-market.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/stock-market/stock-market.js\",\"url\":\"blob:file:///68750361-8f81-47d7-b60d-019a5376554a\",\"moduleSequenceNumber\":3055}],\"dependents\":[],\"ramUsage\":19.7,\"server\":\"home\",\"moduleSequenceNumber\":478,\"_hash\":\"ca81c8c0412629b3e18e85ad1998d2eac9761df2b274f7a9a284c377cac51203\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst server = ns.args[0];\\n\\tconst usedRam = ns.getServerUsedRam(server);\\n\\tconst maxRam = ns.getServerMaxRam(server);\\n\\tconst money = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst minSec = ns.getServerMinSecurityLevel(server);\\n\\tconst sec = ns.getServerSecurityLevel(server);\\n\\n\\tns.tprint(`\\n${server}:\\n    RAM        : ${ns.nFormat(usedRam * 1000 ** 3, \\\"0.00b\\\")} / ${ns.nFormat(maxRam * 1000 ** 3, \\\"0.00b\\\")} (${(usedRam / maxRam * 100).toFixed(2)}%)\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)}\\n    hack time  : ${ns.tFormat(ns.getHackTime(server))}\\n    grow time  : ${ns.tFormat(ns.getGrowTime(server))}\\n    weaken time: ${ns.tFormat(ns.getWeakenTime(server))}\\n    grow x2    : ${Math.ceil(ns.growthAnalyze(server, 2))} threads\\n    grow x3    : ${Math.ceil(ns.growthAnalyze(server, 3))} threads\\n    grow x4    : ${Math.ceil(ns.growthAnalyze(server, 4))} threads\\n    hack 10%   : ${Math.floor(0.1 / ns.hackAnalyze(server))} threads\\n    hack 25%   : ${Math.floor(0.25 / ns.hackAnalyze(server))} threads\\n    hack 50%   : ${Math.floor(0.5 / ns.hackAnalyze(server))} threads\\n    hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/tools/analyze-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/tools/analyze-server.js\",\"url\":\"blob:file:///b0c61b47-12c8-41d9-bbb2-adf3b8063f1a\",\"moduleSequenceNumber\":108883}],\"dependents\":[],\"ramUsage\":5.35,\"server\":\"home\",\"moduleSequenceNumber\":479,\"_hash\":\"6619cc0c1589e2f49c33c30e904029c7c743566bf011fc5b60dc419a8a18df87\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst mults = ns.getBitNodeMultipliers();\\n\\tfor (let [mult, val] of Object.entries(mults)) {\\n\\t\\tns.tprint(`${mult}: ${val}`);\\n\\t}\\n}\",\"filename\":\"/tools/bitnode-multipliers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/tools/bitnode-multipliers.js\",\"url\":\"blob:file:///da1fd1f0-922b-45be-88cc-f0456758af0b\",\"moduleSequenceNumber\":100429}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":100429,\"_hash\":\"1b05da9eaa009ff6c1ea4327f0928a1b9a84baca2b54e41f2732e27a3ed8d76f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst cost = ns.getPurchasedServerCost(Math.pow(2, ns.args[0]));\\n\\tconst cost25 = cost * 25;\\n\\tns.tprint(`1 Server: ${ns.nFormat(cost, '$0.000a')}, 25 servers: ${ns.nFormat(cost25, '$0.000a')}`);\\n}\",\"filename\":\"/tools/cost-pserv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/tools/cost-pserv.js\",\"url\":\"blob:file:///211f87a8-c407-4520-9e1d-90c1d020bd59\",\"moduleSequenceNumber\":32538}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"home\",\"moduleSequenceNumber\":481,\"_hash\":\"eb5525ca20ffef2475d020610dafdbb753f15035ae52f347f9dd19b6aa4a620f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst favor = 1 + Math.floor(Math.log((ns.args[0] + 25000) / 25500) / Math.log(1.02));\\n\\tns.tprint(favor);\\n}\",\"filename\":\"/tools/favor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":482,\"_hash\":\"6ad751e0df0ec6fbb7d5566bba9ffd5bf774eb0a307aa21712094760add3d41d\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getServers} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tconst servers = getServers(ns);\\n\\tfor (let server of servers) {\\n\\t\\tlet files = ns.ls(server);\\n\\t\\tfor (let file of files) {\\n\\t\\t\\tif (file.endsWith('.lit') || file.endsWith('.txt')) {\\n\\t\\t\\t\\tawait ns.scp(file, server, 'home');\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/tools/get-all-text.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///475c3128-f4c8-41e2-9b48-e27f3e6c3f25\",\"moduleSequenceNumber\":103401},{\"filename\":\"/tools/get-all-text.js\",\"url\":\"blob:file:///07ec6154-ae09-45ed-be61-81d5f61bf25b\",\"moduleSequenceNumber\":104252}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":483,\"_hash\":\"c97e515d9ca69432b40b8181133b05c5a67cacc9e33fc6715be4c6ca073fc025\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAccessibleServers, getOptimalHackable, targetCost} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tconst args = ns.flags([['cores', 1]]);\\n\\tconst servers = getAccessibleServers(ns);\\n\\tconst hackable = getOptimalHackable(ns, servers);\\n\\tfor (let [i, server] of hackable.entries()) {\\n\\t\\tconst growth = ns.getServerGrowth(server);\\n\\t\\tconst money = ns.nFormat(ns.getServerMaxMoney(server), '0.000a');\\n\\t\\tconst minSec = ns.getServerMinSecurityLevel(server);\\n\\t\\tconst cost = ns.nFormat(targetCost(ns, server, args.cores), '0.000a');\\n\\t\\tns.tprintf(`${i + 1}: Maximum Money: ${money}, Growth: ${growth}, Min Security: ${minSec}, Server: ${host}, Cost: ${cost}`);\\n\\t}\\n}\",\"filename\":\"/tools/hackable-servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///e006dc10-969b-48af-9af4-d5ba2dcafba6\",\"moduleSequenceNumber\":11612},{\"filename\":\"/tools/hackable-servers.js\",\"url\":\"blob:file:///f79bec05-72d1-414d-b5ad-3da5194b1694\",\"moduleSequenceNumber\":14364}],\"dependents\":[],\"ramUsage\":8.8,\"server\":\"home\",\"moduleSequenceNumber\":484,\"_hash\":\"77f8678e5689e1a51b3f032bc619bf3f1b569fb1a361527d4ce8e1565a9feb3d\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst karma = ns.heart.break();\\n\\tns.tprint(karma.toFixed(2));\\n}\",\"filename\":\"/tools/karma.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/tools/karma.js\",\"url\":\"blob:file:///496d16bb-93ef-4781-b17c-d2fc700adbba\",\"moduleSequenceNumber\":153601}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":485,\"_hash\":\"8529bd972efba9e73eb14e6c6dedebe5a94dc535af954e63001249f18366aa70\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tns.tail();\\n\\tns.disableLog('ALL');\\n\\twhile (true) {\\n\\t\\tconst server = ns.args[0];\\n\\t\\tlet money = ns.getServerMoneyAvailable(server);\\n\\t\\tif (money === 0) money = 1;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\t\\tconst minSec = ns.getServerMinSecurityLevel(server);\\n\\t\\tconst sec = ns.getServerSecurityLevel(server);\\n\\t\\tns.clearLog(server);\\n\\t\\tns.print(`${server}:`);\\n\\t\\tns.print(` $       : ${ns.nFormat(money, '$0.000a')} / ${ns.nFormat(maxMoney, '$0.000a')} (${(money / maxMoney * 100).toFixed(2)}%)`);\\n\\t\\tns.print(` security: +${sec - minSec}`);\\n\\t\\tns.print(` hack    : ${ns.getHackTime(server)} (t=${Math.ceil(ns.hackAnalyzeThreads(server, money))})`);\\n\\t\\tns.print(` grow    : ${ns.getGrowTime(server)} (t=${Math.ceil(ns.growthAnalyze(server, maxMoney / money))})`);\\n\\t\\tns.print(` weaken  : ${ns.getWeakenTime(server)} (t=${Math.ceil((sec - minSec) * 20)})`);\\n\\t\\tawait ns.sleep(20);\\n\\t}\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/tools/monitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/tools/monitor.js\",\"url\":\"blob:file:///326387eb-02d4-44f2-9d20-ab0c660105f4\",\"moduleSequenceNumber\":45532}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"home\",\"moduleSequenceNumber\":486,\"_hash\":\"893c12e0ba4f315c62804972ae8d701f79995bced0cb1efe4b3bc26a3fba651f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAccessibleServers, getOptimalHackable, getScripts, scriptsToCopy} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tconst power = ns.args[0];\\n\\n\\tif (power < 0 || power > 20) {\\n\\t\\tns.tprint(`Invalid RAM amount.`);\\n\\t\\tns.exit();\\n\\t}\\n\\n\\tconst servers = getAccessibleServers(ns);\\n\\tconst hackables = getOptimalHackable(ns, servers);\\n\\n\\tconst targetRam = Math.pow(2, power);\\n\\tfor (let i = 0; i < ns.getPurchasedServerLimit(); i++) {\\n\\t\\tlet server = 'pserv-' + i;\\n\\t\\tlet cost = ns.getPurchasedServerCost(targetRam);\\n\\t\\twhile (ns.getServerMoneyAvailable('home') < cost) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t\\tif (ns.serverExists(server)) {\\n\\t\\t\\tif (ns.getServerMaxRam(server) < targetRam) {\\n\\t\\t\\t\\tns.killall(server);\\n\\t\\t\\t\\tns.deleteServer(server);\\n\\t\\t\\t} else continue;\\n\\t\\t}\\n\\t\\tns.tprint(`Buying server: ${server}, target RAM: ${targetRam}`);\\n\\t\\tns.purchaseServer(server, targetRam);\\n\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\tns.exec(getScripts().daemon, server, 1, hackables[i + 1]);\\n\\t}\\n}\",\"filename\":\"/tools/pserv-buyer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///fbd3b35b-5d00-4058-ace4-dce6994bf431\",\"moduleSequenceNumber\":2200},{\"filename\":\"/tools/pserv-buyer.js\",\"url\":\"blob:file:///19ddfbf4-1005-4799-b1e6-3c9f66d89d94\",\"moduleSequenceNumber\":5844}],\"dependents\":[],\"ramUsage\":16.05,\"server\":\"home\",\"moduleSequenceNumber\":487,\"_hash\":\"56c2d141ea865d967ca9c6c4f957758f2fa9da467ecafc722271bee972d6116a\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst reputation = Math.ceil(25500 * Math.exp(Math.log(1.02) * (ns.args[0] - 1)) - 25000);\\n\\tns.tprint(ns.nFormat(reputation, '0.000a'));\\n}\",\"filename\":\"/tools/reputation.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/tools/reputation.js\",\"url\":\"blob:file:///aa33c0f3-e8d2-4e13-8fde-ebda6c4aec9b\"}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":488,\"_hash\":\"182648057b1c1b5efc12614517609fa0b5dd94312c4a74359ddbbb214c62bb5f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {hackServer, routeFinder} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tconst server = ns.args[0];\\n\\tconst route = routeFinder(ns, server);\\n\\tif (route && hackServer(ns, server)) {\\n\\t\\tfor (let serv of route) {\\n\\t\\t\\tns.connect(serv);\\n\\t\\t}\\n\\t\\tns.tprint(`Installing backdoor on ${server}.`);\\n\\t\\tawait ns.installBackdoor();\\n\\t\\tns.tprint(`Backdoor successfully installed on ${server}.`);\\n\\t\\tfor (let serv of route.reverse()) {\\n\\t\\t\\tns.connect(serv);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/utils/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///067649d8-c503-4f57-ab0c-cf32014eff50\",\"moduleSequenceNumber\":98072},{\"filename\":\"/utils/backdoor.js\",\"url\":\"blob:file:///b419466d-0233-4c96-9aaa-4cabd45a74bf\",\"moduleSequenceNumber\":131381}],\"dependents\":[],\"ramUsage\":6.55,\"server\":\"home\",\"moduleSequenceNumber\":489,\"_hash\":\"15f2594f57ee82215c23c8012705bc1dbfd417836b99e2a808214f4cb0b3a681\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getServers, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tcontractor(ns);\\n}\\n\\nexport function contractor(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tlet files = ns.ls(server, '.cct');\\n\\t\\tfor (let file of files) {\\n\\t\\t\\tlet contract = ns.codingcontract.getContractType(file, server);\\n\\t\\t\\tlet data = ns.codingcontract.getData(file, server);\\n\\t\\t\\tlet solution;\\n\\t\\t\\tswitch (contract) {\\n\\t\\t\\t\\tcase 'Find Largest Prime Factor':\\n\\t\\t\\t\\t\\tsolution = largestPrimeFactor(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\t\\t\\tsolution = subarrayMaxSum(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Spiralize Matrix':\\n\\t\\t\\t\\t\\tsolution = spiralizeMatrix(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Minimum Path Sum in a Triangle':\\n\\t\\t\\t\\t\\tsolution = minPathSum(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\t\\t\\tsolution = uniquePathsI(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\t\\t\\tsolution = uniquePathsII(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Algorithmic Stock Trader I':\\n\\t\\t\\t\\t\\tsolution = stockTrader(1, data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\t\\t\\tsolution = stockTrader(Math.floor(data.length / 2), data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Algorithmic Stock Trader III':\\n\\t\\t\\t\\t\\tsolution = stockTrader(2, data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Algorithmic Stock Trader IV':\\n\\t\\t\\t\\t\\tsolution = stockTrader(...data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Generate IP Addresses':\\n\\t\\t\\t\\t\\tsolution = genIPAddresses(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\t\\t\\tsolution = mergeOverlappingIntervals(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Array Jumping Game':\\n\\t\\t\\t\\t\\tsolution = arrayJumpingGame(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\t\\t\\tsolution = totalWaysToSum(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Find All Valid Math Expressions':\\n\\t\\t\\t\\t\\tsolution = validMathExpressions(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Sanitize Parentheses in Expression':\\n\\t\\t\\t\\t\\tsolution = sanitizeParentheses(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\tprintBoth(ns, `Found ${file} on ${server} of type: ${contract}.`)\\n\\t\\t\\t}\\n\\t\\t\\tlet result = ns.codingcontract.attempt(solution, file, server, {returnReward: true});\\n\\t\\t\\tif (result) {\\n\\t\\t\\t\\tprintBoth(ns, `Solved ${file} on ${server} of type: ${contract}. ${result}.`);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tprintBoth(ns, `Could not solve ${file} on ${server} of type: ${contract}.`);\\n\\t\\t\\t\\tprintBoth(ns, `Disabling contractor.`);\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn true;\\n}\\n\\nfunction largestPrimeFactor(n) {\\n\\tlet maxPrime = 0;\\n\\twhile (n % 2 === 0) {\\n\\t\\tn = Math.floor(n / 2);\\n\\t\\tmaxPrime = 2;\\n\\t}\\n\\tfor (let i = 3; i <= Math.floor(Math.sqrt(n)) + 1; i = i + 2) {\\n\\t\\twhile (n % i === 0) {\\n\\t\\t\\tn = Math.floor(n / i);\\n\\t\\t\\tmaxPrime = i;\\n\\t\\t}\\n\\t}\\n\\tif (n > 2) maxPrime = n;\\n\\n\\treturn maxPrime;\\n}\\n\\nfunction subarrayMaxSum(array) {\\n\\tconst sumReduce = (a, b) => a + b;\\n\\tlet maxSum = -Infinity;\\n\\tlet sum;\\n\\tfor (let i = 0; i < array.length; i++) {\\n\\t\\tfor (let j = i; j < array.length; j++) {\\n\\t\\t\\tsum = array.slice(i, j + 1).reduce(sumReduce);\\n\\t\\t\\tif (sum > maxSum) maxSum = sum;\\n\\t\\t}\\n\\t}\\n\\treturn maxSum;\\n}\\n\\nfunction spiralizeMatrix(matrix) {\\n\\tconst rows = matrix.length;\\n\\tconst cols = matrix[0].length;\\n\\n\\tlet maxrow = rows - 1;\\n\\tlet maxcol = cols - 1;\\n\\tlet minrow = 0;\\n\\tlet mincol = 0;\\n\\n\\tlet row = 0;\\n\\tlet col = 0;\\n\\n\\tlet list = [];\\n\\twhile (list.length < rows * cols) {\\n\\t\\tif (maxrow >= minrow) {\\n\\t\\t\\tfor (col; col <= maxcol; col++) {\\n\\t\\t\\t\\tlist.push(matrix[row][col]);\\n\\t\\t\\t}\\n\\t\\t\\tminrow++;\\n\\t\\t\\trow++;\\n\\t\\t\\tcol--;\\n\\t\\t}\\n\\t\\tif (maxcol >= mincol) {\\n\\t\\t\\tfor (row; row <= maxrow; row++) {\\n\\t\\t\\t\\tlist.push(matrix[row][col]);\\n\\t\\t\\t}\\n\\t\\t\\tmaxcol--;\\n\\t\\t\\tcol--;\\n\\t\\t\\trow--;\\n\\t\\t}\\n\\t\\tif (minrow <= maxrow) {\\n\\t\\t\\tfor (col; col >= mincol; col--) {\\n\\t\\t\\t\\tlist.push(matrix[row][col]);\\n\\t\\t\\t}\\n\\t\\t\\tmaxrow--;\\n\\t\\t\\tcol++;\\n\\t\\t\\trow--;\\n\\t\\t}\\n\\t\\tif (mincol <= maxcol) {\\n\\t\\t\\tfor (row; row >= minrow; row--) {\\n\\t\\t\\t\\tlist.push(matrix[row][col]);\\n\\t\\t\\t}\\n\\t\\t\\tmincol++;\\n\\t\\t\\trow++;\\n\\t\\t\\tcol++;\\n\\t\\t}\\n\\t}\\n\\treturn list;\\n}\\n\\nfunction minPathSum(data) {\\n\\tconst totalPaths = Math.pow(2, data.length - 1);\\n\\tlet minSum = Infinity;\\n\\tfor (let i = 0; i < totalPaths; i++) {\\n\\t\\tlet bin = i.toString(2);\\n\\t\\twhile (bin.length < data.length - 1) {\\n\\t\\t\\tbin = '0' + bin;\\n\\t\\t}\\n\\n\\t\\tlet sum = data[0][0];\\n\\t\\tlet k = 0;\\n\\t\\tfor (let j = 1; j < data.length; j++) {\\n\\t\\t\\tlet index = parseInt(bin.charAt(j - 1));\\n\\t\\t\\tk += index;\\n\\t\\t\\tsum += data[j][k];\\n\\t\\t}\\n\\n\\t\\tif (sum < minSum) minSum = sum;\\n\\t}\\n\\treturn minSum;\\n}\\n\\nfunction uniquePathsI(data) {\\n\\tconst [m, n] = data;\\n\\n\\tconst f = [];\\n\\tconst x = factorial(f, m + n - 2);\\n\\tconst y = factorial(f, m - 1);\\n\\tconst z = factorial(f, n - 1);\\n\\n\\treturn x / (y * z);\\n}\\n\\nfunction factorial(f, n) {\\n\\tif (n === 0 || n === 1) return 1;\\n\\tif (f[n] > 0) return f[n];\\n\\treturn f[n] = n * factorial(f, n - 1);\\n}\\n\\nfunction uniquePathsII(grid) {\\n\\tconst gridSum = [];\\n\\tfor (let i of grid) {\\n\\t\\tgridSum.push(i.slice());\\n\\t}\\n\\tfor (let i = 0; i < gridSum.length; i++) {\\n\\t\\tfor (let j = 0; j < gridSum[0].length; j++) {\\n\\t\\t\\tif (gridSum[i][j] === 1) {\\n\\t\\t\\t\\tgridSum[i][j] = 0;\\n\\t\\t\\t} else if (i === 0 && j === 0) {\\n\\t\\t\\t\\tgridSum[0][0] = 1;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tgridSum[i][j] = (i > 0 ? gridSum[i - 1][j] : 0) + (j > 0 ? gridSum[i][j - 1] : 0);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn gridSum[gridSum.length - 1][gridSum[0].length - 1];\\n}\\n\\nfunction stockTrader(maxTrades, stockPrices) {\\n\\tlet tempStr = '[0';\\n\\tfor (let i = 0; i < stockPrices.length - 1; i++) {\\n\\t\\ttempStr += ',0';\\n\\t}\\n\\ttempStr += ']';\\n\\tlet tempArr = '[' + tempStr;\\n\\tfor (let i = 0; i < maxTrades - 1; i++) {\\n\\t\\ttempArr += ',' + tempStr;\\n\\t}\\n\\ttempArr += ']';\\n\\n\\tconst highestProfit = JSON.parse(tempArr);\\n\\n\\tfor (let i = 0; i < maxTrades; i++) {\\n\\t\\tfor (let j = 0; j < stockPrices.length - 1; j++) {\\n\\t\\t\\tfor (let k = j + 1; k < stockPrices.length; k++) {\\n\\t\\t\\t\\tif (i > 0 && j > 0 && k > 0) {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t} else if (i > 0 && j > 0) {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t} else if (i > 0 && k > 0) {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t} else if (j > 0 && k > 0) {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn highestProfit[maxTrades - 1][stockPrices.length - 1];\\n}\\n\\nfunction genIPAddresses(string) {\\n\\tconst ips = [];\\n\\tfor (let i = 1; i < string.length - 2; i++) {\\n\\t\\tfor (let j = i + 1; j < string.length - 1; j++) {\\n\\t\\t\\tfor (let k = j + 1; k < string.length; k++) {\\n\\t\\t\\t\\tconst ip = [\\n\\t\\t\\t\\t\\tstring.slice(0, i),\\n\\t\\t\\t\\t\\tstring.slice(i, j),\\n\\t\\t\\t\\t\\tstring.slice(j, k),\\n\\t\\t\\t\\t\\tstring.slice(k)\\n\\t\\t\\t\\t];\\n\\n\\t\\t\\t\\tlet isValid = true;\\n\\t\\t\\t\\tip.forEach(seg => {\\n\\t\\t\\t\\t\\tisValid = isValid && isValidIpSegment(seg)\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\tif (isValid) ips.push(ip.join('.'));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn ips;\\n}\\n\\nfunction isValidIpSegment(segment) {\\n\\treturn !((segment[0] === '0' && segment !== '0') || segment > 255);\\n}\\n\\nfunction mergeOverlappingIntervals(array) {\\n\\tarray.sort((a, b) => a[0] - b[0]);\\n\\n\\tconst intervals = [array[0].slice()];\\n\\tfor (let interval of array) {\\n\\t\\tlet [x1, y1] = interval;\\n\\t\\tlet [, y2] = intervals[intervals.length - 1];\\n\\n\\t\\tif (y2 >= x1) intervals[intervals.length - 1][1] = Math.max(y1, y2);\\n\\t\\telse intervals.push(interval.slice());\\n\\t}\\n\\treturn intervals;\\n}\\n\\nfunction arrayJumpingGame(array) {\\n\\tconst reachable = new Array(array.length).fill(0);\\n\\treachable[0] = 1;\\n\\tfor (let i = 0; i < array.length; i++) {\\n\\t\\tlet num = array[i];\\n\\t\\tfor (let j = 1; j <= num; j++) {\\n\\t\\t\\tif (i + j === array.length) break;\\n\\t\\t\\treachable[i + j] = 1;\\n\\t\\t}\\n\\t}\\n\\treturn reachable.includes(0) ? 0 : 1;\\n}\\n\\nfunction totalWaysToSum(n) {\\n\\tconst table = [1];\\n\\tfor (let i = 0; i < n; i++) {\\n\\t\\ttable.push(0);\\n\\t}\\n\\tfor (let i = 1; i < n; i++) {\\n\\t\\tfor (let j = i; j <= n; j++) {\\n\\t\\t\\ttable[j] += table[j - i];\\n\\t\\t}\\n\\t}\\n\\treturn table[n];\\n}\\n\\nfunction validMathExpressions(data) {\\n\\tconst [digits, target] = data;\\n\\tconst valid = [];\\n\\tfor (let i = 0; i < 4 ** (digits.length - 1); i++) {\\n\\t\\tlet j = i.toString(4);\\n\\t\\twhile (j.length < digits.length - 1) {\\n\\t\\t\\tj = '0' + j;\\n\\t\\t}\\n\\t\\tif (digits[0] === '0' && j[0] === '0') continue;\\n\\n\\t\\tlet expr = digits[0];\\n\\t\\tfor (let k = 1; k < digits.length; k++) {\\n\\t\\t\\tif (digits[k] === '0' && j[k] === '0' && j[k - 1] !== '0') break;\\n\\n\\t\\t\\tlet op;\\n\\t\\t\\tswitch (j[k - 1]) {\\n\\t\\t\\t\\tcase '0':\\n\\t\\t\\t\\t\\top = '';\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase '1':\\n\\t\\t\\t\\t\\top = '+';\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase '2':\\n\\t\\t\\t\\t\\top = '-';\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase '3':\\n\\t\\t\\t\\t\\top = '*';\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\texpr += op + digits[k];\\n\\t\\t}\\n\\t\\tif (eval(expr) === target) valid.push(expr);\\n\\t}\\n\\treturn valid;\\n}\\n\\nfunction sanitizeParentheses(data) {\\n\\tconst valid = new Set('');\\n\\tlet min = data.length;\\n\\tfor (let i = 0; i < 2 ** data.length; i++) {\\n\\t\\tlet j = i.toString(2);\\n\\t\\twhile (j.length < data.length) {\\n\\t\\t\\tj = '0' + j;\\n\\t\\t}\\n\\n\\t\\tlet str = '';\\n\\t\\tlet deletions = 0;\\n\\t\\tfor (let k = 0; k < j.length; k++) {\\n\\t\\t\\tif (j[k] === '1' || (data[k] !== '(' && data[k] !== ')')) str += data[k];\\n\\t\\t\\telse deletions++;\\n\\t\\t}\\n\\t\\tif (deletions > min) continue;\\n\\n\\t\\tlet count = 0;\\n\\t\\tlet neg = false;\\n\\t\\tfor (let k of str) {\\n\\t\\t\\tif (k === '(') count++;\\n\\t\\t\\telse if (k === ')') count--;\\n\\t\\t\\tif (count < 0) neg = true;\\n\\t\\t}\\n\\t\\tif (count > 0 || neg) continue;\\n\\n\\t\\tif (deletions === min) valid.add(str);\\n\\t\\telse if (deletions < min) {\\n\\t\\t\\tmin = deletions;\\n\\t\\t\\tvalid.clear();\\n\\t\\t\\tvalid.add(str);\\n\\t\\t}\\n\\t}\\n\\treturn [...valid];\\n}\",\"filename\":\"/utils/contractor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///f129f32e-d6f0-484b-983b-dceb360c0447\",\"moduleSequenceNumber\":486},{\"filename\":\"/utils/contractor.js\",\"url\":\"blob:file:///bcfb3a4a-de85-4940-9d11-35c722420159\",\"moduleSequenceNumber\":947}],\"dependents\":[],\"ramUsage\":22,\"server\":\"home\",\"moduleSequenceNumber\":490,\"_hash\":\"ced9c7d182cf22e24107c0e45f9b9fecb6bb67f55aa84baea4e6864fbfb82dc6\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"home\",\"moduleSequenceNumber\":491,\"_hash\":\"2d91ac381e37a0b91b2f3adc6013a583a652522325d8ae932659ad808c31b06e\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst cost = ns.getUpgradeHomeCoresCost();\\n\\tif (await ns.prompt(`Upgrade home Cores for ${ns.nFormat(cost, '$0.000a')}?`)) {\\n\\t\\tif (ns.upgradeHomeCores()) ns.tprint(`Home cores upgraded.`);\\n\\t\\telse ns.tprint(`Could not upgrade home cores.`);\\n\\t}\\n}\",\"filename\":\"/utils/upgrade-home-cores.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/upgrade-home-cores.js\",\"url\":\"blob:file:///dfa998a8-36b2-4d43-87da-04dbba48562f\",\"moduleSequenceNumber\":975}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":492,\"_hash\":\"c57e487d129ba403d908146c518de853c0b7f8c21f82fd1ca1a2a8625ef1924d\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getUpgradeHomeCoresCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"upgradeHomeCores\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst cost = ns.getUpgradeHomeRamCost();\\n\\tif (await ns.prompt(`Upgrade home RAM for ${ns.nFormat(cost, '$0.000a')}?`)) {\\n\\t\\tif (ns.upgradeHomeRam()) ns.tprint(`Home RAM upgraded.`);\\n\\t\\telse ns.tprint(`Could not upgrade home RAM.`);\\n\\t}\\n}\",\"filename\":\"/utils/upgrade-home-ram.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/upgrade-home-ram.js\",\"url\":\"blob:file:///df9b6607-5286-4312-bf50-e909b354aacd\",\"moduleSequenceNumber\":21139}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":493,\"_hash\":\"9bd02e826e8b0b326cd48d9e77389f9581ad678d35d4bb519e5a531cd27643d1\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst url = 'https://raw.githubusercontent.com/mirkoconsiglio/Bitburner-scripts/master';\\n\\tconst listOfScripts = `build/scripts.txt`;\\n\\tns.tprint('----- Downloading scripts -----');\\n\\ttry {\\n\\t\\tns.tprint(`Downloading ${listOfScripts}`);\\n\\t\\tlet download = await ns.wget(`${url}/${listOfScripts}`, '/' + listOfScripts);\\n\\t\\tif (!download) throw listOfScripts;\\n\\t\\tlet scripts = ns.read('/' + listOfScripts).split('\\\\n');\\n\\t\\tfor (let script of scripts) {\\n\\t\\t\\tns.tprint(`Downloading ${script}`);\\n\\t\\t\\tif (script.includes('/')) download = await ns.wget(`${url}/${script}`, '/' + script);\\n\\t\\t\\telse download = await ns.wget(`${url}/${script}`, script);\\n\\t\\t\\tif (!download) throw script;\\n\\t\\t}\\n\\t\\tns.tprint('----- Download complete -----');\\n\\t} catch (script) {\\n\\t\\tns.tprint(`Could not download ${script}`);\\n\\t}\\n}\",\"filename\":\"/build/download-bitburner-scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/build/download-bitburner-scripts.js\",\"url\":\"blob:file:///ae575051-2217-4431-aeb5-8f137ab711fa\",\"moduleSequenceNumber\":2861}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":494,\"_hash\":\"db6be36921ed3570f27656ff3709a77330179d053163e571a78ce453593dcaa2\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst scriptsToKeep = ['/build/scripts.txt', '/build/download-bitburner-scripts.js'];\\n\\tns.read('/build/scripts.txt').split('\\\\n').forEach((script) => {\\n\\t\\tif (script.includes('/')) scriptsToKeep.push('/' + script);\\n\\t\\telse scriptsToKeep.push(script);\\n\\t});\\n\\tlet files = ns.ls('home').filter(file =>\\n\\t\\tfile.endsWith('.js') || file.endsWith('.txt'));\\n\\tfor (let file of files) {\\n\\t\\tif (!scriptsToKeep.includes(file)) {\\n\\t\\t\\tif (await ns.prompt(`Delete ${file}?`)) {\\n\\t\\t\\t\\tns.rm(file, 'home');\\n\\t\\t\\t\\tns.tprint(`Deleted ${file}`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/build/script-remover.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/build/script-remover.js\",\"url\":\"blob:file:///b8b2fb2e-1e67-4f36-8735-c651d664b61d\",\"moduleSequenceNumber\":11588}],\"dependents\":[],\"ramUsage\":2.8,\"server\":\"home\",\"moduleSequenceNumber\":495,\"_hash\":\"b0e886a683c819af301969714eb16bdedfa567fa40525eda9475ea32decb7185\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getFactions} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tconst file = '/texts/augmentations-list.txt';\\n\\tconst factions = getFactions();\\n\\tawait ns.write(file, '', 'w');\\n\\tfor (let faction of factions) {\\n\\t\\tawait ns.write(file, `\\\\n\\\\n----- ${faction} -----\\\\n`, 'a');\\n\\t\\tlet augmentations = ns.getAugmentationsFromFaction(faction);\\n\\t\\tfor (let augmentation of augmentations) {\\n\\t\\t\\tif (augmentation !== 'NeuroFlux Governor') {\\n\\t\\t\\t\\tawait ns.write(file, `\\\\n--- ${augmentation} ---\\\\n`, 'a');\\n\\t\\t\\t\\tlet stats = Object.entries(ns.getAugmentationStats(augmentation));\\n\\t\\t\\t\\tif (stats.length > 0) {\\n\\t\\t\\t\\t\\tfor (let [stat, multiplier] of stats) {\\n\\t\\t\\t\\t\\t\\tawait ns.write(file, `${stat}: ${multiplier}\\\\n`, 'a');\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else await ns.write(file, `Special\\\\n`, 'a');\\n\\t\\t\\t\\tlet price = ns.getAugmentationPrice(augmentation);\\n\\t\\t\\t\\tlet repReq = ns.getAugmentationRepReq(augmentation);\\n\\t\\t\\t\\tlet prereq = ns.getAugmentationPrereq(augmentation);\\n\\t\\t\\t\\tawait ns.write(file, `Price: ${ns.nFormat(price, '$0.000a')}\\\\n`, 'a');\\n\\t\\t\\t\\tawait ns.write(file, `Rep: ${ns.nFormat(repReq, '0.000a')}\\\\n`, 'a');\\n\\t\\t\\t\\tif (prereq.length > 0) await ns.write(file, `Prereq: ${prereq}\\\\n`, 'a');\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/augmentations/augmentation-lister.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///17fef6df-fa59-49ad-b809-9c7a34f5799b\",\"moduleSequenceNumber\":491},{\"filename\":\"/augmentations/augmentation-lister.js\",\"url\":\"blob:file:///8feed4aa-8ade-490e-a57c-ea682b153e4a\",\"moduleSequenceNumber\":8477}],\"dependents\":[],\"ramUsage\":21.6,\"server\":\"home\",\"moduleSequenceNumber\":8477,\"_hash\":\"bd25c96a052b2f33e71068fcfea7938d3eaa6185fd7fa1e293754881ac8b047f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationPrereq\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (await ns.prompt('Install augmentations?')) {\\n\\t\\tns.installAugmentations('cortex.js');\\n\\t}\\n}\",\"filename\":\"/augmentations/install-augmentations.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/augmentations/install-augmentations.js\",\"url\":\"blob:file:///ccccfe54-67fa-41c5-8667-103eec962b8e\",\"moduleSequenceNumber\":8258}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":497,\"_hash\":\"8a066dfc9d8c94acfd0d08b21a945d5603826885b8ac6496266433258cb9462f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installAugmentations\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n\\tisPurchasable,\\n\\tisUseful,\\n\\tisUsefulBladeburner,\\n\\tisUsefulCombat,\\n\\tisUsefulCompany,\\n\\tisUsefulGeneral,\\n\\tisUsefulHacking,\\n\\tisUsefulHacknet\\n} from '/augmentations/utils.js';\\nimport {getFactions} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tconst args = ns.flags([\\n\\t\\t['hacking', false],\\n\\t\\t['combat', false],\\n\\t\\t['company', false],\\n\\t\\t['hacknet', false],\\n\\t\\t['bladeburner', false],\\n\\t\\t['install', false]\\n\\t]);\\n\\t// Check criterions for determining if augmentations are useful\\n\\tconst criterions = [isUsefulGeneral];\\n\\tif (args.hacking) criterions.push(isUsefulHacking);\\n\\tif (args.combat) criterions.push(isUsefulCombat);\\n\\tif (args.company) criterions.push(isUsefulCompany);\\n\\tif (args.hacknet) criterions.push(isUsefulHacknet);\\n\\tif (args.bladeburner) criterions.push(isUsefulBladeburner);\\n\\n\\tlet augmentations = [];\\n\\tfor (let faction of getFactions()) {\\n\\t\\tfor (let aug of ns.getAugmentationsFromFaction(faction)) {\\n\\t\\t\\tif (isUseful(ns, criterions, aug) && isPurchasable(ns, faction, aug, augmentations)) {\\n\\t\\t\\t\\taugmentations.push(\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tfaction: faction,\\n\\t\\t\\t\\t\\t\\tname: aug,\\n\\t\\t\\t\\t\\t\\tprice: ns.getAugmentationPrice(aug)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tif (ns.getPlayer().hasTixApiAccess) { // Check if player has TIX API\\n\\t\\t// Check if player has any stocks\\n\\t\\tlet stocks = false;\\n\\t\\tfor (let sym of ns.stock.getSymbols()) {\\n\\t\\t\\tlet pos = ns.stock.getPosition(sym);\\n\\t\\t\\tif (pos[0] > 0 || pos[2] > 0) {\\n\\t\\t\\t\\tstocks = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Ask if player wants to sell stocks\\n\\t\\tif (stocks && await ns.prompt(`Do you want to sell all shares?`)) {\\n\\t\\t\\t// Kill stock script\\n\\t\\t\\tns.scriptKill('/stock-market/stock-market.js', 'home');\\n\\t\\t\\t// Sell all stocks\\n\\t\\t\\tfor (let sym of ns.stock.getSymbols()) {\\n\\t\\t\\t\\tns.stock.sell(sym, ns.stock.getMaxShares(sym));\\n\\t\\t\\t\\tif (ns.getPlayer().bitNodeN === 8 || ns.getOwnedSourceFiles().some(s => s.n === 8 && s.lvl > 1)) {\\n\\t\\t\\t\\t\\tns.stock.sellShort(sym, ns.stock.getMaxShares(sym));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Check if there are any purchasable augmentations\\n\\tif (augmentations.length > 0) {\\n\\t\\t// Sort augmentations according to their price\\n\\t\\taugmentations.sort((a, b) => {\\n\\t\\t\\tif (b.price > a.price) return 1;\\n\\t\\t\\telse if (a.price > b.price) return -1;\\n\\t\\t\\telse return ns.getAugmentationPrereq(b.name).length - ns.getAugmentationPrereq(a.name).length;\\n\\t\\t});\\n\\t\\t// Fit in augs before their prereqs\\n\\t\\tconst tempAugs = [];\\n\\t\\tconst coveredIndices = [];\\n\\t\\tfor (let [i, aug] of augmentations.entries()) {\\n\\t\\t\\tif (coveredIndices.includes(i)) continue;\\n\\t\\t\\tlet prereq = ns.getAugmentationPrereq(aug.name);\\n\\t\\t\\tif (prereq.length > 0) recursiveFit(ns, augmentations, tempAugs, coveredIndices, prereq[0]);\\n\\t\\t\\ttempAugs.push(aug);\\n\\t\\t}\\n\\t\\t// Deep copy augmentations\\n\\t\\taugmentations = JSON.parse(JSON.stringify(tempAugs));\\n\\t\\t// Calculate price of augs\\n\\t\\tlet stringAugs = '';\\n\\t\\tlet totalPrice = 0;\\n\\t\\tfor (let [i, aug] of augmentations.entries()) {\\n\\t\\t\\tlet updatedAugPrice = aug.price * 1.9 ** i;\\n\\t\\t\\tstringAugs += `${aug.name}: ${ns.nFormat(aug.price, '$0.000a')} (${ns.nFormat(updatedAugPrice, '$0.000a')}). `;\\n\\t\\t\\ttotalPrice += updatedAugPrice;\\n\\t\\t}\\n\\t\\t// Prompt user for buying augmentations\\n\\t\\tif (await ns.prompt(`${stringAugs}Buy augmentations for ${ns.nFormat(totalPrice, '0.000a')}?`)) {\\n\\t\\t\\tfor (let aug of augmentations) {\\n\\t\\t\\t\\tif (ns.purchaseAugmentation(aug.faction, aug.name)) {\\n\\t\\t\\t\\t\\tns.tprint(`Purchased ${aug.name} from ${aug.faction} for ${ns.nFormat(aug.price, '0.000a')}`);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.tprint(`Could not purchase ${aug.name} from ${aug.faction}`);\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Prompt user for purchasing NeuroFlux Governor\\n\\tif (await ns.prompt(`Purchase NeuroFlux Governor levels?`)) {\\n\\t\\tlet highestRepFaction;\\n\\t\\tlet highestRep = 0;\\n\\t\\tfor (let faction of getFactions()) {\\n\\t\\t\\tif (ns.getFactionRep(faction) > highestRep) {\\n\\t\\t\\t\\thighestRep = ns.getFactionRep(faction);\\n\\t\\t\\t\\thighestRepFaction = faction;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tlet counter = 0;\\n\\t\\twhile (ns.purchaseAugmentation(highestRepFaction, 'NeuroFlux Governor')) {\\n\\t\\t\\tcounter++;\\n\\t\\t}\\n\\t\\tns.tprint(`Purchased ${counter} levels of NeuroFlux Governor.`);\\n\\t}\\n\\t// Check if The Red Pill is available\\n\\tif (ns.getPlayer().factions.includes('Daedalus') &&\\n\\t\\tns.getFactionRep('Daedalus') >= 2.5e6 &&\\n\\t\\t!ns.getOwnedAugmentations(true).includes('The Red Pill')) {\\n\\t\\tif (await ns.prompt(`Purchase The Red Pill?`)) {\\n\\t\\t\\tif (ns.purchaseAugmentation('Daedalus', 'The Red Pill')) {\\n\\t\\t\\t\\tns.tprint(`Purchased The Red Pill`);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.tprint(`Could not purchase The Red Pill`);\\n\\t\\t\\t\\tns.exit();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Ask to purchase 4S market data and its TIX API\\n\\tif (ns.getPlayer().hasTixApiAccess) {\\n\\t\\tif (!ns.getPlayer().has4SDataTixApi && ns.getServerMoneyAvailable('home') >= 25e9) {\\n\\t\\t\\tif (await ns.prompt(`Purchase 4S Data TIX API?`)) ns.stock.purchase4SMarketDataTixApi();\\n\\t\\t}\\n\\t\\tif (!ns.getPlayer().has4SData && ns.getServerMoneyAvailable('home') >= 1e9) {\\n\\t\\t\\tif (await ns.prompt(`Purchase 4S Data?`)) ns.stock.purchase4SMarketData();\\n\\t\\t}\\n\\t}\\n\\t// Ask to install augmentations\\n\\tif (args.install && await ns.prompt('Install augmentations?')) {\\n\\t\\tns.installAugmentations('cortex.js');\\n\\t}\\n}\\n\\nfunction recursiveFit(ns, augmentations, tempAugs, coveredIndices, prereq) {\\n\\tlet index = augmentations.findIndex(aug => aug.name === prereq);\\n\\tif (index >= 0) { // Fit in aug before their prereq\\n\\t\\tcoveredIndices.push(index);\\n\\t\\tlet prereq = ns.getAugmentationPrereq(augmentations[index].name);\\n\\t\\tif (prereq.length > 0) recursiveFit(ns, augmentations, tempAugs, coveredIndices, prereq[0])\\n\\t\\ttempAugs.push(augmentations[index]);\\n\\t}\\n}\",\"filename\":\"/augmentations/purchase-augmentations.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///ffe16461-711a-47de-8b9d-abc3b73e61ca\",\"moduleSequenceNumber\":491},{\"filename\":\"/augmentations/utils.js\",\"url\":\"blob:file:///e136489e-6e64-46d5-83ca-123d29eab92d\",\"moduleSequenceNumber\":514},{\"filename\":\"/augmentations/purchase-augmentations.js\",\"url\":\"blob:file:///dd481d7a-bfe8-4e63-b0f0-82b598201fbf\",\"moduleSequenceNumber\":2380}],\"dependents\":[],\"ramUsage\":64.2,\"server\":\"home\",\"moduleSequenceNumber\":498,\"_hash\":\"15edb8d90bc4681e3c936d58821bbb62a2340e51ccbdbf99c549d27ae6c0631e\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.purchase4SMarketDataTixApi\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchase4SMarketData\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"installAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst programs = ['ServerProfiler.exe', 'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe'];\\n\\tfor (let program of programs) {\\n\\t\\tif (ns.createProgram(program)) {\\n\\t\\t\\twhile (ns.isBusy()) {\\n\\t\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\t}\\n\\t\\t\\tns.tprint(`${program} created.`)\\n\\t\\t} else ns.tprint(`${program} already owned.`);\\n\\t}\\n}\",\"filename\":\"/automators/create-programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/automators/create-programs.js\",\"url\":\"blob:file:///779d1bbd-985c-4590-8036-1fc69eb9d86f\",\"moduleSequenceNumber\":3533}],\"dependents\":[],\"ramUsage\":7.1,\"server\":\"home\",\"moduleSequenceNumber\":499,\"_hash\":\"23bf50230925b528f8afcd5a82ff485a028f337b2a40df5857995964a82f1de7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":5},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst crime = ns.args[0];\\n\\tconst interval = 100;\\n\\twhile (true) {\\n\\t\\tns.tail(); // Necessary to exit script\\n\\t\\tawait ns.sleep(ns.commitCrime(crime) + interval);\\n\\t}\\n}\",\"filename\":\"/automators/crime.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/automators/crime.js\",\"url\":\"blob:file:///f9df655a-412e-4e24-bf73-39403c375e85\",\"moduleSequenceNumber\":941}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":500,\"_hash\":\"5afe747a7e7b9f2069722291907b20105f3f0cdb3673bb7d3c9d4b5aa65de498\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['str', false],\\n\\t\\t['def', false],\\n\\t\\t['dex', false],\\n\\t\\t['agi', false],\\n\\t\\t['all', false],\\n\\t\\t['gym', 'Powerhouse Gym'],\\n\\t\\t['level', 0]\\n\\t]);\\n\\n\\tif (args.gym === 'Crush Fitness Gym' || args.gym === 'Snap Fitness Gym') ns.travelToCity('Aevum');\\n\\telse if (args.gym === 'Iron Gym' || args.gym === 'Powerhouse Gym') ns.travelToCity('Sector 12');\\n\\telse if (args.gym === 'Millenium Fitness Gym') ns.travelToCity('Volhaven');\\n\\telse {\\n\\t\\tns.tprint(`Invalid gym.`);\\n\\t\\tns.exit();\\n\\t}\\n\\n\\tif (args.str || args.all) await workOutStr(ns, args.gym, args.level);\\n\\tif (args.def || args.all) await workOutDef(ns, args.gym, args.level);\\n\\tif (args.dex || args.all) await workOutDex(ns, args.gym, args.level);\\n\\tif (args.agi || args.all) await workOutAgi(ns, args.gym, args.level);\\n}\\n\\nasync function workOutStr(ns, gym, level) {\\n\\tns.gymWorkout(gym, 'str');\\n\\twhile (ns.getPlayer().strength < level) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\\n\\nasync function workOutDef(ns, gym, level) {\\n\\tns.gymWorkout(gym, 'def');\\n\\twhile (ns.getPlayer().defense < level) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\\n\\nasync function workOutDex(ns, gym, level) {\\n\\tns.gymWorkout(gym, 'dex');\\n\\twhile (ns.getPlayer().dexterity < level) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\\n\\nasync function workOutAgi(ns, gym, level) {\\n\\tns.gymWorkout(gym, 'agi');\\n\\twhile (ns.getPlayer().agility < level) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\",\"filename\":\"/automators/gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.1,\"server\":\"home\",\"moduleSequenceNumber\":501,\"_hash\":\"58cb574b807a84bb60647917d01b2a8cefcc141e8757655a7e7bedb174ff1896\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gymWorkout\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst args = ns.flags([\\n\\t\\t['university', 'ZB Institute of Technology'],\\n\\t\\t['course', 'Leadership'],\\n\\t\\t['level', 0]\\n\\t]);\\n\\n\\tif (args.university === 'Summit University') ns.travelToCity('Aevum');\\n\\telse if (args.university === 'Rothman University') ns.travelToCity('Sector 12');\\n\\telse if (args.university === 'ZB Institute of Technology') ns.travelToCity('Volhaven');\\n\\telse {\\n\\t\\tns.tprint(`Invalid university.`);\\n\\t\\tns.exit();\\n\\t}\\n\\n\\tif (args.course === 'Computer Science' ||\\n\\t\\targs.course === 'Data Structures' ||\\n\\t\\targs.course === 'Networks' ||\\n\\t\\targs.course === 'Algorithms') await studyHack(ns, args.university, args.course, args.level);\\n\\telse if (args.course === 'Management' ||\\n\\t\\targs.course === 'Leadership') await studyCha(ns, args.university, args.course, args.level);\\n\\telse {\\n\\t\\tns.tprint(`Invalid course.`);\\n\\t\\tns.exit();\\n\\t}\\n}\\n\\nasync function studyHack(ns, university, course, level) {\\n\\tns.universityCourse(university, course);\\n\\twhile (ns.getPlayer().hacking < level) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\\n\\nasync function studyCha(ns, university, course, level) {\\n\\tns.universityCourse(university, course);\\n\\twhile (ns.getPlayer().charisma < level) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\",\"filename\":\"/automators/university.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/automators/university.js\",\"url\":\"blob:file:///a3e141e1-c7bc-460d-8b43-7f660d324c22\",\"moduleSequenceNumber\":780}],\"dependents\":[],\"ramUsage\":7.1,\"server\":\"home\",\"moduleSequenceNumber\":502,\"_hash\":\"758cec1ad7ee460c513bf8605ced9271ec2d2fa4c0f4205c5ae4cac727d8eba7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"universityCourse\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tfor (let faction of ns.args) {\\n\\t\\tif (await ns.prompt(`Join ${faction}?`)) ns.joinFaction(faction);\\n\\t}\\n}\",\"filename\":\"/utils/join-factions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/join-factions.js\",\"url\":\"blob:file:///b98e188c-510b-4b33-acf3-c0d19373bd4f\",\"moduleSequenceNumber\":300228}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":503,\"_hash\":\"29c866dfa3854eada42152cff58ab4a049972b02b145257ef70f2da8486028aa\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"joinFaction\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {manageAndHack} from '/hacking/hack-manager.js';\\nimport {contractor} from '/utils/contractor.js';\\nimport {copyScriptsToAll, getAccessibleServers, printBoth, promptScriptRunning} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\t// Copy necessary scripts to all servers\\n\\tawait copyScriptsToAll(ns);\\n\\n\\tconst upgradeRamTimer = 5 * 60 * 1000; // 5 minutes\\n\\tconst upgradeCoresTimer = 5 * 60 * 1000; // 5 minutes\\n\\tconst usefulPrograms = [\\n\\t\\t['BruteSSH.exe', 50],\\n\\t\\t['FTPCrack.exe', 100],\\n\\t\\t['relaySMTP.exe', 300],\\n\\t\\t['HTTPWorm.exe', 400],\\n\\t\\t['SQLInject.exe', 800]\\n\\t];\\n\\n\\tlet contractorOnline = true;\\n\\tlet askedFactions = [];\\n\\tlet upgradeRamTime = upgradeRamTimer;\\n\\tlet upgradeCoresTime = upgradeCoresTimer;\\n\\tlet player = ns.getPlayer();\\n\\n\\t// Stock market manager\\n\\tif (player.has4SDataTixApi && !ns.isRunning('/stock-market/stock-market.js', 'home') &&\\n\\t\\tawait ns.prompt(`Start stock market manager?`)) {\\n\\t\\tns.exec('/stock-market/stock-market.js', 'home');\\n\\t\\tprintBoth(ns, `Started stock market manager`);\\n\\t}\\n\\n\\t// Gang manager\\n\\tif ((player.bitNodeN === 2 || (ns.getOwnedSourceFiles().some(s => s.n === 2 && s.lvl >= 1) &&\\n\\t\\tns.heart.break() <= -54e3)) && ns.gang.inGang() && !(ns.isRunning('/gang/combat-gang.js', 'home') ||\\n\\t\\tns.isRunning('/gang/hacking-gang.js', 'home')) && await ns.prompt(`Start gang manager?`)) {\\n\\t\\tif (ns.gang.getGangInformation().isHacking) ns.exec('/gang/hacking-gang.js', 'home');\\n\\t\\telse ns.exec('/gang/combat-gang.js', 'home');\\n\\t\\tprintBoth(ns, `Started gang manager`);\\n\\t}\\n\\n\\t// Corp manager\\n\\tif ((player.bitNodeN === 3 || (ns.getOwnedSourceFiles().some(s => s.n === 3 && s.lvl >= 1))) &&\\n\\t\\tplayer.hasCorporation && !ns.isRunning('/corporation/autopilot.js', 'home') && await ns.prompt(`Start corp manager?`)) {\\n\\t\\tns.exec('/corporation/autopilot.js', 'home');\\n\\t\\tprintBoth(ns, `Started corp manager`);\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tplayer = ns.getPlayer();\\n\\n\\t\\t// UI\\n\\t\\tns.exec('/ui/overview.js', 'home');\\n\\n\\t\\t// Heal player\\n\\t\\tif (player.hp < player.max_hp) {\\n\\t\\t\\tlet cost = ns.hospitalize();\\n\\t\\t\\tprintBoth(ns, `Player hospitalized for ${ns.nFormat(cost, '$0.000a')}`);\\n\\t\\t}\\n\\n\\t\\t// Contract solver (disables itself if any solution was incorrect)\\n\\t\\tif (contractorOnline) contractorOnline = contractor(ns);\\n\\n\\t\\t// Purchase TOR\\n\\t\\tif (ns.purchaseTor()) printBoth(ns, `Purchased TOR router`);\\n\\t\\t// Purchase only useful programs\\n\\t\\tif (player.tor) {\\n\\t\\t\\tfor (let [program, hackingLevel] of usefulPrograms) {\\n\\t\\t\\t\\tif (!ns.fileExists(program) && player.hacking >= hackingLevel) {\\n\\t\\t\\t\\t\\tif (ns.purchaseProgram(program)) printBoth(ns, `Purchased ${program}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// // Upgrade home RAM\\n\\t\\t// if (ns.getUpgradeHomeRamCost() <= ns.getServerMoneyAvailable('home') &&\\n\\t\\t// \\tns.getTimeSinceLastAug() - upgradeRamTime > upgradeRamTimer &&\\n\\t\\t// \\t!promptScriptRunning(ns, 'home') && ns.getServerMaxRam('home') < 2 ** 30) {\\n\\t\\t// \\tns.exec('/utils/upgrade-home-ram.js', 'home', 1);\\n\\t\\t// \\tupgradeRamTime = ns.getTimeSinceLastAug();\\n\\t\\t// }\\n\\t\\t// // Upgrade home cores\\n\\t\\t// if (ns.getUpgradeHomeCoresCost() <= ns.getServerMoneyAvailable('home') &&\\n\\t\\t// \\tns.getTimeSinceLastAug() - upgradeCoresTime > upgradeCoresTimer &&\\n\\t\\t// \\t!promptScriptRunning(ns, 'home') && ns.getServer('home').cpuCores < 8) {\\n\\t\\t// \\tns.exec('/utils/upgrade-home-cores.js', 'home', 1);\\n\\t\\t// \\tupgradeCoresTime = ns.getTimeSinceLastAug();\\n\\t\\t// }\\n\\n\\t\\t// Backdoor servers\\n\\t\\tfor (let server of getAccessibleServers(ns)) {\\n\\t\\t\\tif (!(server === 'home' || server === 'w0r1d_d43m0n' ||\\n\\t\\t\\t\\tns.getServer(server).backdoorInstalled ||\\n\\t\\t\\t\\tns.isRunning('/utils/backdoor.js', 'home', server))) {\\n\\t\\t\\t\\tns.print(`Installing backdoor on ${server}`);\\n\\t\\t\\t\\tns.exec('/utils/backdoor.js', 'home', 1, server);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Simple hack manager\\n\\t\\tmanageAndHack(ns);\\n\\n\\t\\t// Check faction invites\\n\\t\\tlet factions = ns.checkFactionInvitations().filter(faction => !askedFactions.includes(faction));\\n\\t\\tif (factions.length > 0 && !promptScriptRunning(ns, 'home')) {\\n\\t\\t\\tns.print(`Request to join ${factions}`);\\n\\t\\t\\tns.exec('/utils/join-factions.js', 'home', 1, ...factions);\\n\\t\\t\\taskedFactions = askedFactions.concat(factions); // Don't ask again\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"cortex.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///7045874a-bba8-4226-a00b-079cbbcfbae4\",\"moduleSequenceNumber\":491},{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///f2fe532b-5dee-4e2b-a0b4-c2b01df24629\",\"moduleSequenceNumber\":491},{\"filename\":\"/utils/contractor.js\",\"url\":\"blob:file:///f1fa3886-43e1-43eb-aa11-d3b9c4986037\",\"moduleSequenceNumber\":490},{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///60010170-1395-43ce-b332-a6405c3d9c48\",\"moduleSequenceNumber\":491},{\"filename\":\"/hacking/hack-manager.js\",\"url\":\"blob:file:///5119d2a6-cdba-4ef4-af76-2278f4849bfe\",\"moduleSequenceNumber\":474},{\"filename\":\"cortex.js\",\"url\":\"blob:file:///1c1f414a-5726-4f3a-a9a7-5700059ea223\",\"moduleSequenceNumber\":940}],\"dependents\":[],\"ramUsage\":52,\"server\":\"home\",\"moduleSequenceNumber\":940,\"_hash\":\"7f18fa8326af637cbac3875144fb01f69969bc9e2986856dedb97b35526bfcb3\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hospitalize\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {routeFinder} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tconst server = ns.args[0];\\n\\tconst route = routeFinder(ns, server);\\n\\tif (route) {\\n\\t\\tfor (let serv of route) {\\n\\t\\t\\tns.connect(serv);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/tools/connect.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///0a3f2363-962e-41fc-9856-ec6720780bca\",\"moduleSequenceNumber\":9048},{\"filename\":\"/tools/connect.js\",\"url\":\"blob:file:///f1e14b66-25ae-43a5-bc48-7b4e8b9f3abb\",\"moduleSequenceNumber\":9931}],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"home\",\"moduleSequenceNumber\":505,\"_hash\":\"b17a3e15d50101bb20a99629e19f87c1f2f8ca1d2cc4f7b60323548fe3f992a8\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getFactions} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\tconst factions = getFactions();\\n\\tconst args = ns.flags([\\n\\t\\t['hacking', false],\\n\\t\\t['field', false],\\n\\t\\t['security', false]\\n\\t]);\\n\\n\\tlet workType;\\n\\tif (args.hacking) workType = 'Hacking Contracts';\\n\\telse if (args.field) workType = 'Field Work';\\n\\telse if (args.security) workType = 'Security Work';\\n\\telse {\\n\\t\\tns.tprint(`Invalid work type.`);\\n\\t\\tns.exit();\\n\\t}\\n\\n\\tfor (let i = 0; i < args._.length; i += 2) {\\n\\t\\tlet faction = factions.find(faction => faction.toLowerCase() === args._[i]);\\n\\t\\tif (faction) {\\n\\t\\t\\tns.tprint(`Working for ${faction}.`);\\n\\t\\t\\twhile (ns.getFactionRep(faction) < args._[i + 1]) {\\n\\t\\t\\t\\tns.workForFaction(faction, workType, ns.isFocused());\\n\\t\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\t}\\n\\t\\t} else ns.tprint(`Could not find faction.`);\\n\\t}\\n}\",\"filename\":\"/automators/faction.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///11ca6908-0b24-4034-85de-acc1b7f1328e\",\"moduleSequenceNumber\":407},{\"filename\":\"/automators/faction.js\",\"url\":\"blob:file:///f197a9e7-59a6-4764-b5ae-7a248fbca883\",\"moduleSequenceNumber\":772}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":506,\"_hash\":\"9cac24b8a357a70e8ea58f6a7b7fed227bec230949d839d410e2e819ec2b7640\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"isFocused\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/share.js\",\"url\":\"blob:file:///09e761d5-0bd9-41ac-88f1-d90b4fc08456\",\"moduleSequenceNumber\":1241}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {copyScriptsToAll, findPlaceToRun, getAccessibleServers, getFreeRam, getScripts} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tawait copyScriptsToAll(ns);\\n\\tconst threads = Number.MAX_VALUE;\\n\\tconst scripts = getScripts();\\n\\tlet i = 0;\\n\\twhile (true) {\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\t\\tfindPlaceToRun(ns, scripts.grow, threads, freeRams, ['joesguns', 0, i]);\\n\\t\\tfindPlaceToRun(ns, scripts.weaken, threads, freeRams, ['joesguns', 0, i]);\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"/automators/exp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///ad0dddb5-7ac9-4338-87dc-5f3edef01dda\",\"moduleSequenceNumber\":8280},{\"filename\":\"/automators/exp.js\",\"url\":\"blob:file:///a8112ade-a53a-4e63-be6a-1af9f282a478\",\"moduleSequenceNumber\":9630}],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"home\",\"moduleSequenceNumber\":508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n\\tcopyScriptsToAll,\\n\\tfindPlaceToRun,\\n\\tgetAccessibleServers,\\n\\tgetFreeRam,\\n\\tgetOptimalHackable,\\n\\tgetScripts\\n} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tawait copyScriptsToAll(ns);\\n\\tconst threads = Number.MAX_VALUE;\\n\\tconst scripts = getScripts();\\n\\twhile (true) {\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet hackables = getOptimalHackable(ns, servers);\\n\\t\\tlet [freeRams, filteredHackables] = getFreeRam(ns, servers, hackables, true);\\n\\t\\tfor (let target of filteredHackables.reverse()) {\\n\\t\\t\\tfindPlaceToRun(ns, scripts.share, threads, freeRams);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"/automators/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///74b88e54-fff6-4168-8ad3-e7090dea0e40\",\"moduleSequenceNumber\":640},{\"filename\":\"/automators/share.js\",\"url\":\"blob:file:///d5958887-2bc9-4dd1-b4f1-8e9c96bb1b61\",\"moduleSequenceNumber\":1240}],\"dependents\":[],\"ramUsage\":14.3,\"server\":\"home\",\"moduleSequenceNumber\":509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tns.disableLog('ALL')\\n\\n\\tif (!ns.gang.inGang()) {\\n\\t\\tns.tprint(`You need to join a gang first.`);\\n\\t\\tns.exit();\\n\\t} else if (ns.gang.getGangInformation().isHacking) {\\n\\t\\tns.tprint(`Not a combat gang.`);\\n\\t\\tns.exit();\\n\\t}\\n\\n\\tconst gangJoined = ns.gang.getGangInformation().faction;\\n\\tconst otherGangs = Object.entries(ns.gang.getOtherGangInformation()).filter(([faction]) => faction !== gangJoined);\\n\\tconst strength_level = 500;\\n\\n\\tlet c = 0;\\n\\twhile (true) {\\n\\t\\t// Check for recruits\\n\\t\\tif (ns.gang.canRecruitMember()) {\\n\\t\\t\\tlet name = 'gangsta-' + c;\\n\\t\\t\\tns.gang.recruitMember(name);\\n\\t\\t\\tns.gang.setMemberTask(name, 'Train Combat');\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\t// Get gang info\\n\\t\\tconst myGang = ns.gang.getGangInformation();\\n\\t\\tconst gangRoster = Array.from(ns.gang.getMemberNames(), (name) => ns.gang.getMemberInformation(name));\\n\\t\\t//Update Log\\n\\t\\tns.clearLog();\\n\\t\\tns.print(`Gang: ${gangJoined}`);\\n\\t\\tns.print(`Gang Warfare: ${myGang.territoryWarfareEngaged}`);\\n\\t\\tfor (let gangMember of gangRoster) ns.print(`${gangMember.name} - ${gangMember.task}`);\\n\\t\\t// Check for ascensions\\n\\t\\tfor (let gangMember of gangRoster) {\\n\\t\\t\\tif (!ns.gang.getAscensionResult(gangMember.name)) continue;\\n\\t\\t\\tif (ns.gang.getAscensionResult(gangMember.name).str >= asc_mult(gangMember)) ns.gang.ascendMember(gangMember.name);\\n\\t\\t}\\n\\t\\t// Check for equipment purchases\\n\\t\\tpurchaseEquipment(ns, gangRoster, strength_level);\\n\\t\\t// Assign tasks\\n\\t\\tconst clashChance = Array.from(otherGangs, ([faction]) => ns.gang.getChanceToWinClash(faction));\\n\\t\\tlet warfareCounter = 0;\\n\\t\\tfor (let gangMember of gangRoster) {\\n\\t\\t\\tif (gangMember.str < strength_level) ns.gang.setMemberTask(gangMember.name, 'Train Combat');\\n\\t\\t\\telse if (myGang.wantedPenalty < 0.9) ns.gang.setMemberTask(gangMember.name, 'Vigilante Justice');\\n\\t\\t\\telse if (gangRoster.length < 12) ns.gang.setMemberTask(gangMember.name, 'Terrorism');\\n\\t\\t\\telse if (clashChance.some(s => s < 0.8) && myGang.territory < 1 && warfareCounter < 6) {\\n\\t\\t\\t\\tns.gang.setMemberTask(gangMember.name, 'Territory Warfare');\\n\\t\\t\\t\\twarfareCounter++;\\n\\t\\t\\t} else ns.gang.setMemberTask(gangMember.name, 'Human Trafficking');\\n\\t\\t}\\n\\t\\t// Territory warfare checks\\n\\t\\tif (myGang.territory < 1 && fightForTerritory(ns, otherGangs)) ns.gang.setTerritoryWarfare(true);\\n\\t\\telse ns.gang.setTerritoryWarfare(false);\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\nfunction purchaseEquipment(ns, gangRoster, strength_level) {\\n\\tconst allEquipment = ns.gang.getEquipmentNames();\\n\\tconst strEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).str).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\tconst defEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).def).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\tconst dexEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).dex).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\tconst agiEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).agi).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\tconst chaEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).cha).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\tconst hackEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).hack).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\tconst orderedEquipment = [...new Set([...strEquipment, ...defEquipment, ...dexEquipment, ...agiEquipment, ...chaEquipment, ...hackEquipment])];\\n\\tfor (let gangMember of gangRoster) {\\n\\t\\tif (gangMember.str < strength_level) continue;\\n\\t\\tfor (let equipment of orderedEquipment) {\\n\\t\\t\\tif (!gangMember.upgrades.includes(equipment) && !gangMember.augmentations.includes(equipment) &&\\n\\t\\t\\t\\t!ns.gang.purchaseEquipment(gangMember.name, equipment)) break;\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction fightForTerritory(ns, otherGangs) {\\n\\tlet averageWinChance = 0;\\n\\tfor (let [faction, info] of otherGangs) {\\n\\t\\taverageWinChance += info.territory * ns.gang.getChanceToWinClash(faction);\\n\\t}\\n\\treturn averageWinChance / (1 - ns.gang.getGangInformation().territory) >= 0.7;\\n}\\n\\nfunction asc_mult(gangMember) {\\n\\treturn Math.max(1.6 + (1 - gangMember.str_asc_mult) / 58, 1.1);\\n}\",\"filename\":\"/gang/combat-gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/gang/combat-gang.js\",\"url\":\"blob:file:///631cbfb8-3c2d-47b7-aa4a-00fd1180ce95\",\"moduleSequenceNumber\":165114}],\"dependents\":[],\"ramUsage\":35.7,\"server\":\"home\",\"moduleSequenceNumber\":510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getOtherGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getChanceToWinClash\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setTerritoryWarfare\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentStats\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tns.disableLog('ALL')\\n\\n\\tif (!ns.gang.inGang()) {\\n\\t\\tns.tprint(`You need to join a gang first.`);\\n\\t\\tns.exit();\\n\\t} else if (!ns.gang.getGangInformation().isHacking) {\\n\\t\\tns.tprint(`Not a hacking gang.`);\\n\\t\\tns.exit();\\n\\t}\\n\\n\\tconst gangJoined = ns.gang.getGangInformation().faction;\\n\\tconst hack_level = 500;\\n\\n\\tlet c = 0;\\n\\twhile (true) {\\n\\t\\t// Check for recruits\\n\\t\\tif (ns.gang.canRecruitMember()) {\\n\\t\\t\\tlet name = 'hackerman-' + c;\\n\\t\\t\\tns.gang.recruitMember(name);\\n\\t\\t\\tns.gang.setMemberTask(name, 'Train Hacking');\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\t// Get gang info\\n\\t\\tconst myGang = ns.gang.getGangInformation();\\n\\t\\tconst gangRoster = Array.from(ns.gang.getMemberNames(), (name) => ns.gang.getMemberInformation(name));\\n\\t\\t//Update Log\\n\\t\\tns.clearLog();\\n\\t\\tns.print(`Gang: ${gangJoined}`);\\n\\t\\tns.print(`Gang Warfare: ${myGang.territoryWarfareEngaged}`);\\n\\t\\tfor (let gangMember of gangRoster) ns.print(`${gangMember.name} - ${gangMember.task}`);\\n\\t\\t// Check for ascensions\\n\\t\\tfor (let gangMember of gangRoster) {\\n\\t\\t\\tif (!ns.gang.getAscensionResult(gangMember.name)) continue;\\n\\t\\t\\tif (ns.gang.getAscensionResult(gangMember.name).hack >= asc_mult(gangMember)) ns.gang.ascendMember(gangMember.name);\\n\\t\\t}\\n\\t\\t// Check for equipment purchases\\n\\t\\tpurchaseEquipment(ns, gangRoster, hack_level);\\n\\t\\t// Assign tasks\\n\\t\\tfor (let gangMember of gangRoster) {\\n\\t\\t\\tif (gangMember.hack < hack_level) ns.gang.setMemberTask(gangMember.name, 'Train Hacking');\\n\\t\\t\\telse if (myGang.wantedPenalty < 0.9) ns.gang.setMemberTask(gangMember.name, 'Ethical Hacking');\\n\\t\\t\\telse if (gangRoster.length < 12) ns.gang.setMemberTask(gangMember.name, 'Cyberterrorism');\\n\\t\\t\\telse ns.gang.setMemberTask(gangMember.name, 'Money Laundering');\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\nfunction purchaseEquipment(ns, gangRoster, hack_level) {\\n\\tconst allEquipment = ns.gang.getEquipmentNames();\\n\\tconst hackEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).hack).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\tconst chaEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).cha).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\tconst orderedEquipment = [...new Set([...hackEquipment, ...chaEquipment])];\\n\\tfor (let gangMember of gangRoster) {\\n\\t\\tif (gangMember.hack < hack_level) continue;\\n\\t\\tfor (let equipment of orderedEquipment) {\\n\\t\\t\\tif (!gangMember.upgrades.includes(equipment) && !gangMember.augmentations.includes(equipment) &&\\n\\t\\t\\t\\t!ns.gang.purchaseEquipment(gangMember.name, equipment)) break;\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction asc_mult(gangMember) {\\n\\treturn Math.max(1.6 + (1 - gangMember.hack_asc_mult) / 58, 1.1);\\n}\",\"filename\":\"/gang/hacking-gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/gang/hacking-gang.js\",\"url\":\"blob:file:///aa3e5ada-b21f-4103-ba61-daf5ca6dae45\",\"moduleSequenceNumber\":143734}],\"dependents\":[],\"ramUsage\":27.7,\"server\":\"home\",\"moduleSequenceNumber\":511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentStats\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\tconst doc = eval('document');\\n\\tconst hook0 = doc.getElementById('overview-extra-hook-0');\\n\\tconst hook1 = doc.getElementById('overview-extra-hook-1');\\n\\twhile (true) {\\n\\t\\ttry {\\n\\t\\t\\tconst headers = [];\\n\\t\\t\\tconst values = [];\\n\\t\\t\\theaders.push(`Income\\\\u00A0`);\\n\\t\\t\\tvalues.push(`${ns.nFormat(ns.getScriptIncome()[0], '$0.000a')}`);\\n\\t\\t\\theaders.push(`Karma`);\\n\\t\\t\\tvalues.push(ns.heart.break());\\n\\t\\t\\thook0.innerText = headers.join('\\\\n');\\n\\t\\t\\thook1.innerText = values.join('\\\\n');\\n\\t\\t} catch (err) {\\n\\t\\t\\tns.print(`ERROR: Update Skipped: ${String(err)}`);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"/ui/overview.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/ui/overview.js\",\"url\":\"blob:file:///f0b6f4eb-9930-4c36-8239-1716d9300fb6\",\"moduleSequenceNumber\":939}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":939,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const fs = require('fs');\\nconst path = require('path');\\nconst http = require('https');\\n\\nfunction getFilesRecursive(dir, arrayOfFiles) {\\n\\ttry {\\n\\t\\tlet files = fs.readdirSync(dir);\\n\\t\\tarrayOfFiles = arrayOfFiles || [];\\n\\t\\tfiles.forEach(function (file) {\\n\\t\\t\\tlet subfile = path.join(dir, file);\\n\\t\\t\\tif (fs.statSync(subfile).isDirectory()) {\\n\\t\\t\\t\\tarrayOfFiles = getFilesRecursive(subfile, arrayOfFiles);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tarrayOfFiles.push(subfile);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\treturn arrayOfFiles.filter(file => (path.extname(file) === '.txt' || path.extname(file) === '.js'));\\n\\t} catch (err) {\\n\\t\\tconsole.log(err);\\n\\t}\\n}\\n\\nfunction getFiles(dir = __dirname) {\\n\\tlet files = getFilesRecursive(`${dir}`);\\n\\tlet relativeFiles = [];\\n\\tfiles.forEach(file => relativeFiles.push(path.relative(dir, file).replace(/\\\\\\\\/g, '/')));\\n\\treturn relativeFiles;\\n}\\n\\nfunction writeToFile(filename, str) {\\n\\tfs.writeFile(filename, str, (err) => {\\n\\t\\tif (err) console.log(err);\\n\\t\\telse console.log(\\\"File written successfully\\\");\\n\\t});\\n}\\n\\nconst dir = path.join(__dirname, '../');\\nconst files = getFiles(`${dir}`);\\nconst str = files.join('\\\\n');\\nwriteToFile('scripts.txt', str);\\n\\nconst index = fs.createWriteStream('../types/index.d.ts');\\nhttp.get('https://raw.githubusercontent.com/danielyxie/bitburner/dev/src/ScriptEditor/NetscriptDefinitions.d.ts',\\n\\tfunction (response) {\\n\\t\\tresponse.pipe(index);\\n\\t});\",\"filename\":\"/build/update.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function isUseful(ns, criterions, name) {\\n\\tfor (let criterion of criterions) {\\n\\t\\tif (criterion(ns, name)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function isPurchasable(ns, faction, name, augmentations) {\\n\\tlet facRep = ns.getFactionRep(faction);\\n\\tlet price = ns.getAugmentationPrice(name);\\n\\tlet repReq = ns.getAugmentationRepReq(name);\\n\\n\\treturn !(facRep < repReq || // Faction reputation prerequisite\\n\\t\\tns.getServerMoneyAvailable('home') < price || // Check if it is able to be bought\\n\\t\\taugmentations.some(aug => aug.name === name) || // Check to see if it can be bought from another faction\\n\\t\\tns.getOwnedAugmentations(true).includes(name) // Check if already bought\\n\\t);\\n}\\n\\n\",\"filename\":\"/augmentations/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":17.7,\"server\":\"home\",\"moduleSequenceNumber\":514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function getJobs() {\\n\\treturn ['Operations', 'Engineer', 'Business', 'Management', 'Research & Development'];\\n}\",\"filename\":\"/corporation/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getCompanies} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\tconst companies = getCompanies();\\n\\tconst args = ns.flags([\\n\\t\\t['agent', false],\\n\\t\\t['business', false],\\n\\t\\t['it', false],\\n\\t\\t['security', false],\\n\\t\\t['software', false],\\n\\t\\t['software_consultant', false],\\n\\t\\t['employee', false],\\n\\t\\t['part_time_employee', false],\\n\\t\\t['waiter', false],\\n\\t\\t['part_time_waiter', false]\\n\\t]);\\n\\n\\tlet workType;\\n\\tif (args.agent) workType = 'Agent';\\n\\telse if (args.business) workType = 'Business';\\n\\telse if (args.it) workType = 'IT';\\n\\telse if (args.security) workType = 'Security';\\n\\telse if (args.software) workType = 'software';\\n\\telse if (args.software_consultant) workType = 'Software Consultant';\\n\\telse if (args.employee) workType = 'Employee';\\n\\telse if (args.part_time_employee) workType = 'part-time Employee';\\n\\telse if (args.waiter) workType = 'Waiter';\\n\\telse if (args.part_time_waiter) workType = 'part-time Waiter';\\n\\telse {\\n\\t\\tns.tprint(`Invalid work type.`);\\n\\t\\tns.exit();\\n\\t}\\n\\n\\tfor (let i = 0; i < args._.length; i += 2) {\\n\\t\\tlet company = companies.find(company => company.toLowerCase() === args._[i]);\\n\\t\\tif (company) {\\n\\t\\t\\tns.tprint(`Working for ${company}.`);\\n\\t\\t\\twhile (ns.getCompanyRep(company) < args._[i + 1]) {\\n\\t\\t\\t\\tns.applyToCompany(company, workType);\\n\\t\\t\\t\\tns.workForCompany(company, ns.isFocused());\\n\\t\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\t}\\n\\t\\t} else ns.tprint(`Could not find company.`);\\n\\t}\\n}\",\"filename\":\"/automators/company.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.7,\"server\":\"home\",\"moduleSequenceNumber\":516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getCompanyRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"applyToCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"workForCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"isFocused\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Requires WarehouseAPI and OfficeAPI\\nimport {getJobs} from '/corporation/utils.js';\\nimport {getCities} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\t// Check if script works\\n\\tconst sourceFiles = ns.getOwnedSourceFiles();\\n\\tif (sourceFiles[3] !== 3 && !ns.corporation.hasUnlockUpgrade('Warehouse API')) throw new Error(`This script requires the Warehouse API`);\\n\\tif (sourceFiles[3] !== 3 && !ns.corporation.hasUnlockUpgrade('Office API')) throw new Error(`This script requires the Office API`);\\n\\tif (ns.getBitNodeMultipliers().CorporationValuation !== 1) throw new Error(`This script does not know how to deal with BitNodes that have a valuation modifier`);\\n\\t// Set up\\n\\tconst cities = getCities();\\n\\tconst jobs = getJobs();\\n\\tconst division1 = 'Agriculture';\\n\\tconst division2 = 'Tobacco';\\n\\t// Part 1\\n\\tawait part1(ns, cities, jobs, division1);\\n\\t// Part 2\\n\\tawait part2(ns, cities, jobs, division1);\\n\\t// Part 3\\n\\tawait part3(ns, cities, jobs, division2);\\n\\t// Autopilot\\n\\tawait autopilot(ns, cities, jobs, division2);\\n}\\n\\nexport async function part1(ns, cities, jobs, division) {\\n\\tconst corp = ns.corporation;\\n\\t// Expand to division and get smart supply\\n\\tcorp.expandIndustry('Agriculture', division);\\n\\tcorp.unlockUpgrade('Smart Supply');\\n\\tcorp.setSmartSupply(division, 'Sector-12', true);\\n\\tfor (let city of cities) {\\n\\t\\t// Purchase warehouse\\n\\t\\tcorp.purchaseWarehouse(division, city);\\n\\t\\t// Hire three employees\\n\\t\\tfor (let i = 0; i < 3; i++) {\\n\\t\\t\\tcorp.hireEmployee(division, city);\\n\\t\\t}\\n\\t\\tawait corp.setAutoJobAssignment(division, city, 'Operations', 1);\\n\\t\\tawait corp.setAutoJobAssignment(division, city, 'Engineer', 1);\\n\\t\\tawait corp.setAutoJobAssignment(division, city, 'Business', 1);\\n\\t\\t// Upgrade warehouse twice\\n\\t\\tfor (let i = 0; i < 2; i++) {\\n\\t\\t\\tcorp.upgradeWarehouse(division, city);\\n\\t\\t}\\n\\t\\t// Start selling material\\n\\t\\tcorp.sellMaterial(division, city, 'Food', 'MAX', 'MP');\\n\\t\\tcorp.sellMaterial(division, city, 'Plants', 'MAX', 'MP');\\n\\t}\\n\\t// Hire advert\\n\\tcorp.hireAdVert(division);\\n}\\n\\nexport async function part2(ns, cities, jobs, division) {\\n\\tconst corp = ns.corporation;\\n\\t// Get upgrades\\n\\tfor (let i = 0; i < 2; i++) {\\n\\t\\tcorp.levelUpgrade('FocusWires');\\n\\t\\tcorp.levelUpgrade('Neural Accelerators');\\n\\t\\tcorp.levelUpgrade('Speech Processor Implants');\\n\\t\\tcorp.levelUpgrade('Speech Processor Implants');\\n\\t\\tcorp.levelUpgrade('Smart Factories');\\n\\t}\\n\\t// Boost production\\n\\tfor (let city of cities) {\\n\\t\\tcorp.buyMaterial(division, city, 'Hardware', 12.5);\\n\\t\\tcorp.buyMaterial(division, city, 'AI Cores', 7.5);\\n\\t\\tcorp.buyMaterial(division, city, 'Real Estate', 2700);\\n\\t\\twhile (true) {\\n\\t\\t\\tlet hardware = corp.getMaterial(division, city, 'Hardware');\\n\\t\\t\\tlet aiCores = corp.getMaterial(division, city, 'AI Cores');\\n\\t\\t\\tlet realEstate = corp.getMaterial(division, city, 'Real Estate');\\n\\n\\t\\t\\tif (hardware.qty >= 125) corp.buyMaterial(division, city, 'Hardware', 0);\\n\\t\\t\\tif (aiCores.qty >= 75) corp.buyMaterial(division, city, 'AI Cores', 0);\\n\\t\\t\\tif (realEstate.qty >= 27000) corp.buyMaterial(division, city, 'Real Estate', 0);\\n\\t\\t\\tif (hardware.qty >= 125 && aiCores.qty >= 75 && realEstate.qty >= 27000) break;\\n\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t}\\n\\t// Wait for investment offer of $210b\\n\\twhile (corp.getInvestmentOffer() < 210e9) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tcorp.acceptInvestmentOffer();\\n\\t// Upgrade office size to nine\\n\\tfor (let city of cities) {\\n\\t\\tcorp.upgradeOfficeSize(division, city, 6);\\n\\t\\tawait corp.setAutoJobAssignment(division, city, 'Operations', 2);\\n\\t\\tawait corp.setAutoJobAssignment(division, city, 'Engineer', 2);\\n\\t\\tawait corp.setAutoJobAssignment(division, city, 'Business', 1);\\n\\t\\tawait corp.setAutoJobAssignment(division, city, 'Management', 2);\\n\\t\\tawait corp.setAutoJobAssignment(division, city, 'Research & Development', 2);\\n\\t}\\n\\t// Upgrade factories and storage\\n\\tfor (let i = 0; i < 10; i++) {\\n\\t\\tcorp.levelUpgrade('Smart Factories');\\n\\t\\tcorp.levelUpgrade('Smart Storage');\\n\\t}\\n\\t// Upgrade warehouses\\n\\tfor (let city of cities) {\\n\\t\\tfor (let i = 0; i < 7; i++) {\\n\\t\\t\\tcorp.upgradeWarehouse(division, city);\\n\\t\\t}\\n\\t}\\n\\t// Boost production\\n\\tfor (let city of cities) {\\n\\t\\tcorp.buyMaterial(division, city, 'Hardware', 267.5);\\n\\t\\tcorp.buyMaterial(division, city, 'Robots', 9.6);\\n\\t\\tcorp.buyMaterial(division, city, 'AI Cores', 244.5);\\n\\t\\tcorp.buyMaterial(division, city, 'Real Estate', 11940);\\n\\t\\twhile (true) {\\n\\t\\t\\tlet hardware = corp.getMaterial(division, city, 'Hardware');\\n\\t\\t\\tlet robots = corp.getMaterial(division, city, 'Robots');\\n\\t\\t\\tlet aiCores = corp.getMaterial(division, city, 'AI Cores');\\n\\t\\t\\tlet realEstate = corp.getMaterial(division, city, 'Real Estate');\\n\\n\\t\\t\\tif (hardware.qty >= 2800) corp.buyMaterial(division, city, 'Hardware', 0);\\n\\t\\t\\tif (robots.qty >= 96) corp.buyMaterial(division, city, 'Robots', 0);\\n\\t\\t\\tif (aiCores.qty >= 2520) corp.buyMaterial(division, city, 'AI Cores', 0);\\n\\t\\t\\tif (realEstate.qty >= 146400) corp.buyMaterial(division, city, 'Real Estate', 0);\\n\\t\\t\\tif (hardware.qty >= 2800 && robots.qty >= 96 && aiCores.qty >= 2520 && realEstate.qty >= 146400) break;\\n\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t}\\n\\t// Wait for investment offer of $5t\\n\\twhile (corp.getInvestmentOffer() < 5e12) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tcorp.acceptInvestmentOffer();\\n\\t// Upgrade warehouses\\n\\tfor (let city of cities) {\\n\\t\\tfor (let i = 0; i < 9; i++) {\\n\\t\\t\\tcorp.upgradeWarehouse(division, city);\\n\\t\\t}\\n\\t}\\n\\t// Boost production\\n\\tfor (let city of cities) {\\n\\t\\tcorp.buyMaterial(division, city, 'Hardware', 650);\\n\\t\\tcorp.buyMaterial(division, city, 'Robots', 63);\\n\\t\\tcorp.buyMaterial(division, city, 'AI Cores', 375);\\n\\t\\tcorp.buyMaterial(division, city, 'Real Estate', 8400);\\n\\t\\twhile (true) {\\n\\t\\t\\tlet hardware = corp.getMaterial(division, city, 'Hardware');\\n\\t\\t\\tlet robots = corp.getMaterial(division, city, 'Robots');\\n\\t\\t\\tlet aiCores = corp.getMaterial(division, city, 'AI Cores');\\n\\t\\t\\tlet realEstate = corp.getMaterial(division, city, 'Real Estate');\\n\\n\\t\\t\\tif (hardware.qty >= 9300) corp.buyMaterial(division, city, 'Hardware', 0);\\n\\t\\t\\tif (robots.qty >= 726) corp.buyMaterial(division, city, 'Robots', 0);\\n\\t\\t\\tif (aiCores.qty >= 6270) corp.buyMaterial(division, city, 'AI Cores', 0);\\n\\t\\t\\tif (realEstate.qty >= 230400) corp.buyMaterial(division, city, 'Real Estate', 0);\\n\\t\\t\\tif (hardware.qty >= 9300 && robots.qty >= 726 && aiCores.qty >= 6270 && realEstate.qty >= 230400) break;\\n\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport async function part3(ns, cities, jobs, division) {\\n\\tconst corp = ns.corporation;\\n\\t// Expand into tobacco industry\\n\\tcorp.expandIndustry('Tobacco', division);\\n\\tfor (let city of cities) {\\n\\t\\t// Purchase warehouse\\n\\t\\tcorp.purchaseWarehouse(division, city);\\n\\t\\tif (city === 'Aevum') {\\n\\t\\t\\t// Upgrade Office size to 60\\n\\t\\t\\tcorp.upgradeOfficeSize(division, city, 27);\\n\\t\\t\\t// Hire 60 employees\\n\\t\\t\\tfor (let i = 0; i < 30; i++) {\\n\\t\\t\\t\\tcorp.hireEmployee(division, city);\\n\\t\\t\\t}\\n\\t\\t\\tawait corp.setAutoJobAssignment(division, city, 'Operations', 6);\\n\\t\\t\\tawait corp.setAutoJobAssignment(division, city, 'Engineer', 6);\\n\\t\\t\\tawait corp.setAutoJobAssignment(division, city, 'Business', 6);\\n\\t\\t\\tawait corp.setAutoJobAssignment(division, city, 'Management', 6);\\n\\t\\t\\tawait corp.setAutoJobAssignment(division, city, 'Research & Development', 6);\\n\\t\\t} else {\\n\\t\\t\\t// Upgrade Office size to nine\\n\\t\\t\\tcorp.upgradeOfficeSize(division, city, 6);\\n\\t\\t\\t// Hire nine employees\\n\\t\\t\\tfor (let i = 0; i < 9; i++) {\\n\\t\\t\\t\\tcorp.hireEmployee(division, city);\\n\\t\\t\\t}\\n\\t\\t\\tawait corp.setAutoJobAssignment(division, city, 'Operations', 2);\\n\\t\\t\\tawait corp.setAutoJobAssignment(division, city, 'Engineer', 2);\\n\\t\\t\\tawait corp.setAutoJobAssignment(division, city, 'Business', 1);\\n\\t\\t\\tawait corp.setAutoJobAssignment(division, city, 'Management', 2);\\n\\t\\t\\tawait corp.setAutoJobAssignment(division, city, 'Research & Development', 2);\\n\\t\\t}\\n\\t}\\n\\t// Start making Tobacco v1\\n\\tif (!corp.getProduct(division, 'Tobacco v1')) corp.makeProduct(division, 'Aevum', 'Tobacco v1', 1e9, 1e9);\\n\\t// Get upgrades\\n\\twhile (true) {\\n\\t\\tif (corp.getUpgradeLevel('Wilson Analytics') < 14) corp.levelUpgrade('Wilson Analytics');\\n\\t\\tif (corp.getUpgradeLevel('FocusWires') < 20) corp.levelUpgrade('FocusWires');\\n\\t\\tif (corp.getUpgradeLevel('Neural Accelerators') < 20) corp.levelUpgrade('Neural Accelerators');\\n\\t\\tif (corp.getUpgradeLevel('Speech Processor Implants') < 20) corp.levelUpgrade('Speech Processor Implants');\\n\\t\\tif (corp.getUpgradeLevel('Nuoptimal Nootropic Injector Implants') < 20) corp.levelUpgrade('Nuoptimal Nootropic Injector Implants');\\n\\n\\t\\tif (corp.getUpgradeLevel('Wilson Analytics') >= 14 &&\\n\\t\\t\\tcorp.getUpgradeLevel('FocusWires') >= 20 &&\\n\\t\\t\\tcorp.getUpgradeLevel('Neural Accelerators') >= 20 &&\\n\\t\\t\\tcorp.getUpgradeLevel('Speech Processor Implants') >= 20 &&\\n\\t\\t\\tcorp.getUpgradeLevel('Nuoptimal Nootropic Injector Implants') >= 20) break;\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\t// Wait for Tobacco v1 to finish\\n\\twhile (corp.getProduct(division, 'Tobacco v1').developmentProgress < 100) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\t// Start selling Tobacco v1 in all cities\\n\\tcorp.sellProduct(division, 'Aevum', 'Tobacco v1', 'MAX', 'MP*2', true);\\n\\t// Start making Tobacco v2\\n\\tif (!corp.getProduct(division, 'Tobacco v2')) corp.makeProduct(division, 'Aevum', 'Tobacco v2', 1e9, 1e9);\\n\\t// Upgrade Aevum office size\\n\\twhile (corp.getOffice(division, 'Aevum').size < 60) {\\n\\t\\tcorp.upgradeOfficeSize(division, 'Aevum', 30);\\n\\t\\t// Start selling Tobacco v2 and start making Tobacco v3 if it finishes\\n\\t\\tif (corp.getProduct(division, 'Tobacco v2').developmentProgress === 100) {\\n\\t\\t\\tcorp.sellProduct(division, 'Aevum', 'Tobacco v2', 'MAX', 'MP*4', true);\\n\\t\\t\\tif (!corp.getProduct(division, 'Tobacco v3')) corp.makeProduct(division, 'Aevum', 'Tobacco v3', 1e9, 1e9);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tawait corp.setAutoJobAssignment(division, 'Aevum', 'Operations', 12);\\n\\tawait corp.setAutoJobAssignment(division, 'Aevum', 'Engineer', 12);\\n\\tawait corp.setAutoJobAssignment(division, 'Aevum', 'Business', 12);\\n\\tawait corp.setAutoJobAssignment(division, 'Aevum', 'Management', 12);\\n\\tawait corp.setAutoJobAssignment(division, 'Aevum', 'Research & Development', 12);\\n\\t// Wait for Tobacco v2 to finish\\n\\twhile (corp.getProduct(division, 'Tobacco v2').developmentProgress < 100) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tcorp.sellProduct(division, 'Aevum', 'Tobacco v2', 'MAX', 'MP*4', true);\\n\\tif (!corp.getProduct(division, 'Tobacco v3')) corp.makeProduct(division, 'Aevum', 'Tobacco v3', 1e9, 1e9);\\n}\\n\\nexport async function autopilot(ns, cities, jobs, division) {\\n\\tconst corp = ns.corporation;\\n\\t// Assuming Tobacco v3 has already started\\n\\tlet version = 3;\\n\\twhile (!corp.getProduct(division, 'Tobacco v' + version)) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\twhile (true) {\\n\\t\\t// Check tobacco progress\\n\\t\\tif (corp.getProduct(division, 'Tobacco v' + version).developmentProgress === 100) {\\n\\t\\t\\t// Start selling the developed version\\n\\t\\t\\tcorp.sellProduct(division, 'Aevum', 'Tobacco v' + version, 'MAX', 'MP*' + (2 ** version), true);\\n\\t\\t\\tif (corp.hasResearched(division, 'Market-TA.II')) corp.setProductMarketTA2(division, 'Tobacco v' + version, true);\\n\\t\\t\\t// Discontinue previous version\\n\\t\\t\\tcorp.discontinueProduct(division, 'Tobacco v' + (version - 1));\\n\\t\\t\\t// Start making new version\\n\\t\\t\\tversion++;\\n\\t\\t\\tif (!corp.getProduct(division, 'Tobacco v' + version)) corp.makeProduct(division, 'Aevum', 'Tobacco v' + version, 1e9, 1e9);\\n\\t\\t}\\n\\t\\t// Check research progress for Market TA\\n\\t\\tlet researchCost = 0;\\n\\t\\tif (!corp.hasResearched(division, 'Market-TA.I')) researchCost += corp.getResearchCost(division, 'Market-TA.I');\\n\\t\\tif (!corp.hasResearched(division, 'Market-TA.II')) researchCost += corp.getResearchCost(division, 'Market-TA.II');\\n\\t\\tif (researchCost > 0 && corp.getDivision(division).research >= 1.5 * researchCost) {\\n\\t\\t\\tif (!corp.hasResearched(division, 'Market-TA.I')) corp.research(division, 'Market-TA.I');\\n\\t\\t\\tif (!corp.hasResearched(division, 'Market-TA.II')) {\\n\\t\\t\\t\\tcorp.research(division, 'Market-TA.II');\\n\\t\\t\\t\\t// Set Market TA.II on for the current selling versions\\n\\t\\t\\t\\tcorp.setProductMarketTA2(division, 'Tobacco v' + (version - 2), true);\\n\\t\\t\\t\\tcorp.setProductMarketTA2(division, 'Tobacco v' + (version - 1), true);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Upgrade Wilson analytics if we can\\n\\t\\tcorp.levelUpgrade('Wilson Analytics');\\n\\t\\t// Check what is cheaper\\n\\t\\tif (corp.getOfficeSizeUpgradeCost(division, 'Aevum', 15) < corp.getHireAdVertCost(division)) {\\n\\t\\t\\t// Upgrade office size in Aevum\\n\\t\\t\\tif (corp.getOfficeSizeUpgradeCost(division, 'Aevum', 15) <= corp.getCorporation().funds) {\\n\\t\\t\\t\\tcorp.upgradeOfficeSize(division, 'Aevum', 15);\\n\\t\\t\\t\\tfor (let i = 0; i < 15; i++) {\\n\\t\\t\\t\\t\\tcorp.hireEmployee(division, 'Aevum');\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tlet dist = Math.floor(corp.getOffice(division, 'Aevum').size / 5);\\n\\t\\t\\t\\tawait corp.setAutoJobAssignment(division, 'Aevum', 'Operations', dist);\\n\\t\\t\\t\\tawait corp.setAutoJobAssignment(division, 'Aevum', 'Engineer', dist);\\n\\t\\t\\t\\tawait corp.setAutoJobAssignment(division, 'Aevum', 'Business', dist);\\n\\t\\t\\t\\tawait corp.setAutoJobAssignment(division, 'Aevum', 'Management', dist);\\n\\t\\t\\t\\tawait corp.setAutoJobAssignment(division, 'Aevum', 'Research & Development', dist);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Hire advert\\n\\t\\telse if (corp.getHireAdVertCost(division) <= corp.getCorporation().funds) corp.hireAdVert(division);\\n\\t}\\n}\",\"filename\":\"/corporation/autopilot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1033,\"server\":\"home\",\"moduleSequenceNumber\":517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tthrow new Error('test');\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///63a1dfd1-d3a8-4cdf-b6cf-7b6b8dff9f21\",\"moduleSequenceNumber\":16472}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":16472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/build/scripts.txt\",\"text\":\"cortex.js\\naugmentations/augmentation-lister.js\\naugmentations/install-augmentations.js\\naugmentations/purchase-augmentations.js\\naugmentations/utils.js\\nautomators/create-programs.js\\nautomators/crime.js\\nautomators/faction.js\\nautomators/gym.js\\nautomators/university.js\\nautomators/exp.js\\nautomators/company.js\\nautomators/share.js\\nbuild/download-bitburner-scripts.js\\nbuild/script-remover.js\\nbuild/update.js\\nbuild/scripts.txt\\nexploits/dev-menu.js\\nhacking/daemon.js\\nhacking/deploy-daemons.js\\nhacking/grow.js\\nhacking/hack-manager.js\\nhacking/hack.js\\nhacking/weaken.js\\nstock-market/early-stock-market.js\\nstock-market/stock-market.js\\ntexts/augmentations-list.txt\\ntexts/bitnode-order.txt\\ntools/analyze-server.js\\ntools/bitnode-multipliers.js\\ntools/connect.js\\ntools/cost-pserv.js\\ntools/favor.js\\ntools/get-all-text.js\\ntools/hackable-servers.js\\ntools/karma.js\\ntools/monitor.js\\ntools/pserv-buyer.js\\ntools/reputation.js\\nutils/backdoor.js\\nutils/contractor.js\\nutils/join-factions.js\\nutils/upgrade-home-cores.js\\nutils/upgrade-home-ram.js\\nutils/utils.js\\nutils/share.js\\ncorporation/autopilot.js\\ncorporation/utils.js\\nui/overview.js\\ngang/combat-gang.js\\ngang/hacking-gang.js\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/texts/augmentations-list.txt\",\"text\":\"\\n\\n----- CyberSec -----\\n\\n--- BitWire ---\\nhacking_mult: 1.05\\nPrice: $10.000m\\nRep: 3.750k\\n\\n--- Synaptic Enhancement Implant ---\\nhacking_speed_mult: 1.03\\nPrice: $7.500m\\nRep: 2.000k\\n\\n--- Cranial Signal Processors - Gen I ---\\nhacking_mult: 1.05\\nhacking_speed_mult: 1.01\\nPrice: $70.000m\\nRep: 10.000k\\n\\n--- Cranial Signal Processors - Gen II ---\\nhacking_mult: 1.07\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.02\\nPrice: $125.000m\\nRep: 18.750k\\nPrereq: Cranial Signal Processors - Gen I\\n\\n--- Neurotrainer I ---\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $4.000m\\nRep: 1.000k\\n\\n\\n----- Tian Di Hui -----\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- Social Negotiation Assistant (S.N.A) ---\\ncompany_rep_mult: 1.15\\nfaction_rep_mult: 1.15\\nwork_money_mult: 1.1\\nPrice: $30.000m\\nRep: 6.250k\\n\\n--- Neuroreceptor Management Implant ---\\nSpecial\\nPrice: $550.000m\\nRep: 75.000k\\n\\n\\n----- Netburners -----\\n\\n--- Hacknet Node CPU Architecture Neural-Upload ---\\nhacknet_node_money_mult: 1.15\\nhacknet_node_purchase_cost_mult: 0.85\\nPrice: $11.000m\\nRep: 3.750k\\n\\n--- Hacknet Node Cache Architecture Neural-Upload ---\\nhacknet_node_money_mult: 1.1\\nhacknet_node_level_cost_mult: 0.85\\nPrice: $5.500m\\nRep: 2.500k\\n\\n--- Hacknet Node NIC Architecture Neural-Upload ---\\nhacknet_node_money_mult: 1.1\\nhacknet_node_purchase_cost_mult: 0.9\\nPrice: $4.500m\\nRep: 1.875k\\n\\n--- Hacknet Node Kernel Direct-Neural Interface ---\\nhacknet_node_money_mult: 1.25\\nPrice: $40.000m\\nRep: 7.500k\\n\\n--- Hacknet Node Core Direct-Neural Interface ---\\nhacknet_node_money_mult: 1.45\\nPrice: $60.000m\\nRep: 12.500k\\n\\n\\n----- Sector-12 -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- CashRoot Starter Kit ---\\nSpecial\\nPrice: $125.000m\\nRep: 12.500k\\n\\n\\n----- Chongqing -----\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Neuregen Gene Modification ---\\nhacking_exp_mult: 1.4\\nPrice: $375.000m\\nRep: 37.500k\\n\\n\\n----- New Tokyo -----\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- NutriGen Implant ---\\nstrength_exp_mult: 1.2\\ndefense_exp_mult: 1.2\\ndexterity_exp_mult: 1.2\\nagility_exp_mult: 1.2\\nPrice: $2.500m\\nRep: 6.250k\\n\\n\\n----- Ishima -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- INFRARET Enhancement ---\\ndexterity_mult: 1.1\\ncrime_money_mult: 1.1\\ncrime_success_mult: 1.25\\nPrice: $30.000m\\nRep: 7.500k\\n\\n\\n----- Aevum -----\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Synaptic Enhancement Implant ---\\nhacking_speed_mult: 1.03\\nPrice: $7.500m\\nRep: 2.000k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Neurotrainer I ---\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $4.000m\\nRep: 1.000k\\n\\n--- PCMatrix ---\\ncharisma_mult: 1.0777\\ncharisma_exp_mult: 1.0777\\ncompany_rep_mult: 1.0777\\nfaction_rep_mult: 1.0777\\ncrime_money_mult: 1.0777\\ncrime_success_mult: 1.0777\\nwork_money_mult: 1.777\\nPrice: $2.000b\\nRep: 100.000k\\n\\n\\n----- Volhaven -----\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- DermaForce Particle Barrier ---\\ndefense_mult: 1.4\\nPrice: $50.000m\\nRep: 15.000k\\n\\n\\n----- NiteSec -----\\n\\n--- BitWire ---\\nhacking_mult: 1.05\\nPrice: $10.000m\\nRep: 3.750k\\n\\n--- Artificial Synaptic Potentiation ---\\nhacking_exp_mult: 1.05\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.02\\nPrice: $80.000m\\nRep: 6.250k\\n\\n--- Neural-Retention Enhancement ---\\nhacking_exp_mult: 1.25\\nPrice: $250.000m\\nRep: 20.000k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Cranial Signal Processors - Gen II ---\\nhacking_mult: 1.07\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.02\\nPrice: $125.000m\\nRep: 18.750k\\nPrereq: Cranial Signal Processors - Gen I\\n\\n--- Cranial Signal Processors - Gen III ---\\nhacking_mult: 1.09\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.15\\nPrice: $550.000m\\nRep: 50.000k\\nPrereq: Cranial Signal Processors - Gen II\\n\\n--- Neurotrainer II ---\\nhacking_exp_mult: 1.15\\nstrength_exp_mult: 1.15\\ndefense_exp_mult: 1.15\\ndexterity_exp_mult: 1.15\\nagility_exp_mult: 1.15\\ncharisma_exp_mult: 1.15\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- CRTX42-AA Gene Modification ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nPrice: $225.000m\\nRep: 45.000k\\n\\n\\n----- The Black Hand -----\\n\\n--- Artificial Synaptic Potentiation ---\\nhacking_exp_mult: 1.05\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.02\\nPrice: $80.000m\\nRep: 6.250k\\n\\n--- Enhanced Myelin Sheathing ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.1\\nhacking_speed_mult: 1.03\\nPrice: $1.375b\\nRep: 100.000k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Cranial Signal Processors - Gen III ---\\nhacking_mult: 1.09\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.15\\nPrice: $550.000m\\nRep: 50.000k\\nPrereq: Cranial Signal Processors - Gen II\\n\\n--- Cranial Signal Processors - Gen IV ---\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.2\\nhacking_grow_mult: 1.25\\nPrice: $1.100b\\nRep: 125.000k\\nPrereq: Cranial Signal Processors - Gen III\\n\\n--- The Black Hand ---\\nhacking_mult: 1.1\\nstrength_mult: 1.15\\ndexterity_mult: 1.15\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.1\\nPrice: $550.000m\\nRep: 100.000k\\n\\n\\n----- BitRunners -----\\n\\n--- Artificial Bio-neural Network Implant ---\\nhacking_mult: 1.12\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.15\\nPrice: $3.000b\\nRep: 275.000k\\n\\n--- Enhanced Myelin Sheathing ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.1\\nhacking_speed_mult: 1.03\\nPrice: $1.375b\\nRep: 100.000k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Neural Accelerator ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.15\\nhacking_money_mult: 1.2\\nPrice: $1.750b\\nRep: 200.000k\\n\\n--- Cranial Signal Processors - Gen III ---\\nhacking_mult: 1.09\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.15\\nPrice: $550.000m\\nRep: 50.000k\\nPrereq: Cranial Signal Processors - Gen II\\n\\n--- Cranial Signal Processors - Gen IV ---\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.2\\nhacking_grow_mult: 1.25\\nPrice: $1.100b\\nRep: 125.000k\\nPrereq: Cranial Signal Processors - Gen III\\n\\n--- Cranial Signal Processors - Gen V ---\\nhacking_mult: 1.3\\nhacking_money_mult: 1.25\\nhacking_grow_mult: 1.75\\nPrice: $2.250b\\nRep: 250.000k\\nPrereq: Cranial Signal Processors - Gen IV\\n\\n--- Neurotrainer II ---\\nhacking_exp_mult: 1.15\\nstrength_exp_mult: 1.15\\ndefense_exp_mult: 1.15\\ndexterity_exp_mult: 1.15\\nagility_exp_mult: 1.15\\ncharisma_exp_mult: 1.15\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- BitRunners Neurolink ---\\nhacking_mult: 1.15\\nhacking_exp_mult: 1.2\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nPrice: $4.375b\\nRep: 875.000k\\n\\n\\n----- ECorp -----\\n\\n--- Graphene Bionic Spine Upgrade ---\\nstrength_mult: 1.6\\ndefense_mult: 1.6\\ndexterity_mult: 1.6\\nagility_mult: 1.6\\nPrice: $6.000b\\nRep: 1.625m\\nPrereq: Bionic Spine\\n\\n--- Graphene Bionic Legs Upgrade ---\\nagility_mult: 2.5\\nPrice: $4.500b\\nRep: 750.000k\\nPrereq: Bionic Legs\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- PC Direct-Neural Interface ---\\nhacking_mult: 1.08\\ncompany_rep_mult: 1.3\\nPrice: $3.750b\\nRep: 375.000k\\n\\n--- PC Direct-Neural Interface Optimization Submodule ---\\nhacking_mult: 1.1\\ncompany_rep_mult: 1.75\\nPrice: $4.500b\\nRep: 500.000k\\nPrereq: PC Direct-Neural Interface\\n\\n--- ECorp HVMind Implant ---\\nhacking_grow_mult: 3\\nPrice: $5.500b\\nRep: 1.500m\\n\\n\\n----- MegaCorp -----\\n\\n--- Graphene Bionic Legs Upgrade ---\\nagility_mult: 2.5\\nPrice: $4.500b\\nRep: 750.000k\\nPrereq: Bionic Legs\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- CordiARC Fusion Reactor ---\\nstrength_mult: 1.35\\ndefense_mult: 1.35\\ndexterity_mult: 1.35\\nagility_mult: 1.35\\nstrength_exp_mult: 1.35\\ndefense_exp_mult: 1.35\\ndexterity_exp_mult: 1.35\\nagility_exp_mult: 1.35\\nPrice: $5.000b\\nRep: 1.125m\\n\\n\\n----- KuaiGong International -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- FocusWire ---\\nhacking_exp_mult: 1.05\\nstrength_exp_mult: 1.05\\ndefense_exp_mult: 1.05\\ndexterity_exp_mult: 1.05\\nagility_exp_mult: 1.05\\ncharisma_exp_mult: 1.05\\ncompany_rep_mult: 1.1\\nwork_money_mult: 1.2\\nPrice: $900.000m\\nRep: 75.000k\\n\\n--- HyperSight Corneal Implant ---\\ndexterity_mult: 1.4\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.750b\\nRep: 150.000k\\n\\n--- Photosynthetic Cells ---\\nstrength_mult: 1.4\\ndefense_mult: 1.4\\nagility_mult: 1.4\\nPrice: $2.750b\\nRep: 562.500k\\n\\n\\n----- Four Sigma -----\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- FocusWire ---\\nhacking_exp_mult: 1.05\\nstrength_exp_mult: 1.05\\ndefense_exp_mult: 1.05\\ndexterity_exp_mult: 1.05\\nagility_exp_mult: 1.05\\ncharisma_exp_mult: 1.05\\ncompany_rep_mult: 1.1\\nwork_money_mult: 1.2\\nPrice: $900.000m\\nRep: 75.000k\\n\\n--- PC Direct-Neural Interface ---\\nhacking_mult: 1.08\\ncompany_rep_mult: 1.3\\nPrice: $3.750b\\nRep: 375.000k\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- ADR-V2 Pheromone Gene ---\\ncompany_rep_mult: 1.2\\nfaction_rep_mult: 1.2\\nPrice: $550.000m\\nRep: 62.500k\\n\\n--- Neurotrainer III ---\\nhacking_exp_mult: 1.2\\nstrength_exp_mult: 1.2\\ndefense_exp_mult: 1.2\\ndexterity_exp_mult: 1.2\\nagility_exp_mult: 1.2\\ncharisma_exp_mult: 1.2\\nPrice: $130.000m\\nRep: 25.000k\\n\\n\\n----- NWO -----\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- Neurotrainer III ---\\nhacking_exp_mult: 1.2\\nstrength_exp_mult: 1.2\\ndefense_exp_mult: 1.2\\ndexterity_exp_mult: 1.2\\nagility_exp_mult: 1.2\\ncharisma_exp_mult: 1.2\\nPrice: $130.000m\\nRep: 25.000k\\n\\n--- Power Recirculation Core ---\\nhacking_mult: 1.05\\nstrength_mult: 1.05\\ndefense_mult: 1.05\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\ncharisma_mult: 1.05\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $180.000m\\nRep: 25.000k\\n\\n--- Xanipher ---\\nhacking_mult: 1.2\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\ndexterity_mult: 1.2\\nagility_mult: 1.2\\ncharisma_mult: 1.2\\nhacking_exp_mult: 1.15\\nstrength_exp_mult: 1.15\\ndefense_exp_mult: 1.15\\ndexterity_exp_mult: 1.15\\nagility_exp_mult: 1.15\\ncharisma_exp_mult: 1.15\\nPrice: $4.250b\\nRep: 875.000k\\n\\n--- Hydroflame Left Arm ---\\nstrength_mult: 2.7\\nPrice: $2.500t\\nRep: 1.250m\\n\\n\\n----- Blade Industries -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- PC Direct-Neural Interface ---\\nhacking_mult: 1.08\\ncompany_rep_mult: 1.3\\nPrice: $3.750b\\nRep: 375.000k\\n\\n--- PC Direct-Neural Interface Optimization Submodule ---\\nhacking_mult: 1.1\\ncompany_rep_mult: 1.75\\nPrice: $4.500b\\nRep: 500.000k\\nPrereq: PC Direct-Neural Interface\\n\\n--- HyperSight Corneal Implant ---\\ndexterity_mult: 1.4\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.750b\\nRep: 150.000k\\n\\n--- Neotra ---\\nstrength_mult: 1.55\\ndefense_mult: 1.55\\nPrice: $2.875b\\nRep: 562.500k\\n\\n\\n----- OmniTek Incorporated -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- PC Direct-Neural Interface ---\\nhacking_mult: 1.08\\ncompany_rep_mult: 1.3\\nPrice: $3.750b\\nRep: 375.000k\\n\\n--- OmniTek InfoLoad ---\\nhacking_mult: 1.2\\nhacking_exp_mult: 1.25\\nPrice: $2.875b\\nRep: 625.000k\\n\\n\\n----- Bachman & Associates -----\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- FocusWire ---\\nhacking_exp_mult: 1.05\\nstrength_exp_mult: 1.05\\ndefense_exp_mult: 1.05\\ndexterity_exp_mult: 1.05\\nagility_exp_mult: 1.05\\ncharisma_exp_mult: 1.05\\ncompany_rep_mult: 1.1\\nwork_money_mult: 1.2\\nPrice: $900.000m\\nRep: 75.000k\\n\\n--- ADR-V2 Pheromone Gene ---\\ncompany_rep_mult: 1.2\\nfaction_rep_mult: 1.2\\nPrice: $550.000m\\nRep: 62.500k\\n\\n--- SmartJaw ---\\ncharisma_mult: 1.5\\ncharisma_exp_mult: 1.5\\ncompany_rep_mult: 1.25\\nfaction_rep_mult: 1.25\\nPrice: $2.750b\\nRep: 375.000k\\n\\n\\n----- Clarke Incorporated -----\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Neuronal Densification ---\\nhacking_mult: 1.15\\nhacking_exp_mult: 1.1\\nhacking_speed_mult: 1.03\\nPrice: $1.375b\\nRep: 187.500k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- FocusWire ---\\nhacking_exp_mult: 1.05\\nstrength_exp_mult: 1.05\\ndefense_exp_mult: 1.05\\ndexterity_exp_mult: 1.05\\nagility_exp_mult: 1.05\\ncharisma_exp_mult: 1.05\\ncompany_rep_mult: 1.1\\nwork_money_mult: 1.2\\nPrice: $900.000m\\nRep: 75.000k\\n\\n--- ADR-V2 Pheromone Gene ---\\ncompany_rep_mult: 1.2\\nfaction_rep_mult: 1.2\\nPrice: $550.000m\\nRep: 62.500k\\n\\n--- nextSENS Gene Modification ---\\nhacking_mult: 1.2\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\ndexterity_mult: 1.2\\nagility_mult: 1.2\\ncharisma_mult: 1.2\\nPrice: $1.925b\\nRep: 437.500k\\n\\n\\n----- Fulcrum Secret Technologies -----\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Graphene Bone Lacings ---\\nstrength_mult: 1.7\\ndefense_mult: 1.7\\nPrice: $4.250b\\nRep: 1.125m\\n\\n--- Graphene Bionic Spine Upgrade ---\\nstrength_mult: 1.6\\ndefense_mult: 1.6\\ndexterity_mult: 1.6\\nagility_mult: 1.6\\nPrice: $6.000b\\nRep: 1.625m\\nPrereq: Bionic Spine\\n\\n--- Graphene Bionic Legs Upgrade ---\\nagility_mult: 2.5\\nPrice: $4.500b\\nRep: 750.000k\\nPrereq: Bionic Legs\\n\\n--- Artificial Bio-neural Network Implant ---\\nhacking_mult: 1.12\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.15\\nPrice: $3.000b\\nRep: 275.000k\\n\\n--- Enhanced Myelin Sheathing ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.1\\nhacking_speed_mult: 1.03\\nPrice: $1.375b\\nRep: 100.000k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- PC Direct-Neural Interface Optimization Submodule ---\\nhacking_mult: 1.1\\ncompany_rep_mult: 1.75\\nPrice: $4.500b\\nRep: 500.000k\\nPrereq: PC Direct-Neural Interface\\n\\n--- PC Direct-Neural Interface NeuroNet Injector ---\\nhacking_mult: 1.1\\nhacking_speed_mult: 1.05\\ncompany_rep_mult: 2\\nPrice: $7.500b\\nRep: 1.500m\\nPrereq: PC Direct-Neural Interface\\n\\n\\n----- Slum Snakes -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- LuminCloaking-V1 Skin Implant ---\\nagility_mult: 1.05\\ncrime_money_mult: 1.1\\nPrice: $5.000m\\nRep: 1.500k\\n\\n--- LuminCloaking-V2 Skin Implant ---\\ndefense_mult: 1.1\\nagility_mult: 1.1\\ncrime_money_mult: 1.25\\nPrice: $30.000m\\nRep: 5.000k\\nPrereq: LuminCloaking-V1 Skin Implant\\n\\n--- SmartSonar Implant ---\\ndexterity_mult: 1.1\\ndexterity_exp_mult: 1.15\\ncrime_money_mult: 1.25\\nPrice: $75.000m\\nRep: 22.500k\\n\\n\\n----- Tetrads -----\\n\\n--- HemoRecirculator ---\\nstrength_mult: 1.08\\ndefense_mult: 1.08\\ndexterity_mult: 1.08\\nagility_mult: 1.08\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- LuminCloaking-V1 Skin Implant ---\\nagility_mult: 1.05\\ncrime_money_mult: 1.1\\nPrice: $5.000m\\nRep: 1.500k\\n\\n--- LuminCloaking-V2 Skin Implant ---\\ndefense_mult: 1.1\\nagility_mult: 1.1\\ncrime_money_mult: 1.25\\nPrice: $30.000m\\nRep: 5.000k\\nPrereq: LuminCloaking-V1 Skin Implant\\n\\n--- Power Recirculation Core ---\\nhacking_mult: 1.05\\nstrength_mult: 1.05\\ndefense_mult: 1.05\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\ncharisma_mult: 1.05\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $180.000m\\nRep: 25.000k\\n\\n--- Bionic Arms ---\\nstrength_mult: 1.3\\ndexterity_mult: 1.3\\nPrice: $275.000m\\nRep: 62.500k\\n\\n\\n----- Silhouette -----\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- TITN-41 Gene-Modification Injection ---\\ncharisma_mult: 1.15\\ncharisma_exp_mult: 1.15\\nPrice: $190.000m\\nRep: 25.000k\\n\\n--- ADR-V2 Pheromone Gene ---\\ncompany_rep_mult: 1.2\\nfaction_rep_mult: 1.2\\nPrice: $550.000m\\nRep: 62.500k\\n\\n\\n----- Speakers for the Dead -----\\n\\n--- Unstable Circadian Modulator ---\\nhacknet_node_money_mult: 1.2\\nhacknet_node_purchase_cost_mult: 0.85\\nhacknet_node_ram_cost_mult: 0.85\\nhacknet_node_core_cost_mult: 0.85\\nhacknet_node_level_cost_mult: 0.85\\nPrice: $5.000b\\nRep: 362.500k\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- The Shadow's Simulacrum ---\\ncompany_rep_mult: 1.15\\nfaction_rep_mult: 1.15\\nPrice: $400.000m\\nRep: 37.500k\\n\\n--- Graphene BrachiBlades Upgrade ---\\nstrength_mult: 1.4\\ndefense_mult: 1.4\\ncrime_money_mult: 1.3\\ncrime_success_mult: 1.1\\nPrice: $2.500b\\nRep: 225.000k\\nPrereq: BrachiBlades\\n\\n\\n----- The Dark Army -----\\n\\n--- HemoRecirculator ---\\nstrength_mult: 1.08\\ndefense_mult: 1.08\\ndexterity_mult: 1.08\\nagility_mult: 1.08\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- The Shadow's Simulacrum ---\\ncompany_rep_mult: 1.15\\nfaction_rep_mult: 1.15\\nPrice: $400.000m\\nRep: 37.500k\\n\\n--- Power Recirculation Core ---\\nhacking_mult: 1.05\\nstrength_mult: 1.05\\ndefense_mult: 1.05\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\ncharisma_mult: 1.05\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $180.000m\\nRep: 25.000k\\n\\n--- Graphene Bionic Arms Upgrade ---\\nstrength_mult: 1.85\\ndexterity_mult: 1.85\\nPrice: $3.750b\\nRep: 500.000k\\nPrereq: Bionic Arms\\n\\n\\n----- The Syndicate -----\\n\\n--- HemoRecirculator ---\\nstrength_mult: 1.08\\ndefense_mult: 1.08\\ndexterity_mult: 1.08\\nagility_mult: 1.08\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- The Shadow's Simulacrum ---\\ncompany_rep_mult: 1.15\\nfaction_rep_mult: 1.15\\nPrice: $400.000m\\nRep: 37.500k\\n\\n--- Power Recirculation Core ---\\nhacking_mult: 1.05\\nstrength_mult: 1.05\\ndefense_mult: 1.05\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\ncharisma_mult: 1.05\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $180.000m\\nRep: 25.000k\\n\\n--- BrachiBlades ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ncrime_money_mult: 1.15\\ncrime_success_mult: 1.1\\nPrice: $90.000m\\nRep: 12.500k\\n\\n\\n----- The Covenant -----\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Graphene Bone Lacings ---\\nstrength_mult: 1.7\\ndefense_mult: 1.7\\nPrice: $4.250b\\nRep: 1.125m\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- SPTN-97 Gene Modification ---\\nhacking_mult: 1.15\\nstrength_mult: 1.75\\ndefense_mult: 1.75\\ndexterity_mult: 1.75\\nagility_mult: 1.75\\nPrice: $4.875b\\nRep: 1.250m\\n\\n\\n----- Daedalus -----\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- The Red Pill ---\\nSpecial\\nPrice: $0.000\\nRep: 2.500m\\n\\n\\n----- Illuminati -----\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- QLink ---\\nhacking_mult: 1.75\\nhacking_chance_mult: 2.5\\nhacking_speed_mult: 2\\nhacking_money_mult: 4\\nPrice: $25.000t\\nRep: 1.875m\\n\\n\\n----- Bladeburners -----\\n\\n--- EsperTech Bladeburner Eyewear ---\\ndexterity_mult: 1.05\\nbladeburner_success_chance_mult: 1.03\\nPrice: $165.000m\\nRep: 1.250k\\n\\n--- EMS-4 Recombination ---\\nbladeburner_stamina_gain_mult: 1.02\\nbladeburner_analysis_mult: 1.05\\nbladeburner_success_chance_mult: 1.03\\nPrice: $275.000m\\nRep: 2.500k\\n\\n--- ORION-MKIV Shoulder ---\\nstrength_mult: 1.05\\ndefense_mult: 1.05\\ndexterity_mult: 1.05\\nbladeburner_success_chance_mult: 1.04\\nPrice: $550.000m\\nRep: 6.250k\\n\\n--- Hyperion Plasma Cannon V1 ---\\nbladeburner_success_chance_mult: 1.06\\nPrice: $2.750b\\nRep: 12.500k\\n\\n--- Hyperion Plasma Cannon V2 ---\\nbladeburner_success_chance_mult: 1.08\\nPrice: $5.500b\\nRep: 25.000k\\nPrereq: Hyperion Plasma Cannon V1\\n\\n--- GOLEM Serum ---\\nstrength_mult: 1.07\\ndefense_mult: 1.07\\ndexterity_mult: 1.07\\nagility_mult: 1.07\\nbladeburner_stamina_gain_mult: 1.05\\nPrice: $11.000b\\nRep: 31.250k\\n\\n--- Vangelis Virus ---\\ndexterity_exp_mult: 1.1\\nbladeburner_analysis_mult: 1.1\\nbladeburner_success_chance_mult: 1.04\\nPrice: $2.750b\\nRep: 18.750k\\n\\n--- Vangelis Virus 3.0 ---\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nbladeburner_analysis_mult: 1.15\\nbladeburner_success_chance_mult: 1.05\\nPrice: $11.000b\\nRep: 37.500k\\nPrereq: Vangelis Virus\\n\\n--- I.N.T.E.R.L.I.N.K.E.D ---\\nstrength_exp_mult: 1.05\\ndefense_exp_mult: 1.05\\ndexterity_exp_mult: 1.05\\nagility_exp_mult: 1.05\\nbladeburner_max_stamina_mult: 1.1\\nPrice: $5.500b\\nRep: 25.000k\\n\\n--- Blade's Runners ---\\nagility_mult: 1.05\\nbladeburner_max_stamina_mult: 1.05\\nbladeburner_stamina_gain_mult: 1.05\\nPrice: $8.250b\\nRep: 20.000k\\n\\n--- BLADE-51b Tesla Armor ---\\nstrength_mult: 1.04\\ndefense_mult: 1.04\\ndexterity_mult: 1.04\\nagility_mult: 1.04\\nbladeburner_stamina_gain_mult: 1.02\\nbladeburner_success_chance_mult: 1.03\\nPrice: $1.375b\\nRep: 12.500k\\n\\n--- BLADE-51b Tesla Armor: Power Cells Upgrade ---\\nbladeburner_max_stamina_mult: 1.05\\nbladeburner_stamina_gain_mult: 1.02\\nbladeburner_success_chance_mult: 1.05\\nPrice: $2.750b\\nRep: 18.750k\\nPrereq: BLADE-51b Tesla Armor\\n\\n--- BLADE-51b Tesla Armor: Energy Shielding Upgrade ---\\ndefense_mult: 1.05\\nbladeburner_success_chance_mult: 1.06\\nPrice: $5.500b\\nRep: 21.250k\\nPrereq: BLADE-51b Tesla Armor\\n\\n--- BLADE-51b Tesla Armor: Unibeam Upgrade ---\\nbladeburner_success_chance_mult: 1.08\\nPrice: $16.500b\\nRep: 31.250k\\nPrereq: BLADE-51b Tesla Armor\\n\\n--- BLADE-51b Tesla Armor: Omnibeam Upgrade ---\\nbladeburner_success_chance_mult: 1.1\\nPrice: $27.500b\\nRep: 62.500k\\nPrereq: BLADE-51b Tesla Armor: Unibeam Upgrade\\n\\n--- BLADE-51b Tesla Armor: IPU Upgrade ---\\nbladeburner_analysis_mult: 1.15\\nbladeburner_success_chance_mult: 1.02\\nPrice: $1.100b\\nRep: 15.000k\\nPrereq: BLADE-51b Tesla Armor\\n\\n--- The Blade's Simulacrum ---\\nSpecial\\nPrice: $150.000b\\nRep: 1.250k\\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/texts/bitnode-order.txt\",\"text\":\"1.1 -> 1.2 -> 1.3   Max SF1 28% All\\n5.1                 Int, Formulas & getBitNodeMultipliers()\\n4.1 -> 4.2 -> 4.3   Max SF4 Singularity functions\\n5.2 -> 5.3          Max SF5 14% hacking\\n2.1 -> 2.2 -> 2.3   MAX SF2 42% Crime & Charisma, Gangs\\n3.1                 Corps\\n12.1                NFG-1\\n6.1\\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"bb.txt\",\"text\":\"from what I noticed, aug installs make it barely any faster it you dont use corp/gangs\\r\\nsince aug install resets your stats\\r\\nand BB is stat based\\r\\njust grind skill levels until you can do assassination at 100% chance\\r\\nat that point get overclock to 90\\r\\nthen start ignoring the retire/stealth skills and just upgrade the stats and success chance for black ops\\r\\nuntil you can do the black op with 100%\\r\\nand repeat until they're all done and you've beaten the bitnode\\r\\nalso use \\\"help automate\\\" to set up stamina management, I user Hyperbolic for stamina regen at low and Tracking -> Bounty Hunting -> Raid -> Assassination for high stamina action\\r\\nI switch action when I have around 33% success chance\\r\\nif your chaos ever gets high enough that your actions start to fail again use Stealth Retirement Operation to reduce it\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":4.167999999999998,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"76.2.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"ecorp\",\"moduleSequenceNumber\":522}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"ecorp\",\"moduleSequenceNumber\":523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"ecorp\",\"moduleSequenceNumber\":524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":15581439449.5,\"moneyMax\":155814394495,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1200,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"13.8.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"megacorp\",\"moduleSequenceNumber\":528}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"megacorp\",\"moduleSequenceNumber\":529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"megacorp\",\"moduleSequenceNumber\":530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":21698464008.5,\"moneyMax\":216984640085,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1315,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"91.9.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"b-and-a\",\"moduleSequenceNumber\":534}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"b-and-a\",\"moduleSequenceNumber\":535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"b-and-a\",\"moduleSequenceNumber\":536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnitek\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":126,\"hackDifficulty\":126,\"minDifficulty\":42,\"moneyAvailable\":10939484996,\"moneyMax\":109394849960,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1072,\"serverGrowth\":75}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"33.5.7.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"blade\",\"moduleSequenceNumber\":540}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"blade\",\"moduleSequenceNumber\":541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"blade\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":132,\"hackDifficulty\":132,\"minDifficulty\":44,\"moneyAvailable\":17884950954.5,\"moneyMax\":178849509545,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":902,\"serverGrowth\":84}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"38.1.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"nwo\",\"moduleSequenceNumber\":546}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"nwo\",\"moduleSequenceNumber\":547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nwo\",\"moduleSequenceNumber\":548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":17363662669,\"moneyMax\":173636626690,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1221,\"serverGrowth\":79}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"31.7.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"clarkinc\",\"moduleSequenceNumber\":552}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"clarkinc\",\"moduleSequenceNumber\":553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"clarkinc\",\"moduleSequenceNumber\":554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":12308864279.5,\"moneyMax\":123088642795,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1204,\"serverGrowth\":75}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"0.4.4.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"omnitek\",\"moduleSequenceNumber\":558}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"omnitek\",\"moduleSequenceNumber\":559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnitek\",\"moduleSequenceNumber\":560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":135,\"hackDifficulty\":135,\"minDifficulty\":45,\"moneyAvailable\":9032532564.5,\"moneyMax\":90325325645,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":929,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"8.1.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"4sigma\",\"moduleSequenceNumber\":564}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"4sigma\",\"moduleSequenceNumber\":565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"4sigma\",\"moduleSequenceNumber\":566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94.5,\"hackDifficulty\":94.5,\"minDifficulty\":32,\"moneyAvailable\":10530178369.5,\"moneyMax\":105301783695,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1138,\"serverGrowth\":98}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"23.1.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":570}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"helios\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":147,\"hackDifficulty\":147,\"minDifficulty\":49,\"moneyAvailable\":13289997329.5,\"moneyMax\":132899973295,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1018,\"serverGrowth\":94}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"70.9.3.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":576}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"titan-labs\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":141,\"hackDifficulty\":141,\"minDifficulty\":47,\"moneyAvailable\":750235431,\"moneyMax\":7502354310,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1165,\"serverGrowth\":85}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"78.6.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":582}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":500000,\"moneyMax\":5000000,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1186,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"29.3.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"stormtech\",\"moduleSequenceNumber\":588}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"stormtech\",\"moduleSequenceNumber\":589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"stormtech\",\"moduleSequenceNumber\":590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":121.5,\"hackDifficulty\":121.5,\"minDifficulty\":41,\"moneyAvailable\":519998281.5,\"moneyMax\":5199982815,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":968,\"serverGrowth\":73}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"18.6.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"defcomm\",\"moduleSequenceNumber\":594}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"defcomm\",\"moduleSequenceNumber\":595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"defcomm\",\"moduleSequenceNumber\":596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":133.5,\"hackDifficulty\":133.5,\"minDifficulty\":45,\"moneyAvailable\":443329565,\"moneyMax\":4433295650,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1000,\"serverGrowth\":64}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"42.0.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"infocomm\",\"moduleSequenceNumber\":600}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"infocomm\",\"moduleSequenceNumber\":601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"infocomm\",\"moduleSequenceNumber\":602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":111,\"hackDifficulty\":111,\"minDifficulty\":37,\"moneyAvailable\":304865711,\"moneyMax\":3048657110,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":950,\"serverGrowth\":56}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"22.9.4.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"helios\",\"moduleSequenceNumber\":606}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"helios\",\"moduleSequenceNumber\":607,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"helios\",\"moduleSequenceNumber\":608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":142.5,\"hackDifficulty\":142.5,\"minDifficulty\":48,\"moneyAvailable\":340301579.5,\"moneyMax\":3403015795,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":817,\"serverGrowth\":73}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"32.2.4.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"vitalife\",\"moduleSequenceNumber\":612}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"vitalife\",\"moduleSequenceNumber\":613,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"vitalife\",\"moduleSequenceNumber\":614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":121.5,\"hackDifficulty\":121.5,\"minDifficulty\":41,\"moneyAvailable\":363372471,\"moneyMax\":3633724710,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":895,\"serverGrowth\":66}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"13.0.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":617,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"icarus\",\"moduleSequenceNumber\":618}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"icarus\",\"moduleSequenceNumber\":619,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"icarus\",\"moduleSequenceNumber\":620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnia\",\"infocomm\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":142.5,\"hackDifficulty\":142.5,\"minDifficulty\":48,\"moneyAvailable\":492810962.5,\"moneyMax\":4928109625,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":889,\"serverGrowth\":95}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"49.8.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":623,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"univ-energy\",\"moduleSequenceNumber\":624}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"univ-energy\",\"moduleSequenceNumber\":625,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"univ-energy\",\"moduleSequenceNumber\":626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":135,\"hackDifficulty\":135,\"minDifficulty\":45,\"moneyAvailable\":585116877,\"moneyMax\":5851168770,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":895,\"serverGrowth\":85}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"16.2.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"titan-labs\",\"moduleSequenceNumber\":630}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"titan-labs\",\"moduleSequenceNumber\":631,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"titan-labs\",\"moduleSequenceNumber\":632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":106.5,\"hackDifficulty\":106.5,\"minDifficulty\":36,\"moneyAvailable\":421120813.5,\"moneyMax\":4211208135,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":868,\"serverGrowth\":74}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"43.9.5.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":634,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"microdyne\",\"moduleSequenceNumber\":636}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"microdyne\",\"moduleSequenceNumber\":637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"microdyne\",\"moduleSequenceNumber\":638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112.5,\"hackDifficulty\":112.5,\"minDifficulty\":38,\"moneyAvailable\":330107194.5,\"moneyMax\":3301071945,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":874,\"serverGrowth\":90}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"34.8.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":640,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":641,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":642}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":643,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":108,\"hackDifficulty\":108,\"minDifficulty\":36,\"moneyAvailable\":403501621,\"moneyMax\":4035016210,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":862,\"serverGrowth\":76}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"5.7.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":647,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":648}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":649,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82.5,\"hackDifficulty\":82.5,\"minDifficulty\":28,\"moneyAvailable\":382237152,\"moneyMax\":3822371520,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":842,\"serverGrowth\":80}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"76.8.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":651,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"aerocorp\",\"moduleSequenceNumber\":654}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"aerocorp\",\"moduleSequenceNumber\":655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"aerocorp\",\"moduleSequenceNumber\":656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":124.5,\"hackDifficulty\":124.5,\"minDifficulty\":42,\"moneyAvailable\":533543570.5,\"moneyMax\":5335435705,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":873,\"serverGrowth\":55}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"30.3.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":657,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":658,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"omnia\",\"moduleSequenceNumber\":660}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"omnia\",\"moduleSequenceNumber\":661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnia\",\"moduleSequenceNumber\":662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"aerocorp\",\"icarus\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":130.5,\"hackDifficulty\":130.5,\"minDifficulty\":44,\"moneyAvailable\":490562864.5,\"moneyMax\":4905628645,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":902,\"serverGrowth\":67}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"58.6.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":663,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"zb-def\",\"moduleSequenceNumber\":666}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"zb-def\",\"moduleSequenceNumber\":667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zb-def\",\"moduleSequenceNumber\":668,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"icarus\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":489745944.5,\"moneyMax\":4897459445,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":794,\"serverGrowth\":67}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"12.9.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":669,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":671,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":672}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":102,\"hackDifficulty\":102,\"minDifficulty\":34,\"moneyAvailable\":389739393.5,\"moneyMax\":3897393935,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":811,\"serverGrowth\":75}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"30.1.6.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"solaris\",\"moduleSequenceNumber\":678}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"solaris\",\"moduleSequenceNumber\":679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"solaris\",\"moduleSequenceNumber\":680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":115.5,\"hackDifficulty\":115.5,\"minDifficulty\":39,\"moneyAvailable\":374483446.5,\"moneyMax\":3744834465,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":831,\"serverGrowth\":71}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"8.4.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"deltaone\",\"moduleSequenceNumber\":684}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"deltaone\",\"moduleSequenceNumber\":685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"deltaone\",\"moduleSequenceNumber\":686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":124.5,\"hackDifficulty\":124.5,\"minDifficulty\":42,\"moneyAvailable\":816870482,\"moneyMax\":8168704820,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":813,\"serverGrowth\":56}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"13.2.8.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"global-pharm\",\"moduleSequenceNumber\":690}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"global-pharm\",\"moduleSequenceNumber\":691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"global-pharm\",\"moduleSequenceNumber\":692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":126,\"hackDifficulty\":126,\"minDifficulty\":42,\"moneyAvailable\":824462129,\"moneyMax\":8244621290,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":835,\"serverGrowth\":90}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"36.8.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"nova-med\",\"moduleSequenceNumber\":696}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"nova-med\",\"moduleSequenceNumber\":697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nova-med\",\"moduleSequenceNumber\":698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":115.5,\"hackDifficulty\":115.5,\"minDifficulty\":39,\"moneyAvailable\":580123128,\"moneyMax\":5801231280,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":838,\"serverGrowth\":77}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"94.1.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"zeus-med\",\"moduleSequenceNumber\":702}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"zeus-med\",\"moduleSequenceNumber\":703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zeus-med\",\"moduleSequenceNumber\":704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":123,\"hackDifficulty\":123,\"minDifficulty\":41,\"moneyAvailable\":724613046,\"moneyMax\":7246130460,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":814,\"serverGrowth\":70}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"8.8.3.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"unitalife\",\"moduleSequenceNumber\":708}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"unitalife\",\"moduleSequenceNumber\":709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"unitalife\",\"moduleSequenceNumber\":710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":105,\"hackDifficulty\":105,\"minDifficulty\":35,\"moneyAvailable\":530448445,\"moneyMax\":5304484450,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":791,\"serverGrowth\":75}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"32.9.2.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":714}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112.5,\"hackDifficulty\":112.5,\"minDifficulty\":38,\"moneyAvailable\":356612207.5,\"moneyMax\":3566122075,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":680,\"serverGrowth\":57}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"94.2.4.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":717,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"rho-construction\",\"moduleSequenceNumber\":720}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"rho-construction\",\"moduleSequenceNumber\":721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"rho-construction\",\"moduleSequenceNumber\":722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88.5,\"hackDifficulty\":88.5,\"minDifficulty\":30,\"moneyAvailable\":348179145.5,\"moneyMax\":3481791455,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":483,\"serverGrowth\":60}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"26.0.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":726}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91.5,\"hackDifficulty\":91.5,\"minDifficulty\":31,\"moneyAvailable\":300848755,\"moneyMax\":3008487550,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":569,\"serverGrowth\":60}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"8.1.3.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"aevum-police\",\"moduleSequenceNumber\":732}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"aevum-police\",\"moduleSequenceNumber\":733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"aevum-police\",\"moduleSequenceNumber\":734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"catalyst\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112.5,\"hackDifficulty\":112.5,\"minDifficulty\":38,\"moneyAvailable\":179716006.5,\"moneyMax\":1797160065,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":403,\"serverGrowth\":31}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"50.2.7.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":738}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76.5,\"hackDifficulty\":76.5,\"minDifficulty\":26,\"moneyAvailable\":110857791.5,\"moneyMax\":1108577915,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":407,\"serverGrowth\":43}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"8.1.9.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"zb-institute\",\"moduleSequenceNumber\":744}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"zb-institute\",\"moduleSequenceNumber\":745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zb-institute\",\"moduleSequenceNumber\":746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":120,\"hackDifficulty\":120,\"minDifficulty\":40,\"moneyAvailable\":477588717,\"moneyMax\":4775887170,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":749,\"serverGrowth\":75}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"85.4.0.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":747,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":748,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"summit-uni\",\"moduleSequenceNumber\":750}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"summit-uni\",\"moduleSequenceNumber\":751,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":102987132.5,\"moneyMax\":1029871325,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":452,\"serverGrowth\":40}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"99.2.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"syscore\",\"moduleSequenceNumber\":756}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"syscore\",\"moduleSequenceNumber\":757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"syscore\",\"moduleSequenceNumber\":758,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"the-hub\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100.5,\"hackDifficulty\":100.5,\"minDifficulty\":34,\"moneyAvailable\":220147673.5,\"moneyMax\":2201476735,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":647,\"serverGrowth\":70}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"27.0.6.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":760,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":761,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"catalyst\",\"moduleSequenceNumber\":762}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"catalyst\",\"moduleSequenceNumber\":763,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"catalyst\",\"moduleSequenceNumber\":764,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"netlink\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91.5,\"hackDifficulty\":91.5,\"minDifficulty\":31,\"moneyAvailable\":229184981.5,\"moneyMax\":2291849815,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":448,\"serverGrowth\":27}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"42.3.9.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":765,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":766,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":767,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"the-hub\",\"moduleSequenceNumber\":768}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"the-hub\",\"moduleSequenceNumber\":769,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"the-hub\",\"moduleSequenceNumber\":770,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":75050635.5,\"moneyMax\":750506355,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":308,\"serverGrowth\":48}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"36.2.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":771,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":772,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"comptek\",\"moduleSequenceNumber\":774}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"comptek\",\"moduleSequenceNumber\":775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"comptek\",\"moduleSequenceNumber\":776,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":124412463,\"moneyMax\":1244124630,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":357,\"serverGrowth\":56}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"83.9.1.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":777,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":778,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":779,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"netlink\",\"moduleSequenceNumber\":780}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"netlink\",\"moduleSequenceNumber\":781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"netlink\",\"moduleSequenceNumber\":782,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"neo-net\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":106.5,\"hackDifficulty\":106.5,\"minDifficulty\":36,\"moneyAvailable\":137500000,\"moneyMax\":1375000000,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":379,\"serverGrowth\":55}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"41.1.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":783,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":784,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":785,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":786}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":788,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82.5,\"hackDifficulty\":82.5,\"minDifficulty\":28,\"moneyAvailable\":36551063,\"moneyMax\":365510630,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":277,\"serverGrowth\":39}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"24.6.2.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.41000000000008,\"pid\":2395,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///f345a922-1f92-49a3-9a75-094efcfda86b\",\"moduleSequenceNumber\":946}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///c36f6b4c-ab0f-4382-9611-f27ee2eb9b44\",\"moduleSequenceNumber\":14593}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":14593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///f345a922-1f92-49a3-9a75-094efcfda86b\",\"moduleSequenceNumber\":946}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":946,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///7f235830-6673-4ed2-a012-393388ba6568\",\"moduleSequenceNumber\":47900}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":47900,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"n00dles\",\"moduleSequenceNumber\":792}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"n00dles\",\"moduleSequenceNumber\":793,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"n00dles\",\"moduleSequenceNumber\":794,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1.5,\"hackDifficulty\":1.5,\"minDifficulty\":1,\"moneyAvailable\":35000,\"moneyMax\":350000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"60.3.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":150.41000000000008,\"pid\":2382,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":8,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///96415de6-5732-4e81-b175-85b861453dad\",\"moduleSequenceNumber\":947}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.20999999999998,\"pid\":2407,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///96415de6-5732-4e81-b175-85b861453dad\",\"moduleSequenceNumber\":947}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///db8df5ff-e913-4fc8-9142-969629327729\",\"moduleSequenceNumber\":5191}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":5191,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///96415de6-5732-4e81-b175-85b861453dad\",\"moduleSequenceNumber\":947}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":947,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///5b87130f-37ee-4b65-980f-932753a5c217\",\"moduleSequenceNumber\":14590}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":14590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":798}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":799,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":800,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":11.150000000000007,\"minDifficulty\":5,\"moneyAvailable\":1000000,\"moneyMax\":10000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"3.2.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":141.01000000000008,\"pid\":2390,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":3,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///c0095b40-d1b4-4333-8468-7cd9f2171b7c\",\"moduleSequenceNumber\":948}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.20999999999998,\"pid\":2403,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":6,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///c0095b40-d1b4-4333-8468-7cd9f2171b7c\",\"moduleSequenceNumber\":948}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///09c85205-3ac2-406f-a289-a51e070cfd9a\",\"moduleSequenceNumber\":14592}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":14592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///c0095b40-d1b4-4333-8468-7cd9f2171b7c\",\"moduleSequenceNumber\":948}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":948,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///4e6402b7-f8ab-496a-b6ff-5c809f87df90\",\"moduleSequenceNumber\":11769}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":11769,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":804}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":806,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":7.100000000000012,\"minDifficulty\":5,\"moneyAvailable\":1150000,\"moneyMax\":11500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"52.0.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":141.01000000000008,\"pid\":2387,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///9f1b8324-1f8d-44c5-a7e1-4265993cd170\",\"moduleSequenceNumber\":950}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.20999999999998,\"pid\":2404,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":4,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///9f1b8324-1f8d-44c5-a7e1-4265993cd170\",\"moduleSequenceNumber\":950}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///9e12f65f-eba8-4cff-882e-6f3cd1e10e6f\",\"moduleSequenceNumber\":9888}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":9888,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///9f1b8324-1f8d-44c5-a7e1-4265993cd170\",\"moduleSequenceNumber\":950}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":950,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///7dedfde4-4072-4ab6-85e6-6b34cd0dd362\",\"moduleSequenceNumber\":20694}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":20694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"joesguns\",\"moduleSequenceNumber\":810}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"joesguns\",\"moduleSequenceNumber\":811,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"joesguns\",\"moduleSequenceNumber\":812,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":8.457999999999997,\"minDifficulty\":8,\"moneyAvailable\":3091255.783407892,\"moneyMax\":12500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"73.8.8.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":141.01000000000008,\"pid\":2389,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":3,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///eeb23d7d-4364-49da-9a74-3de0ae55cb25\",\"moduleSequenceNumber\":951}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.20999999999998,\"pid\":2400,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":15,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///eeb23d7d-4364-49da-9a74-3de0ae55cb25\",\"moduleSequenceNumber\":951}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///e8786289-8fed-49e1-b520-5aaf7044d6f3\",\"moduleSequenceNumber\":5190}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":5190,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///eeb23d7d-4364-49da-9a74-3de0ae55cb25\",\"moduleSequenceNumber\":951}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":951,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///b9923b40-7e13-4976-a68b-13c547540888\",\"moduleSequenceNumber\":9886}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":9886,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"zer0\",\"moduleSequenceNumber\":816}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"zer0\",\"moduleSequenceNumber\":817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zer0\",\"moduleSequenceNumber\":818,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"joesguns\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37.5,\"hackDifficulty\":13.047999999999954,\"minDifficulty\":13,\"moneyAvailable\":32668136.489554703,\"moneyMax\":37500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"80.7.2.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.41000000000008,\"pid\":2393,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":9,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///9da7eab1-4e8f-4b76-88cd-fc2b07115b5a\",\"moduleSequenceNumber\":953}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///54528070-db18-40dc-9da2-cfa6ed946996\",\"moduleSequenceNumber\":9890}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":9890,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///9da7eab1-4e8f-4b76-88cd-fc2b07115b5a\",\"moduleSequenceNumber\":953}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":953,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///07f2fc16-46d9-41bd-a47e-bd8b02a1b0fc\",\"moduleSequenceNumber\":30545}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":30545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"nectar-net\",\"moduleSequenceNumber\":822}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"nectar-net\",\"moduleSequenceNumber\":823,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":824,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":10.02399999999999,\"minDifficulty\":10,\"moneyAvailable\":6159333.33421734,\"moneyMax\":13750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"34.6.6.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":239.8099999999981,\"pid\":2365,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":2,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///bd13301b-14b6-4760-83da-18b7078d9c7c\",\"moduleSequenceNumber\":4719}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":150.41000000000008,\"pid\":2381,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":10,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///362e449a-55a5-444d-9e78-c9d43c6c8ab2\",\"moduleSequenceNumber\":954}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.20999999999998,\"pid\":2402,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":6,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///362e449a-55a5-444d-9e78-c9d43c6c8ab2\",\"moduleSequenceNumber\":954}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///410e3594-8e71-4b93-a81c-dde481cb7dc1\",\"moduleSequenceNumber\":5662}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":5662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///362e449a-55a5-444d-9e78-c9d43c6c8ab2\",\"moduleSequenceNumber\":954}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":954,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///bd13301b-14b6-4760-83da-18b7078d9c7c\",\"moduleSequenceNumber\":4719}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":4719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"neo-net\",\"moduleSequenceNumber\":828}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"neo-net\",\"moduleSequenceNumber\":829,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"neo-net\",\"moduleSequenceNumber\":830,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nectar-net\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37.5,\"hackDifficulty\":13.68799999999993,\"minDifficulty\":13,\"moneyAvailable\":13361918.090762345,\"moneyMax\":25000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"57.6.4.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":831,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":832,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":833,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"silver-helix\",\"moduleSequenceNumber\":834}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"silver-helix\",\"moduleSequenceNumber\":835,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":836,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":22500000,\"moneyMax\":225000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"75.7.7.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":141.01000000000008,\"pid\":2385,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":7,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///4912f772-8af4-4f22-b934-c34965303b35\",\"moduleSequenceNumber\":956}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.20999999999998,\"pid\":2406,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":2,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///4912f772-8af4-4f22-b934-c34965303b35\",\"moduleSequenceNumber\":956}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///6e605af9-37fe-4cb6-89cd-f4fcfd71e09c\",\"moduleSequenceNumber\":9892}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":9892,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///4912f772-8af4-4f22-b934-c34965303b35\",\"moduleSequenceNumber\":956}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":956,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///041a24e0-be2d-4d6c-91eb-a8a1a38311a4\",\"moduleSequenceNumber\":23978}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":23978,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":840}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":841,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":842,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":22.5,\"minDifficulty\":8,\"moneyAvailable\":1500000,\"moneyMax\":15000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"99.1.7.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":141.01000000000008,\"pid\":2386,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":6,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///bd569200-d7ef-4577-8a5f-60b31aa940c1\",\"moduleSequenceNumber\":957}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.20999999999998,\"pid\":2405,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":3,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///bd569200-d7ef-4577-8a5f-60b31aa940c1\",\"moduleSequenceNumber\":957}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///f0e49f65-4b26-4311-bb58-8872088eabe1\",\"moduleSequenceNumber\":5192}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":5192,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///bd569200-d7ef-4577-8a5f-60b31aa940c1\",\"moduleSequenceNumber\":957}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":957,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///ee9af9e6-4465-46f6-b90e-6c32a3b33f6a\",\"moduleSequenceNumber\":14591}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":14591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":846}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":848,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":8.631999999999882,\"minDifficulty\":8,\"moneyAvailable\":18861912.86279222,\"moneyMax\":20000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"97.5.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":141.01000000000008,\"pid\":2388,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":4,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///e4606aff-b9a9-465d-a417-4c9f983322a5\",\"moduleSequenceNumber\":960}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.20999999999998,\"pid\":2401,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":14,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///e4606aff-b9a9-465d-a417-4c9f983322a5\",\"moduleSequenceNumber\":960}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///ea6ecc3d-f343-4653-b8a6-4b46132d9a75\",\"moduleSequenceNumber\":9889}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":9889,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///e4606aff-b9a9-465d-a417-4c9f983322a5\",\"moduleSequenceNumber\":960}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":960,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///3e6881ad-4d1b-4481-95b6-bff816bdfe7b\",\"moduleSequenceNumber\":959}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":959,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"phantasy\",\"moduleSequenceNumber\":852}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"phantasy\",\"moduleSequenceNumber\":853,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"phantasy\",\"moduleSequenceNumber\":854,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zer0\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":12.16399999999995,\"minDifficulty\":10,\"moneyAvailable\":88361716.05601528,\"moneyMax\":120000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"87.9.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":141.01000000000008,\"pid\":2391,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":2,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///2e5d7536-4075-457c-b77a-407c8c199577\",\"moduleSequenceNumber\":963}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.20999999999998,\"pid\":2399,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":16,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///2e5d7536-4075-457c-b77a-407c8c199577\",\"moduleSequenceNumber\":963}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///cab50eae-657d-432f-9853-8309a2c584cc\",\"moduleSequenceNumber\":9887}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":9887,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///2e5d7536-4075-457c-b77a-407c8c199577\",\"moduleSequenceNumber\":963}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":963,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///1c1b7df6-b645-448c-ad27-60c6bdffb9af\",\"moduleSequenceNumber\":961}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":961,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"max-hardware\",\"moduleSequenceNumber\":858}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"max-hardware\",\"moduleSequenceNumber\":859,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":860,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":10.273999999999193,\"minDifficulty\":8,\"moneyAvailable\":20431853.033553123,\"moneyMax\":50000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"35.0.4.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":861,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":862,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":863,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"omega-net\",\"moduleSequenceNumber\":864}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"omega-net\",\"moduleSequenceNumber\":865,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"omega-net\",\"moduleSequenceNumber\":866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zer0\",\"comptek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":34446932,\"moneyMax\":344469320,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":191,\"serverGrowth\":39}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"85.2.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":867,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":869,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":870}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":871,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":872,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"neo-net\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61.5,\"hackDifficulty\":61.5,\"minDifficulty\":21,\"moneyAvailable\":27223306,\"moneyMax\":272233060,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":238,\"serverGrowth\":27}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"61.3.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":204.60999999999973,\"pid\":2366,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///1c630000-a545-4a99-a634-949a6e8f5bed\",\"moduleSequenceNumber\":9885}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":150.41000000000008,\"pid\":2383,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///8f5c3369-2e3f-42c9-a3f0-cdf73050d41f\",\"moduleSequenceNumber\":964}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.20999999999998,\"pid\":2398,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":16,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///8f5c3369-2e3f-42c9-a3f0-cdf73050d41f\",\"moduleSequenceNumber\":964}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///a23851e9-0f55-4d0b-a5e7-b03a6fb11bc4\",\"moduleSequenceNumber\":5189}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":5189,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///8f5c3369-2e3f-42c9-a3f0-cdf73050d41f\",\"moduleSequenceNumber\":964}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":964,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///1c630000-a545-4a99-a634-949a6e8f5bed\",\"moduleSequenceNumber\":9885}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":9885,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"iron-gym\",\"moduleSequenceNumber\":876}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"iron-gym\",\"moduleSequenceNumber\":877,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":878,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":15.357999999999867,\"minDifficulty\":15,\"moneyAvailable\":74024898.58103746,\"moneyMax\":100000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"57.8.5.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":880,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":881,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":882}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":883,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":884,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"syscore\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76.5,\"hackDifficulty\":76.5,\"minDifficulty\":26,\"moneyAvailable\":125000000,\"moneyMax\":1250000000,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":523,\"serverGrowth\":32}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"27.2.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":885,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":886,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":887,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":888}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":889,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":890,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\".\",\"ecorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":450000000,\"moneyMax\":4500000000,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1068,\"serverGrowth\":54}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"33.9.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":891,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":892,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":893,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":894}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":895,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":896,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"aevum-police\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":225000000,\"moneyMax\":2250000000,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":797,\"serverGrowth\":45}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"75.1.3.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":898,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":899,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":900}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":901,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":902,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zb-def\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":547,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"56.1.2.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":903,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":904,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":905,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":906}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":907,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":908,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":365,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"71.4.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":909,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":910,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":911,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":912}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":913,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":914,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":213,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"50.3.0.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":915,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":916,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":917,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\".\",\"moduleSequenceNumber\":918}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\".\",\"moduleSequenceNumber\":919,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\".\",\"moduleSequenceNumber\":920,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"helios\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":536,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"90.1.9.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.41000000000008,\"pid\":2394,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":4,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///9e441c80-339a-4096-9a50-2a1947361074\",\"moduleSequenceNumber\":966}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///697008c8-f6aa-4650-a6b7-a7f2d0105c64\",\"moduleSequenceNumber\":9891}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":9891,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///9e441c80-339a-4096-9a50-2a1947361074\",\"moduleSequenceNumber\":966}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":966,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///8ba41c14-4c49-4840-90f1-fd417338ee3a\",\"moduleSequenceNumber\":30546}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":30546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"CSEC\",\"moduleSequenceNumber\":924}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"CSEC\",\"moduleSequenceNumber\":925,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"CSEC\",\"moduleSequenceNumber\":926,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":52,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"39.8.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":927,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":928,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":929,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"The-Cave\",\"moduleSequenceNumber\":930}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"The-Cave\",\"moduleSequenceNumber\":931,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"The-Cave\",\"moduleSequenceNumber\":932,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"45.1.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"93.3.7.1\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":933,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":934,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":935,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10, data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}, available RAM: ${freeRAM}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam: hackScriptRam,\\n\\t\\tgrowScriptRam: growScriptRam,\\n\\t\\tweakenScriptRam: weakenScriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.3,\"server\":\"darkweb\",\"moduleSequenceNumber\":936}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International', 'Fulcrum Technologies',\\n\\t\\t'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife', 'Icarus Microsystems',\\n\\t\\t'Universal Energy', 'Galactic Cybersystems', 'AeroCorp', 'Omnia Cybersystems',\\n\\t\\t'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals', 'Nova Medical',\\n\\t\\t'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction', 'Alpha Enterprises',\\n\\t\\t'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores) - targetCost(ns, a, cores));\\n}\\n\\nexport function targetCost(ns, target, cores = 1) { // TODO: include time in the cost function\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\t// Percent to hack (decimal form)\\n\\tconst hackPercent = 0.01;\\n\\t// Hack threads per hack percent\\n\\tconst hackThreadsPerHackPercent = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterHack = weakenThreadsPerHackThread * hackThreadsPerHackPercent;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed per hack percent\\n\\tconst growThreadsPerHackPercent = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread per hack percent\\n\\tconst weakenThreadsPerHackPercentAfterGrow = weakenThreadsPerGrowThread * growThreadsPerHackPercent;\\n\\t// Total threads per hack percent\\n\\tconst totalRamPerHackPercent = hackThreadsPerHackPercent * hackRam + growThreadsPerHackPercent * growRam +\\n\\t\\t(weakenThreadsPerHackPercentAfterHack + weakenThreadsPerHackPercentAfterGrow) * weakenRam;\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per hack percent\\n\\tconst averageMoneyPerHackPercent = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per unit RAM\\n\\tconst averageMoneyPerRam = averageMoneyPerHackPercent / totalRamPerHackPercent;\\n\\t//\\n\\treturn averageMoneyPerRam;\\n}\\n\\nexport function altTargetCost(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.2,\"server\":\"darkweb\",\"moduleSequenceNumber\":937,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"darkweb\",\"moduleSequenceNumber\":938,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":3,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":77727.49964686281}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Tetrads\",\"playerReputation\":85439.8983651777}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":3,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":34004.74607812653}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":74818.00052336317}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":3,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":82727.4996468628}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Bladeburners\",\"playerReputation\":964190.3288841374}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":false}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":false}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":5,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":100,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"UseIEC60027_2\":true,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-1,\"y\":2,\"opened\":false}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1643552701571","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1643555567962"}}