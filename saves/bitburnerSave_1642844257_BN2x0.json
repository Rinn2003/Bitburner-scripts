{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":492,\"hp\":20,\"max_hp\":20,\"strength\":105,\"defense\":105,\"dexterity\":105,\"agility\":105,\"charisma\":1,\"intelligence\":119,\"hacking_chance_mult\":1.4871093084964102,\"hacking_speed_mult\":1.5317225877513025,\"hacking_money_mult\":1.4871093084964102,\"hacking_grow_mult\":1.4871093084964102,\"hacking_exp\":27007976.793419324,\"strength_exp\":5251.602858075691,\"defense_exp\":5251.602858075691,\"dexterity_exp\":5251.602858075691,\"agility_exp\":5251.602858075691,\"charisma_exp\":0,\"intelligence_exp\":20961.510998366968,\"hacking_mult\":1.7707010536266756,\"strength_mult\":1.369705942036167,\"defense_mult\":1.369705942036167,\"dexterity_mult\":1.369705942036167,\"agility_mult\":1.369705942036167,\"charisma_mult\":1.369705942036167,\"hacking_exp_mult\":2.483175123327306,\"strength_exp_mult\":2.272929174670303,\"defense_exp_mult\":2.272929174670303,\"dexterity_exp_mult\":2.272929174670303,\"agility_exp_mult\":2.272929174670303,\"charisma_exp_mult\":1.894107645558586,\"company_rep_mult\":1.6501695396911917,\"faction_rep_mult\":1.6501695396911917,\"money\":5864182829511.894,\"city\":\"Sector-12\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Slum Snakes\",\"Sector-12\"],\"factionInvitations\":[\"CyberSec\",\"NiteSec\",\"The Black Hand\"],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"The Shadow's Simulacrum\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"Neurotrainer III\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"NeuroFlux Governor\"}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":3,\"n\":5},{\"lvl\":3,\"n\":4}],\"numPeopleKilled\":231,\"karma\":-785.35,\"crime_money_mult\":1.3044818495582544,\"crime_success_mult\":1.3044818495582544,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":5,\"workExpMult\":4,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":75,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":3000,\"work_money_mult\":1.3044818495582544,\"hacknet_node_money_mult\":1.3044818495582544,\"hacknet_node_purchase_cost_mult\":0.706410401014523,\"hacknet_node_ram_cost_mult\":0.706410401014523,\"hacknet_node_core_cost_mult\":0.706410401014523,\"hacknet_node_level_cost_mult\":0.706410401014523,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":{\"ctor\":\"Gang\",\"data\":{\"facName\":\"Slum Snakes\",\"members\":[{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":29925540.717329025,\"hack\":10445,\"str\":145138,\"def\":50112,\"dex\":14832,\"agi\":506,\"cha\":5616,\"hack_exp\":207812.27273171235,\"str_exp\":227603.2231796976,\"def_exp\":98545.33113397828,\"dex_exp\":284343.9312022928,\"agi_exp\":202.32674148381304,\"cha_exp\":154623.93093336615,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1147611.6273363042,\"str_asc_points\":1301458.2904440442,\"def_asc_points\":738175.9572791993,\"dex_asc_points\":2189648.9849947714,\"agi_asc_points\":75928.34209357855,\"cha_asc_points\":889880.8325400271,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Bionic Arms\",\"DataJack\",\"Bionic Legs\",\"Nanofiber Weave\",\"Neuralstimulator\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"bob\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":28864449.084356904,\"hack\":10350,\"str\":143968,\"def\":49735,\"dex\":14673,\"agi\":519,\"cha\":5572,\"hack_exp\":201117.94341915462,\"str_exp\":220505.95912576938,\"def_exp\":95581.69404066839,\"dex_exp\":274735.30652914906,\"agi_exp\":205.3552813696987,\"cha_exp\":149837.7857328718,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1139248.1058126055,\"str_asc_points\":1293956.7756073237,\"def_asc_points\":735602.0077460727,\"dex_asc_points\":2166542.5107751708,\"agi_asc_points\":78218.43025494706,\"cha_asc_points\":885747.9168860498,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Neuralstimulator\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"gangsta-0\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":29385900.43905361,\"hack\":10347,\"str\":143702,\"def\":49705,\"dex\":14681,\"agi\":520,\"cha\":5580,\"hack_exp\":204439.33242968124,\"str_exp\":223832.31989612663,\"def_exp\":97092.99638024138,\"dex_exp\":279520.37212143,\"agi_exp\":205.44292729689056,\"cha_exp\":152532.32566718676,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1132195.5777231546,\"str_asc_points\":1282845.9985365046,\"def_asc_points\":730329.9170411604,\"dex_asc_points\":2156996.45937271,\"agi_asc_points\":78285.21197852174,\"cha_asc_points\":882775.6481334601,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Neuralstimulator\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"gangsta-1\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":28765376.334659033,\"hack\":10313,\"str\":143258,\"def\":49547,\"dex\":14645,\"agi\":522,\"cha\":5564,\"hack_exp\":200496.29392866767,\"str_exp\":219571.6312142831,\"def_exp\":95278.26949017856,\"dex_exp\":274287.5000549889,\"agi_exp\":205.980810051038,\"cha_exp\":149652.54541072316,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1132216.2273040572,\"str_asc_points\":1283014.4991134903,\"def_asc_points\":730939.0764913793,\"dex_asc_points\":2159485.528619105,\"agi_asc_points\":78695.67525512703,\"cha_asc_points\":883559.2191926618,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Neuralstimulator\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"gangsta-2\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":28143163.89531862,\"hack\":10284,\"str\":142768,\"def\":49366,\"dex\":14607,\"agi\":522,\"cha\":5549,\"hack_exp\":196630.86388673758,\"str_exp\":215263.3269521286,\"def_exp\":93429.04984209113,\"dex_exp\":269018.6154677398,\"agi_exp\":205.980810051038,\"cha_exp\":146806.45434406848,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1133132.0037788851,\"str_asc_points\":1282622.216779211,\"def_asc_points\":731032.8240290163,\"dex_asc_points\":2161497.2421054994,\"agi_asc_points\":78695.67525512703,\"cha_asc_points\":884780.677518851,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Neuralstimulator\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"gangsta-3\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":27522224.746455792,\"hack\":10249,\"str\":142292,\"def\":49192,\"dex\":14567,\"agi\":522,\"cha\":5534,\"hack_exp\":192693.5585265756,\"str_exp\":210985.00819405788,\"def_exp\":91598.18924865115,\"dex_exp\":263738.7073319308,\"agi_exp\":205.980810051038,\"cha_exp\":143958.4003514759,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1133240.1246788066,\"str_asc_points\":1282578.640518832,\"def_asc_points\":731423.5462247585,\"dex_asc_points\":2163411.461169991,\"agi_asc_points\":78695.67525512703,\"cha_asc_points\":886028.9564176919,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Neuralstimulator\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"gangsta-4\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":13313187.719573887,\"hack\":8614,\"str\":129005,\"def\":43037,\"dex\":12408,\"agi\":633,\"cha\":4573,\"hack_exp\":98460.76183347878,\"str_exp\":116380.17054332193,\"def_exp\":49762.35240850714,\"dex_exp\":135931.14737523728,\"agi_exp\":262.43758000689627,\"cha_exp\":72930.54646359419,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1017388.2026563681,\"str_asc_points\":1297525.1913646061,\"def_asc_points\":717751.2808451055,\"dex_asc_points\":1963944.257383964,\"agi_asc_points\":79462.2353242159,\"cha_asc_points\":781639.7526693911,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Neuralstimulator\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"gangsta-5\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":12525185.051526893,\"hack\":8521,\"str\":127705,\"def\":42522,\"dex\":12279,\"agi\":631,\"cha\":4523,\"hack_exp\":93435.67936835239,\"str_exp\":110620.20735346749,\"def_exp\":47290.645519659694,\"dex_exp\":129000.22589045501,\"agi_exp\":261.97851411027887,\"cha_exp\":69228.53514324305,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1015454.3923269454,\"str_asc_points\":1295542.199415282,\"def_asc_points\":716386.6152503099,\"dex_asc_points\":1959666.4501095254,\"agi_asc_points\":79184.48167632721,\"cha_asc_points\":780677.9537504425,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Neuralstimulator\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"gangsta-6\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":13005172.22613859,\"hack\":8535,\"str\":127983,\"def\":42676,\"dex\":12297,\"agi\":632,\"cha\":4532,\"hack_exp\":96448.79543741008,\"str_exp\":114156.46376043069,\"def_exp\":48817.835934589035,\"dex_exp\":133164.67445539124,\"agi_exp\":262.32529231976355,\"cha_exp\":71462.93244628275,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1006585.560177933,\"str_asc_points\":1286145.5592382438,\"def_asc_points\":711640.2549690926,\"dex_asc_points\":1943201.835504168,\"agi_asc_points\":79394.25175432563,\"cha_asc_points\":773851.4958695106,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Neuralstimulator\",\"Bionic Spine\",\"BrachiBlades\",\"Synfibril Muscle\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"gangsta-7\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":8393959.283365306,\"hack\":7909,\"str\":120369,\"def\":39494,\"dex\":11462,\"agi\":632,\"cha\":4176,\"hack_exp\":66225.09542771366,\"str_exp\":80036.69261900985,\"def_exp\":34123.209044339936,\"dex_exp\":91682.48462674096,\"agi_exp\":262.362107746595,\"cha_exp\":49006.60344098131,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1002357.5317684328,\"str_asc_points\":1302423.7456405144,\"def_asc_points\":716288.737556712,\"dex_asc_points\":1939093.1398353912,\"agi_asc_points\":79416.53811753937,\"cha_asc_points\":769251.7626628699,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"BrachiBlades\",\"Synfibril Muscle\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"gangsta-8\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":5213137.066270415,\"hack\":7076,\"str\":111264,\"def\":35737,\"dex\":10349,\"agi\":630,\"cha\":3703,\"hack_exp\":43962.49554399872,\"str_exp\":55276.18754694195,\"def_exp\":23445.862817028425,\"dex_exp\":61179.062841633175,\"agi_exp\":261.8720909786228,\"cha_exp\":32435.0150390199,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":955047.3402168346,\"str_asc_points\":1294323.7329669923,\"def_asc_points\":704552.7942522733,\"dex_asc_points\":1857614.595188193,\"agi_asc_points\":79120.16076137575,\"cha_asc_points\":729436.8764475496,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"BrachiBlades\",\"Synfibril Muscle\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"gangsta-9\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":85667236.13984555,\"hack\":6912,\"str\":114240,\"def\":42913,\"dex\":11472,\"agi\":1216,\"cha\":3788,\"hack_exp\":560234.2714560871,\"str_exp\":714449.7662092865,\"def_exp\":325781.0332146192,\"dex_exp\":884739.7971127195,\"agi_exp\":727.1914464566781,\"cha_exp\":421214.666487103,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":370269.5473214724,\"str_asc_points\":571651.9525653617,\"def_asc_points\":359628.6132041145,\"dex_asc_points\":941303.5885202847,\"agi_asc_points\":68726.15564063226,\"cha_asc_points\":293048.4508039001,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"BrachiBlades\",\"Synfibril Muscle\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"gangsta-10\"}}],\"wanted\":20625.064978375744,\"respect\":310724097.3485147,\"isHackingGang\":false,\"respectGainRate\":31954.40093275297,\"wantedGainRate\":0.0031382326668732965,\"moneyGainRate\":696544862.0605607,\"storedCycles\":0,\"storedTerritoryAndPowerCycles\":93,\"territoryClashChance\":1,\"territoryWarfareEngaged\":true,\"notifyMemberDeath\":true}},\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":2,\"lastUpdate\":1642844256415,\"totalPlaytime\":3147363600,\"playtimeSinceLastAug\":38463200,\"playtimeSinceLastBitnode\":74157600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":69138842.50843722,\"gang\":24106689343021.266,\"hacking\":26418201836.23346,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":5864182828511.894,\"work\":0,\"servers\":-18268956655188.08,\"other\":-37200000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":3825000000,\"corporation\":0,\"crime\":92491650.74790505,\"gang\":24105767840008.367,\"hacking\":32723118333.86609,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":5864212550633.103,\"work\":0,\"servers\":-18273599858929.883,\"other\":-43900000,\"augmentations\":-4552140429.9592495}},\"scriptProdSinceLastAug\":21387206555,\"exploits\":[\"N00dles\",\"UndocumentedFunctionCall\",\"Bypass\",\"PrototypeTampering\",\"RealityAlteration\",\"Unclickable\",\"TimeCompression\",\"EditSaveFile\",\"YoureNotMeantToAccessThis\"],\"achievements\":[{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641679889873},{\"ID\":\"NITESEC\",\"unlockedOn\":1641679889924},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641679889930},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641679889937},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641679889950},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641679889959},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641679889967},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1641679889976},{\"ID\":\"SF1.1\",\"unlockedOn\":1641679889988},{\"ID\":\"SF4.1\",\"unlockedOn\":1641679889998},{\"ID\":\"SF5.1\",\"unlockedOn\":1641679890005},{\"ID\":\"NS2\",\"unlockedOn\":1641679890014},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1641679890023},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1641679890030},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641679890036},{\"ID\":\"TOR\",\"unlockedOn\":1641679890048},{\"ID\":\"BYPASS\",\"unlockedOn\":1641679890061},{\"ID\":\"PROTOTYPETAMPERING\",\"unlockedOn\":1641679890067},{\"ID\":\"UNCLICKABLE\",\"unlockedOn\":1641679890073},{\"ID\":\"UNDOCUMENTEDFUNCTIONCALL\",\"unlockedOn\":1641679890083},{\"ID\":\"TIMECOMPRESSION\",\"unlockedOn\":1641679890090},{\"ID\":\"REALITYALTERATION\",\"unlockedOn\":1641679890099},{\"ID\":\"N00DLES\",\"unlockedOn\":1641679890109},{\"ID\":\"EDITSAVEFILE\",\"unlockedOn\":1641679890117},{\"ID\":\"DEVMENU\",\"unlockedOn\":1641679890130},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641681211658},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641687973510},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641721856386},{\"ID\":\"UNACHIEVABLE\",\"unlockedOn\":1641722341982},{\"ID\":\"FROZE\",\"unlockedOn\":1641734437104},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1641817424050},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1641903848242},{\"ID\":\"4S\",\"unlockedOn\":1641907336632},{\"ID\":\"DONATION\",\"unlockedOn\":1641907396617},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641908663322},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1641918704987},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1641937453791},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1641982053228},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1641982113197},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1641984580423},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1641985300316},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641991378620},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1641999052675},{\"ID\":\"WORKOUT\",\"unlockedOn\":1642334647833},{\"ID\":\"INDECISIVE\",\"unlockedOn\":1642343484769},{\"ID\":\"FAST_BN\",\"unlockedOn\":1642768530890},{\"ID\":\"GANG\",\"unlockedOn\":1642772019491},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1642804547259},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1642841548633}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":5,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"94.5.4.1\",\"isConnectedTo\":true,\"maxRam\":262144,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"Formulas.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"fl1ght.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\"],\"ramUsed\":192738.95000000062,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"cortex.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1412136.6263344835,\"offlineMoneyMade\":0,\"offlineRunningTime\":32441.475,\"onlineExpGained\":2377495.828354068,\"onlineMoneyMade\":1297651496,\"onlineRunningTime\":6012.4099999973505,\"pid\":1,\"ramUsage\":46.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///7ecbc11e-ecaf-4eec-94b5-5bef37948c13\",\"moduleSequenceNumber\":478},{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///237306ef-765f-4215-9cd0-1129ea18706c\",\"moduleSequenceNumber\":478},{\"filename\":\"/utils/contractor.js\",\"url\":\"blob:file:///42209869-418c-4a63-92f0-55424f903d58\",\"moduleSequenceNumber\":477},{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///82cb813b-ae1a-4f09-8fa7-d59d6aa33c73\",\"moduleSequenceNumber\":478},{\"filename\":\"/hacking/hack-manager.js\",\"url\":\"blob:file:///ddccd462-b5e8-45c5-b5d9-9570a2fa12e9\",\"moduleSequenceNumber\":461},{\"filename\":\"cortex.js\",\"url\":\"blob:file:///e073dd6c-081b-4307-8b1e-52162f3f4baf\",\"moduleSequenceNumber\":913}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"test.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":32441.48,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6001.60999999736,\"pid\":2,\"ramUsage\":34.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///533d2e65-18f9-4246-9e41-e4fd76a34333\",\"moduleSequenceNumber\":914}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"/hacking/daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":23194176.142757434,\"onlineMoneyMade\":20089555059,\"onlineRunningTime\":2276.2100000002206,\"pid\":493,\"ramUsage\":8.3,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///348754b1-565b-47ff-bde8-90dd10daac0f\",\"moduleSequenceNumber\":49472},{\"filename\":\"/hacking/daemon.js\",\"url\":\"blob:file:///7771369f-82f9-467d-af52-bf630b8598d1\",\"moduleSequenceNumber\":52904}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,58],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.81000000000011,\"pid\":7512,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,59],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.81000000000011,\"pid\":7516,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,61],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.81000000000011,\"pid\":7524,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,62],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.81000000000011,\"pid\":7535,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,63],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000011,\"pid\":7539,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,64],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000011,\"pid\":7543,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,64],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000011,\"pid\":7545,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,64],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000011,\"pid\":7546,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,65],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000011,\"pid\":7547,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,65],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000011,\"pid\":7548,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,65],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000011,\"pid\":7549,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,65],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000011,\"pid\":7550,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,66],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000011,\"pid\":7551,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,66],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000011,\"pid\":7552,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,66],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000011,\"pid\":7553,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,66],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000011,\"pid\":7554,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,67],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000011,\"pid\":7555,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,67],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000011,\"pid\":7556,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,67],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000011,\"pid\":7557,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,67],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000011,\"pid\":7558,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,68],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.81000000000011,\"pid\":7559,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,68],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.81000000000011,\"pid\":7560,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,68],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.81000000000011,\"pid\":7561,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,68],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.81000000000011,\"pid\":7562,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,69],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.81000000000011,\"pid\":7563,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,69],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.81000000000011,\"pid\":7564,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,69],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.81000000000011,\"pid\":7565,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,69],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.81000000000011,\"pid\":7566,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,70],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.81000000000011,\"pid\":7567,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,70],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.81000000000011,\"pid\":7568,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,70],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.81000000000011,\"pid\":7569,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,70],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.81000000000011,\"pid\":7570,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,71],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.81000000000011,\"pid\":7571,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,71],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.81000000000011,\"pid\":7572,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,71],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.81000000000011,\"pid\":7573,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,71],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.81000000000011,\"pid\":7574,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,72],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.81000000000011,\"pid\":7575,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,72],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.81000000000011,\"pid\":7576,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,72],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.81000000000011,\"pid\":7577,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,72],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.81000000000011,\"pid\":7578,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,73],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.81000000000011,\"pid\":7579,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,73],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.81000000000011,\"pid\":7580,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,73],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.81000000000011,\"pid\":7581,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,73],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.81000000000011,\"pid\":7582,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,74],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.81000000000011,\"pid\":7583,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,74],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.81000000000011,\"pid\":7584,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,74],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.81000000000011,\"pid\":7585,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,74],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.81000000000011,\"pid\":7586,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,75],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.81000000000011,\"pid\":7587,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,75],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.81000000000011,\"pid\":7588,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,75],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.81000000000011,\"pid\":7589,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,75],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.81000000000011,\"pid\":7590,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,76],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.81000000000011,\"pid\":7591,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,76],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.81000000000011,\"pid\":7592,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,76],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.81000000000011,\"pid\":7593,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,76],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.81000000000011,\"pid\":7594,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,77],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.81000000000011,\"pid\":7595,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,77],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.81000000000011,\"pid\":7596,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,77],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.81000000000011,\"pid\":7597,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,77],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.81000000000011,\"pid\":7598,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,78],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.81000000000011,\"pid\":7599,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,78],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.81000000000011,\"pid\":7600,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,78],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.81000000000011,\"pid\":7601,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,78],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.81000000000011,\"pid\":7602,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,79],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.81000000000011,\"pid\":7603,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,79],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.81000000000011,\"pid\":7604,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,79],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.81000000000011,\"pid\":7605,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,79],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.81000000000011,\"pid\":7606,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,80],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.81000000000011,\"pid\":7610,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,80],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.81000000000011,\"pid\":7611,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,80],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.81000000000011,\"pid\":7612,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,80],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.81000000000011,\"pid\":7613,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,81],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.81000000000011,\"pid\":7614,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,81],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.81000000000011,\"pid\":7615,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,81],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.81000000000011,\"pid\":7616,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,81],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.81000000000011,\"pid\":7617,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,82],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.81000000000011,\"pid\":7618,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,82],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.81000000000011,\"pid\":7619,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,82],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.81000000000011,\"pid\":7620,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,82],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.81000000000011,\"pid\":7621,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,83],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.81000000000011,\"pid\":7622,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,83],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.81000000000011,\"pid\":7623,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,83],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.81000000000011,\"pid\":7624,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,83],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.81000000000011,\"pid\":7625,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,84],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.81000000000011,\"pid\":7626,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,84],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.81000000000011,\"pid\":7627,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,84],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.81000000000011,\"pid\":7628,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,84],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.81000000000011,\"pid\":7629,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,85],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.81000000000011,\"pid\":7631,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,85],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.81000000000011,\"pid\":7632,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,85],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.81000000000011,\"pid\":7633,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,85],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.81000000000011,\"pid\":7634,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,86],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.81000000000011,\"pid\":7635,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,86],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.81000000000011,\"pid\":7636,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,86],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.81000000000011,\"pid\":7637,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,86],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.81000000000011,\"pid\":7638,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,87],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.610000000000106,\"pid\":7639,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,87],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.610000000000106,\"pid\":7640,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,87],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.610000000000106,\"pid\":7641,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,87],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.610000000000106,\"pid\":7642,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,88],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.610000000000106,\"pid\":7643,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,88],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.610000000000106,\"pid\":7644,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,88],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.610000000000106,\"pid\":7645,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,88],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.610000000000106,\"pid\":7646,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,89],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.610000000000106,\"pid\":7647,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,89],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.610000000000106,\"pid\":7648,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,89],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.610000000000106,\"pid\":7649,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,89],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.610000000000106,\"pid\":7650,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,90],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.610000000000106,\"pid\":7651,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,90],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.610000000000106,\"pid\":7652,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,90],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.610000000000106,\"pid\":7653,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,90],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.610000000000106,\"pid\":7654,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,91],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.610000000000106,\"pid\":7655,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,91],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.610000000000106,\"pid\":7656,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,91],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.610000000000106,\"pid\":7657,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,91],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.610000000000106,\"pid\":7658,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,92],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.610000000000106,\"pid\":7659,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,92],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.610000000000106,\"pid\":7660,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,92],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.610000000000106,\"pid\":7661,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,92],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.610000000000106,\"pid\":7662,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,93],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.610000000000106,\"pid\":7663,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,93],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.610000000000106,\"pid\":7664,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,93],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.610000000000106,\"pid\":7665,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,93],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.610000000000106,\"pid\":7666,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,94],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.610000000000106,\"pid\":7667,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,94],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.610000000000106,\"pid\":7668,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,94],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.610000000000106,\"pid\":7669,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,94],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.610000000000106,\"pid\":7670,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,95],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.610000000000106,\"pid\":7671,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,95],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.610000000000106,\"pid\":7672,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,95],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.610000000000106,\"pid\":7673,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,95],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.610000000000106,\"pid\":7674,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,96],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.610000000000106,\"pid\":7675,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,96],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.610000000000106,\"pid\":7676,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,96],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.610000000000106,\"pid\":7677,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,96],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.610000000000106,\"pid\":7678,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,97],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.610000000000106,\"pid\":7679,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,97],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.610000000000106,\"pid\":7680,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,97],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.610000000000106,\"pid\":7681,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,97],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.610000000000106,\"pid\":7682,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,98],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.610000000000106,\"pid\":7683,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,98],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.610000000000106,\"pid\":7684,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,98],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.610000000000106,\"pid\":7685,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,98],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.610000000000106,\"pid\":7686,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,99],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.610000000000106,\"pid\":7687,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,99],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.610000000000106,\"pid\":7688,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,99],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.610000000000106,\"pid\":7689,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,99],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.610000000000106,\"pid\":7690,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,100],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.610000000000106,\"pid\":7691,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,100],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.610000000000106,\"pid\":7692,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,100],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.610000000000106,\"pid\":7693,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,100],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.610000000000106,\"pid\":7694,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,101],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.610000000000106,\"pid\":7695,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,101],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.610000000000106,\"pid\":7696,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,101],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.610000000000106,\"pid\":7697,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,101],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.610000000000106,\"pid\":7698,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,102],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.610000000000106,\"pid\":7699,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,102],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.610000000000106,\"pid\":7700,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,102],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.610000000000106,\"pid\":7701,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,102],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.610000000000106,\"pid\":7702,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,103],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.610000000000106,\"pid\":7705,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,103],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.610000000000106,\"pid\":7706,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,103],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.610000000000106,\"pid\":7707,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,103],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.610000000000106,\"pid\":7708,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,104],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.610000000000106,\"pid\":7709,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,104],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.610000000000106,\"pid\":7710,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,104],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.610000000000106,\"pid\":7711,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,104],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.610000000000106,\"pid\":7712,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,105],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.610000000000106,\"pid\":7713,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,105],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.610000000000106,\"pid\":7714,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,105],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.610000000000106,\"pid\":7715,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,105],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.610000000000106,\"pid\":7716,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,106],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.610000000000106,\"pid\":7717,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,106],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.610000000000106,\"pid\":7718,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,106],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.610000000000106,\"pid\":7719,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,106],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.610000000000106,\"pid\":7720,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,107],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.610000000000106,\"pid\":7721,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,107],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.610000000000106,\"pid\":7722,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,107],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.610000000000106,\"pid\":7723,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,107],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.610000000000106,\"pid\":7724,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,108],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.610000000000106,\"pid\":7725,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,108],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.610000000000106,\"pid\":7726,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,108],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.610000000000106,\"pid\":7727,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,108],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.610000000000106,\"pid\":7728,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,109],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.610000000000106,\"pid\":7729,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,109],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.610000000000106,\"pid\":7730,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,109],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.610000000000106,\"pid\":7731,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,109],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.610000000000106,\"pid\":7732,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,110],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000106,\"pid\":7733,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,110],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000106,\"pid\":7734,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,110],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000106,\"pid\":7735,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,110],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000106,\"pid\":7736,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,111],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000106,\"pid\":7737,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,111],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000106,\"pid\":7738,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,111],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000106,\"pid\":7739,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,111],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000106,\"pid\":7740,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,112],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000106,\"pid\":7741,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,112],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000106,\"pid\":7742,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,112],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000106,\"pid\":7743,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,112],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000106,\"pid\":7744,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,113],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000106,\"pid\":7745,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,113],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000106,\"pid\":7746,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,113],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000106,\"pid\":7747,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,113],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.610000000000106,\"pid\":7748,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,114],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.610000000000106,\"pid\":7749,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,114],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.610000000000106,\"pid\":7750,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,114],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.610000000000106,\"pid\":7751,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,114],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.610000000000106,\"pid\":7752,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,115],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.610000000000106,\"pid\":7753,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,115],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.610000000000106,\"pid\":7754,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,115],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.610000000000106,\"pid\":7755,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,115],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.610000000000106,\"pid\":7756,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,116],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.610000000000106,\"pid\":7757,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,116],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.610000000000106,\"pid\":7758,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,116],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.610000000000106,\"pid\":7759,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,116],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.610000000000106,\"pid\":7760,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,117],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.610000000000106,\"pid\":7761,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,117],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.610000000000106,\"pid\":7762,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,117],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.610000000000106,\"pid\":7763,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,117],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.610000000000106,\"pid\":7764,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,118],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.610000000000106,\"pid\":7765,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,118],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.610000000000106,\"pid\":7766,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,118],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.610000000000106,\"pid\":7767,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,118],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.610000000000106,\"pid\":7768,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,119],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000009,\"pid\":7769,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,119],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000009,\"pid\":7770,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,119],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000009,\"pid\":7771,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,119],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000009,\"pid\":7772,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,120],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000009,\"pid\":7773,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,120],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000009,\"pid\":7774,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,120],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000009,\"pid\":7775,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,120],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000009,\"pid\":7776,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,121],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000009,\"pid\":7777,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,121],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000009,\"pid\":7778,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,121],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000009,\"pid\":7779,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,121],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000009,\"pid\":7780,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,122],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000009,\"pid\":7781,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,122],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000009,\"pid\":7782,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,122],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000009,\"pid\":7783,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,122],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000009,\"pid\":7784,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,123],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000009,\"pid\":7785,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,123],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000009,\"pid\":7786,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,123],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000009,\"pid\":7787,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,123],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.61000000000009,\"pid\":7788,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,124],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.61000000000008,\"pid\":7789,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,124],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.61000000000008,\"pid\":7790,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,124],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.61000000000008,\"pid\":7791,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,124],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.61000000000008,\"pid\":7792,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,125],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.61000000000008,\"pid\":7793,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,125],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.61000000000008,\"pid\":7794,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,125],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.61000000000008,\"pid\":7795,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,125],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.61000000000008,\"pid\":7796,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,126],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.61000000000008,\"pid\":7797,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,126],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.61000000000008,\"pid\":7798,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,126],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.61000000000008,\"pid\":7799,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,126],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.61000000000008,\"pid\":7800,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,127],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.61000000000008,\"pid\":7801,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,127],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.61000000000008,\"pid\":7802,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,127],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.61000000000008,\"pid\":7803,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,127],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.61000000000008,\"pid\":7804,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,128],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.610000000000056,\"pid\":7805,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,128],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.610000000000056,\"pid\":7806,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,128],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.610000000000056,\"pid\":7807,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,128],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.610000000000056,\"pid\":7808,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,129],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.610000000000056,\"pid\":7809,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,129],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.610000000000056,\"pid\":7810,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,129],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.610000000000056,\"pid\":7811,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,129],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.610000000000056,\"pid\":7812,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,130],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.610000000000056,\"pid\":7813,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,130],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.610000000000056,\"pid\":7814,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,130],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.610000000000056,\"pid\":7815,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,130],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.610000000000056,\"pid\":7816,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,131],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.610000000000056,\"pid\":7817,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,131],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.610000000000056,\"pid\":7818,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,131],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.610000000000056,\"pid\":7819,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,131],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.610000000000056,\"pid\":7820,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,132],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.610000000000056,\"pid\":7821,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,132],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.610000000000056,\"pid\":7822,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,132],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.610000000000056,\"pid\":7823,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,132],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.610000000000056,\"pid\":7824,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,133],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.41000000000004,\"pid\":7825,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,133],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.41000000000004,\"pid\":7826,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,133],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.41000000000004,\"pid\":7827,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,133],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.41000000000004,\"pid\":7828,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,134],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.41000000000004,\"pid\":7829,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,134],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.41000000000004,\"pid\":7830,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,134],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.41000000000004,\"pid\":7831,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,134],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.41000000000004,\"pid\":7832,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,135],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.41000000000004,\"pid\":7833,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,135],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.41000000000004,\"pid\":7834,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,135],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.41000000000004,\"pid\":7835,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,135],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.41000000000004,\"pid\":7836,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,136],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.41000000000004,\"pid\":7837,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,136],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.41000000000004,\"pid\":7838,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,136],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.41000000000004,\"pid\":7839,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,136],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.41000000000004,\"pid\":7840,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,137],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.41000000000004,\"pid\":7841,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,137],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.41000000000004,\"pid\":7842,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,137],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.41000000000004,\"pid\":7843,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,137],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.41000000000004,\"pid\":7844,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,138],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.41000000000002,\"pid\":7845,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,138],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.41000000000002,\"pid\":7846,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,138],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.41000000000002,\"pid\":7847,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,138],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.41000000000002,\"pid\":7848,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,139],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.41000000000002,\"pid\":7849,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,139],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.41000000000002,\"pid\":7850,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,139],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.41000000000002,\"pid\":7851,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,139],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.41000000000002,\"pid\":7852,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,140],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.41000000000002,\"pid\":7853,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,140],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.41000000000002,\"pid\":7854,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,140],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.41000000000002,\"pid\":7855,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,140],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.41000000000002,\"pid\":7856,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,141],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.41000000000002,\"pid\":7857,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,141],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.41000000000002,\"pid\":7858,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,141],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.41000000000002,\"pid\":7859,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,141],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.41000000000002,\"pid\":7860,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,142],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.410000000000004,\"pid\":7861,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,142],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.410000000000004,\"pid\":7862,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,142],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.410000000000004,\"pid\":7863,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,142],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.410000000000004,\"pid\":7864,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,143],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.410000000000004,\"pid\":7865,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,143],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.410000000000004,\"pid\":7866,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,143],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.410000000000004,\"pid\":7867,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,143],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.410000000000004,\"pid\":7868,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,144],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.410000000000004,\"pid\":7869,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,144],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.410000000000004,\"pid\":7870,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,144],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.410000000000004,\"pid\":7871,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,144],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.410000000000004,\"pid\":7872,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,145],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.410000000000004,\"pid\":7874,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,145],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.410000000000004,\"pid\":7875,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,145],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.410000000000004,\"pid\":7876,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,145],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.410000000000004,\"pid\":7877,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,146],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.410000000000004,\"pid\":7878,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,146],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.410000000000004,\"pid\":7879,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,146],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.410000000000004,\"pid\":7880,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,146],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.410000000000004,\"pid\":7881,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,147],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999998,\"pid\":7882,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,147],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999998,\"pid\":7883,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,147],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999998,\"pid\":7884,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,147],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999998,\"pid\":7885,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,148],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999998,\"pid\":7886,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,148],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999998,\"pid\":7887,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,148],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999998,\"pid\":7888,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,148],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999998,\"pid\":7889,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,149],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999998,\"pid\":7890,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,149],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999998,\"pid\":7891,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,149],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999998,\"pid\":7892,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,149],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999998,\"pid\":7893,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,150],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999998,\"pid\":7894,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,150],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999998,\"pid\":7895,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,150],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999998,\"pid\":7896,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,150],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999998,\"pid\":7897,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,151],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999998,\"pid\":7898,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,151],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999998,\"pid\":7899,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,151],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999998,\"pid\":7900,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,151],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999998,\"pid\":7901,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,152],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999975,\"pid\":7902,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,152],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999975,\"pid\":7903,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,152],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999975,\"pid\":7904,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,152],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999975,\"pid\":7905,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,153],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999975,\"pid\":7906,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,153],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999975,\"pid\":7907,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,153],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999975,\"pid\":7908,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,153],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999975,\"pid\":7909,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,154],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999975,\"pid\":7910,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,154],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999975,\"pid\":7911,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,154],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999975,\"pid\":7912,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,154],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999975,\"pid\":7913,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,155],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999975,\"pid\":7914,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,155],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999975,\"pid\":7915,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,155],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999975,\"pid\":7916,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,155],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999975,\"pid\":7917,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,156],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999975,\"pid\":7918,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,156],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999975,\"pid\":7919,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,156],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999975,\"pid\":7920,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,156],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999975,\"pid\":7921,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,157],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999975,\"pid\":7922,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,157],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999975,\"pid\":7923,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,157],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999975,\"pid\":7924,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,157],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999975,\"pid\":7925,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,158],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999975,\"pid\":7926,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,158],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999975,\"pid\":7927,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,158],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999975,\"pid\":7928,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,158],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999975,\"pid\":7929,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,159],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999975,\"pid\":7930,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,159],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999975,\"pid\":7931,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,159],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999975,\"pid\":7932,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,159],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999975,\"pid\":7933,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,160],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999975,\"pid\":7934,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,160],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999975,\"pid\":7935,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,160],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999975,\"pid\":7936,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,160],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999975,\"pid\":7937,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,161],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.409999999999975,\"pid\":7938,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,161],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.409999999999975,\"pid\":7939,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,161],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.409999999999975,\"pid\":7940,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,161],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.409999999999975,\"pid\":7941,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,162],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.409999999999975,\"pid\":7942,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,162],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.409999999999975,\"pid\":7943,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,162],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.409999999999975,\"pid\":7944,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,162],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.409999999999975,\"pid\":7945,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,163],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.409999999999975,\"pid\":7946,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,163],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.409999999999975,\"pid\":7947,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,163],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.409999999999975,\"pid\":7948,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,163],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.409999999999975,\"pid\":7949,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,164],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.409999999999975,\"pid\":7950,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,164],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.409999999999975,\"pid\":7951,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,164],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.409999999999975,\"pid\":7952,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,164],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.409999999999975,\"pid\":7953,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,165],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.409999999999975,\"pid\":7954,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,165],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.409999999999975,\"pid\":7955,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,165],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.409999999999975,\"pid\":7956,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,165],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.409999999999975,\"pid\":7957,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,166],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.409999999999975,\"pid\":7958,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,166],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.409999999999975,\"pid\":7959,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,166],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.409999999999975,\"pid\":7960,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,166],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.409999999999975,\"pid\":7961,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,167],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.409999999999975,\"pid\":7962,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,167],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.409999999999975,\"pid\":7963,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,167],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.409999999999975,\"pid\":7964,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,167],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.409999999999975,\"pid\":7965,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,168],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.409999999999975,\"pid\":7966,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,168],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.409999999999975,\"pid\":7967,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,168],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.409999999999975,\"pid\":7968,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,168],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.409999999999975,\"pid\":7969,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,169],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.409999999999975,\"pid\":7970,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,169],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.409999999999975,\"pid\":7971,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,169],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.409999999999975,\"pid\":7972,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,169],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.409999999999975,\"pid\":7973,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,170],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999975,\"pid\":7974,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,170],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999975,\"pid\":7975,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,170],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999975,\"pid\":7976,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,170],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999975,\"pid\":7977,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,171],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999975,\"pid\":7978,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,171],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999975,\"pid\":7979,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,171],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999975,\"pid\":7980,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,171],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999975,\"pid\":7981,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,172],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999975,\"pid\":7982,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,172],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999975,\"pid\":7983,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,172],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999975,\"pid\":7984,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,172],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999975,\"pid\":7985,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,173],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999975,\"pid\":7986,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,173],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999975,\"pid\":7987,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,173],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999975,\"pid\":7988,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,173],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999975,\"pid\":7989,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,174],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999975,\"pid\":7990,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,174],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999975,\"pid\":7991,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,174],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999975,\"pid\":7992,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,174],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999975,\"pid\":7993,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,175],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.209999999999976,\"pid\":7994,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,175],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.209999999999976,\"pid\":7995,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,175],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.209999999999976,\"pid\":7996,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,175],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.209999999999976,\"pid\":7997,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,176],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.209999999999976,\"pid\":7998,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,176],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.209999999999976,\"pid\":7999,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,176],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.209999999999976,\"pid\":8000,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,176],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.209999999999976,\"pid\":8001,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,177],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.209999999999976,\"pid\":8003,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,177],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.209999999999976,\"pid\":8004,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,177],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.209999999999976,\"pid\":8005,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,177],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.209999999999976,\"pid\":8006,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,178],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.209999999999976,\"pid\":8007,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,178],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.209999999999976,\"pid\":8008,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,178],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.209999999999976,\"pid\":8009,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,178],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.209999999999976,\"pid\":8010,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,179],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.209999999999976,\"pid\":8011,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,179],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.209999999999976,\"pid\":8012,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,179],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.209999999999976,\"pid\":8013,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,179],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.209999999999976,\"pid\":8014,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,180],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.209999999999976,\"pid\":8015,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,180],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.209999999999976,\"pid\":8016,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,180],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.209999999999976,\"pid\":8017,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,180],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.209999999999976,\"pid\":8018,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,181],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.209999999999976,\"pid\":8019,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,181],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.209999999999976,\"pid\":8020,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,181],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.209999999999976,\"pid\":8021,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,181],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.209999999999976,\"pid\":8022,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,182],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.209999999999976,\"pid\":8023,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,182],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.209999999999976,\"pid\":8024,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,182],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.209999999999976,\"pid\":8025,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,182],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.209999999999976,\"pid\":8026,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,183],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.209999999999976,\"pid\":8027,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,183],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.209999999999976,\"pid\":8028,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,183],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.209999999999976,\"pid\":8029,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,183],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.209999999999976,\"pid\":8030,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,184],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.209999999999976,\"pid\":8031,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,184],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.209999999999976,\"pid\":8032,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,184],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.209999999999976,\"pid\":8033,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,184],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.209999999999976,\"pid\":8034,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,185],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.209999999999976,\"pid\":8035,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,185],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.209999999999976,\"pid\":8036,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,185],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.209999999999976,\"pid\":8037,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,185],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.209999999999976,\"pid\":8038,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,186],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.209999999999976,\"pid\":8039,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,186],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.209999999999976,\"pid\":8040,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,186],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.209999999999976,\"pid\":8041,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,186],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.209999999999976,\"pid\":8042,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,187],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.209999999999976,\"pid\":8043,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,187],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.209999999999976,\"pid\":8044,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,187],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.209999999999976,\"pid\":8045,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,187],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.209999999999976,\"pid\":8046,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,188],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.209999999999976,\"pid\":8047,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,188],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.209999999999976,\"pid\":8048,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,188],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.209999999999976,\"pid\":8049,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,188],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.209999999999976,\"pid\":8050,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,189],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.209999999999972,\"pid\":8051,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,189],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.209999999999972,\"pid\":8052,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,189],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.209999999999972,\"pid\":8053,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,189],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.209999999999972,\"pid\":8054,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,190],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.209999999999972,\"pid\":8055,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,190],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.209999999999972,\"pid\":8056,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,190],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.209999999999972,\"pid\":8057,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,190],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.209999999999972,\"pid\":8058,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,191],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.209999999999972,\"pid\":8059,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,191],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.209999999999972,\"pid\":8060,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,191],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.209999999999972,\"pid\":8061,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,191],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.209999999999972,\"pid\":8062,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,192],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.209999999999972,\"pid\":8063,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,192],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.209999999999972,\"pid\":8064,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,192],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.209999999999972,\"pid\":8065,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,192],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.209999999999972,\"pid\":8066,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,193],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.209999999999976,\"pid\":8067,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,193],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.209999999999976,\"pid\":8068,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,193],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.209999999999976,\"pid\":8069,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,193],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.209999999999976,\"pid\":8070,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,194],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.209999999999976,\"pid\":8071,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,194],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.209999999999976,\"pid\":8072,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,194],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.209999999999976,\"pid\":8073,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,194],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.209999999999976,\"pid\":8074,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,195],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.209999999999976,\"pid\":8075,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,195],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.209999999999976,\"pid\":8076,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,195],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.209999999999976,\"pid\":8077,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,195],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.209999999999976,\"pid\":8078,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,196],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.209999999999976,\"pid\":8079,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,196],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.209999999999976,\"pid\":8080,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,196],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.209999999999976,\"pid\":8081,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,196],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.209999999999976,\"pid\":8082,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,197],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.209999999999976,\"pid\":8083,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,197],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.209999999999976,\"pid\":8084,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,197],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.209999999999976,\"pid\":8085,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,197],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.209999999999976,\"pid\":8086,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,198],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.209999999999976,\"pid\":8087,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,198],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.209999999999976,\"pid\":8088,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,198],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.209999999999976,\"pid\":8089,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,198],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.209999999999976,\"pid\":8090,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,199],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.209999999999976,\"pid\":8091,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,199],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.209999999999976,\"pid\":8092,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,199],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.209999999999976,\"pid\":8093,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,199],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.209999999999976,\"pid\":8094,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,200],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.209999999999976,\"pid\":8095,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,200],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.209999999999976,\"pid\":8096,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,200],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.209999999999976,\"pid\":8097,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,200],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.209999999999976,\"pid\":8098,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,201],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.209999999999976,\"pid\":8099,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,201],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.209999999999976,\"pid\":8100,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,201],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.209999999999976,\"pid\":8101,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,201],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.209999999999976,\"pid\":8102,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,202],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.209999999999976,\"pid\":8103,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,202],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.209999999999976,\"pid\":8104,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,202],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.209999999999976,\"pid\":8105,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,202],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.209999999999976,\"pid\":8106,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,203],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.209999999999976,\"pid\":8107,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,203],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.209999999999976,\"pid\":8108,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,203],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.209999999999976,\"pid\":8109,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,203],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.209999999999976,\"pid\":8110,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,204],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.209999999999976,\"pid\":8111,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,204],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.209999999999976,\"pid\":8112,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,204],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.209999999999976,\"pid\":8113,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,204],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.209999999999976,\"pid\":8114,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,205],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.209999999999976,\"pid\":8115,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,205],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.209999999999976,\"pid\":8116,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,205],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.209999999999976,\"pid\":8117,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,205],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.209999999999976,\"pid\":8118,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,206],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.209999999999976,\"pid\":8119,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,206],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.209999999999976,\"pid\":8120,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,206],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.209999999999976,\"pid\":8121,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,206],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.209999999999976,\"pid\":8122,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,207],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.209999999999976,\"pid\":8123,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,207],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.209999999999976,\"pid\":8124,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,207],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.209999999999976,\"pid\":8125,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,207],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.209999999999976,\"pid\":8126,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,208],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.209999999999976,\"pid\":8127,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,208],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.209999999999976,\"pid\":8128,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,208],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.209999999999976,\"pid\":8129,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,208],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.209999999999976,\"pid\":8130,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,209],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.209999999999976,\"pid\":8131,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,209],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.209999999999976,\"pid\":8132,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,209],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.209999999999976,\"pid\":8133,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,209],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.209999999999976,\"pid\":8134,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,210],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.209999999999976,\"pid\":8135,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,210],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.209999999999976,\"pid\":8136,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,210],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.209999999999976,\"pid\":8137,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,210],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.209999999999976,\"pid\":8138,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,211],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.209999999999976,\"pid\":8139,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,211],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.209999999999976,\"pid\":8140,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,211],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.209999999999976,\"pid\":8141,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,211],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.209999999999976,\"pid\":8142,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,212],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.209999999999976,\"pid\":8143,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,212],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.209999999999976,\"pid\":8144,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,212],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.209999999999976,\"pid\":8145,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,212],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.209999999999976,\"pid\":8146,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,213],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.209999999999976,\"pid\":8147,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,213],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.209999999999976,\"pid\":8148,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,213],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.209999999999976,\"pid\":8149,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,213],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.209999999999976,\"pid\":8150,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,214],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.209999999999976,\"pid\":8151,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,214],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.209999999999976,\"pid\":8152,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,214],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.209999999999976,\"pid\":8153,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,214],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.209999999999976,\"pid\":8154,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,215],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.209999999999976,\"pid\":8155,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,215],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.209999999999976,\"pid\":8156,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,215],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.209999999999976,\"pid\":8157,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,215],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.209999999999976,\"pid\":8158,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,216],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.209999999999976,\"pid\":8159,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,216],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.209999999999976,\"pid\":8160,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,216],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.209999999999976,\"pid\":8161,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,216],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.209999999999976,\"pid\":8162,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,217],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999976,\"pid\":8163,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,217],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999976,\"pid\":8164,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,217],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999976,\"pid\":8165,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,217],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999976,\"pid\":8166,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,218],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999976,\"pid\":8167,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,218],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999976,\"pid\":8168,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,218],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999976,\"pid\":8169,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,218],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999976,\"pid\":8170,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,219],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999976,\"pid\":8171,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,219],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999976,\"pid\":8172,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,219],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999976,\"pid\":8173,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,219],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999976,\"pid\":8174,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,220],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999976,\"pid\":8175,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,220],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999976,\"pid\":8176,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,220],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999976,\"pid\":8177,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,220],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999976,\"pid\":8178,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,221],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":8179,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,221],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":8180,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,221],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":8181,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,221],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":8182,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,222],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":8183,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,222],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":8184,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,222],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":8185,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,222],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":8186,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,223],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":8188,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,223],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":8189,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,223],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":8190,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,223],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":8191,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,224],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":8192,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,224],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":8193,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,224],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":8194,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,224],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":8195,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,225],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":8196,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,225],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":8197,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,225],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":8198,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,225],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":8199,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,226],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.009999999999975,\"pid\":8200,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,226],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.009999999999975,\"pid\":8201,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,226],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.009999999999975,\"pid\":8202,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,226],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.009999999999975,\"pid\":8203,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,227],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.009999999999975,\"pid\":8204,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,227],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.009999999999975,\"pid\":8205,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,227],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.009999999999975,\"pid\":8206,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,227],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.009999999999975,\"pid\":8207,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,228],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.009999999999975,\"pid\":8208,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,228],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.009999999999975,\"pid\":8209,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,228],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.009999999999975,\"pid\":8210,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,228],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.009999999999975,\"pid\":8211,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,229],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.009999999999975,\"pid\":8212,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,229],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.009999999999975,\"pid\":8213,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,229],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.009999999999975,\"pid\":8214,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,229],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.009999999999975,\"pid\":8215,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,230],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.009999999999975,\"pid\":8216,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,230],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.009999999999975,\"pid\":8217,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,230],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.009999999999975,\"pid\":8218,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,230],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.009999999999975,\"pid\":8219,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,231],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.009999999999978,\"pid\":8220,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,231],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.009999999999978,\"pid\":8221,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,231],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.009999999999978,\"pid\":8222,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,231],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.009999999999978,\"pid\":8223,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,232],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.009999999999978,\"pid\":8224,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,232],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.009999999999978,\"pid\":8225,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,232],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.009999999999978,\"pid\":8226,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,232],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.009999999999978,\"pid\":8227,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,233],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.009999999999978,\"pid\":8228,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,233],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.009999999999978,\"pid\":8229,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,233],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.009999999999978,\"pid\":8230,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,233],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.009999999999978,\"pid\":8231,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,234],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.009999999999978,\"pid\":8232,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,234],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.009999999999978,\"pid\":8233,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,234],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.009999999999978,\"pid\":8234,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,234],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.009999999999978,\"pid\":8235,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,235],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.009999999999984,\"pid\":8236,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,235],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.009999999999984,\"pid\":8237,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,235],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.009999999999984,\"pid\":8238,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,235],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.009999999999984,\"pid\":8239,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,236],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.009999999999984,\"pid\":8240,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,236],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.009999999999984,\"pid\":8241,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,236],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.009999999999984,\"pid\":8242,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,236],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.009999999999984,\"pid\":8243,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,237],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.009999999999984,\"pid\":8244,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,237],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.009999999999984,\"pid\":8245,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,237],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.009999999999984,\"pid\":8246,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,237],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.009999999999984,\"pid\":8247,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",37789.73138852291,238],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.009999999999984,\"pid\":8248,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":108,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",0,238],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.009999999999984,\"pid\":8249,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",10144.115045913555,238],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.009999999999984,\"pid\":8250,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":477,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",105.55790890648858,238],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.009999999999984,\"pid\":8251,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.009999999999984,\"pid\":8252,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":31,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main() {\\n\\tlet boxes = Array.from(eval('document').querySelectorAll('[class*=MuiBox-root]'));\\n\\tlet box = boxes.find(x => hasPlayer(x));\\n\\n\\tif (box) {\\n\\t\\tlet props = getProps(box);\\n\\t\\tprops.router.toDevMenu();\\n\\t}\\n}\\n\\nfunction getProps(obj) {\\n\\treturn Object.entries(obj).find(entry => entry[0].startsWith('__reactProps'))[1].children.props;\\n}\\n\\nfunction hasPlayer(obj) {\\n\\ttry {\\n\\t\\treturn !!getProps(obj).player;\\n\\t} catch (err) {\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/exploits/dev-menu.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/exploits/dev-menu.js\",\"url\":\"blob:file:///0b983167-dada-4071-8c15-200ae61f0c33\"}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":457,\"_hash\":\"b03b9cede60b50447d1f38b2e370d36f9517e5d1b9accfc2ed19d72569cd3499\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///8c5aca9d-b073-4329-946a-295cd1286d9e\",\"moduleSequenceNumber\":478},{\"filename\":\"/hacking/daemon.js\",\"url\":\"blob:file:///7da53ec2-a738-4f06-901c-92884265f7a9\",\"moduleSequenceNumber\":6991}],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"home\",\"moduleSequenceNumber\":6991,\"_hash\":\"c3ca17a56df6b613ed91932e42a70387a783e9cb47b5cfc31bb8061753f01b12\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAccessibleServers, getOptimalHackable, getScripts} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tconst scripts = getScripts();\\n\\tconst servers = getAccessibleServers(ns);\\n\\tconst hackables = getOptimalHackable(ns, servers);\\n\\n\\tif (ns.scriptRunning(scripts.daemon, 'home')) ns.scriptKill(scripts.daemon, 'home');\\n\\tns.exec(scripts.daemon, 'home', 1, hackables[0]);\\n\\n\\tfor (let [i, host] of ns.getPurchasedServers().entries()) {\\n\\t\\tif (i < hackables.length) {\\n\\t\\t\\tif (ns.scriptRunning(scripts.daemon, host)) ns.scriptKill(scripts.daemon, host);\\n\\t\\t\\telse ns.killall(host);\\n\\t\\t\\tns.exec(scripts.daemon, host, 1, hackables[i + 1]);\\n\\t\\t} else break;\\n\\t}\\n}\",\"filename\":\"/hacking/deploy-daemons.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///ea82125a-2de5-44be-a8eb-59dbc3761a8a\",\"moduleSequenceNumber\":478},{\"filename\":\"/hacking/deploy-daemons.js\",\"url\":\"blob:file:///b8305b00-5282-41e1-8d4d-0fdd0c547540\",\"moduleSequenceNumber\":6990}],\"dependents\":[],\"ramUsage\":12.3,\"server\":\"home\",\"moduleSequenceNumber\":6990,\"_hash\":\"e07c7eeee9dea647b8c311043faf667a8094d6cc2dbaac5b50d84eeb2bcae064\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///20f096c8-ae09-406d-86f0-f172f1479d84\",\"moduleSequenceNumber\":919}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":919,\"_hash\":\"d4919ca0b839149d0836473b5a11aa73a718df89acac9fdc22b51ab4173c1321\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n\\tcopyScriptsToAll,\\n\\tfindPlaceToRun,\\n\\tgetAccessibleServers,\\n\\tgetFreeRam,\\n\\tgetOptimalHackable,\\n\\tgetScripts\\n} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tawait copyScriptsToAll(ns);\\n\\twhile (true) {\\n\\t\\tmanageAndHack(ns);\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\nexport function manageAndHack(ns) {\\n\\tconst scripts = getScripts();\\n\\tconst servers = getAccessibleServers(ns);\\n\\tconst hackables = getOptimalHackable(ns, servers);\\n\\tconst [freeRams, filteredHackables] = getFreeRam(ns, servers, hackables);\\n\\tconst hackstates = getHackStates(ns, servers, filteredHackables);\\n\\tfor (let target of filteredHackables) {\\n\\t\\tlet money = ns.getServerMoneyAvailable(target);\\n\\t\\tlet maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tlet minSec = ns.getServerMinSecurityLevel(target);\\n\\t\\tlet sec = ns.getServerSecurityLevel(target);\\n\\n\\t\\tlet secDiff = sec - minSec;\\n\\t\\tif (secDiff > 0) {\\n\\t\\t\\tlet threads = Math.ceil(secDiff * 20) - hackstates.get(target).weaken;\\n\\t\\t\\tif (threads > 0) {\\n\\t\\t\\t\\tif (!findPlaceToRun(ns, scripts.weaken, threads, freeRams, [target])) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tlet moneyPercent = money / maxMoney;\\n\\t\\tif (moneyPercent === 0) moneyPercent = 0.1;\\n\\t\\tif (moneyPercent < 0.9) {\\n\\t\\t\\tlet threads = Math.ceil(ns.growthAnalyze(target, 1 / moneyPercent)) - hackstates.get(target).grow;\\n\\t\\t\\tif (threads > 0) {\\n\\t\\t\\t\\tif (!findPlaceToRun(ns, scripts.grow, threads, freeRams, [target])) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (moneyPercent > 0.75 && secDiff < 50) {\\n\\t\\t\\tlet threads = Math.floor(ns.hackAnalyzeThreads(target, money - (0.4 * maxMoney))) - hackstates.get(target).hack;\\n\\t\\t\\tif (threads > 0) {\\n\\t\\t\\t\\tif (!findPlaceToRun(ns, scripts.hack, threads, freeRams, [target])) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction getHackStates(ns, servers, hackables) {\\n\\tconst scripts = getScripts();\\n\\tconst hackstates = new Map();\\n\\tfor (let server of servers.values()) {\\n\\t\\tfor (let hackable of hackables.values()) {\\n\\t\\t\\tlet weakenScript = ns.getRunningScript(scripts.weaken, server, hackable);\\n\\t\\t\\tlet growScript = ns.getRunningScript(scripts.grow, server, hackable);\\n\\t\\t\\tlet hackScript = ns.getRunningScript(scripts.hack, server, hackable);\\n\\t\\t\\tif (hackstates.has(hackable)) {\\n\\t\\t\\t\\thackstates.get(hackable).weaken += !weakenScript ? 0 : weakenScript.threads;\\n\\t\\t\\t\\thackstates.get(hackable).grow += !growScript ? 0 : growScript.threads;\\n\\t\\t\\t\\thackstates.get(hackable).hack += !hackScript ? 0 : hackScript.threads;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\thackstates.set(hackable, {\\n\\t\\t\\t\\t\\tweaken: !weakenScript ? 0 : weakenScript.threads,\\n\\t\\t\\t\\t\\tgrow: !growScript ? 0 : growScript.threads,\\n\\t\\t\\t\\t\\thack: !hackScript ? 0 : hackScript.threads\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn hackstates;\\n}\",\"filename\":\"/hacking/hack-manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///f15a74fa-2152-4477-bb5f-f820b8317c85\",\"moduleSequenceNumber\":103401},{\"filename\":\"/hacking/hack-manager.js\",\"url\":\"blob:file:///5c849d29-cf68-4212-89bf-fcd2ff0aa49e\",\"moduleSequenceNumber\":103421}],\"dependents\":[],\"ramUsage\":12.85,\"server\":\"home\",\"moduleSequenceNumber\":461,\"_hash\":\"b32ae978a334b77e54be495f88ea81520a1b0604cb6a8b1dffd28dfa89f97207\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5cfc7435-fd12-4666-8c9e-89026f9ce89b\",\"moduleSequenceNumber\":1894}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":1894,\"_hash\":\"e069d60f0f0c6197182950d3c3105a36cae3b096c5b47e4eeff3d2e011a163d1\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///83ebb903-1f09-49d5-89fe-211c7f791b5c\",\"moduleSequenceNumber\":920}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":920,\"_hash\":\"08854ec21e551e0919facae4cf4276671f7ea728815f06750286cba970c1dfca\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const commission = 100000;\\nconst samplingLength = 30;\\n\\nfunction predictState(samples) {\\n\\tconst limits = [null, null, null, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 11, 12, 12, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 19, 19, 20];\\n\\tlet inc = 0;\\n\\tfor (let i = 0; i < samples.length; ++i) {\\n\\t\\tconst total = i + 1;\\n\\t\\tconst idx = samples.length - total;\\n\\t\\tif (samples[idx] > 1) {\\n\\t\\t\\tinc++;\\n\\t\\t}\\n\\t\\tconst limit = limits[i];\\n\\t\\tif (limit === null) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (inc >= limit) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t\\tif ((total - inc) >= limit) {\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t}\\n\\treturn 0;\\n}\\n\\nfunction posNegDiff(samples) {\\n\\tconst pos = samples.reduce((acc, curr) => acc + (curr > 1. ? 1 : 0), 0);\\n\\treturn Math.abs(samples.length - 2 * pos);\\n}\\n\\nfunction posNegRatio(samples) {\\n\\tconst pos = samples.reduce((acc, curr) => acc + (curr > 1. ? 1 : 0), 0);\\n\\treturn Math.round(100 * (2 * pos / samples.length - 1));\\n}\\n\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"ALL\\\");\\n\\tlet symLastPrice = {};\\n\\tlet symChanges = {};\\n\\tfor (const sym of ns.stock.getSymbols()) {\\n\\t\\tsymLastPrice[sym] = ns.stock.getPrice(sym);\\n\\t\\tsymChanges[sym] = []\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(2000);\\n\\n\\t\\tif (symLastPrice['FSIG'] === ns.stock.getPrice('FSIG')) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tfor (const sym of ns.stock.getSymbols()) {\\n\\t\\t\\tconst current = ns.stock.getPrice(sym);\\n\\t\\t\\tsymChanges[sym].push(current / symLastPrice[sym]);\\n\\t\\t\\tsymLastPrice[sym] = current;\\n\\t\\t\\tif (symChanges[sym].length > samplingLength) {\\n\\t\\t\\t\\tsymChanges[sym] = symChanges[sym].slice(symChanges[sym].length - samplingLength);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tconst prioritizedSymbols = [...ns.stock.getSymbols()];\\n\\t\\tprioritizedSymbols.sort((a, b) => posNegDiff(symChanges[b]) - posNegDiff(symChanges[a]));\\n\\n\\t\\tfor (const sym of prioritizedSymbols) {\\n\\t\\t\\tconst positions = ns.stock.getPosition(sym);\\n\\t\\t\\tconst longShares = positions[0];\\n\\t\\t\\tconst longPrice = positions[1];\\n\\t\\t\\tconst shortShares = positions[2];\\n\\t\\t\\tconst shortPrice = positions[3];\\n\\t\\t\\tconst state = predictState(symChanges[sym]);\\n\\t\\t\\tconst ratio = posNegRatio(symChanges[sym]);\\n\\t\\t\\tconst bidPrice = ns.stock.getBidPrice(sym);\\n\\t\\t\\tconst askPrice = ns.stock.getAskPrice(sym);\\n\\t\\t\\tif (longShares <= 0 && shortShares <= 0 && ns.stock.getPrice(sym) < 30000) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (longShares > 0) {\\n\\t\\t\\t\\tconst cost = longShares * longPrice;\\n\\t\\t\\t\\tconst profit = longShares * (bidPrice - longPrice) - 2 * commission;\\n\\t\\t\\t\\tif (state < 0) {\\n\\t\\t\\t\\t\\tconst sellPrice = ns.stock.sell(sym, longShares);\\n\\t\\t\\t\\t\\tif (sellPrice > 0) {\\n\\t\\t\\t\\t\\t\\tns.print(`SOLD (long) ${sym}. Profit: ${ns.nFormat(profit, \\\"0.000a\\\")}`);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.print(`${sym} (${ratio}): ${ns.nFormat(profit + cost, \\\"0.000a\\\")} / ${ns.nFormat(profit, \\\"0.000a\\\")} (${(profit / cost * 100).toFixed(2)}%)`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (shortShares > 0) {\\n\\t\\t\\t\\tconst cost = shortShares * shortPrice;\\n\\t\\t\\t\\tconst profit = shortShares * (shortPrice - askPrice) - 2 * commission;\\n\\t\\t\\t\\tif (state > 0) {\\n\\t\\t\\t\\t\\tconst sellPrice = ns.stock.sellShort(sym, shortShares);\\n\\t\\t\\t\\t\\tif (sellPrice > 0) {\\n\\t\\t\\t\\t\\t\\tns.print(`SOLD (short) ${sym}. Profit: ${ns.nFormat(profit, \\\"0.000a\\\")}`);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.print(`${sym} (${ratio}): ${ns.nFormat(profit + cost, \\\"0.000a\\\")} / ${ns.nFormat(profit, \\\"0.000a\\\")} (${(profit / cost * 100).toFixed(2)}%)`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tconst money = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t\\t\\t\\tif (state > 0) {\\n\\t\\t\\t\\t\\tconst sharesToBuy = Math.min(10000, ns.stock.getMaxShares(sym), Math.floor((money - commission) / askPrice));\\n\\t\\t\\t\\t\\tif (ns.stock.buy(sym, sharesToBuy) > 0) {\\n\\t\\t\\t\\t\\t\\tns.print(`BOUGHT (long) ${sym}.`);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// else if (state < 0 ) {\\n\\t\\t\\t\\t//   const sharesToBuy = Math.min(10000, ns.stock.getMaxShares(sym), Math.floor((money - commission) / bidPrice));\\n\\t\\t\\t\\t//   if (ns.stock.short(sym, sharesToBuy) > 0) {\\n\\t\\t\\t\\t//     ns.print(`BOUGHT (short) ${sym}.`);\\n\\t\\t\\t\\t//   }\\n\\t\\t\\t\\t// }\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/stock-market/early-stock-market.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.2,\"server\":\"home\",\"moduleSequenceNumber\":464,\"_hash\":\"0890e76738fe633d9a1eb148bba50d4c190523f9ee2a3df71b15d621ba9a506f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Requires access to the TIX API and the 4S Mkt Data API\\nlet fracL = 0.1; // Fraction of assets to keep as cash in hand\\nlet fracH = 0.2;\\nlet commission = 100000; // Buy or sell commission\\n\\nfunction refresh(ns, stocks, myStocks) {\\n\\tlet corpus = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tmyStocks.length = 0;\\n\\tfor (let stock of stocks) {\\n\\t\\tlet sym = stock.sym;\\n\\t\\tstock.price = ns.stock.getPrice(sym);\\n\\t\\t[stock.shares, stock.buyPrice] = ns.stock.getPosition(sym);\\n\\t\\tstock.vol = ns.stock.getVolatility(sym);\\n\\t\\tstock.prob = 2 * (ns.stock.getForecast(sym) - 0.5);\\n\\t\\tstock.expRet = stock.vol * stock.prob / 2;\\n\\t\\tcorpus += stock.price * stock.shares;\\n\\t\\tif (stock.shares > 0) myStocks.push(stock);\\n\\t}\\n\\tstocks.sort((a, b) => b.expRet - a.expRet);\\n\\treturn corpus;\\n}\\n\\nfunction buy(ns, stock, numShares) {\\n\\tlet price = ns.stock.buy(stock.sym, numShares);\\n\\tlet totalPrice = price * numShares\\n\\tif (price) ns.print(`Bought ${numShares} shares of ${stock.sym} for ${ns.nFormat(totalPrice, \\\"0.000a\\\")}`);\\n}\\n\\nfunction sell(ns, stock, numShares) {\\n\\tlet price = ns.stock.sell(stock.sym, numShares);\\n\\tlet profit = numShares * (stock.price - stock.buyPrice) - 2 * commission;\\n\\tif (price) ns.print(`Sold ${numShares} shares of ${stock.sym} for a profit of ${ns.nFormat(profit, \\\"0.000a\\\")}`);\\n}\\n\\nexport async function main(ns) {\\n\\t//Initialise\\n\\tns.disableLog(\\\"ALL\\\");\\n\\tlet stocks = [];\\n\\tlet myStocks = [];\\n\\tlet corpus = 0;\\n\\n\\tfor (let sym of ns.stock.getSymbols()) {\\n\\t\\tstocks.push({sym: sym});\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tcorpus = refresh(ns, stocks, myStocks);\\n\\t\\t// Sell underperforming shares\\n\\t\\tfor (let myStock of myStocks) {\\n\\t\\t\\tif (stocks[0].expRet > myStock.expRet) {\\n\\t\\t\\t\\tsell(ns, myStock, myStock.shares);\\n\\t\\t\\t\\tcorpus -= commission;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Sell shares if not enough cash in hand\\n\\t\\tfor (let myStock of myStocks) {\\n\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") < fracL * corpus) {\\n\\t\\t\\t\\tlet cashNeeded = corpus * fracH - ns.getServerMoneyAvailable(\\\"home\\\") + commission;\\n\\t\\t\\t\\tlet numShares = Math.ceil(cashNeeded / myStock.price);\\n\\t\\t\\t\\tsell(ns, myStock, numShares);\\n\\t\\t\\t\\tcorpus -= commission;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Buy shares with cash remaining in hand\\n\\t\\tlet cashToSpend = ns.getServerMoneyAvailable(\\\"home\\\") - (fracH * corpus);\\n\\t\\tlet numShares = Math.floor((cashToSpend - commission) / stocks[0].price);\\n\\t\\tif (numShares > ns.stock.getMaxShares(stocks[0].sym)) numShares = ns.stock.getMaxShares(stocks[0].sym);\\n\\t\\tif ((numShares * stocks[0].expRet * stocks[0].price) > commission) buy(ns, stocks[0], numShares);\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n}\",\"filename\":\"/stock-market/stock-market.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/stock-market/stock-market.js\",\"url\":\"blob:file:///c483c0e7-3efb-4afb-80b4-4cf3db0652c1\",\"moduleSequenceNumber\":37535}],\"dependents\":[],\"ramUsage\":19.7,\"server\":\"home\",\"moduleSequenceNumber\":465,\"_hash\":\"ca81c8c0412629b3e18e85ad1998d2eac9761df2b274f7a9a284c377cac51203\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst server = ns.args[0];\\n\\tconst usedRam = ns.getServerUsedRam(server);\\n\\tconst maxRam = ns.getServerMaxRam(server);\\n\\tconst money = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst minSec = ns.getServerMinSecurityLevel(server);\\n\\tconst sec = ns.getServerSecurityLevel(server);\\n\\n\\tns.tprint(`\\n${server}:\\n    RAM        : ${ns.nFormat(usedRam * 1000 ** 3, \\\"0.00b\\\")} / ${ns.nFormat(maxRam * 1000 ** 3, \\\"0.00b\\\")} (${(usedRam / maxRam * 100).toFixed(2)}%)\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)}\\n    hack time  : ${ns.tFormat(ns.getHackTime(server))}\\n    grow time  : ${ns.tFormat(ns.getGrowTime(server))}\\n    weaken time: ${ns.tFormat(ns.getWeakenTime(server))}\\n    grow x2    : ${Math.ceil(ns.growthAnalyze(server, 2))} threads\\n    grow x3    : ${Math.ceil(ns.growthAnalyze(server, 3))} threads\\n    grow x4    : ${Math.ceil(ns.growthAnalyze(server, 4))} threads\\n    hack 10%   : ${Math.floor(0.1 / ns.hackAnalyze(server))} threads\\n    hack 25%   : ${Math.floor(0.25 / ns.hackAnalyze(server))} threads\\n    hack 50%   : ${Math.floor(0.5 / ns.hackAnalyze(server))} threads\\n    hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/tools/analyze-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/tools/analyze-server.js\",\"url\":\"blob:file:///8f5e44fc-f2b0-4f79-8e0b-39d8cf19bd0a\",\"moduleSequenceNumber\":244244}],\"dependents\":[],\"ramUsage\":5.35,\"server\":\"home\",\"moduleSequenceNumber\":466,\"_hash\":\"6619cc0c1589e2f49c33c30e904029c7c743566bf011fc5b60dc419a8a18df87\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst mults = ns.getBitNodeMultipliers();\\n\\tfor (let [mult, val] of Object.entries(mults)) {\\n\\t\\tns.tprint(`${mult}: ${val}`);\\n\\t}\\n}\",\"filename\":\"/tools/bitnode-multipliers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/tools/bitnode-multipliers.js\",\"url\":\"blob:file:///a5474450-0396-4471-94c4-251c755e3245\",\"moduleSequenceNumber\":104253}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":467,\"_hash\":\"1b05da9eaa009ff6c1ea4327f0928a1b9a84baca2b54e41f2732e27a3ed8d76f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst cost = ns.getPurchasedServerCost(Math.pow(2, ns.args[0]));\\n\\tns.tprint(ns.nFormat(cost, '$0.000a') + ' / ' + ns.nFormat(cost * 25, '$0.000a'));\\n}\",\"filename\":\"/tools/cost-pserv.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/tools/cost-pserv.js\",\"url\":\"blob:file:///1b59c217-982d-4449-90cd-fe033360ec5a\",\"moduleSequenceNumber\":13004}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"home\",\"moduleSequenceNumber\":13004,\"_hash\":\"eb5525ca20ffef2475d020610dafdbb753f15035ae52f347f9dd19b6aa4a620f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst favor = 1 + Math.floor(Math.log((ns.args[0] + 25000) / 25500) / Math.log(1.02));\\n\\tns.tprint(favor);\\n}\",\"filename\":\"/tools/favor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":469,\"_hash\":\"6ad751e0df0ec6fbb7d5566bba9ffd5bf774eb0a307aa21712094760add3d41d\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getServers} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tconst servers = getServers(ns);\\n\\tfor (let server of servers) {\\n\\t\\tlet files = ns.ls(server);\\n\\t\\tfor (let file of files) {\\n\\t\\t\\tif (file.endsWith('.lit') || file.endsWith('.txt')) {\\n\\t\\t\\t\\tawait ns.scp(file, server, 'home');\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/tools/get-all-text.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///475c3128-f4c8-41e2-9b48-e27f3e6c3f25\",\"moduleSequenceNumber\":103401},{\"filename\":\"/tools/get-all-text.js\",\"url\":\"blob:file:///07ec6154-ae09-45ed-be61-81d5f61bf25b\",\"moduleSequenceNumber\":104252}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":470,\"_hash\":\"c97e515d9ca69432b40b8181133b05c5a67cacc9e33fc6715be4c6ca073fc025\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAccessibleServers, getOptimalHackable} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tconst servers = getAccessibleServers(ns);\\n\\tconst hackable = getOptimalHackable(ns, servers);\\n\\tfor (let [i, host] of hackable.entries()) {\\n\\t\\tlet growth = ns.getServerGrowth(host);\\n\\t\\tlet money = ns.nFormat(ns.getServerMaxMoney(host), \\\"0.000a\\\");\\n\\t\\tlet minSec = ns.getServerMinSecurityLevel(host);\\n\\t\\tns.tprint(`${i + 1}: Maximum Money: ${money}, Growth: ${growth}, Min Security: ${minSec}, Server: ${host}`);\\n\\t}\\n}\",\"filename\":\"/tools/hackable-servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///f42dad68-eacd-4a58-90d5-2fa9eab2a133\",\"moduleSequenceNumber\":103401},{\"filename\":\"/tools/hackable-servers.js\",\"url\":\"blob:file:///f06deeac-1fe1-4c8a-9115-594475b391bf\",\"moduleSequenceNumber\":244243}],\"dependents\":[],\"ramUsage\":6.35,\"server\":\"home\",\"moduleSequenceNumber\":471,\"_hash\":\"77f8678e5689e1a51b3f032bc619bf3f1b569fb1a361527d4ce8e1565a9feb3d\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst karma = ns.heart.break();\\n\\tns.tprint(karma.toFixed(2));\\n}\",\"filename\":\"/tools/karma.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/tools/karma.js\",\"url\":\"blob:file:///1a1e3aa0-927e-49b0-9ae7-ef6af3537f23\",\"moduleSequenceNumber\":116566}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":472,\"_hash\":\"8529bd972efba9e73eb14e6c6dedebe5a94dc535af954e63001249f18366aa70\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tns.tail();\\n\\tns.disableLog('ALL');\\n\\twhile (true) {\\n\\t\\tconst server = ns.args[0];\\n\\t\\tlet money = ns.getServerMoneyAvailable(server);\\n\\t\\tif (money === 0) money = 1;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\t\\tconst minSec = ns.getServerMinSecurityLevel(server);\\n\\t\\tconst sec = ns.getServerSecurityLevel(server);\\n\\t\\tns.clearLog(server);\\n\\t\\tns.print(`${server}:`);\\n\\t\\tns.print(` $       : ${ns.nFormat(money, '$0.000a')} / ${ns.nFormat(maxMoney, '$0.000a')} (${(money / maxMoney * 100).toFixed(2)}%)`);\\n\\t\\tns.print(` security: +${sec - minSec}`);\\n\\t\\tns.print(` hack    : ${ns.getHackTime(server)} (t=${Math.ceil(ns.hackAnalyzeThreads(server, money))})`);\\n\\t\\tns.print(` grow    : ${ns.getGrowTime(server)} (t=${Math.ceil(ns.growthAnalyze(server, maxMoney / money))})`);\\n\\t\\tns.print(` weaken  : ${ns.getWeakenTime(server)} (t=${Math.ceil((sec - minSec) * 20)})`);\\n\\t\\tawait ns.sleep(20);\\n\\t}\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/tools/monitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"home\",\"moduleSequenceNumber\":473,\"_hash\":\"893c12e0ba4f315c62804972ae8d701f79995bced0cb1efe4b3bc26a3fba651f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAccessibleServers, getOptimalHackable, getScripts, scriptsToCopy} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tconst power = ns.args[0];\\n\\n\\tif (power < 0 || power > 20) {\\n\\t\\tns.tprint(`Invalid RAM amount.`);\\n\\t\\tns.exit();\\n\\t}\\n\\n\\tconst servers = getAccessibleServers(ns);\\n\\tconst hackables = getOptimalHackable(ns, servers);\\n\\n\\tconst targetRam = Math.pow(2, power);\\n\\tfor (let i = 0; i < ns.getPurchasedServerLimit(); i++) {\\n\\t\\tlet server = 'pserv-' + i;\\n\\t\\tlet cost = ns.getPurchasedServerCost(targetRam);\\n\\t\\twhile (ns.getServerMoneyAvailable('home') < cost) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t\\tif (ns.serverExists(server)) {\\n\\t\\t\\tif (ns.getServerMaxRam(server) < targetRam) {\\n\\t\\t\\t\\tns.killall(server);\\n\\t\\t\\t\\tns.deleteServer(server);\\n\\t\\t\\t} else continue;\\n\\t\\t}\\n\\t\\tns.tprint(`Buying server: ${server}, target RAM: ${targetRam}`);\\n\\t\\tns.purchaseServer(server, targetRam);\\n\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\tns.exec(getScripts().daemon, server, 1, hackables[i + 1]);\\n\\t}\\n}\",\"filename\":\"/tools/pserv-buyer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///71e46214-520d-4616-9547-3a32fb76ad04\",\"moduleSequenceNumber\":81553},{\"filename\":\"/tools/pserv-buyer.js\",\"url\":\"blob:file:///649f6bd1-b42d-413f-97db-96ab94468f9f\",\"moduleSequenceNumber\":82427}],\"dependents\":[],\"ramUsage\":13.7,\"server\":\"home\",\"moduleSequenceNumber\":474,\"_hash\":\"56c2d141ea865d967ca9c6c4f957758f2fa9da467ecafc722271bee972d6116a\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst reputation = Math.ceil(25500 * Math.exp(Math.log(1.02) * (ns.args[0] - 1)) - 25000);\\n\\tns.tprint(ns.nFormat(reputation, '0.000a'));\\n}\",\"filename\":\"/tools/reputation.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/tools/reputation.js\",\"url\":\"blob:file:///aa33c0f3-e8d2-4e13-8fde-ebda6c4aec9b\"}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":475,\"_hash\":\"182648057b1c1b5efc12614517609fa0b5dd94312c4a74359ddbbb214c62bb5f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {hackServer, routeFinder} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tconst server = ns.args[0];\\n\\tconst route = routeFinder(ns, server);\\n\\tif (route && hackServer(ns, server)) {\\n\\t\\tfor (let serv of route) {\\n\\t\\t\\tns.connect(serv);\\n\\t\\t}\\n\\t\\tns.tprint(`Installing backdoor on ${server}.`);\\n\\t\\tawait ns.installBackdoor();\\n\\t\\tns.tprint(`Backdoor successfully installed on ${server}.`);\\n\\t\\tfor (let serv of route.reverse()) {\\n\\t\\t\\tns.connect(serv);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/utils/backdoor.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///5ea95f9c-408f-4f5f-90d2-69fc577b8b82\",\"moduleSequenceNumber\":478},{\"filename\":\"/utils/backdoor.js\",\"url\":\"blob:file:///c2a04ada-93e5-4e66-9609-6cdd73ee9441\",\"moduleSequenceNumber\":950}],\"dependents\":[],\"ramUsage\":6.55,\"server\":\"home\",\"moduleSequenceNumber\":950,\"_hash\":\"15f2594f57ee82215c23c8012705bc1dbfd417836b99e2a808214f4cb0b3a681\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getServers, printBoth} from '/utils/utils.js';\\n\\nexport function contractor(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tlet files = ns.ls(server, '.cct');\\n\\t\\tfor (let file of files) {\\n\\t\\t\\tlet contract = ns.codingcontract.getContractType(file, server);\\n\\t\\t\\tlet data = ns.codingcontract.getData(file, server);\\n\\t\\t\\tlet solution;\\n\\t\\t\\tswitch (contract) {\\n\\t\\t\\t\\tcase 'Find Largest Prime Factor':\\n\\t\\t\\t\\t\\tsolution = largestPrimeFactor(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\t\\t\\tsolution = subarrayMaxSum(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Spiralize Matrix':\\n\\t\\t\\t\\t\\tsolution = spiralizeMatrix(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Minimum Path Sum in a Triangle':\\n\\t\\t\\t\\t\\tsolution = minPathSum(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\t\\t\\tsolution = uniquePathsI(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\t\\t\\tsolution = uniquePathsII(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Algorithmic Stock Trader I':\\n\\t\\t\\t\\t\\tsolution = stockTrader(1, data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\t\\t\\tsolution = stockTrader(Math.floor(data.length / 2), data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Algorithmic Stock Trader III':\\n\\t\\t\\t\\t\\tsolution = stockTrader(2, data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Algorithmic Stock Trader IV':\\n\\t\\t\\t\\t\\tsolution = stockTrader(...data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Generate IP Addresses':\\n\\t\\t\\t\\t\\tsolution = genIPAddresses(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\t\\t\\tsolution = mergeOverlappingIntervals(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Array Jumping Game':\\n\\t\\t\\t\\t\\tsolution = arrayJumpingGame(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\t\\t\\tsolution = totalWaysToSum(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Find All Valid Math Expressions':\\n\\t\\t\\t\\t\\tsolution = validMathExpressions(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Sanitize Parentheses in Expression':\\n\\t\\t\\t\\t\\tsolution = sanitizeParentheses(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\tprintBoth(ns, `Found ${file} on ${server} of type: ${contract}.`)\\n\\t\\t\\t}\\n\\t\\t\\tlet result = ns.codingcontract.attempt(solution, file, server, {returnReward: true});\\n\\t\\t\\tif (result) {\\n\\t\\t\\t\\tprintBoth(ns, `Solved ${file} on ${server} of type: ${contract}. ${result}.`);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tprintBoth(ns, `Could not solve ${file} on ${server} of type: ${contract}.`);\\n\\t\\t\\t\\tprintBoth(ns, `Disabling contractor.`);\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn true;\\n}\\n\\nfunction largestPrimeFactor(n) {\\n\\tlet maxPrime = 0;\\n\\twhile (n % 2 === 0) {\\n\\t\\tn = Math.floor(n / 2);\\n\\t\\tmaxPrime = 2;\\n\\t}\\n\\tfor (let i = 3; i <= Math.floor(Math.sqrt(n)) + 1; i = i + 2) {\\n\\t\\twhile (n % i === 0) {\\n\\t\\t\\tn = Math.floor(n / i);\\n\\t\\t\\tmaxPrime = i;\\n\\t\\t}\\n\\t}\\n\\tif (n > 2) maxPrime = n;\\n\\n\\treturn maxPrime;\\n}\\n\\nfunction subarrayMaxSum(array) {\\n\\tconst sumReduce = (a, b) => a + b;\\n\\tlet maxSum = -Infinity;\\n\\tlet sum;\\n\\tfor (let i = 0; i < array.length; i++) {\\n\\t\\tfor (let j = i; j < array.length; j++) {\\n\\t\\t\\tsum = array.slice(i, j + 1).reduce(sumReduce);\\n\\t\\t\\tif (sum > maxSum) maxSum = sum;\\n\\t\\t}\\n\\t}\\n\\treturn maxSum;\\n}\\n\\nfunction spiralizeMatrix(matrix) {\\n\\tconst rows = matrix.length;\\n\\tconst cols = matrix[0].length;\\n\\n\\tlet maxrow = rows - 1;\\n\\tlet maxcol = cols - 1;\\n\\tlet minrow = 0;\\n\\tlet mincol = 0;\\n\\n\\tlet row = 0;\\n\\tlet col = 0;\\n\\n\\tlet list = [];\\n\\twhile (list.length < rows * cols) {\\n\\t\\tif (maxrow >= minrow) {\\n\\t\\t\\tfor (col; col <= maxcol; col++) {\\n\\t\\t\\t\\tlist.push(matrix[row][col]);\\n\\t\\t\\t}\\n\\t\\t\\tminrow++;\\n\\t\\t\\trow++;\\n\\t\\t\\tcol--;\\n\\t\\t}\\n\\t\\tif (maxcol >= mincol) {\\n\\t\\t\\tfor (row; row <= maxrow; row++) {\\n\\t\\t\\t\\tlist.push(matrix[row][col]);\\n\\t\\t\\t}\\n\\t\\t\\tmaxcol--;\\n\\t\\t\\tcol--;\\n\\t\\t\\trow--;\\n\\t\\t}\\n\\t\\tif (minrow <= maxrow) {\\n\\t\\t\\tfor (col; col >= mincol; col--) {\\n\\t\\t\\t\\tlist.push(matrix[row][col]);\\n\\t\\t\\t}\\n\\t\\t\\tmaxrow--;\\n\\t\\t\\tcol++;\\n\\t\\t\\trow--;\\n\\t\\t}\\n\\t\\tif (mincol <= maxcol) {\\n\\t\\t\\tfor (row; row >= minrow; row--) {\\n\\t\\t\\t\\tlist.push(matrix[row][col]);\\n\\t\\t\\t}\\n\\t\\t\\tmincol++;\\n\\t\\t\\trow++;\\n\\t\\t\\tcol++;\\n\\t\\t}\\n\\t}\\n\\treturn list;\\n}\\n\\nfunction minPathSum(data) {\\n\\tconst totalPaths = Math.pow(2, data.length - 1);\\n\\tlet minSum = Infinity;\\n\\tfor (let i = 0; i < totalPaths; i++) {\\n\\t\\tlet bin = i.toString(2);\\n\\t\\twhile (bin.length < data.length - 1) {\\n\\t\\t\\tbin = '0' + bin;\\n\\t\\t}\\n\\n\\t\\tlet sum = data[0][0];\\n\\t\\tlet k = 0;\\n\\t\\tfor (let j = 1; j < data.length; j++) {\\n\\t\\t\\tlet index = parseInt(bin.charAt(j - 1));\\n\\t\\t\\tk += index;\\n\\t\\t\\tsum += data[j][k];\\n\\t\\t}\\n\\n\\t\\tif (sum < minSum) minSum = sum;\\n\\t}\\n\\treturn minSum;\\n}\\n\\nfunction uniquePathsI(data) {\\n\\tconst [m, n] = data;\\n\\n\\tconst f = [];\\n\\tconst x = factorial(f, m + n - 2);\\n\\tconst y = factorial(f, m - 1);\\n\\tconst z = factorial(f, n - 1);\\n\\n\\treturn x / (y * z);\\n}\\n\\nfunction factorial(f, n) {\\n\\tif (n === 0 || n === 1) return 1;\\n\\tif (f[n] > 0) return f[n];\\n\\treturn f[n] = n * factorial(f, n - 1);\\n}\\n\\nfunction uniquePathsII(grid) {\\n\\tconst gridSum = [];\\n\\tfor (let i of grid) {\\n\\t\\tgridSum.push(i.slice());\\n\\t}\\n\\tfor (let i = 0; i < gridSum.length; i++) {\\n\\t\\tfor (let j = 0; j < gridSum[0].length; j++) {\\n\\t\\t\\tif (gridSum[i][j] === 1) {\\n\\t\\t\\t\\tgridSum[i][j] = 0;\\n\\t\\t\\t} else if (i === 0 && j === 0) {\\n\\t\\t\\t\\tgridSum[0][0] = 1;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tgridSum[i][j] = (i > 0 ? gridSum[i - 1][j] : 0) + (j > 0 ? gridSum[i][j - 1] : 0);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn gridSum[gridSum.length - 1][gridSum[0].length - 1];\\n}\\n\\nfunction stockTrader(maxTrades, stockPrices) {\\n\\tlet tempStr = '[0';\\n\\tfor (let i = 0; i < stockPrices.length - 1; i++) {\\n\\t\\ttempStr += ',0';\\n\\t}\\n\\ttempStr += ']';\\n\\tlet tempArr = '[' + tempStr;\\n\\tfor (let i = 0; i < maxTrades - 1; i++) {\\n\\t\\ttempArr += ',' + tempStr;\\n\\t}\\n\\ttempArr += ']';\\n\\n\\tconst highestProfit = JSON.parse(tempArr);\\n\\n\\tfor (let i = 0; i < maxTrades; i++) {\\n\\t\\tfor (let j = 0; j < stockPrices.length - 1; j++) {\\n\\t\\t\\tfor (let k = j + 1; k < stockPrices.length; k++) {\\n\\t\\t\\t\\tif (i > 0 && j > 0 && k > 0) {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t} else if (i > 0 && j > 0) {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t} else if (i > 0 && k > 0) {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t} else if (j > 0 && k > 0) {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn highestProfit[maxTrades - 1][stockPrices.length - 1];\\n}\\n\\nfunction genIPAddresses(string) {\\n\\tconst ips = [];\\n\\tfor (let i = 1; i < string.length - 2; i++) {\\n\\t\\tfor (let j = i + 1; j < string.length - 1; j++) {\\n\\t\\t\\tfor (let k = j + 1; k < string.length; k++) {\\n\\t\\t\\t\\tconst ip = [\\n\\t\\t\\t\\t\\tstring.slice(0, i),\\n\\t\\t\\t\\t\\tstring.slice(i, j),\\n\\t\\t\\t\\t\\tstring.slice(j, k),\\n\\t\\t\\t\\t\\tstring.slice(k)\\n\\t\\t\\t\\t];\\n\\n\\t\\t\\t\\tlet isValid = true;\\n\\t\\t\\t\\tip.forEach(seg => {\\n\\t\\t\\t\\t\\tisValid = isValid && isValidIpSegment(seg)\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\tif (isValid) ips.push(ip.join('.'));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn ips;\\n}\\n\\nfunction isValidIpSegment(segment) {\\n\\treturn !((segment[0] === '0' && segment !== '0') || segment > 255);\\n}\\n\\nfunction mergeOverlappingIntervals(array) {\\n\\tarray.sort((a, b) => a[0] - b[0]);\\n\\n\\tconst intervals = [array[0].slice()];\\n\\tfor (let interval of array) {\\n\\t\\tlet [x1, y1] = interval;\\n\\t\\tlet [, y2] = intervals[intervals.length - 1];\\n\\n\\t\\tif (y2 >= x1) intervals[intervals.length - 1][1] = Math.max(y1, y2);\\n\\t\\telse intervals.push(interval.slice());\\n\\t}\\n\\treturn intervals;\\n}\\n\\nfunction arrayJumpingGame(array) {\\n\\tconst reachable = new Array(array.length).fill(0);\\n\\treachable[0] = 1;\\n\\tfor (let i = 0; i < array.length; i++) {\\n\\t\\tlet num = array[i];\\n\\t\\tfor (let j = 1; j <= num; j++) {\\n\\t\\t\\tif (i + j === array.length) break;\\n\\t\\t\\treachable[i + j] = 1;\\n\\t\\t}\\n\\t}\\n\\treturn reachable.includes(0) ? 0 : 1;\\n}\\n\\nfunction totalWaysToSum(n) {\\n\\tconst table = [1];\\n\\tfor (let i = 0; i < n; i++) {\\n\\t\\ttable.push(0);\\n\\t}\\n\\tfor (let i = 1; i < n; i++) {\\n\\t\\tfor (let j = i; j <= n; j++) {\\n\\t\\t\\ttable[j] += table[j - i];\\n\\t\\t}\\n\\t}\\n\\treturn table[n];\\n}\\n\\nfunction validMathExpressions(data) {\\n\\tconst [digits, target] = data;\\n\\tconst valid = [];\\n\\tfor (let i = 0; i < 4 ** (digits.length - 1); i++) {\\n\\t\\tlet j = i.toString(4);\\n\\t\\twhile (j.length < digits.length - 1) {\\n\\t\\t\\tj = '0' + j;\\n\\t\\t}\\n\\t\\tif (digits[0] === '0' && j[0] === '0') continue;\\n\\n\\t\\tlet expr = digits[0];\\n\\t\\tfor (let k = 1; k < digits.length; k++) {\\n\\t\\t\\tif (digits[k] === '0' && j[k] === '0' && j[k - 1] !== '0') break;\\n\\n\\t\\t\\tlet op;\\n\\t\\t\\tswitch (j[k - 1]) {\\n\\t\\t\\t\\tcase '0':\\n\\t\\t\\t\\t\\top = '';\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase '1':\\n\\t\\t\\t\\t\\top = '+';\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase '2':\\n\\t\\t\\t\\t\\top = '-';\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase '3':\\n\\t\\t\\t\\t\\top = '*';\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\texpr += op + digits[k];\\n\\t\\t}\\n\\t\\tif (eval(expr) === target) valid.push(expr);\\n\\t}\\n\\treturn valid;\\n}\\n\\nfunction sanitizeParentheses(data) {\\n\\tconst valid = new Set('');\\n\\tlet min = data.length;\\n\\tfor (let i = 0; i < 2 ** data.length; i++) {\\n\\t\\tlet j = i.toString(2);\\n\\t\\twhile (j.length < data.length) {\\n\\t\\t\\tj = '0' + j;\\n\\t\\t}\\n\\n\\t\\tlet str = '';\\n\\t\\tlet deletions = 0;\\n\\t\\tfor (let k = 0; k < j.length; k++) {\\n\\t\\t\\tif (j[k] === '1' || (data[k] !== '(' && data[k] !== ')')) str += data[k];\\n\\t\\t\\telse deletions++;\\n\\t\\t}\\n\\t\\tif (deletions > min) continue;\\n\\n\\t\\tlet count = 0;\\n\\t\\tlet neg = false;\\n\\t\\tfor (let k of str) {\\n\\t\\t\\tif (k === '(') count++;\\n\\t\\t\\telse if (k === ')') count--;\\n\\t\\t\\tif (count < 0) neg = true;\\n\\t\\t}\\n\\t\\tif (count > 0 || neg) continue;\\n\\n\\t\\tif (deletions === min) valid.add(str);\\n\\t\\telse if (deletions < min) {\\n\\t\\t\\tmin = deletions;\\n\\t\\t\\tvalid.clear();\\n\\t\\t\\tvalid.add(str);\\n\\t\\t}\\n\\t}\\n\\treturn [...valid];\\n}\",\"filename\":\"/utils/contractor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":22,\"server\":\"home\",\"moduleSequenceNumber\":477,\"_hash\":\"ced9c7d182cf22e24107c0e45f9b9fecb6bb67f55aa84baea4e6864fbfb82dc6\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"home\",\"moduleSequenceNumber\":478,\"_hash\":\"2d91ac381e37a0b91b2f3adc6013a583a652522325d8ae932659ad808c31b06e\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst cost = ns.getUpgradeHomeCoresCost();\\n\\tif (await ns.prompt(`Upgrade home Cores for ${ns.nFormat(cost, '$0.000a')}?`)) {\\n\\t\\tif (ns.upgradeHomeCores()) ns.tprint(`Home cores upgraded.`);\\n\\t\\telse ns.tprint(`Could not upgrade home cores.`);\\n\\t}\\n}\",\"filename\":\"/utils/upgrade-home-cores.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/upgrade-home-cores.js\",\"url\":\"blob:file:///4bd28f9e-b19b-4fa1-a50e-fd2565c2c2db\",\"moduleSequenceNumber\":3746}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":3746,\"_hash\":\"c57e487d129ba403d908146c518de853c0b7f8c21f82fd1ca1a2a8625ef1924d\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getUpgradeHomeCoresCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"upgradeHomeCores\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst cost = ns.getUpgradeHomeRamCost();\\n\\tif (await ns.prompt(`Upgrade home RAM for ${ns.nFormat(cost, '$0.000a')}?`)) {\\n\\t\\tif (ns.upgradeHomeRam()) ns.tprint(`Home RAM upgraded.`);\\n\\t\\telse ns.tprint(`Could not upgrade home RAM.`);\\n\\t}\\n}\",\"filename\":\"/utils/upgrade-home-ram.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/upgrade-home-ram.js\",\"url\":\"blob:file:///f1309c49-83ec-4c72-a37d-3b0be3d27f14\",\"moduleSequenceNumber\":4215}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":4215,\"_hash\":\"9bd02e826e8b0b326cd48d9e77389f9581ad678d35d4bb519e5a531cd27643d1\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst url = 'https://raw.githubusercontent.com/mirkoconsiglio/Bitburner-scripts/master';\\n\\tconst listOfScripts = `build/scripts.txt`;\\n\\tns.tprint('----- Downloading scripts -----');\\n\\ttry {\\n\\t\\tns.tprint(`Downloading ${listOfScripts}`);\\n\\t\\tlet download = await ns.wget(`${url}/${listOfScripts}`, '/' + listOfScripts);\\n\\t\\tif (!download) throw listOfScripts;\\n\\t\\tlet scripts = ns.read('/' + listOfScripts).split('\\\\n');\\n\\t\\tfor (let script of scripts) {\\n\\t\\t\\tns.tprint(`Downloading ${script}`);\\n\\t\\t\\tif (script.includes('/')) download = await ns.wget(`${url}/${script}`, '/' + script);\\n\\t\\t\\telse download = await ns.wget(`${url}/${script}`, script);\\n\\t\\t\\tif (!download) throw script;\\n\\t\\t}\\n\\t\\tns.tprint('----- Download complete -----');\\n\\t} catch (script) {\\n\\t\\tns.tprint(`Could not download ${script}`);\\n\\t}\\n}\",\"filename\":\"/build/download-bitburner-scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/build/download-bitburner-scripts.js\",\"url\":\"blob:file:///59f9af22-dfcf-4561-8d3d-120d8b9031d0\",\"moduleSequenceNumber\":47730}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":481,\"_hash\":\"db6be36921ed3570f27656ff3709a77330179d053163e571a78ce453593dcaa2\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst scriptsToKeep = ['/build/scripts.txt', '/build/download-bitburner-scripts.js'];\\n\\tns.read('/build/scripts.txt').split('\\\\n').forEach((script) => {\\n\\t\\tif (script.includes('/')) scriptsToKeep.push('/' + script);\\n\\t\\telse scriptsToKeep.push(script);\\n\\t});\\n\\tlet files = ns.ls('home').filter(file =>\\n\\t\\tfile.endsWith('.js') || file.endsWith('.txt'));\\n\\tfor (let file of files) {\\n\\t\\tif (!scriptsToKeep.includes(file)) {\\n\\t\\t\\tif (await ns.prompt(`Delete ${file}?`)) {\\n\\t\\t\\t\\tns.rm(file, 'home');\\n\\t\\t\\t\\tns.tprint(`Deleted ${file}`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/build/script-remover.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/build/script-remover.js\",\"url\":\"blob:file:///5ac8b83e-392e-4b5b-9b54-050bcaf3eca5\",\"moduleSequenceNumber\":47815}],\"dependents\":[],\"ramUsage\":2.8,\"server\":\"home\",\"moduleSequenceNumber\":482,\"_hash\":\"b0e886a683c819af301969714eb16bdedfa567fa40525eda9475ea32decb7185\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const fs = require('fs');\\nconst path = require('path');\\n\\nfunction getFilesRecursive(dir, arrayOfFiles) {\\n\\ttry {\\n\\t\\tlet files = fs.readdirSync(dir);\\n\\t\\tarrayOfFiles = arrayOfFiles || [];\\n\\t\\tfiles.forEach(function (file) {\\n\\t\\t\\tlet subfile = path.join(dir, file);\\n\\t\\t\\tif (fs.statSync(subfile).isDirectory()) {\\n\\t\\t\\t\\tarrayOfFiles = getFilesRecursive(subfile, arrayOfFiles);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tarrayOfFiles.push(subfile);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\treturn arrayOfFiles.filter(file => (path.extname(file) === '.txt' || path.extname(file) === '.js'));\\n\\t} catch (err) {\\n\\t\\tconsole.log(err);\\n\\t}\\n}\\n\\nfunction getFiles(dir = __dirname) {\\n\\tlet files = getFilesRecursive(`${dir}`);\\n\\tlet relativeFiles = [];\\n\\tfiles.forEach(file => relativeFiles.push(path.relative(dir, file).replace(/\\\\\\\\/g, '/')));\\n\\treturn relativeFiles;\\n}\\n\\nfunction writeToFile(filename, str) {\\n\\tfs.writeFile(filename, str, (err) => {\\n\\t\\tif (err) console.log(err);\\n\\t\\telse console.log(\\\"File written successfully\\\");\\n\\t});\\n}\\n\\nlet dir = path.join(__dirname, '../');\\nlet files = getFiles(`${dir}`);\\nlet str = files.join('\\\\n');\\nwriteToFile('scripts.txt', str);\\n\\n\",\"filename\":\"/build/scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/build/scripts.js\",\"url\":\"blob:file:///464d4a93-457e-41c9-831b-d4fcbbac1ba1\"}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":483,\"_hash\":\"3473c2d539d998d8b3b634cc14a0eac375726fbef43b2e87d2dcd692214e5877\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getFactions} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tconst file = '/texts/augmentations-list.txt';\\n\\tconst factions = getFactions();\\n\\tawait ns.write(file, '', 'w');\\n\\tfor (let faction of factions) {\\n\\t\\tawait ns.write(file, `\\\\n\\\\n----- ${faction} -----\\\\n`, 'a');\\n\\t\\tlet augmentations = ns.getAugmentationsFromFaction(faction);\\n\\t\\tfor (let augmentation of augmentations) {\\n\\t\\t\\tif (augmentation !== 'NeuroFlux Governor') {\\n\\t\\t\\t\\tawait ns.write(file, `\\\\n--- ${augmentation} ---\\\\n`, 'a');\\n\\t\\t\\t\\tlet stats = Object.entries(ns.getAugmentationStats(augmentation));\\n\\t\\t\\t\\tif (stats.length > 0) {\\n\\t\\t\\t\\t\\tfor (let [stat, multiplier] of stats) {\\n\\t\\t\\t\\t\\t\\tawait ns.write(file, `${stat}: ${multiplier}\\\\n`, 'a');\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else await ns.write(file, `Special\\\\n`, 'a');\\n\\t\\t\\t\\tlet price = ns.getAugmentationPrice(augmentation);\\n\\t\\t\\t\\tlet repReq = ns.getAugmentationRepReq(augmentation);\\n\\t\\t\\t\\tlet prereq = ns.getAugmentationPrereq(augmentation);\\n\\t\\t\\t\\tawait ns.write(file, `Price: ${ns.nFormat(price, '$0.000a')}\\\\n`, 'a');\\n\\t\\t\\t\\tawait ns.write(file, `Rep: ${ns.nFormat(repReq, '0.000a')}\\\\n`, 'a');\\n\\t\\t\\t\\tif (prereq.length > 0) await ns.write(file, `Prereq: ${prereq}\\\\n`, 'a');\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/augmentations/augmentation-lister.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///fad2fc9e-0906-46cf-a438-bf116ecca3ce\"},{\"filename\":\"/augmentations/augmentation-lister.js\",\"url\":\"blob:file:///cf831238-f22e-4af7-aa68-e7952a415cbf\"}],\"dependents\":[],\"ramUsage\":21.6,\"server\":\"home\",\"moduleSequenceNumber\":484,\"_hash\":\"bd25c96a052b2f33e71068fcfea7938d3eaa6185fd7fa1e293754881ac8b047f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationPrereq\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (await ns.prompt('Install augmentations?')) {\\n\\t\\tns.installAugmentations('cortex.js');\\n\\t}\\n}\",\"filename\":\"/augmentations/install-augmentations.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/augmentations/install-augmentations.js\",\"url\":\"blob:file:///e17dc5ae-c8f7-40ec-b7a1-8e37525721fb\",\"moduleSequenceNumber\":34422}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":485,\"_hash\":\"8a066dfc9d8c94acfd0d08b21a945d5603826885b8ac6496266433258cb9462f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installAugmentations\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n\\tgetFactions,\\n\\tisUsefulBladeburner,\\n\\tisUsefulCombat,\\n\\tisUsefulCompany,\\n\\tisUsefulGeneral,\\n\\tisUsefulHacking,\\n\\tisUsefulHacknet\\n} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tconst args = ns.flags([\\n\\t\\t['hacking', false],\\n\\t\\t['combat', false],\\n\\t\\t['company', false],\\n\\t\\t['hacknet', false],\\n\\t\\t['bladeburner', false],\\n\\t\\t['install', false]\\n\\t]);\\n\\n\\t// Check criterions for determining if augmentations are useful\\n\\tconst criterions = [isUsefulGeneral];\\n\\tif (args.hacking) criterions.push(isUsefulHacking);\\n\\tif (args.combat) criterions.push(isUsefulCombat);\\n\\tif (args.company) criterions.push(isUsefulCompany);\\n\\tif (args.hacknet) criterions.push(isUsefulHacknet);\\n\\tif (args.bladeburner) criterions.push(isUsefulBladeburner);\\n\\n\\tlet augmentations = [];\\n\\tfor (let faction of getFactions()) {\\n\\t\\tfor (let aug of ns.getAugmentationsFromFaction(faction)) {\\n\\t\\t\\tif (isUseful(ns, criterions, aug) && isPurchasable(ns, faction, aug, augmentations)) {\\n\\t\\t\\t\\taugmentations.push(\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tfaction: faction,\\n\\t\\t\\t\\t\\t\\tname: aug,\\n\\t\\t\\t\\t\\t\\tprice: ns.getAugmentationPrice(aug)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tif (ns.getPlayer().hasTixApiAccess) { // Check if player has TIX API\\n\\t\\t// Check if player has any stocks\\n\\t\\tlet stocks = false;\\n\\t\\tfor (let sym of ns.stock.getSymbols()) {\\n\\t\\t\\tlet pos = ns.stock.getPosition(sym);\\n\\t\\t\\tif (pos[0] > 0 || pos[2] > 0) {\\n\\t\\t\\t\\tstocks = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Ask if player wants to sell stocks\\n\\t\\tif (stocks && await ns.prompt(`Do you want to sell all shares?`)) {\\n\\t\\t\\t// Kill stock script\\n\\t\\t\\tif (ns.isRunning('/stock-market/stock-market.js', 'home')) {\\n\\t\\t\\t\\tns.kill('/stock-market/stock-market.js', 'home');\\n\\t\\t\\t}\\n\\t\\t\\t// Sell all stocks\\n\\t\\t\\tfor (let sym of ns.stock.getSymbols()) {\\n\\t\\t\\t\\tns.stock.sell(sym, ns.stock.getMaxShares(sym));\\n\\t\\t\\t\\tif (ns.getPlayer().bitNodeN === 8 ||\\n\\t\\t\\t\\t\\tns.getOwnedSourceFiles().some(s => s.n === 8 && s.lvl > 1)) {\\n\\t\\t\\t\\t\\tns.stock.sellShort(sym, ns.stock.getMaxShares(sym));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// Check if there are any purchasable augmentations\\n\\tif (augmentations.length > 0) {\\n\\t\\t// Sort augmentations according to their price\\n\\t\\taugmentations.sort((a, b) => {\\n\\t\\t\\tif (b.price > a.price) return 1;\\n\\t\\t\\telse if (a.price > b.price) return -1;\\n\\t\\t\\telse return ns.getAugmentationPrereq(b.name).length - ns.getAugmentationPrereq(a.name).length;\\n\\t\\t});\\n\\n\\t\\t// Fit in augs before their prereqs\\n\\t\\tlet tempAugs = [];\\n\\t\\tlet coveredIndices = [];\\n\\t\\tfor (let [i, aug] of augmentations.entries()) {\\n\\t\\t\\tif (coveredIndices.includes(i)) continue;\\n\\t\\t\\tlet prereq = ns.getAugmentationPrereq(aug.name);\\n\\t\\t\\tif (prereq.length > 0) {\\n\\t\\t\\t\\tlet index = augmentations.findIndex(aug => aug.name === prereq[0]);\\n\\t\\t\\t\\tif (index >= 0) { // Fit in aug before their prereq\\n\\t\\t\\t\\t\\ttempAugs.splice(i, 0, augmentations[index]);\\n\\t\\t\\t\\t\\tcoveredIndices.push(index);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\ttempAugs.push(aug);\\n\\t\\t}\\n\\t\\t// Deep copy augmentations\\n\\t\\taugmentations = JSON.parse(JSON.stringify(tempAugs));\\n\\n\\t\\t// Calculate price of augs\\n\\t\\tlet stringAugs = '';\\n\\t\\tlet totalPrice = 0;\\n\\t\\tfor (let [i, aug] of augmentations.entries()) {\\n\\t\\t\\tlet updatedAugPrice = aug.price * 1.9 ** i;\\n\\t\\t\\tstringAugs += `${aug.name}: ${ns.nFormat(aug.price, '$0.000a')} (${ns.nFormat(updatedAugPrice, '$0.000a')}). `;\\n\\t\\t\\ttotalPrice += updatedAugPrice;\\n\\t\\t}\\n\\n\\t\\t// Prompt user for buying augmentations\\n\\t\\tif (await ns.prompt(`${stringAugs}Buy augmentations for ${ns.nFormat(totalPrice, '0.000a')}?`)) {\\n\\t\\t\\tfor (let aug of augmentations) {\\n\\t\\t\\t\\tif (ns.purchaseAugmentation(aug.faction, aug.name)) {\\n\\t\\t\\t\\t\\tns.tprint(`Purchased ${aug.name} from ${aug.faction} for ${ns.nFormat(aug.price, '0.000a')}`);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.tprint(`Could not purchase ${aug.name} from ${aug.faction}`);\\n\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// Prompt user for purchasing NeuroFlux Governor\\n\\tif (await ns.prompt(`Purchase NeuroFlux Governor levels?`)) {\\n\\t\\tlet highestRepFaction;\\n\\t\\tlet highestRep = 0;\\n\\t\\tfor (let faction of getFactions()) {\\n\\t\\t\\tif (ns.getFactionRep(faction) > highestRep) {\\n\\t\\t\\t\\thighestRep = ns.getFactionRep(faction);\\n\\t\\t\\t\\thighestRepFaction = faction;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tlet counter = 0;\\n\\t\\twhile (ns.purchaseAugmentation(highestRepFaction, 'NeuroFlux Governor')) {\\n\\t\\t\\tcounter++;\\n\\t\\t}\\n\\t\\tns.tprint(`Purchased ${counter} levels of NeuroFlux Governor.`);\\n\\t}\\n\\n\\t// Check if The Red Pill is available\\n\\tif (ns.getPlayer().factions.includes('Daedalus') &&\\n\\t\\tns.getFactionRep('Daedalus') >= 2.5e6 &&\\n\\t\\t!ns.getOwnedAugmentations(true).includes('The Red Pill')) {\\n\\t\\tif (await ns.prompt(`Purchase The Red Pill?`)) {\\n\\t\\t\\tif (ns.purchaseAugmentation('Daedalus', 'The Red Pill')) {\\n\\t\\t\\t\\tns.tprint(`Purchased The Red Pill`);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.tprint(`Could not purchase The Red Pill`);\\n\\t\\t\\t\\tns.exit();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// Ask to purchase 4S market data and its TIX API\\n\\tif (ns.getPlayer().hasTixApiAccess) {\\n\\t\\tif (!ns.getPlayer().has4SDataTixApi && ns.getServerMoneyAvailable('home') >= 25e9) {\\n\\t\\t\\tif (await ns.prompt(`Purchase 4S Data TIX API?`)) ns.stock.purchase4SMarketDataTixApi();\\n\\t\\t}\\n\\t\\tif (!ns.getPlayer().has4SData && ns.getServerMoneyAvailable('home') >= 1e9) {\\n\\t\\t\\tif (await ns.prompt(`Purchase 4S Data?`)) ns.stock.purchase4SMarketData();\\n\\t\\t}\\n\\t}\\n\\n\\t// Ask to install augmentations\\n\\tif (args.install && await ns.prompt('Install augmentations?')) {\\n\\t\\tns.installAugmentations('cortex.js');\\n\\t}\\n}\\n\\nexport function isPurchasable(ns, faction, name, augmentations) {\\n\\tlet facRep = ns.getFactionRep(faction);\\n\\tlet price = ns.getAugmentationPrice(name);\\n\\tlet repReq = ns.getAugmentationRepReq(name);\\n\\n\\treturn !(facRep < repReq || // Faction reputation prerequisite\\n\\t\\tns.getServerMoneyAvailable('home') < price || // Check if it is able to be bought\\n\\t\\taugmentations.some(aug => aug.name === name) || // Check to see if it can be bought from another faction\\n\\t\\tns.getOwnedAugmentations(true).includes(name) // Check if already bought\\n\\t);\\n}\\n\\nfunction isUseful(ns, criterions, name) {\\n\\tfor (let criterion of criterions) {\\n\\t\\tif (criterion(ns, name)) return true;\\n\\t}\\n\\treturn false;\\n}\",\"filename\":\"/augmentations/purchase-augmentations.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///da9dbc54-d349-4bb9-8eb6-7c4a409f1b55\",\"moduleSequenceNumber\":478},{\"filename\":\"/augmentations/purchase-augmentations.js\",\"url\":\"blob:file:///f867ac23-36de-4025-ade4-9c5fc5639104\",\"moduleSequenceNumber\":8837}],\"dependents\":[],\"ramUsage\":63.8,\"server\":\"home\",\"moduleSequenceNumber\":486,\"_hash\":\"15edb8d90bc4681e3c936d58821bbb62a2340e51ccbdbf99c549d27ae6c0631e\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.purchase4SMarketDataTixApi\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchase4SMarketData\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"installAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst programs = ['ServerProfiler.exe', 'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe'];\\n\\tfor (let program of programs) {\\n\\t\\tif (ns.createProgram(program)) {\\n\\t\\t\\twhile (ns.isBusy()) {\\n\\t\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\t}\\n\\t\\t\\tns.tprint(`${program} created.`)\\n\\t\\t} else ns.tprint(`${program} already owned.`);\\n\\t}\\n}\",\"filename\":\"/automators/create-programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/automators/create-programs.js\",\"url\":\"blob:file:///069c9cd7-c6c5-4b4a-989e-7092312d0b21\",\"moduleSequenceNumber\":82890}],\"dependents\":[],\"ramUsage\":7.1,\"server\":\"home\",\"moduleSequenceNumber\":487,\"_hash\":\"23bf50230925b528f8afcd5a82ff485a028f337b2a40df5857995964a82f1de7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":5},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst inc = 100;\\n\\twhile (!ns.isBusy()) {\\n\\t\\tlet duration = ns.commitCrime(ns.args[0]);\\n\\t\\tfor (let i = 0; i < duration - 8 * inc; i += inc) {\\n\\t\\t\\tawait ns.sleep(inc);\\n\\t\\t\\tif (!ns.isBusy()) return;\\n\\t\\t}\\n\\t\\tawait ns.sleep(10 * inc);\\n\\t}\\n}\",\"filename\":\"/automators/crime.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/automators/crime.js\",\"url\":\"blob:file:///11d03db4-b7c0-4396-91b5-d5cadcd2931a\",\"moduleSequenceNumber\":915}],\"dependents\":[],\"ramUsage\":7.1,\"server\":\"home\",\"moduleSequenceNumber\":915,\"_hash\":\"5afe747a7e7b9f2069722291907b20105f3f0cdb3673bb7d3c9d4b5aa65de498\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tlet args = ns.flags([\\n\\t\\t['str', false],\\n\\t\\t['def', false],\\n\\t\\t['dex', false],\\n\\t\\t['agi', false],\\n\\t\\t['all', false],\\n\\t\\t['gym', 'Powerhouse Gym'],\\n\\t\\t['level', 0]\\n\\t]);\\n\\n\\tif (args.gym === 'Crush Fitness Gym' || args.gym === 'Snap Fitness Gym') ns.travelToCity('Aevum');\\n\\telse if (args.gym === 'Iron Gym' || args.gym === 'Powerhouse Gym') ns.travelToCity('Sector 12');\\n\\telse if (args.gym === 'Millenium Fitness Gym') ns.travelToCity('Volhaven');\\n\\telse {\\n\\t\\tns.tprint(`Invalid gym.`);\\n\\t\\tns.exit();\\n\\t}\\n\\n\\tif (args.str || args.all) await workOutStr(ns, args.gym, args.level);\\n\\tif (args.def || args.all) await workOutDef(ns, args.gym, args.level);\\n\\tif (args.dex || args.all) await workOutDex(ns, args.gym, args.level);\\n\\tif (args.agi || args.all) await workOutAgi(ns, args.gym, args.level);\\n}\\n\\nasync function workOutStr(ns, gym, level) {\\n\\tns.gymWorkout(gym, 'str');\\n\\twhile (ns.getPlayer().strength < level) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\\n\\nasync function workOutDef(ns, gym, level) {\\n\\tns.gymWorkout(gym, 'def');\\n\\twhile (ns.getPlayer().defense < level) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\\n\\nasync function workOutDex(ns, gym, level) {\\n\\tns.gymWorkout(gym, 'dex');\\n\\twhile (ns.getPlayer().dexterity < level) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\\n\\nasync function workOutAgi(ns, gym, level) {\\n\\tns.gymWorkout(gym, 'agi');\\n\\twhile (ns.getPlayer().agility < level) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\",\"filename\":\"/automators/gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.1,\"server\":\"home\",\"moduleSequenceNumber\":489,\"_hash\":\"58cb574b807a84bb60647917d01b2a8cefcc141e8757655a7e7bedb174ff1896\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gymWorkout\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst args = ns.flags([\\n\\t\\t['university', 'ZB Institute of Technology'],\\n\\t\\t['course', 'Leadership'],\\n\\t\\t['level', 0]\\n\\t]);\\n\\n\\tif (args.university === 'Summit University') ns.travelToCity('Aevum');\\n\\telse if (args.university === 'Rothman University') ns.travelToCity('Sector 12');\\n\\telse if (args.university === 'ZB Institute of Technology') ns.travelToCity('Volhaven');\\n\\telse {\\n\\t\\tns.tprint(`Invalid university.`);\\n\\t\\tns.exit();\\n\\t}\\n\\n\\tif (args.course === 'Computer Science' ||\\n\\t\\targs.course === 'Data Structures' ||\\n\\t\\targs.course === 'Networks' ||\\n\\t\\targs.course === 'Algorithms') await studyHack(ns, args.university, args.course, args.level);\\n\\telse if (args.course === 'Management' ||\\n\\t\\targs.course === 'Leadership') await studyCha(ns, args.university, args.course, args.level);\\n\\telse {\\n\\t\\tns.tprint(`Invalid course.`);\\n\\t\\tns.exit();\\n\\t}\\n}\\n\\nasync function studyHack(ns, university, course, level) {\\n\\tns.universityCourse(university, course);\\n\\twhile (ns.getPlayer().hacking < level) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\\n\\nasync function studyCha(ns, university, course, level) {\\n\\tns.universityCourse(university, course);\\n\\twhile (ns.getPlayer().charisma < level) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\",\"filename\":\"/automators/university.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/automators/university.js\",\"url\":\"blob:file:///a3e141e1-c7bc-460d-8b43-7f660d324c22\",\"moduleSequenceNumber\":780}],\"dependents\":[],\"ramUsage\":7.1,\"server\":\"home\",\"moduleSequenceNumber\":490,\"_hash\":\"758cec1ad7ee460c513bf8605ced9271ec2d2fa4c0f4205c5ae4cac727d8eba7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"universityCourse\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tfor (let faction of ns.args) {\\n\\t\\tif (await ns.prompt(`Join ${faction}?`)) ns.joinFaction(faction);\\n\\t}\\n}\",\"filename\":\"/utils/join-factions.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/join-factions.js\",\"url\":\"blob:file:///e249808e-c1a2-4fd9-80d7-87a69abba01b\",\"moduleSequenceNumber\":954}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":954,\"_hash\":\"29c866dfa3854eada42152cff58ab4a049972b02b145257ef70f2da8486028aa\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"joinFaction\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {manageAndHack} from '/hacking/hack-manager.js';\\nimport {contractor} from '/utils/contractor.js';\\nimport {copyScriptsToAll, getAccessibleServers, printBoth, promptScriptRunning} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\t// Copy necessary scripts to all servers\\n\\tawait copyScriptsToAll(ns);\\n\\n\\tconst upgradeRamTimer = 5 * 60 * 1000; // 5 minutes\\n\\tconst upgradeCoresTimer = 5 * 60 * 1000; // 5 minutes\\n\\tconst usefulPrograms = [\\n\\t\\t['BruteSSH.exe', 50],\\n\\t\\t['FTPCrack.exe', 100],\\n\\t\\t['relaySMTP.exe', 300],\\n\\t\\t['HTTPWorm.exe', 400],\\n\\t\\t['SQLInject.exe', 800]\\n\\t];\\n\\n\\tlet contractorOnline = true;\\n\\tlet askedFactions = [];\\n\\tlet upgradeRamTime = upgradeRamTimer;\\n\\tlet upgradeCoresTime = upgradeCoresTimer;\\n\\n\\twhile (true) {\\n\\t\\tlet player = ns.getPlayer();\\n\\n\\t\\t// Heal player\\n\\t\\tif (player.hp < player.max_hp) {\\n\\t\\t\\tlet cost = ns.hospitalize()\\n\\t\\t\\tprintBoth(ns, `Player hospitalized for ${ns.nFormat(cost, '$0.000a')}`);\\n\\t\\t}\\n\\n\\t\\t// Contract solver (disables itself if any solution was incorrect)\\n\\t\\tif (contractorOnline) contractorOnline = contractor(ns);\\n\\n\\t\\t// Purchase TOR\\n\\t\\tif (ns.purchaseTor()) printBoth(ns, `Purchased TOR router.`);\\n\\t\\t// Purchase only useful programs\\n\\t\\tif (player.tor) {\\n\\t\\t\\tfor (let [program, hackingLevel] of usefulPrograms) {\\n\\t\\t\\t\\tif (!ns.fileExists(program) && player.hacking >= hackingLevel) {\\n\\t\\t\\t\\t\\tif (ns.purchaseProgram(program)) printBoth(ns, `Purchased ${program}.`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Upgrade home RAM\\n\\t\\tif (ns.getUpgradeHomeRamCost() <= ns.getServerMoneyAvailable('home') &&\\n\\t\\t\\tns.getTimeSinceLastAug() - upgradeRamTime > upgradeRamTimer &&\\n\\t\\t\\t!promptScriptRunning(ns, 'home')) {\\n\\t\\t\\tns.exec('/utils/upgrade-home-ram.js', 'home', 1);\\n\\t\\t\\tupgradeRamTime = ns.getTimeSinceLastAug();\\n\\t\\t}\\n\\t\\t// Upgrade home cores\\n\\t\\tif (ns.getUpgradeHomeCoresCost() <= ns.getServerMoneyAvailable('home') &&\\n\\t\\t\\tns.getTimeSinceLastAug() - upgradeCoresTime > upgradeCoresTimer &&\\n\\t\\t\\t!promptScriptRunning(ns, 'home')) {\\n\\t\\t\\tns.exec('/utils/upgrade-home-cores.js', 'home', 1);\\n\\t\\t\\tupgradeCoresTime = ns.getTimeSinceLastAug();\\n\\t\\t}\\n\\n\\t\\t// Backdoor servers\\n\\t\\tfor (let server of getAccessibleServers(ns)) {\\n\\t\\t\\tif (!(server === 'home' ||\\n\\t\\t\\t\\tns.getServer(server).backdoorInstalled ||\\n\\t\\t\\t\\tns.isRunning('/utils/backdoor.js', 'home', server))) {\\n\\t\\t\\t\\tns.print(`Installing backdoor on ${server}.`);\\n\\t\\t\\t\\tns.exec('/utils/backdoor.js', 'home', 1, server);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Simple hack manager\\n\\t\\tmanageAndHack(ns);\\n\\n\\t\\t// Check faction invites\\n\\t\\tlet factions = ns.checkFactionInvitations().filter(faction => !askedFactions.includes(faction));\\n\\t\\tif (factions.length > 0 && !promptScriptRunning(ns, 'home')) {\\n\\t\\t\\tns.print(`Request to join ${factions}.`);\\n\\t\\t\\tns.exec('/utils/join-factions.js', 'home', 1, ...factions);\\n\\t\\t\\taskedFactions = askedFactions.concat(factions); // Don't ask again\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"cortex.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///9276edda-6231-41c3-9b1e-e4783ad2a803\",\"moduleSequenceNumber\":478},{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///79aaab39-1b1f-4e36-b612-26ab7946cf16\",\"moduleSequenceNumber\":478},{\"filename\":\"/utils/contractor.js\",\"url\":\"blob:file:///3ad7446a-6fd9-4cba-9fca-b98aa39a7715\",\"moduleSequenceNumber\":477},{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///5ddceac3-3ff7-452f-8146-c92ca7b0e974\",\"moduleSequenceNumber\":478},{\"filename\":\"/hacking/hack-manager.js\",\"url\":\"blob:file:///03a7fdff-fb54-464c-8033-77d2271f33c8\",\"moduleSequenceNumber\":461},{\"filename\":\"cortex.js\",\"url\":\"blob:file:///26307828-4aeb-48d4-a5a4-1a0d26bd303a\",\"moduleSequenceNumber\":913}],\"dependents\":[],\"ramUsage\":46.2,\"server\":\"home\",\"moduleSequenceNumber\":913,\"_hash\":\"7f18fa8326af637cbac3875144fb01f69969bc9e2986856dedb97b35526bfcb3\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hospitalize\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getTimeSinceLastAug\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getUpgradeHomeCoresCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {routeFinder} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tconst server = ns.args[0];\\n\\tconst route = routeFinder(ns, server);\\n\\tif (route) {\\n\\t\\tfor (let serv of route) {\\n\\t\\t\\tns.connect(serv);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/tools/connect.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///ba806610-7b28-4711-a171-12a2b18b9c86\",\"moduleSequenceNumber\":81553},{\"filename\":\"/tools/connect.js\",\"url\":\"blob:file:///3f825b61-0bd0-4a2d-bb44-2a75e93a71f8\",\"moduleSequenceNumber\":83352}],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"home\",\"moduleSequenceNumber\":493,\"_hash\":\"b17a3e15d50101bb20a99629e19f87c1f2f8ca1d2cc4f7b60323548fe3f992a8\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getFactions} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\tconst factions = getFactions();\\n\\tconst args = ns.flags([\\n\\t\\t['hacking', false],\\n\\t\\t['field', false],\\n\\t\\t['security', false]\\n\\t]);\\n\\n\\tlet workType;\\n\\tif (args.hacking) workType = 'Hacking Contracts';\\n\\telse if (args.field) workType = 'Field Work';\\n\\telse if (args.security) workType = 'Security Work';\\n\\telse {\\n\\t\\tns.tprint(`Invalid work type.`);\\n\\t\\tns.exit();\\n\\t}\\n\\n\\tfor (let i = 0; i < args._.length; i += 2) {\\n\\t\\tlet faction = factions.find(faction => faction.toLowerCase() === args._[i]);\\n\\t\\tif (faction) {\\n\\t\\t\\tns.tprint(`Working for ${faction}.`);\\n\\t\\t\\twhile (ns.getFactionRep(faction) < args._[i + 1]) {\\n\\t\\t\\t\\tns.workForFaction(faction, workType, ns.isFocused());\\n\\t\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\t}\\n\\t\\t} else ns.tprint(`Could not find faction.`);\\n\\t}\\n}\",\"filename\":\"/automators/faction.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///11ca6908-0b24-4034-85de-acc1b7f1328e\",\"moduleSequenceNumber\":407},{\"filename\":\"/automators/faction.js\",\"url\":\"blob:file:///f197a9e7-59a6-4764-b5ae-7a248fbca883\",\"moduleSequenceNumber\":772}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":494,\"_hash\":\"9cac24b8a357a70e8ea58f6a7b7fed227bec230949d839d410e2e819ec2b7640\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"isFocused\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/share.js\",\"url\":\"blob:file:///a17497ef-7f66-4bba-8999-1dd6397df271\",\"moduleSequenceNumber\":50019}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n\\tcopyScriptsToAll,\\n\\tfindPlaceToRun,\\n\\tgetAccessibleServers,\\n\\tgetFreeRam,\\n\\tgetOptimalHackable,\\n\\tgetScripts\\n} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tawait copyScriptsToAll(ns);\\n\\tconst threads = Number.MAX_VALUE;\\n\\tconst scripts = getScripts()\\n\\tlet i = 0;\\n\\twhile (true) {\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet hackables = getOptimalHackable(ns, servers);\\n\\t\\tlet [freeRams, filteredHackables] = getFreeRam(ns, servers, hackables, true);\\n\\t\\tfor (let target of filteredHackables.reverse()) {\\n\\t\\t\\tfindPlaceToRun(ns, scripts.grow, threads, freeRams, [target, 0, i]);\\n\\t\\t\\tfindPlaceToRun(ns, scripts.weaken, threads, freeRams, [target, 0, i]);\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"/automators/exp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///81da9d1d-6fff-4c3d-8b0d-8e6db226ad60\",\"moduleSequenceNumber\":81553},{\"filename\":\"/automators/exp.js\",\"url\":\"blob:file:///c4b756ce-5b4e-495d-b885-2a169e74dd90\",\"moduleSequenceNumber\":83353}],\"dependents\":[],\"ramUsage\":9.65,\"server\":\"home\",\"moduleSequenceNumber\":496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n\\tcopyScriptsToAll,\\n\\tfindPlaceToRun,\\n\\tgetAccessibleServers,\\n\\tgetFreeRam,\\n\\tgetOptimalHackable,\\n\\tgetScripts\\n} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tawait copyScriptsToAll(ns);\\n\\tconst threads = Number.MAX_VALUE;\\n\\tconst scripts = getScripts();\\n\\twhile (true) {\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet hackables = getOptimalHackable(ns, servers);\\n\\t\\tlet [freeRams, filteredHackables] = getFreeRam(ns, servers, hackables, true);\\n\\t\\tfor (let target of filteredHackables.reverse()) {\\n\\t\\t\\tfindPlaceToRun(ns, scripts.share, threads, freeRams);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"/automators/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///28dddad5-86b2-49d1-b23d-4370fa8f3ba7\",\"moduleSequenceNumber\":49472},{\"filename\":\"/automators/share.js\",\"url\":\"blob:file:///3d18238c-081f-4581-b5aa-b9468407fb61\",\"moduleSequenceNumber\":49946}],\"dependents\":[],\"ramUsage\":12.05,\"server\":\"home\",\"moduleSequenceNumber\":497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tns.disableLog('ALL')\\n\\n\\tlet gangJoined;\\n\\tif (!ns.gang.inGang()) {\\n\\t\\tif (!ns.args[0]) {\\n\\t\\t\\tns.tprint(`You need to specify a gang to join.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\t\\tif(!createGang(ns.args[0])) {\\n\\t\\t\\tns.tprint(`Failed to join ${ns.args[0]}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\t\\tns.tprint(`Joined ${ns.args[0]}.`);\\n\\t\\tgangJoined = ns.args[0];\\n\\t}\\n\\telse gangJoined = ns.gang.getGangInformation().faction;\\n\\n\\tconst str = 500;\\n\\tconst str_mult = 1.5;\\n\\tconst otherGangs = Object.keys(ns.gang.getOtherGangInformation()).filter(faction => faction !== gangJoined);\\n\\n\\tlet c = 0;\\n\\twhile (true) {\\n\\t\\t// Check for recruits\\n\\t\\tif (ns.gang.canRecruitMember()) {\\n\\t\\t\\tlet name = 'gangsta-' + c;\\n\\t\\t\\tns.gang.recruitMember(name);\\n\\t\\t\\tns.gang.setMemberTask(name, 'Train Combat');\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\t// Get gang info\\n\\t\\tconst myGang = ns.gang.getGangInformation();\\n\\t\\tconst gangRoster = Array.from(ns.gang.getMemberNames(), (name) => ns.gang.getMemberInformation(name));\\n\\t\\t// Check for ascensions\\n\\t\\tfor (let gangMember of gangRoster) {\\n\\t\\t\\tif (!ns.gang.getAscensionResult(gangMember.name)) continue;\\n\\t\\t\\tif (ns.gang.getAscensionResult(gangMember.name).str > str_mult) ns.gang.ascendMember(gangMember.name);\\n\\t\\t}\\n\\t\\t// Check for equipment purchases\\n\\t\\tfor (let equipment of ns.gang.getEquipmentNames()) {\\n\\t\\t\\tfor (let gangMember of gangRoster) {\\n\\t\\t\\t\\tif (!(ns.gang.getEquipmentCost(equipment) > ns.getServerMoneyAvailable('home') || gangMember.str < str)) {\\n\\t\\t\\t\\t\\tns.gang.purchaseEquipment(gangMember.name, equipment);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Territory warfare checks\\n\\t\\tlet clashChance = Array.from(otherGangs, (faction) => ns.gang.getChanceToWinClash(faction));\\n\\t\\tif (clashChance.every(e => e > 0.7) && myGang.territory !== 1) ns.gang.setTerritoryWarfare(true);\\n\\t\\tif (clashChance.some(s => s < 0.6 || myGang.territory === 1)) ns.gang.setTerritoryWarfare(false);\\n\\t\\t// Assign tasks\\n\\t\\tfor (let gangMember of gangRoster) {\\n\\t\\t\\tif (gangMember.str > 100 && gangRoster.length < 6) ns.gang.setMemberTask(gangMember.name, 'Mug People');\\n\\t\\t\\telse if (gangMember.str < 500) ns.gang.setMemberTask(gangMember.name, 'Train Combat');\\n\\t\\t\\telse if (myGang.wantedPenalty < 0.05) ns.gang.setMemberTask(gangMember.name, 'Vigilante Justice');\\n\\t\\t\\telse if (clashChance.some(s => s < 0.8) && myGang.territory !== 1 && gangRoster.length === 12) {\\n\\t\\t\\t\\tns.gang.setMemberTask(gangMember.name, 'Territory Warfare');\\n\\t\\t\\t}\\n\\t\\t\\telse ns.gang.setMemberTask(gangMember.name, 'Human Trafficking');\\n\\t\\t}\\n\\t\\t//Update Log\\n\\t\\tns.clearLog();\\n\\t\\tns.print(`Gang: ${gangJoined}`);\\n\\t\\tfor (let gangMember of gangRoster) \\tns.print(`${gangMember.name} - ${gangMember.task}`);\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///c0036aac-70ba-4426-8ff0-01ff7997e091\",\"moduleSequenceNumber\":914}],\"dependents\":[],\"ramUsage\":34.7,\"server\":\"home\",\"moduleSequenceNumber\":914,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.createGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getOtherGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getChanceToWinClash\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setTerritoryWarfare\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet info = ns.gang.getMemberInformation('bob');\\n\\tns.tprint(info);\\n\\tlet info2 = ns.gang.getAscensionResult('bob');\\n\\tns.tprint(info2);\\n}\",\"filename\":\"test2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"test2.js\",\"url\":\"blob:file:///1913e910-2a3b-4fc0-a9b9-4b4b64a288bd\",\"moduleSequenceNumber\":16721}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":16721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/build/scripts.txt\",\"text\":\"cortex.js\\nutils/upgrade-home-ram.js\\nutils/join-factions.js\\nutils/contractor.js\\nutils/utils.js\\nutils/upgrade-home-cores.js\\nutils/backdoor.js\\nutils/share.js\\ntexts/todo.txt\\ntexts/augmentations-list.txt\\ntexts/bitnode-order.txt\\nstock-market/early-stock-market.js\\nstock-market/stock-market.js\\nexploits/dev-menu.js\\nbuild/script-remover.js\\nbuild/scripts.js\\nbuild/scripts.txt\\nbuild/download-bitburner-scripts.js\\naugmentations/augmentation-lister.js\\naugmentations/install-augmentations.js\\naugmentations/purchase-augmentations.js\\nhacking/deploy-daemons.js\\nhacking/grow.js\\nhacking/daemon.js\\nhacking/hack-manager.js\\nhacking/weaken.js\\nhacking/hack.js\\ntools/karma.js\\ntools/cost-pserv.js\\ntools/favor.js\\ntools/bitnode-multipliers.js\\ntools/hackable-servers.js\\ntools/get-all-text.js\\ntools/connect.js\\ntools/reputation.js\\ntools/pserv-buyer.js\\ntools/analyze-server.js\\ntools/monitor.js\\nautomators/crime.js\\nautomators/gym.js\\nautomators/exp.js\\nautomators/faction.js\\nautomators/university.js\\nautomators/create-programs.js\\nautomators/share.js\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/texts/augmentations-list.txt\",\"text\":\"\\n\\n----- CyberSec -----\\n\\n--- BitWire ---\\nhacking_mult: 1.05\\nPrice: $10.000m\\nRep: 3.750k\\n\\n--- Synaptic Enhancement Implant ---\\nhacking_speed_mult: 1.03\\nPrice: $7.500m\\nRep: 2.000k\\n\\n--- Cranial Signal Processors - Gen I ---\\nhacking_mult: 1.05\\nhacking_speed_mult: 1.01\\nPrice: $70.000m\\nRep: 10.000k\\n\\n--- Cranial Signal Processors - Gen II ---\\nhacking_mult: 1.07\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.02\\nPrice: $125.000m\\nRep: 18.750k\\nPrereq: Cranial Signal Processors - Gen I\\n\\n--- Neurotrainer I ---\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $4.000m\\nRep: 1.000k\\n\\n\\n----- Tian Di Hui -----\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- Social Negotiation Assistant (S.N.A) ---\\ncompany_rep_mult: 1.15\\nfaction_rep_mult: 1.15\\nwork_money_mult: 1.1\\nPrice: $30.000m\\nRep: 6.250k\\n\\n--- Neuroreceptor Management Implant ---\\nSpecial\\nPrice: $550.000m\\nRep: 75.000k\\n\\n\\n----- Netburners -----\\n\\n--- Hacknet Node CPU Architecture Neural-Upload ---\\nhacknet_node_money_mult: 1.15\\nhacknet_node_purchase_cost_mult: 0.85\\nPrice: $11.000m\\nRep: 3.750k\\n\\n--- Hacknet Node Cache Architecture Neural-Upload ---\\nhacknet_node_money_mult: 1.1\\nhacknet_node_level_cost_mult: 0.85\\nPrice: $5.500m\\nRep: 2.500k\\n\\n--- Hacknet Node NIC Architecture Neural-Upload ---\\nhacknet_node_money_mult: 1.1\\nhacknet_node_purchase_cost_mult: 0.9\\nPrice: $4.500m\\nRep: 1.875k\\n\\n--- Hacknet Node Kernel Direct-Neural Interface ---\\nhacknet_node_money_mult: 1.25\\nPrice: $40.000m\\nRep: 7.500k\\n\\n--- Hacknet Node Core Direct-Neural Interface ---\\nhacknet_node_money_mult: 1.45\\nPrice: $60.000m\\nRep: 12.500k\\n\\n\\n----- Sector-12 -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- CashRoot Starter Kit ---\\nSpecial\\nPrice: $125.000m\\nRep: 12.500k\\n\\n\\n----- Chongqing -----\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Neuregen Gene Modification ---\\nhacking_exp_mult: 1.4\\nPrice: $375.000m\\nRep: 37.500k\\n\\n\\n----- New Tokyo -----\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- NutriGen Implant ---\\nstrength_exp_mult: 1.2\\ndefense_exp_mult: 1.2\\ndexterity_exp_mult: 1.2\\nagility_exp_mult: 1.2\\nPrice: $2.500m\\nRep: 6.250k\\n\\n\\n----- Ishima -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- INFRARET Enhancement ---\\ndexterity_mult: 1.1\\ncrime_money_mult: 1.1\\ncrime_success_mult: 1.25\\nPrice: $30.000m\\nRep: 7.500k\\n\\n\\n----- Aevum -----\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Synaptic Enhancement Implant ---\\nhacking_speed_mult: 1.03\\nPrice: $7.500m\\nRep: 2.000k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Neurotrainer I ---\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $4.000m\\nRep: 1.000k\\n\\n--- PCMatrix ---\\ncharisma_mult: 1.0777\\ncharisma_exp_mult: 1.0777\\ncompany_rep_mult: 1.0777\\nfaction_rep_mult: 1.0777\\ncrime_money_mult: 1.0777\\ncrime_success_mult: 1.0777\\nwork_money_mult: 1.777\\nPrice: $2.000b\\nRep: 100.000k\\n\\n\\n----- Volhaven -----\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- DermaForce Particle Barrier ---\\ndefense_mult: 1.4\\nPrice: $50.000m\\nRep: 15.000k\\n\\n\\n----- NiteSec -----\\n\\n--- BitWire ---\\nhacking_mult: 1.05\\nPrice: $10.000m\\nRep: 3.750k\\n\\n--- Artificial Synaptic Potentiation ---\\nhacking_exp_mult: 1.05\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.02\\nPrice: $80.000m\\nRep: 6.250k\\n\\n--- Neural-Retention Enhancement ---\\nhacking_exp_mult: 1.25\\nPrice: $250.000m\\nRep: 20.000k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Cranial Signal Processors - Gen II ---\\nhacking_mult: 1.07\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.02\\nPrice: $125.000m\\nRep: 18.750k\\nPrereq: Cranial Signal Processors - Gen I\\n\\n--- Cranial Signal Processors - Gen III ---\\nhacking_mult: 1.09\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.15\\nPrice: $550.000m\\nRep: 50.000k\\nPrereq: Cranial Signal Processors - Gen II\\n\\n--- Neurotrainer II ---\\nhacking_exp_mult: 1.15\\nstrength_exp_mult: 1.15\\ndefense_exp_mult: 1.15\\ndexterity_exp_mult: 1.15\\nagility_exp_mult: 1.15\\ncharisma_exp_mult: 1.15\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- CRTX42-AA Gene Modification ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nPrice: $225.000m\\nRep: 45.000k\\n\\n\\n----- The Black Hand -----\\n\\n--- Artificial Synaptic Potentiation ---\\nhacking_exp_mult: 1.05\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.02\\nPrice: $80.000m\\nRep: 6.250k\\n\\n--- Enhanced Myelin Sheathing ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.1\\nhacking_speed_mult: 1.03\\nPrice: $1.375b\\nRep: 100.000k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Cranial Signal Processors - Gen III ---\\nhacking_mult: 1.09\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.15\\nPrice: $550.000m\\nRep: 50.000k\\nPrereq: Cranial Signal Processors - Gen II\\n\\n--- Cranial Signal Processors - Gen IV ---\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.2\\nhacking_grow_mult: 1.25\\nPrice: $1.100b\\nRep: 125.000k\\nPrereq: Cranial Signal Processors - Gen III\\n\\n--- The Black Hand ---\\nhacking_mult: 1.1\\nstrength_mult: 1.15\\ndexterity_mult: 1.15\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.1\\nPrice: $550.000m\\nRep: 100.000k\\n\\n\\n----- BitRunners -----\\n\\n--- Artificial Bio-neural Network Implant ---\\nhacking_mult: 1.12\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.15\\nPrice: $3.000b\\nRep: 275.000k\\n\\n--- Enhanced Myelin Sheathing ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.1\\nhacking_speed_mult: 1.03\\nPrice: $1.375b\\nRep: 100.000k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Neural Accelerator ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.15\\nhacking_money_mult: 1.2\\nPrice: $1.750b\\nRep: 200.000k\\n\\n--- Cranial Signal Processors - Gen III ---\\nhacking_mult: 1.09\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.15\\nPrice: $550.000m\\nRep: 50.000k\\nPrereq: Cranial Signal Processors - Gen II\\n\\n--- Cranial Signal Processors - Gen IV ---\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.2\\nhacking_grow_mult: 1.25\\nPrice: $1.100b\\nRep: 125.000k\\nPrereq: Cranial Signal Processors - Gen III\\n\\n--- Cranial Signal Processors - Gen V ---\\nhacking_mult: 1.3\\nhacking_money_mult: 1.25\\nhacking_grow_mult: 1.75\\nPrice: $2.250b\\nRep: 250.000k\\nPrereq: Cranial Signal Processors - Gen IV\\n\\n--- Neurotrainer II ---\\nhacking_exp_mult: 1.15\\nstrength_exp_mult: 1.15\\ndefense_exp_mult: 1.15\\ndexterity_exp_mult: 1.15\\nagility_exp_mult: 1.15\\ncharisma_exp_mult: 1.15\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- BitRunners Neurolink ---\\nhacking_mult: 1.15\\nhacking_exp_mult: 1.2\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nPrice: $4.375b\\nRep: 875.000k\\n\\n\\n----- ECorp -----\\n\\n--- Graphene Bionic Spine Upgrade ---\\nstrength_mult: 1.6\\ndefense_mult: 1.6\\ndexterity_mult: 1.6\\nagility_mult: 1.6\\nPrice: $6.000b\\nRep: 1.625m\\nPrereq: Bionic Spine\\n\\n--- Graphene Bionic Legs Upgrade ---\\nagility_mult: 2.5\\nPrice: $4.500b\\nRep: 750.000k\\nPrereq: Bionic Legs\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- PC Direct-Neural Interface ---\\nhacking_mult: 1.08\\ncompany_rep_mult: 1.3\\nPrice: $3.750b\\nRep: 375.000k\\n\\n--- PC Direct-Neural Interface Optimization Submodule ---\\nhacking_mult: 1.1\\ncompany_rep_mult: 1.75\\nPrice: $4.500b\\nRep: 500.000k\\nPrereq: PC Direct-Neural Interface\\n\\n--- ECorp HVMind Implant ---\\nhacking_grow_mult: 3\\nPrice: $5.500b\\nRep: 1.500m\\n\\n\\n----- MegaCorp -----\\n\\n--- Graphene Bionic Legs Upgrade ---\\nagility_mult: 2.5\\nPrice: $4.500b\\nRep: 750.000k\\nPrereq: Bionic Legs\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- CordiARC Fusion Reactor ---\\nstrength_mult: 1.35\\ndefense_mult: 1.35\\ndexterity_mult: 1.35\\nagility_mult: 1.35\\nstrength_exp_mult: 1.35\\ndefense_exp_mult: 1.35\\ndexterity_exp_mult: 1.35\\nagility_exp_mult: 1.35\\nPrice: $5.000b\\nRep: 1.125m\\n\\n\\n----- KuaiGong International -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- FocusWire ---\\nhacking_exp_mult: 1.05\\nstrength_exp_mult: 1.05\\ndefense_exp_mult: 1.05\\ndexterity_exp_mult: 1.05\\nagility_exp_mult: 1.05\\ncharisma_exp_mult: 1.05\\ncompany_rep_mult: 1.1\\nwork_money_mult: 1.2\\nPrice: $900.000m\\nRep: 75.000k\\n\\n--- HyperSight Corneal Implant ---\\ndexterity_mult: 1.4\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.750b\\nRep: 150.000k\\n\\n--- Photosynthetic Cells ---\\nstrength_mult: 1.4\\ndefense_mult: 1.4\\nagility_mult: 1.4\\nPrice: $2.750b\\nRep: 562.500k\\n\\n\\n----- Four Sigma -----\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- FocusWire ---\\nhacking_exp_mult: 1.05\\nstrength_exp_mult: 1.05\\ndefense_exp_mult: 1.05\\ndexterity_exp_mult: 1.05\\nagility_exp_mult: 1.05\\ncharisma_exp_mult: 1.05\\ncompany_rep_mult: 1.1\\nwork_money_mult: 1.2\\nPrice: $900.000m\\nRep: 75.000k\\n\\n--- PC Direct-Neural Interface ---\\nhacking_mult: 1.08\\ncompany_rep_mult: 1.3\\nPrice: $3.750b\\nRep: 375.000k\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- ADR-V2 Pheromone Gene ---\\ncompany_rep_mult: 1.2\\nfaction_rep_mult: 1.2\\nPrice: $550.000m\\nRep: 62.500k\\n\\n--- Neurotrainer III ---\\nhacking_exp_mult: 1.2\\nstrength_exp_mult: 1.2\\ndefense_exp_mult: 1.2\\ndexterity_exp_mult: 1.2\\nagility_exp_mult: 1.2\\ncharisma_exp_mult: 1.2\\nPrice: $130.000m\\nRep: 25.000k\\n\\n\\n----- NWO -----\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- Neurotrainer III ---\\nhacking_exp_mult: 1.2\\nstrength_exp_mult: 1.2\\ndefense_exp_mult: 1.2\\ndexterity_exp_mult: 1.2\\nagility_exp_mult: 1.2\\ncharisma_exp_mult: 1.2\\nPrice: $130.000m\\nRep: 25.000k\\n\\n--- Power Recirculation Core ---\\nhacking_mult: 1.05\\nstrength_mult: 1.05\\ndefense_mult: 1.05\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\ncharisma_mult: 1.05\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $180.000m\\nRep: 25.000k\\n\\n--- Xanipher ---\\nhacking_mult: 1.2\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\ndexterity_mult: 1.2\\nagility_mult: 1.2\\ncharisma_mult: 1.2\\nhacking_exp_mult: 1.15\\nstrength_exp_mult: 1.15\\ndefense_exp_mult: 1.15\\ndexterity_exp_mult: 1.15\\nagility_exp_mult: 1.15\\ncharisma_exp_mult: 1.15\\nPrice: $4.250b\\nRep: 875.000k\\n\\n--- Hydroflame Left Arm ---\\nstrength_mult: 2.7\\nPrice: $2.500t\\nRep: 1.250m\\n\\n\\n----- Blade Industries -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- PC Direct-Neural Interface ---\\nhacking_mult: 1.08\\ncompany_rep_mult: 1.3\\nPrice: $3.750b\\nRep: 375.000k\\n\\n--- PC Direct-Neural Interface Optimization Submodule ---\\nhacking_mult: 1.1\\ncompany_rep_mult: 1.75\\nPrice: $4.500b\\nRep: 500.000k\\nPrereq: PC Direct-Neural Interface\\n\\n--- HyperSight Corneal Implant ---\\ndexterity_mult: 1.4\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.750b\\nRep: 150.000k\\n\\n--- Neotra ---\\nstrength_mult: 1.55\\ndefense_mult: 1.55\\nPrice: $2.875b\\nRep: 562.500k\\n\\n\\n----- OmniTek Incorporated -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- PC Direct-Neural Interface ---\\nhacking_mult: 1.08\\ncompany_rep_mult: 1.3\\nPrice: $3.750b\\nRep: 375.000k\\n\\n--- OmniTek InfoLoad ---\\nhacking_mult: 1.2\\nhacking_exp_mult: 1.25\\nPrice: $2.875b\\nRep: 625.000k\\n\\n\\n----- Bachman & Associates -----\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- FocusWire ---\\nhacking_exp_mult: 1.05\\nstrength_exp_mult: 1.05\\ndefense_exp_mult: 1.05\\ndexterity_exp_mult: 1.05\\nagility_exp_mult: 1.05\\ncharisma_exp_mult: 1.05\\ncompany_rep_mult: 1.1\\nwork_money_mult: 1.2\\nPrice: $900.000m\\nRep: 75.000k\\n\\n--- ADR-V2 Pheromone Gene ---\\ncompany_rep_mult: 1.2\\nfaction_rep_mult: 1.2\\nPrice: $550.000m\\nRep: 62.500k\\n\\n--- SmartJaw ---\\ncharisma_mult: 1.5\\ncharisma_exp_mult: 1.5\\ncompany_rep_mult: 1.25\\nfaction_rep_mult: 1.25\\nPrice: $2.750b\\nRep: 375.000k\\n\\n\\n----- Clarke Incorporated -----\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Neuronal Densification ---\\nhacking_mult: 1.15\\nhacking_exp_mult: 1.1\\nhacking_speed_mult: 1.03\\nPrice: $1.375b\\nRep: 187.500k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- FocusWire ---\\nhacking_exp_mult: 1.05\\nstrength_exp_mult: 1.05\\ndefense_exp_mult: 1.05\\ndexterity_exp_mult: 1.05\\nagility_exp_mult: 1.05\\ncharisma_exp_mult: 1.05\\ncompany_rep_mult: 1.1\\nwork_money_mult: 1.2\\nPrice: $900.000m\\nRep: 75.000k\\n\\n--- ADR-V2 Pheromone Gene ---\\ncompany_rep_mult: 1.2\\nfaction_rep_mult: 1.2\\nPrice: $550.000m\\nRep: 62.500k\\n\\n--- nextSENS Gene Modification ---\\nhacking_mult: 1.2\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\ndexterity_mult: 1.2\\nagility_mult: 1.2\\ncharisma_mult: 1.2\\nPrice: $1.925b\\nRep: 437.500k\\n\\n\\n----- Fulcrum Secret Technologies -----\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Graphene Bone Lacings ---\\nstrength_mult: 1.7\\ndefense_mult: 1.7\\nPrice: $4.250b\\nRep: 1.125m\\n\\n--- Graphene Bionic Spine Upgrade ---\\nstrength_mult: 1.6\\ndefense_mult: 1.6\\ndexterity_mult: 1.6\\nagility_mult: 1.6\\nPrice: $6.000b\\nRep: 1.625m\\nPrereq: Bionic Spine\\n\\n--- Graphene Bionic Legs Upgrade ---\\nagility_mult: 2.5\\nPrice: $4.500b\\nRep: 750.000k\\nPrereq: Bionic Legs\\n\\n--- Artificial Bio-neural Network Implant ---\\nhacking_mult: 1.12\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.15\\nPrice: $3.000b\\nRep: 275.000k\\n\\n--- Enhanced Myelin Sheathing ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.1\\nhacking_speed_mult: 1.03\\nPrice: $1.375b\\nRep: 100.000k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- PC Direct-Neural Interface Optimization Submodule ---\\nhacking_mult: 1.1\\ncompany_rep_mult: 1.75\\nPrice: $4.500b\\nRep: 500.000k\\nPrereq: PC Direct-Neural Interface\\n\\n--- PC Direct-Neural Interface NeuroNet Injector ---\\nhacking_mult: 1.1\\nhacking_speed_mult: 1.05\\ncompany_rep_mult: 2\\nPrice: $7.500b\\nRep: 1.500m\\nPrereq: PC Direct-Neural Interface\\n\\n\\n----- Slum Snakes -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- LuminCloaking-V1 Skin Implant ---\\nagility_mult: 1.05\\ncrime_money_mult: 1.1\\nPrice: $5.000m\\nRep: 1.500k\\n\\n--- LuminCloaking-V2 Skin Implant ---\\ndefense_mult: 1.1\\nagility_mult: 1.1\\ncrime_money_mult: 1.25\\nPrice: $30.000m\\nRep: 5.000k\\nPrereq: LuminCloaking-V1 Skin Implant\\n\\n--- SmartSonar Implant ---\\ndexterity_mult: 1.1\\ndexterity_exp_mult: 1.15\\ncrime_money_mult: 1.25\\nPrice: $75.000m\\nRep: 22.500k\\n\\n\\n----- Tetrads -----\\n\\n--- HemoRecirculator ---\\nstrength_mult: 1.08\\ndefense_mult: 1.08\\ndexterity_mult: 1.08\\nagility_mult: 1.08\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- LuminCloaking-V1 Skin Implant ---\\nagility_mult: 1.05\\ncrime_money_mult: 1.1\\nPrice: $5.000m\\nRep: 1.500k\\n\\n--- LuminCloaking-V2 Skin Implant ---\\ndefense_mult: 1.1\\nagility_mult: 1.1\\ncrime_money_mult: 1.25\\nPrice: $30.000m\\nRep: 5.000k\\nPrereq: LuminCloaking-V1 Skin Implant\\n\\n--- Power Recirculation Core ---\\nhacking_mult: 1.05\\nstrength_mult: 1.05\\ndefense_mult: 1.05\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\ncharisma_mult: 1.05\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $180.000m\\nRep: 25.000k\\n\\n--- Bionic Arms ---\\nstrength_mult: 1.3\\ndexterity_mult: 1.3\\nPrice: $275.000m\\nRep: 62.500k\\n\\n\\n----- Silhouette -----\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- TITN-41 Gene-Modification Injection ---\\ncharisma_mult: 1.15\\ncharisma_exp_mult: 1.15\\nPrice: $190.000m\\nRep: 25.000k\\n\\n--- ADR-V2 Pheromone Gene ---\\ncompany_rep_mult: 1.2\\nfaction_rep_mult: 1.2\\nPrice: $550.000m\\nRep: 62.500k\\n\\n\\n----- Speakers for the Dead -----\\n\\n--- Unstable Circadian Modulator ---\\ncompany_rep_mult: 1.25\\nfaction_rep_mult: 1.15\\nwork_money_mult: 1.7\\nPrice: $5.000b\\nRep: 362.500k\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- The Shadow's Simulacrum ---\\ncompany_rep_mult: 1.15\\nfaction_rep_mult: 1.15\\nPrice: $400.000m\\nRep: 37.500k\\n\\n--- Graphene BrachiBlades Upgrade ---\\nstrength_mult: 1.4\\ndefense_mult: 1.4\\ncrime_money_mult: 1.3\\ncrime_success_mult: 1.1\\nPrice: $2.500b\\nRep: 225.000k\\nPrereq: BrachiBlades\\n\\n\\n----- The Dark Army -----\\n\\n--- HemoRecirculator ---\\nstrength_mult: 1.08\\ndefense_mult: 1.08\\ndexterity_mult: 1.08\\nagility_mult: 1.08\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- The Shadow's Simulacrum ---\\ncompany_rep_mult: 1.15\\nfaction_rep_mult: 1.15\\nPrice: $400.000m\\nRep: 37.500k\\n\\n--- Power Recirculation Core ---\\nhacking_mult: 1.05\\nstrength_mult: 1.05\\ndefense_mult: 1.05\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\ncharisma_mult: 1.05\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $180.000m\\nRep: 25.000k\\n\\n--- Graphene Bionic Arms Upgrade ---\\nstrength_mult: 1.85\\ndexterity_mult: 1.85\\nPrice: $3.750b\\nRep: 500.000k\\nPrereq: Bionic Arms\\n\\n\\n----- The Syndicate -----\\n\\n--- HemoRecirculator ---\\nstrength_mult: 1.08\\ndefense_mult: 1.08\\ndexterity_mult: 1.08\\nagility_mult: 1.08\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- The Shadow's Simulacrum ---\\ncompany_rep_mult: 1.15\\nfaction_rep_mult: 1.15\\nPrice: $400.000m\\nRep: 37.500k\\n\\n--- Power Recirculation Core ---\\nhacking_mult: 1.05\\nstrength_mult: 1.05\\ndefense_mult: 1.05\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\ncharisma_mult: 1.05\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $180.000m\\nRep: 25.000k\\n\\n--- BrachiBlades ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ncrime_money_mult: 1.15\\ncrime_success_mult: 1.1\\nPrice: $90.000m\\nRep: 12.500k\\n\\n\\n----- The Covenant -----\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Graphene Bone Lacings ---\\nstrength_mult: 1.7\\ndefense_mult: 1.7\\nPrice: $4.250b\\nRep: 1.125m\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- SPTN-97 Gene Modification ---\\nhacking_mult: 1.15\\nstrength_mult: 1.75\\ndefense_mult: 1.75\\ndexterity_mult: 1.75\\nagility_mult: 1.75\\nPrice: $4.875b\\nRep: 1.250m\\n\\n\\n----- Daedalus -----\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- The Red Pill ---\\nSpecial\\nPrice: $0.000\\nRep: 2.500m\\n\\n\\n----- Illuminati -----\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- QLink ---\\nhacking_mult: 1.75\\nhacking_chance_mult: 2.5\\nhacking_speed_mult: 2\\nhacking_money_mult: 4\\nPrice: $25.000t\\nRep: 1.875m\\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/texts/bitnode-order.txt\",\"text\":\"1.1 -> 1.2 -> 1.3   Max SF1 28% all\\n5.1                 Int, Formulas & getBitNodeMultipliers()\\n4.1 -> 4.2 -> 4.3   Max SF4 Singularity functions\\n5.2 -> 5.3          Max SF5 14% hacking\\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/texts/todo.txt\",\"text\":\"Company automator\\nUpdate hackable cost function\\nDonate to Faction\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":4.167999999999998,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"84.7.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"ecorp\",\"moduleSequenceNumber\":502}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"ecorp\",\"moduleSequenceNumber\":504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":16086560713.6,\"moneyMax\":80432803568,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1199,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"63.0.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"megacorp\",\"moduleSequenceNumber\":508}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"megacorp\",\"moduleSequenceNumber\":510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":20072801186.4,\"moneyMax\":100364005932.00002,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1340,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"50.8.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"b-and-a\",\"moduleSequenceNumber\":514}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"b-and-a\",\"moduleSequenceNumber\":516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":10499380569.2,\"moneyMax\":52496902846.00001,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1046,\"serverGrowth\":61}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"36.1.7.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"blade\",\"moduleSequenceNumber\":520}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"blade\",\"moduleSequenceNumber\":521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"blade\",\"moduleSequenceNumber\":522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":9043806710.800001,\"moneyMax\":45219033554.00001,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1016,\"serverGrowth\":82}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"80.1.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"nwo\",\"moduleSequenceNumber\":526}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"nwo\",\"moduleSequenceNumber\":527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nwo\",\"moduleSequenceNumber\":528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":13158173808,\"moneyMax\":65790869040,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1208,\"serverGrowth\":80}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"17.5.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"clarkinc\",\"moduleSequenceNumber\":532}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"clarkinc\",\"moduleSequenceNumber\":534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":7085546620,\"moneyMax\":35427733100,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1154,\"serverGrowth\":49}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"48.5.4.4\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"omnitek\",\"moduleSequenceNumber\":538}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnitek\",\"moduleSequenceNumber\":540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":6489301346.8,\"moneyMax\":32446506734,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":905,\"serverGrowth\":97}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"44.3.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"4sigma\",\"moduleSequenceNumber\":544}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"4sigma\",\"moduleSequenceNumber\":546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"vitalife\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":9131288956.800001,\"moneyMax\":45656444784.00001,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":933,\"serverGrowth\":77}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"86.6.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":550}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"vitalife\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":11651707710.400002,\"moneyMax\":58258538552.000015,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1278,\"serverGrowth\":99}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"7.3.7.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":556}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":709912161.6,\"moneyMax\":3549560808,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1144,\"serverGrowth\":93}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"9.9.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":562}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":400000,\"moneyMax\":2000000,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1518,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"17.4.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"stormtech\",\"moduleSequenceNumber\":568}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"stormtech\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":445642926.8,\"moneyMax\":2228214634,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":944,\"serverGrowth\":90}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"84.4.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"defcomm\",\"moduleSequenceNumber\":574}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"defcomm\",\"moduleSequenceNumber\":576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":327278641.6,\"moneyMax\":1636393208.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1029,\"serverGrowth\":47}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"58.4.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"infocomm\",\"moduleSequenceNumber\":580}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"infocomm\",\"moduleSequenceNumber\":582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"defcomm\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":356446827.6,\"moneyMax\":1782234138,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":889,\"serverGrowth\":44}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"49.7.7.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"helios\",\"moduleSequenceNumber\":586}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"helios\",\"moduleSequenceNumber\":587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"helios\",\"moduleSequenceNumber\":588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":253723182.4,\"moneyMax\":1268615912,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":845,\"serverGrowth\":77}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"87.7.5.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"vitalife\",\"moduleSequenceNumber\":592}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"vitalife\",\"moduleSequenceNumber\":594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":310863362.40000004,\"moneyMax\":1554316812.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":802,\"serverGrowth\":71}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"83.6.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"icarus\",\"moduleSequenceNumber\":598}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"icarus\",\"moduleSequenceNumber\":599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"icarus\",\"moduleSequenceNumber\":600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":364698272,\"moneyMax\":1823491360,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":851,\"serverGrowth\":93}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"9.4.0.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"univ-energy\",\"moduleSequenceNumber\":604}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"univ-energy\",\"moduleSequenceNumber\":606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":473306270.40000004,\"moneyMax\":2366531352,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":845,\"serverGrowth\":80}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"58.2.1.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":607,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"titan-labs\",\"moduleSequenceNumber\":610}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"titan-labs\",\"moduleSequenceNumber\":612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":324800277.6,\"moneyMax\":1624001388.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":852,\"serverGrowth\":64}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"96.7.2.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":613,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"microdyne\",\"moduleSequenceNumber\":616}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":617,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"microdyne\",\"moduleSequenceNumber\":618,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":236733202,\"moneyMax\":1183666010,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":842,\"serverGrowth\":72}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"22.1.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":619,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":622}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":623,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":339612722.8,\"moneyMax\":1698063614,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":950,\"serverGrowth\":75}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"12.8.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":625,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":628}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":336314245.20000005,\"moneyMax\":1681571226.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":861,\"serverGrowth\":79}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"41.3.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":631,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"aerocorp\",\"moduleSequenceNumber\":634}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"aerocorp\",\"moduleSequenceNumber\":636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"aevum-police\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":471281361.6,\"moneyMax\":2356406808,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":894,\"serverGrowth\":64}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"41.9.3.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"omnia\",\"moduleSequenceNumber\":640}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"omnia\",\"moduleSequenceNumber\":641,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnia\",\"moduleSequenceNumber\":642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"aerocorp\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":398641169.20000005,\"moneyMax\":1993205846.0000005,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":874,\"serverGrowth\":69}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"92.3.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":643,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"zb-def\",\"moduleSequenceNumber\":646}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":647,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zb-def\",\"moduleSequenceNumber\":648,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"solaris\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":420565016.8,\"moneyMax\":2102825084,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":817,\"serverGrowth\":69}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"12.1.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":649,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":651,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":652}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":318040760.8,\"moneyMax\":1590203804,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":817,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"86.2.0.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":657,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"solaris\",\"moduleSequenceNumber\":658}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"solaris\",\"moduleSequenceNumber\":659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"solaris\",\"moduleSequenceNumber\":660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":305132594.40000004,\"moneyMax\":1525662972.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":799,\"serverGrowth\":79}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"55.9.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":663,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"deltaone\",\"moduleSequenceNumber\":664}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"deltaone\",\"moduleSequenceNumber\":666,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"aerocorp\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":602513758,\"moneyMax\":3012568790,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":900,\"serverGrowth\":54}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"46.6.7.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":668,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":669,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"global-pharm\",\"moduleSequenceNumber\":670}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":671,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"global-pharm\",\"moduleSequenceNumber\":672,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":628596434,\"moneyMax\":3142982170,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":783,\"serverGrowth\":88}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"32.3.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"nova-med\",\"moduleSequenceNumber\":676}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nova-med\",\"moduleSequenceNumber\":678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"univ-energy\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":487402643.20000005,\"moneyMax\":2437013216.0000005,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":836,\"serverGrowth\":78}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"6.5.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"zeus-med\",\"moduleSequenceNumber\":682}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zeus-med\",\"moduleSequenceNumber\":684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":599094041.2,\"moneyMax\":2995470206.0000005,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":829,\"serverGrowth\":75}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"37.5.1.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"unitalife\",\"moduleSequenceNumber\":688}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"unitalife\",\"moduleSequenceNumber\":690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"icarus\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":411793744,\"moneyMax\":2058968720,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":808,\"serverGrowth\":72}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"82.8.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":694}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":298346958.40000004,\"moneyMax\":1491734792.0000002,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":650,\"serverGrowth\":58}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"58.9.3.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"rho-construction\",\"moduleSequenceNumber\":700}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"rho-construction\",\"moduleSequenceNumber\":702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":209341436,\"moneyMax\":1046707180,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":497,\"serverGrowth\":57}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"23.5.8.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":706}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":708,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":256765327.60000002,\"moneyMax\":1283826638.0000002,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":594,\"serverGrowth\":52}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"11.0.2.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":62.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.81000000000011,\"pid\":7530,\"ramUsage\":1.7,\"server\":\"aevum-police\",\"threads\":37,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///af06259e-bd50-4b29-af2e-75eeb432709c\",\"moduleSequenceNumber\":15792}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///af06259e-bd50-4b29-af2e-75eeb432709c\",\"moduleSequenceNumber\":15792}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":15792,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///d23c43da-7786-4c5a-a3c0-82859bd528e9\",\"moduleSequenceNumber\":10228}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":10228,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///12c2b941-7ba6-4886-8166-d4e07d151ae5\",\"moduleSequenceNumber\":11154}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":11154,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"aevum-police\",\"moduleSequenceNumber\":712}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"aevum-police\",\"moduleSequenceNumber\":714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zb-institute\",\"aerocorp\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":149239536,\"moneyMax\":746197680,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":414,\"serverGrowth\":40}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"30.2.8.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":15.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":8262,\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"threads\":6,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///46313f1a-529b-4d1b-bebc-51912cd05218\",\"moduleSequenceNumber\":15790}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":8263,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":3,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///66665777-5e3f-4b84-8c1e-3823c4c734d7\",\"moduleSequenceNumber\":12079}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///46313f1a-529b-4d1b-bebc-51912cd05218\",\"moduleSequenceNumber\":15790}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":15790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///66665777-5e3f-4b84-8c1e-3823c4c734d7\",\"moduleSequenceNumber\":12079}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":12079,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///278e5f80-739e-4437-af40-dec609cb9fb7\",\"moduleSequenceNumber\":13930}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":13930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":718}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":97321442.4,\"moneyMax\":486607212,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":426,\"serverGrowth\":38}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"73.2.4.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"zb-institute\",\"moduleSequenceNumber\":724}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zb-institute\",\"moduleSequenceNumber\":726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"the-hub\",\"rho-construction\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":373264779.6,\"moneyMax\":1866323898,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":771,\"serverGrowth\":80}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"7.2.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":8257,\"ramUsage\":1.7,\"server\":\"summit-uni\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///29796111-848e-4aa0-9b7d-2c85f6207a26\",\"moduleSequenceNumber\":25524}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":25524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///2e029f16-ce86-421a-a1ae-ad2f99e47e94\",\"moduleSequenceNumber\":19964}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":19964,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"summit-uni\",\"moduleSequenceNumber\":730}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":94806212.80000001,\"moneyMax\":474031064.0000001,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":470,\"serverGrowth\":55}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"44.1.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"syscore\",\"moduleSequenceNumber\":736}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"syscore\",\"moduleSequenceNumber\":737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"syscore\",\"moduleSequenceNumber\":738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":214239661.20000002,\"moneyMax\":1071198306,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":628,\"serverGrowth\":66}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"22.5.8.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":127.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.40999999999954,\"pid\":7266,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///dc39b25f-c5a7-45c5-b74a-92f6ad0ff14a\",\"moduleSequenceNumber\":14395}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.40999999999954,\"pid\":7267,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":7,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///a2bf944d-518c-487e-b63a-28a0e5a8fdc0\",\"moduleSequenceNumber\":13467}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":85.41000000000011,\"pid\":7274,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///dc39b25f-c5a7-45c5-b74a-92f6ad0ff14a\",\"moduleSequenceNumber\":14395}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":85.41000000000011,\"pid\":7275,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":59,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///a2bf944d-518c-487e-b63a-28a0e5a8fdc0\",\"moduleSequenceNumber\":13467}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.81000000000011,\"pid\":7534,\"ramUsage\":1.7,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///96d4cbe7-0867-49d0-abdf-689cf16ae545\",\"moduleSequenceNumber\":15791}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///96d4cbe7-0867-49d0-abdf-689cf16ae545\",\"moduleSequenceNumber\":15791}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":15791,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///a2bf944d-518c-487e-b63a-28a0e5a8fdc0\",\"moduleSequenceNumber\":13467}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":13467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///dc39b25f-c5a7-45c5-b74a-92f6ad0ff14a\",\"moduleSequenceNumber\":14395}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":14395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"catalyst\",\"moduleSequenceNumber\":742}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"catalyst\",\"moduleSequenceNumber\":744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":126153824.4,\"moneyMax\":630769122,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":445,\"serverGrowth\":31}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"76.3.5.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":6.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":85.41000000000011,\"pid\":7276,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///3b761f06-c135-48c0-92d1-9a666357f4b0\",\"moduleSequenceNumber\":921}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.81000000000011,\"pid\":7630,\"ramUsage\":1.7,\"server\":\"the-hub\",\"threads\":3,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///64cbad7a-7fa7-49d7-a515-a86bdd82c42d\",\"moduleSequenceNumber\":30395}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///c87d89e2-6034-4a19-9d12-771442136cbe\",\"moduleSequenceNumber\":25060}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":25060,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///3b761f06-c135-48c0-92d1-9a666357f4b0\",\"moduleSequenceNumber\":921}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":921,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///6585b1e9-0687-4e71-b3f0-7b04355bbe01\",\"moduleSequenceNumber\":7916}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":7916,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"the-hub\",\"moduleSequenceNumber\":748}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"the-hub\",\"moduleSequenceNumber\":750,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":39,\"hackDifficulty\":15.392999999999976,\"minDifficulty\":13,\"moneyAvailable\":323704083.7874058,\"moneyMax\":329266178,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":288,\"serverGrowth\":48}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"48.4.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":751,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"comptek\",\"moduleSequenceNumber\":754}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"comptek\",\"moduleSequenceNumber\":755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"comptek\",\"moduleSequenceNumber\":756,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omega-net\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":59,\"hackDifficulty\":30.973000000000024,\"minDifficulty\":20,\"moneyAvailable\":119959238.00993666,\"moneyMax\":443194278,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":313,\"serverGrowth\":60}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"32.4.9.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":105.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.21000000000011,\"pid\":7278,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":2,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///2d0ac388-75cd-4b8d-b378-5cece6aaa250\",\"moduleSequenceNumber\":9765}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.0100000000001,\"pid\":7279,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///da49ded4-4af2-4c48-8693-c73f8d5a3370\",\"moduleSequenceNumber\":10691}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.81000000000011,\"pid\":7528,\"ramUsage\":1.7,\"server\":\"netlink\",\"threads\":59,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5bad079d-b777-45ab-a760-e6808c19cbfd\",\"moduleSequenceNumber\":14396}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5bad079d-b777-45ab-a760-e6808c19cbfd\",\"moduleSequenceNumber\":14396}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":14396,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///2d0ac388-75cd-4b8d-b378-5cece6aaa250\",\"moduleSequenceNumber\":9765}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":9765,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///da49ded4-4af2-4c48-8693-c73f8d5a3370\",\"moduleSequenceNumber\":10691}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":10691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"netlink\",\"moduleSequenceNumber\":760}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"netlink\",\"moduleSequenceNumber\":761,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"netlink\",\"moduleSequenceNumber\":762,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":110000000,\"moneyMax\":550000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":411,\"serverGrowth\":70}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"85.8.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":763,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":764,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":765,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":766}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":767,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":768,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":56,\"hackDifficulty\":19.138000000000005,\"minDifficulty\":19,\"moneyAvailable\":99084934.97642878,\"moneyMax\":152581054,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":260,\"serverGrowth\":63}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"49.2.0.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":8259,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///ca81b959-d84f-4375-a183-74c7536d8f21\",\"moduleSequenceNumber\":18514}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":8260,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///e5969f66-3b08-4538-b59f-8819f835c715\",\"moduleSequenceNumber\":922}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///537631ae-1e63-4460-87ff-31c44d38853a\",\"moduleSequenceNumber\":4214}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":4214,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///e5969f66-3b08-4538-b59f-8819f835c715\",\"moduleSequenceNumber\":922}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":922,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///37d697cb-166b-4e9e-b7f8-00aff1b0a7f3\",\"moduleSequenceNumber\":25525}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":25525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"n00dles\",\"moduleSequenceNumber\":772}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"n00dles\",\"moduleSequenceNumber\":774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":133994,\"moneyMax\":140000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"62.1.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.81000000000011,\"pid\":7532,\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"threads\":9,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///55c6c9e2-7fd6-4a85-af81-77297842fb6e\",\"moduleSequenceNumber\":1428}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///55c6c9e2-7fd6-4a85-af81-77297842fb6e\",\"moduleSequenceNumber\":1428}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1428,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///a691b81b-253e-42f2-8130-2c66558951b5\",\"moduleSequenceNumber\":923}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":923,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///f59bc594-7846-4c0a-bc8b-84b9cbd9891e\",\"moduleSequenceNumber\":1429}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1429,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":778}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":779,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":780,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":7.764,\"minDifficulty\":3,\"moneyAvailable\":2159495.144188691,\"moneyMax\":4000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"52.0.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":85.41000000000011,\"pid\":7277,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///1e966a74-520b-443d-afee-e990488e8140\",\"moduleSequenceNumber\":924}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.81000000000011,\"pid\":7609,\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"threads\":8,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///d55c8cb7-2573-4ab8-837b-fd454dfa19eb\",\"moduleSequenceNumber\":4217}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///d55c8cb7-2573-4ab8-837b-fd454dfa19eb\",\"moduleSequenceNumber\":4217}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":4217,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///1e966a74-520b-443d-afee-e990488e8140\",\"moduleSequenceNumber\":924}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":924,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///72ee0828-e2da-4da5-91b1-3c5ade40be79\",\"moduleSequenceNumber\":1430}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":784}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":785,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":786,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":10.408000000000001,\"minDifficulty\":3,\"moneyAvailable\":4600000,\"moneyMax\":4600000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"50.6.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.81000000000011,\"pid\":7533,\"ramUsage\":1.7,\"server\":\"joesguns\",\"threads\":9,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///ddbba04a-ecd4-40d4-aaa0-539e90fa4463\",\"moduleSequenceNumber\":2359}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///ddbba04a-ecd4-40d4-aaa0-539e90fa4463\",\"moduleSequenceNumber\":2359}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":2359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///325ab46b-cdd9-424e-bf03-f1d6e89ded25\",\"moduleSequenceNumber\":925}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":925,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///05a27e75-b6c2-4f5b-9db9-1c67878f9cb2\",\"moduleSequenceNumber\":1893}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":1893,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"joesguns\",\"moduleSequenceNumber\":790}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":791,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"joesguns\",\"moduleSequenceNumber\":792,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":2014232,\"moneyMax\":5000000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"57.6.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":23.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.81000000000011,\"pid\":7531,\"ramUsage\":1.7,\"server\":\"zer0\",\"threads\":11,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///1629dab5-e594-45a6-9646-437c57f32a5d\",\"moduleSequenceNumber\":1423}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":8258,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":2,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///ea79255d-59a2-457d-807e-c52d621b6b33\",\"moduleSequenceNumber\":22281}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.610000000000001,\"pid\":8261,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///7d3ce5bd-f006-404d-91d8-569e6aec1c07\",\"moduleSequenceNumber\":926}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///1629dab5-e594-45a6-9646-437c57f32a5d\",\"moduleSequenceNumber\":1423}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":1423,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///7d3ce5bd-f006-404d-91d8-569e6aec1c07\",\"moduleSequenceNumber\":926}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":926,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///ea79255d-59a2-457d-807e-c52d621b6b33\",\"moduleSequenceNumber\":22281}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":22281,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"zer0\",\"moduleSequenceNumber\":796}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"zer0\",\"moduleSequenceNumber\":797,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zer0\",\"moduleSequenceNumber\":798,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":14.3125,\"minDifficulty\":8,\"moneyAvailable\":15000000,\"moneyMax\":15000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"78.1.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":8255,\"ramUsage\":1.7,\"server\":\"nectar-net\",\"threads\":9,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///aeb3e0f2-6495-4e35-af3b-ee69d3ef540c\",\"moduleSequenceNumber\":4211}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///aeb3e0f2-6495-4e35-af3b-ee69d3ef540c\",\"moduleSequenceNumber\":4211}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":4211,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///c3174158-b1b0-4238-979d-a55509d07edd\",\"moduleSequenceNumber\":927}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":927,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///e19d780b-a6f1-46d8-8542-c132dd1dc02c\",\"moduleSequenceNumber\":18512}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":801,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"nectar-net\",\"moduleSequenceNumber\":802}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":803,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":804,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"silver-helix\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":16.7265,\"minDifficulty\":7,\"moneyAvailable\":5500000,\"moneyMax\":5500000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"4.5.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":196.60999999999953,\"pid\":7260,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///dd2aa8fb-c24e-4cbf-bf44-35c700b405ea\",\"moduleSequenceNumber\":928}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///5d9873a0-e585-4b46-a0f9-ce3224cdb38c\",\"moduleSequenceNumber\":1425}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":1425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///dd2aa8fb-c24e-4cbf-bf44-35c700b405ea\",\"moduleSequenceNumber\":928}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":928,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///4de7de5a-571e-48aa-b3f5-0016f6c57fa0\",\"moduleSequenceNumber\":14393}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":14393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"neo-net\",\"moduleSequenceNumber\":808}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":809,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"neo-net\",\"moduleSequenceNumber\":810,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"max-hardware\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":2000000,\"moneyMax\":10000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"87.9.0.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":62.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.81000000000011,\"pid\":7529,\"ramUsage\":1.7,\"server\":\"silver-helix\",\"threads\":37,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///b357b261-c451-40b5-a8ac-734e186b776c\",\"moduleSequenceNumber\":1421}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///b357b261-c451-40b5-a8ac-734e186b776c\",\"moduleSequenceNumber\":1421}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1421,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///d8b1ea3c-7459-49f3-a101-514eca4f6ee0\",\"moduleSequenceNumber\":929}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":929,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///b39e4d20-a96e-4fd0-8866-f3af52b5aec3\",\"moduleSequenceNumber\":956}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":956,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"silver-helix\",\"moduleSequenceNumber\":814}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":815,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":816,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":13.528,\"minDifficulty\":10,\"moneyAvailable\":90000000,\"moneyMax\":90000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"48.0.7.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":8254,\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"threads\":9,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///4f9e80a3-e130-4051-9797-36d6faa73910\",\"moduleSequenceNumber\":4210}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///4f9e80a3-e130-4051-9797-36d6faa73910\",\"moduleSequenceNumber\":4210}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":4210,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///a9035227-fd40-4073-afa3-ed0d26d2fdb1\",\"moduleSequenceNumber\":930}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///e97f9215-765e-4a06-af98-7e0bc4aae554\",\"moduleSequenceNumber\":955}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":955,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":820}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":821,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":822,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":8.216375,\"minDifficulty\":5,\"moneyAvailable\":2407632,\"moneyMax\":6000000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"42.8.8.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":8187,\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"threads\":9,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///43b84e04-6b93-41c9-9cac-e25b7408da0b\",\"moduleSequenceNumber\":4213}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///43b84e04-6b93-41c9-9cac-e25b7408da0b\",\"moduleSequenceNumber\":4213}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":4213,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///055cec4f-992e-44ab-8a52-61ccb0faed00\",\"moduleSequenceNumber\":931}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":931,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///e7bdf9c9-ec13-4c11-b86d-f8fbbf69504f\",\"moduleSequenceNumber\":1896}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1896,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":826}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":827,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":828,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":6.848,\"minDifficulty\":5,\"moneyAvailable\":8000000,\"moneyMax\":8000000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"55.7.3.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.610000000000106,\"pid\":7703,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":13,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///16282e04-5a95-44e1-b880-2bd3c747f09c\",\"moduleSequenceNumber\":17648}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.209999999999976,\"pid\":8002,\"ramUsage\":1.7,\"server\":\"phantasy\",\"threads\":5,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///92743c83-a22b-44c1-b2fe-1a5b2ecd7bc7\",\"moduleSequenceNumber\":1424}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///92743c83-a22b-44c1-b2fe-1a5b2ecd7bc7\",\"moduleSequenceNumber\":1424}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":1424,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///3981711a-3ce9-4342-962c-d1216ecf006d\",\"moduleSequenceNumber\":932}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":932,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///16282e04-5a95-44e1-b880-2bd3c747f09c\",\"moduleSequenceNumber\":17648}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":17648,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"phantasy\",\"moduleSequenceNumber\":832}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":833,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"phantasy\",\"moduleSequenceNumber\":834,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nectar-net\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":48000000,\"moneyMax\":48000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"3.7.8.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":196.60999999999953,\"pid\":7258,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":8,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///cf13ac6a-41ab-4243-833b-7e1f63d6fd81\",\"moduleSequenceNumber\":952}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":196.60999999999953,\"pid\":7259,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":10,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///67b8b18a-7e33-4a77-964b-c0403c51635e\",\"moduleSequenceNumber\":933}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///f245ef57-673a-480e-be7e-e1a5928e5c97\",\"moduleSequenceNumber\":1426}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///67b8b18a-7e33-4a77-964b-c0403c51635e\",\"moduleSequenceNumber\":933}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":933,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///cf13ac6a-41ab-4243-833b-7e1f63d6fd81\",\"moduleSequenceNumber\":952}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":952,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"max-hardware\",\"moduleSequenceNumber\":838}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":839,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":840,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":7.48,\"minDifficulty\":5,\"moneyAvailable\":20000000,\"moneyMax\":20000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"13.9.2.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":251.60999999999947,\"pid\":7218,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":15,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///a9b61327-001c-464c-b098-06a23a7d2d24\",\"moduleSequenceNumber\":957}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.610000000000106,\"pid\":7704,\"ramUsage\":1.7,\"server\":\"omega-net\",\"threads\":3,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///39118ae8-aae8-45d2-8799-035e0c3aa259\",\"moduleSequenceNumber\":1427}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///39118ae8-aae8-45d2-8799-035e0c3aa259\",\"moduleSequenceNumber\":1427}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":1427,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///949463db-2bda-4050-ac12-c0f7d67b8a4d\",\"moduleSequenceNumber\":934}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":934,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///a9b61327-001c-464c-b098-06a23a7d2d24\",\"moduleSequenceNumber\":957}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":957,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"omega-net\",\"moduleSequenceNumber\":844}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":845,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"omega-net\",\"moduleSequenceNumber\":846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"comptek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":29,\"hackDifficulty\":10.177499999999919,\"minDifficulty\":10,\"moneyAvailable\":97483620.96846813,\"moneyMax\":130142630,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":206,\"serverGrowth\":34}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"44.9.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":848,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":849,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":850}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":851,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":852,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":23333953.200000003,\"moneyMax\":116669766.00000003,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":264,\"serverGrowth\":27}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"49.3.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.410000000000004,\"pid\":7873,\"ramUsage\":1.7,\"server\":\"iron-gym\",\"threads\":18,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///84eb0203-37b1-421e-9363-59d9bfca5ea1\",\"moduleSequenceNumber\":1422}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///84eb0203-37b1-421e-9363-59d9bfca5ea1\",\"moduleSequenceNumber\":1422}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1422,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///434dc33d-f95f-4245-810e-10507c98b857\",\"moduleSequenceNumber\":935}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":935,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///0fedc286-dcfd-460f-9e68-43316597a9b5\",\"moduleSequenceNumber\":1895}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1895,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"iron-gym\",\"moduleSequenceNumber\":856}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":857,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":858,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":10.127999999999998,\"minDifficulty\":10,\"moneyAvailable\":8649596.692853695,\"moneyMax\":40000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"82.8.5.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/hacking/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.41000000000011,\"pid\":7273,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":9,\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///5aacd348-c82d-4f0d-86fc-5befa5d5f58f\",\"moduleSequenceNumber\":21817}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":859,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///5aacd348-c82d-4f0d-86fc-5befa5d5f58f\",\"moduleSequenceNumber\":21817}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":21817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":861,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":862}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":863,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":864,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":100000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":481,\"serverGrowth\":41}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"45.8.6.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":865,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":867,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":868}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":869,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":870,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\".\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":360000000,\"moneyMax\":1800000000,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":988,\"serverGrowth\":51}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"4.9.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":871,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":872,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":873,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":874}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":875,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":876,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"aevum-police\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":180000000,\"moneyMax\":900000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":771,\"serverGrowth\":50}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"76.9.2.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":877,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":878,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":880}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":881,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":882,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nova-med\",\"stormtech\",\"helios\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":540,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"41.7.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":15.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.81000000000011,\"pid\":7607,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":2,\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///da52b4d0-f0b9-41b5-acd1-4a026d6853bc\",\"moduleSequenceNumber\":1420}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.81000000000011,\"pid\":7608,\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"threads\":7,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///8c32884e-90d7-46d9-95e2-109b995953b7\",\"moduleSequenceNumber\":4216}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///8c32884e-90d7-46d9-95e2-109b995953b7\",\"moduleSequenceNumber\":4216}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":4216,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///ee811ac3-0116-45c3-b139-dc1f5d9dd65d\",\"moduleSequenceNumber\":951}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":951,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///da52b4d0-f0b9-41b5-acd1-4a026d6853bc\",\"moduleSequenceNumber\":1420}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":886}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":887,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":888,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":365,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"88.6.3.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":8256,\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"threads\":9,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///6729f77b-0c86-4db3-8aa7-416dc230be06\",\"moduleSequenceNumber\":4212}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///6729f77b-0c86-4db3-8aa7-416dc230be06\",\"moduleSequenceNumber\":4212}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":4212,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///1c7fb62f-784c-4865-8f0a-59752079e712\",\"moduleSequenceNumber\":936}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":936,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///6a571bbf-f364-4460-b321-a4d54f21f120\",\"moduleSequenceNumber\":953}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":953,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":892}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":893,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":894,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"phantasy\",\"syscore\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":204,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"76.4.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":895,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":896,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\".\",\"moduleSequenceNumber\":898}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\".\",\"moduleSequenceNumber\":899,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\".\",\"moduleSequenceNumber\":900,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":505,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"94.7.5.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":6.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/hacking/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.010000000000002,\"pid\":8253,\"ramUsage\":1.7,\"server\":\"CSEC\",\"threads\":4,\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///bb7c2e3d-3a00-44de-afe8-5349c29670fc\",\"moduleSequenceNumber\":14397}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/hack.js\",\"url\":\"blob:file:///bb7c2e3d-3a00-44de-afe8-5349c29670fc\",\"moduleSequenceNumber\":14397}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":14397,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/grow.js\",\"url\":\"blob:file:///04eb1194-5dad-4631-9822-99420a97ccf1\",\"moduleSequenceNumber\":937}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":937,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacking/weaken.js\",\"url\":\"blob:file:///0d303ee5-525c-4990-a256-0f5dd75b45aa\",\"moduleSequenceNumber\":4209}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":4209,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"CSEC\",\"moduleSequenceNumber\":904}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":905,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"CSEC\",\"moduleSequenceNumber\":906,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":59,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"68.0.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":907,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":908,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":909,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"The-Cave\",\"moduleSequenceNumber\":910}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":911,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"The-Cave\",\"moduleSequenceNumber\":912,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"7.4.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":15000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"28.9.6.8\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/hacking/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":944,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/hacking/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":945,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/hacking/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":946,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils/utils.js';\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target}.`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed.`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (!info) continue;\\n\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c + 1}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, growth !== Infinity ? growth : 10));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 20;\\n\\tlet primeRAM = data.growscriptRam * growThreads + data.weakenscriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}.`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM}. Available RAM: ${freeRAM}.`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown) {\\n\\t\\t\\tgrowFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened) {\\n\\t\\t\\tweakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, [data.target]);\\n\\t\\t}\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\n\\t\\treturn grown && weakened;\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t\\treturn grown && weakened;\\n\\t}\\n}\\n\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tif (data.host === 'home') freeRAM -= 32;\\n\\tlet cycleRAM = data.hackscriptRam * hackThreads + data.growscriptRam * growThreads + data.weakenscriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.01) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\n\\tconst cycleDelayThresh = 200;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = 0.002;\\n\\tconst growSec = 0.004;\\n\\tconst weakenSec = 0.05;\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackscriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growscriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenscriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackscriptRam,\\n\\t\\tgrowscriptRam,\\n\\t\\tweakenscriptRam\\n\\t};\\n}\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"darkweb\",\"moduleSequenceNumber\":947}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tif (server !== 'home') {\\n\\t\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\nexport function getScripts() {\\n\\treturn {\\n\\t\\thack: '/hacking/hack.js',\\n\\t\\tgrow: '/hacking/grow.js',\\n\\t\\tweaken: '/hacking/weaken.js',\\n\\t\\tdaemon: '/hacking/daemon.js',\\n\\t\\tutils: '/utils/utils.js',\\n\\t\\tshare: '/utils/share.js'\\n\\t}\\n}\\n\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati'\\n\\t];\\n}\\n\\nexport function getPrograms() {\\n\\treturn [\\n\\t\\t'BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe', 'ServerProfiler.exe',\\n\\t\\t'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe', 'Formulas.exe'\\n\\t];\\n}\\n\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server));\\n}\\n\\nexport function findPlaceToRun(ns, script, threads, freeRams, scriptArgs = []) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThread = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tlet host = freeRams[0].host;\\n\\t\\tlet ram = freeRams[0].freeRam;\\n\\n\\t\\tif (ram < scriptRam) {\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else if (ram < scriptRam * remainingThread) {\\n\\t\\t\\tlet threadForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThread -= threadForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else {\\n\\t\\t\\tns.exec(script, host, remainingThread, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThread;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (let server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.daemon, server)) {\\n\\t\\t\\tfor (let hackable of hackables) {\\n\\t\\t\\t\\tif (ns.getRunningScript(scripts.daemon, server, hackable)) {\\n\\t\\t\\t\\t\\tunhackables.push(hackable);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!occupy) continue;\\n\\t\\t}\\n\\t\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\t\\tif (server === 'home') freeRam -= 32;\\n\\t\\tif (freeRam > 1) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tlet filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\nexport function getOptimalHackable(ns, servers) {\\n\\treturn servers.filter(function (server, index, servers) {\\n\\t\\tif (server === 'n00dles' && servers.length > 5) return false;\\n\\t\\telse return ns.getServerMaxMoney(server) > 0;\\n\\t}).sort((a, b) => costFn(ns, b) - costFn(ns, a));\\n}\\n\\nfunction costFn(ns, server) {\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\nexport function isUsefulGeneral(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful general augmentations\\n\\t\\t\\tstats.faction_rep_mult ||\\n\\t\\t\\tname === 'CashRoot Starter Kit' ||\\n\\t\\t\\tname === 'Neurolink' ||\\n\\t\\t\\tname === 'PCMatrix' ||\\n\\t\\t\\tname === 'Neuroreceptor Management Implant'\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult ||\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (let script of getPromptScripts()) {\\n\\t\\tif (ns.scriptRunning(script, server)) return true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction getPromptScripts() {\\n\\treturn ['/utils/join-factions.js', '/utils/upgrade-home-ram.js', '/utils/upgrade-home-cores.js'];\\n}\",\"filename\":\"/utils/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":14.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":948,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"/utils/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"darkweb\",\"moduleSequenceNumber\":949,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":34.2711,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":48750}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":64.3371,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":53344862.60642014}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":22.8763,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":5,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":true,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":100,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"UseIEC60027_2\":true,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":2,\"opened\":true}}","VersionSave":"10","AllGangsSave":"{\"Slum Snakes\":{\"power\":1504.8160306110767,\"territory\":0.7028321942189791},\"Tetrads\":{\"power\":327.51221576291744,\"territory\":0},\"The Syndicate\":{\"power\":278.898754202712,\"territory\":0},\"The Dark Army\":{\"power\":300.54305517272655,\"territory\":0},\"Speakers for the Dead\":{\"power\":3.2486802465748195,\"territory\":0},\"NiteSec\":{\"power\":282.52005989273994,\"territory\":0},\"The Black Hand\":{\"power\":28.61708017808142,\"territory\":0.2971678057810209}}","LastExportBonus":"1642804983398","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1642844256522"}}