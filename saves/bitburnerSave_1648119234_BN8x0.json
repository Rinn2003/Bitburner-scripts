{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":1,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":2,\"intelligence\":173,\"hacking_chance_mult\":1.5337023778608132,\"hacking_speed_mult\":1.5337023778608132,\"hacking_money_mult\":1.5337023778608132,\"hacking_grow_mult\":1.5337023778608132,\"hacking_exp\":0,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":116499.51031403847,\"hacking_mult\":1.5337023778608132,\"strength_mult\":1.5337023778608132,\"defense_mult\":1.5337023778608132,\"dexterity_mult\":1.5337023778608132,\"agility_mult\":1.5337023778608132,\"charisma_mult\":2.177857376562354,\"hacking_exp_mult\":1.5337023778608132,\"strength_exp_mult\":1.5337023778608132,\"defense_exp_mult\":1.5337023778608132,\"dexterity_exp_mult\":1.5337023778608132,\"agility_exp_mult\":1.5337023778608132,\"charisma_exp_mult\":1.3453529630358008,\"company_rep_mult\":2.0987506223358494,\"faction_rep_mult\":1.3453529630358008,\"money\":250000000,\"city\":\"Sector-12\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[\"hacknet-node-0\"],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":1024,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Sector-12\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"name\":\"NeuroFlux Governor\",\"level\":4}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":3,\"n\":5},{\"lvl\":3,\"n\":4},{\"lvl\":3,\"n\":2},{\"lvl\":3,\"n\":3},{\"lvl\":4,\"n\":12},{\"lvl\":3,\"n\":6},{\"lvl\":3,\"n\":7},{\"lvl\":3,\"n\":10},{\"lvl\":3,\"n\":11},{\"lvl\":3,\"n\":9},{\"lvl\":3,\"n\":13}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.910401207510837,\"crime_success_mult\":1.910401207510837,\"isWorking\":false,\"focus\":false,\"workType\":\"Working on Create a Program\",\"workCostMult\":20,\"workExpMult\":10,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":400,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":1548505.55241751,\"timeNeededToCompleteWork\":7200000,\"work_money_mult\":2.3925757094628683,\"hacknet_node_money_mult\":1.5337023778608132,\"hacknet_node_purchase_cost_mult\":0.5888797336939351,\"hacknet_node_ram_cost_mult\":0.5888797336939351,\"hacknet_node_core_cost_mult\":0.5888797336939351,\"hacknet_node_level_cost_mult\":0.5888797336939351,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1.1400000000000001,\"bladeburner_stamina_gain_mult\":1.1400000000000001,\"bladeburner_analysis_mult\":1.1400000000000001,\"bladeburner_success_chance_mult\":1.1400000000000001,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":1,\"hp\":10,\"max_hp\":10,\"hacking_exp\":0,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1.904427409500001,\"hacking_speed_mult\":2.003190858107324,\"hacking_money_mult\":12.210713690175002,\"hacking_grow_mult\":6.5625,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":2.52209375,\"hacknet_node_purchase_cost_mult\":0.765,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":63000,\"earningsForSleeves\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":1.0944999999999896,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":1,\"hp\":10,\"max_hp\":10,\"hacking_exp\":0,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1.904427409500001,\"hacking_speed_mult\":1.9078008172450704,\"hacking_money_mult\":12.210713690175002,\"hacking_grow_mult\":6.5625,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":2.52209375,\"hacknet_node_purchase_cost_mult\":0.765,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":63000,\"earningsForSleeves\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":1.0944999999999896,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":1,\"hp\":10,\"max_hp\":10,\"hacking_exp\":0,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1.904427409500001,\"hacking_speed_mult\":1.8522338031505539,\"hacking_money_mult\":11.10064880925,\"hacking_grow_mult\":6.5625,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":2.52209375,\"hacknet_node_purchase_cost_mult\":0.765,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":63000,\"earningsForSleeves\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":1.0944999999999896,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":1,\"hp\":10,\"max_hp\":10,\"hacking_exp\":0,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1.904427409500001,\"hacking_speed_mult\":1.8522338031505539,\"hacking_money_mult\":11.10064880925,\"hacking_grow_mult\":6.5625,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":2.52209375,\"hacknet_node_purchase_cost_mult\":0.765,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":63000,\"earningsForSleeves\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":1.0944999999999896,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":1,\"hp\":10,\"max_hp\":10,\"hacking_exp\":0,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1.904427409500001,\"hacking_speed_mult\":1.8522338031505539,\"hacking_money_mult\":11.10064880925,\"hacking_grow_mult\":6.5625,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":2.52209375,\"hacknet_node_purchase_cost_mult\":0.765,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":63000,\"earningsForSleeves\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":1.0944999999999896,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":1,\"hp\":10,\"max_hp\":10,\"hacking_exp\":0,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1.904427409500001,\"hacking_speed_mult\":1.8522338031505539,\"hacking_money_mult\":11.10064880925,\"hacking_grow_mult\":6.5625,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":2.52209375,\"hacknet_node_purchase_cost_mult\":0.765,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":63000,\"earningsForSleeves\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":1.0944999999999896,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":1,\"hp\":10,\"max_hp\":10,\"hacking_exp\":0,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1.904427409500001,\"hacking_speed_mult\":1.8522338031505539,\"hacking_money_mult\":11.10064880925,\"hacking_grow_mult\":6.5625,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":2.52209375,\"hacknet_node_purchase_cost_mult\":0.765,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":63000,\"earningsForSleeves\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":1.0944999999999896,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":1,\"hp\":10,\"max_hp\":10,\"hacking_exp\":0,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1,\"hacking_speed_mult\":1.02,\"hacking_money_mult\":1.1,\"hacking_grow_mult\":1,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":63000,\"earningsForSleeves\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":1.0944999999999896,\"storedCycles\":1,\"sync\":100}}],\"resleeves\":[],\"sleevesFromCovenant\":5,\"bitNodeN\":8,\"lastUpdate\":1648119233627,\"lastSave\":1648118661987,\"totalPlaytime\":8425931200,\"playtimeSinceLastAug\":63200,\"playtimeSinceLastBitnode\":63200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":0,\"work\":0,\"servers\":0,\"other\":0,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":0,\"work\":0,\"servers\":0,\"other\":0,\"augmentations\":0}},\"scriptProdSinceLastAug\":0,\"exploits\":[\"N00dles\",\"UndocumentedFunctionCall\",\"Bypass\",\"PrototypeTampering\",\"RealityAlteration\",\"Unclickable\",\"TimeCompression\",\"EditSaveFile\",\"YoureNotMeantToAccessThis\",\"INeedARainbow\"],\"achievements\":[{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641679889873},{\"ID\":\"NITESEC\",\"unlockedOn\":1641679889924},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641679889930},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641679889937},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641679889950},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641679889959},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641679889967},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1641679889976},{\"ID\":\"SF1.1\",\"unlockedOn\":1641679889988},{\"ID\":\"SF4.1\",\"unlockedOn\":1641679889998},{\"ID\":\"SF5.1\",\"unlockedOn\":1641679890005},{\"ID\":\"NS2\",\"unlockedOn\":1641679890014},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1641679890023},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1641679890030},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641679890036},{\"ID\":\"TOR\",\"unlockedOn\":1641679890048},{\"ID\":\"BYPASS\",\"unlockedOn\":1641679890061},{\"ID\":\"PROTOTYPETAMPERING\",\"unlockedOn\":1641679890067},{\"ID\":\"UNCLICKABLE\",\"unlockedOn\":1641679890073},{\"ID\":\"UNDOCUMENTEDFUNCTIONCALL\",\"unlockedOn\":1641679890083},{\"ID\":\"TIMECOMPRESSION\",\"unlockedOn\":1641679890090},{\"ID\":\"REALITYALTERATION\",\"unlockedOn\":1641679890099},{\"ID\":\"N00DLES\",\"unlockedOn\":1641679890109},{\"ID\":\"EDITSAVEFILE\",\"unlockedOn\":1641679890117},{\"ID\":\"DEVMENU\",\"unlockedOn\":1641679890130},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641681211658},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641687973510},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641721856386},{\"ID\":\"UNACHIEVABLE\",\"unlockedOn\":1641722341982},{\"ID\":\"FROZE\",\"unlockedOn\":1641734437104},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1641817424050},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1641903848242},{\"ID\":\"4S\",\"unlockedOn\":1641907336632},{\"ID\":\"DONATION\",\"unlockedOn\":1641907396617},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641908663322},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1641918704987},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1641937453791},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1641982053228},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1641982113197},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1641984580423},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1641985300316},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641991378620},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1641999052675},{\"ID\":\"WORKOUT\",\"unlockedOn\":1642334647833},{\"ID\":\"INDECISIVE\",\"unlockedOn\":1642343484769},{\"ID\":\"FAST_BN\",\"unlockedOn\":1642768530890},{\"ID\":\"GANG\",\"unlockedOn\":1642772019491},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1642804547259},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1642841548633},{\"ID\":\"SF2.1\",\"unlockedOn\":1642849051433},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1643025332087},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1643025332093},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1643025332094},{\"ID\":\"GANG_TERRITORY\",\"unlockedOn\":1643032932296},{\"ID\":\"CORPORATION\",\"unlockedOn\":1643059508902},{\"ID\":\"CORPORATION_BRIBE\",\"unlockedOn\":1643193348323},{\"ID\":\"CORPORATION_REAL_ESTATE\",\"unlockedOn\":1643194428307},{\"ID\":\"CORPORATION_PROD_1000\",\"unlockedOn\":1643195028369},{\"ID\":\"MONEY_1Q\",\"unlockedOn\":1643197062119},{\"ID\":\"QUEUE_40\",\"unlockedOn\":1643198982091},{\"ID\":\"MAX_RAM\",\"unlockedOn\":1643200021662},{\"ID\":\"SF3.1\",\"unlockedOn\":1643201341872},{\"ID\":\"SF12.1\",\"unlockedOn\":1643327676262},{\"ID\":\"BLADEBURNER_DIVISION\",\"unlockedOn\":1643365278774},{\"ID\":\"BLADEBURNER_OVERCLOCK\",\"unlockedOn\":1643509416134},{\"ID\":\"BLADEBURNER_UNSPENT_100000\",\"unlockedOn\":1643555667526},{\"ID\":\"SF6.1\",\"unlockedOn\":1643563733741},{\"ID\":\"SF7.1\",\"unlockedOn\":1643878806799},{\"ID\":\"INSTALL_100\",\"unlockedOn\":1644076472788},{\"ID\":\"SF10.1\",\"unlockedOn\":1644112443819},{\"ID\":\"SLEEVE_8\",\"unlockedOn\":1644249879023},{\"ID\":\"MONEY_M1B\",\"unlockedOn\":1644260084626},{\"ID\":\"KARMA_1000000\",\"unlockedOn\":1644708960059},{\"ID\":\"CHALLENGE_BN3\",\"unlockedOn\":1645285861265},{\"ID\":\"SF11.1\",\"unlockedOn\":1645453783214},{\"ID\":\"FIRST_HACKNET_SERVER\",\"unlockedOn\":1645636516948},{\"ID\":\"MAX_CACHE\",\"unlockedOn\":1645655374553},{\"ID\":\"HACKNET_SERVER_1B\",\"unlockedOn\":1645696775058},{\"ID\":\"SF9.1\",\"unlockedOn\":1645872084439},{\"ID\":\"ALL_HACKNET_SERVER\",\"unlockedOn\":1646392690849},{\"ID\":\"HACKING_100000\",\"unlockedOn\":1646409480959},{\"ID\":\"CORPORATION_EMPLOYEE_3000\",\"unlockedOn\":1646409960975},{\"ID\":\"NEUROFLUX_255\",\"unlockedOn\":1646410080951},{\"ID\":\"MAX_HACKNET_SERVER\",\"unlockedOn\":1646410140948},{\"ID\":\"RAINBOW\",\"unlockedOn\":1647605661257}],\"terminalCommandHistory\":[\"ps\",\"cls\",\"run test.js --tail\",\"run test.js\",\"ps\",\"cls\",\"run test.js\",\"cls\",\"run test.js\",\"nano test.js\",\"run test.js\",\"nano test.js\",\"run test.js\",\"nano test.js\",\"run test.js\",\"run test.js --trips-per-cycle 1e4\",\"cls\",\"kill test.js\",\"run test.js --trips-per-cycle 1e5\",\"run stanek/controller.js\",\"kill stanek/controller.js\",\"cls\",\"kill test.js --trips-per-cycle 1e5\",\"kill test.js --trips-per-cycle 1e4\",\"run test.js --trips-per-cycle 1e4\",\"tail stanek/controller.js\",\"free\",\"cls\",\"run tools/analyze-server.js pserv-0\",\"free\",\"nano test.js\",\"run test.js\",\"cls\",\"nano data/1.txt\",\"kill stanek/controller.js\",\"nano data/1.txt\",\"run stanek/controller.js --tail\",\"run hacknet/manager.js\",\"tail hacknet/manager.js\",\"run hacknet/manager.js\",\"tail hacknet/manager.js\",\"run augmentations/purchase-augmentations.js --all\",\"kill augmentations/purchase-augmentations.js --all\",\"run augmentations/purchase-augmentations.js --all\",\"run augmentations/install-augmentations.js\",\"run augmentations/purchase-augmentations.js --all\",\"run player/create-programs.js\",\"nano test.js\",\"run cortex.js\",\"free\"],\"identifier\":\"1e2dc3fc23d205\",\"factionWorkType\":\"Faction Security Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"94.5.4.1\",\"isConnectedTo\":true,\"maxRam\":128,\"messages\":[\"hackers-starting-handbook.lit\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"Formulas.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedFunction,JSUnresolvedVariable\\n\\n/**\\n *\\n * @returns {Promise<void>}\\n */\\nexport async function main() {\\n\\tlet boxes = Array.from(eval('document').querySelectorAll('[class*=MuiBox-root]'));\\n\\tlet box = boxes.find(x => hasPlayer(x));\\n\\n\\tif (box) {\\n\\t\\tlet props = getProps(box);\\n\\t\\tprops.router.toDevMenu();\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {Object} obj\\n * @returns {Object}\\n */\\nfunction getProps(obj) {\\n\\treturn Object.entries(obj).find(entry => entry[0].startsWith('__reactProps'))[1].children.props;\\n}\\n\\n/**\\n *\\n * @param {Object} obj\\n * @returns {boolean}\\n */\\nfunction hasPlayer(obj) {\\n\\ttry {\\n\\t\\treturn !!getProps(obj).router;\\n\\t} catch (err) {\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/exploits/dev-menu.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/exploits/dev-menu.js\",\"url\":\"blob:file:///3c7d9f0a-a524-4919-aebf-6ede3f696df7\",\"moduleSequenceNumber\":36537}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":45735,\"_hash\":\"b03b9cede60b50447d1f38b2e370d36f9517e5d1b9accfc2ed19d72569cd3499\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst server = ns.args[0];\\n\\tconst usedRam = ns.getServerUsedRam(server);\\n\\tconst maxRam = ns.getServerMaxRam(server);\\n\\tconst money = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst minSec = ns.getServerMinSecurityLevel(server);\\n\\tconst sec = ns.getServerSecurityLevel(server);\\n\\n\\tns.tprint(`\\n${server}:\\n    RAM        : ${ns.nFormat(usedRam * 1000 ** 3, '0.00b')} / ${ns.nFormat(maxRam * 1000 ** 3, '0.00b')} (${(usedRam / maxRam * 100).toFixed(2)}%)\\n    $          : ${ns.nFormat(money, '$0.000a')} / ${ns.nFormat(maxMoney, '$0.000a')} (${(money / maxMoney * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)}\\n    hack time  : ${ns.tFormat(ns.getHackTime(server))}\\n    grow time  : ${ns.tFormat(ns.getGrowTime(server))}\\n    weaken time: ${ns.tFormat(ns.getWeakenTime(server))}\\n    grow x2    : ${Math.ceil(ns.growthAnalyze(server, 2))} threads\\n    grow x3    : ${Math.ceil(ns.growthAnalyze(server, 3))} threads\\n    grow x4    : ${Math.ceil(ns.growthAnalyze(server, 4))} threads\\n    hack 10%   : ${Math.floor(0.1 / ns.hackAnalyze(server))} threads\\n    hack 25%   : ${Math.floor(0.25 / ns.hackAnalyze(server))} threads\\n    hack 50%   : ${Math.floor(0.5 / ns.hackAnalyze(server))} threads\\n    hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\n}\\n\\n// noinspection JSUnusedGlobalSymbols\\n/**\\n *\\n * @param {*} data\\n * @returns {string[]}\\n */\\nexport function autocomplete(data) {\\n\\t// noinspection JSUnresolvedVariable\\n\\treturn data.servers;\\n}\",\"filename\":\"/tools/analyze-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/tools/analyze-server.js\",\"url\":\"blob:file:///1813d06a-48c8-408d-abe9-7e379f8de472\",\"moduleSequenceNumber\":22664}],\"dependents\":[],\"ramUsage\":5.35,\"server\":\"home\",\"moduleSequenceNumber\":45736,\"_hash\":\"6619cc0c1589e2f49c33c30e904029c7c743566bf011fc5b60dc419a8a18df87\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst mults = ns.getBitNodeMultipliers();\\n\\tfor (let [mult, val] of Object.entries(mults)) {\\n\\t\\tns.tprint(`${mult}: ${val}`);\\n\\t}\\n}\",\"filename\":\"/tools/bitnode-multipliers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/tools/bitnode-multipliers.js\",\"url\":\"blob:file:///e3feab47-6cbf-4b44-8801-51593159d4e6\",\"moduleSequenceNumber\":24507}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":45737,\"_hash\":\"1b05da9eaa009ff6c1ea4327f0928a1b9a84baca2b54e41f2732e27a3ed8d76f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst cost = ns.getPurchasedServerCost(Math.pow(2, ns.args[0]));\\n\\tconst maxServers = Math.floor(ns.getBitNodeMultipliers().PurchasedServerLimit * 25);\\n\\tconst costMax = cost * maxServers;\\n\\tns.tprint(`1 Server: ${ns.nFormat(cost, '$0.000a')}, ${maxServers} servers: ${ns.nFormat(costMax, '$0.000a')}`);\\n}\",\"filename\":\"/tools/cost-pserv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/tools/cost-pserv.js\",\"url\":\"blob:file:///01e6c360-bdd1-4993-8312-025ca1a109e6\",\"moduleSequenceNumber\":23705}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"home\",\"moduleSequenceNumber\":45738,\"_hash\":\"eb5525ca20ffef2475d020610dafdbb753f15035ae52f347f9dd19b6aa4a620f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.tprint(1 + Math.floor(Math.log((ns.args[0] + 25000) / 25500) / Math.log(1.02)));\\n}\",\"filename\":\"/tools/favor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":45739,\"_hash\":\"6ad751e0df0ec6fbb7d5566bba9ffd5bf774eb0a307aa21712094760add3d41d\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getServers} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst servers = getServers(ns);\\n\\tfor (let server of servers) {\\n\\t\\tlet files = ns.ls(server);\\n\\t\\tfor (let file of files) {\\n\\t\\t\\tif (file.endsWith('.lit') || file.endsWith('.txt')) await ns.scp(file, server, 'home');\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/tools/get-all-text.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///475c3128-f4c8-41e2-9b48-e27f3e6c3f25\",\"moduleSequenceNumber\":103401},{\"filename\":\"/tools/get-all-text.js\",\"url\":\"blob:file:///07ec6154-ae09-45ed-be61-81d5f61bf25b\",\"moduleSequenceNumber\":104252}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":45740,\"_hash\":\"c97e515d9ca69432b40b8181133b05c5a67cacc9e33fc6715be4c6ca073fc025\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAccessibleServers, getOptimalHackable, targetCost} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst args = ns.flags([['cores', 1], ['verbose', false]]);\\n\\tconst servers = getAccessibleServers(ns);\\n\\tconst hackable = getOptimalHackable(ns, servers);\\n\\tfor (let [i, server] of hackable.entries()) {\\n\\t\\tconst growth = ns.getServerGrowth(server);\\n\\t\\tconst money = ns.nFormat(ns.getServerMaxMoney(server), '0.000a');\\n\\t\\tconst minSec = ns.getServerMinSecurityLevel(server);\\n\\t\\tconst cost = targetCost(ns, server, args.cores);\\n\\t\\tlet string = `${i + 1}: Server: ${server}`;\\n\\t\\t// noinspection JSUnresolvedVariable\\n\\t\\tif (args.verbose) string += `, Maximum Money: ${money}, Growth: ${growth}, Min Security: ${minSec}`;\\n\\t\\tfor (let [j, c] of cost.entries()) {\\n\\t\\t\\tstring += `, Cost ${j + 1}: ${ns.nFormat(c, '0.000a')}`;\\n\\t\\t}\\n\\t\\tns.tprintf(string);\\n\\t}\\n}\",\"filename\":\"/tools/hackable-servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///1d128ff1-8bfe-4209-b0db-e342a3c47f88\",\"moduleSequenceNumber\":2330254},{\"filename\":\"/tools/hackable-servers.js\",\"url\":\"blob:file:///1cb0c5df-32d9-4913-8543-e4807d0a023f\",\"moduleSequenceNumber\":2491429}],\"dependents\":[],\"ramUsage\":8.8,\"server\":\"home\",\"moduleSequenceNumber\":45741,\"_hash\":\"77f8678e5689e1a51b3f032bc619bf3f1b569fb1a361527d4ce8e1565a9feb3d\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedFunction,JSUnresolvedVariable\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.tprint(ns.heart.break().toFixed(2));\\n}\",\"filename\":\"/tools/karma.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/tools/karma.js\",\"url\":\"blob:file:///496d16bb-93ef-4781-b17c-d2fc700adbba\",\"moduleSequenceNumber\":153601}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":45742,\"_hash\":\"8529bd972efba9e73eb14e6c6dedebe5a94dc535af954e63001249f18366aa70\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tns.disableLog('ALL');\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\tconst server = ns.args[0];\\n\\t\\tlet money = ns.getServerMoneyAvailable(server);\\n\\t\\tif (money === 0) money = 1;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\t\\tconst minSec = ns.getServerMinSecurityLevel(server);\\n\\t\\tconst sec = ns.getServerSecurityLevel(server);\\n\\t\\tns.clearLog(server);\\n\\t\\tns.print(`${server}:`);\\n\\t\\tns.print(` $       : ${ns.nFormat(money, '$0.000a')} / ${ns.nFormat(maxMoney, '$0.000a')} (${(money / maxMoney * 100).toFixed(2)}%)`);\\n\\t\\tns.print(` security: +${sec - minSec}`);\\n\\t\\tns.print(` hack    : ${ns.getHackTime(server)} (t=${Math.ceil(ns.hackAnalyzeThreads(server, money))})`);\\n\\t\\tns.print(` grow    : ${ns.getGrowTime(server)} (t=${Math.ceil(ns.growthAnalyze(server, maxMoney / money))})`);\\n\\t\\tns.print(` weaken  : ${ns.getWeakenTime(server)} (t=${Math.ceil((sec - minSec) * 20)})`);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\n// noinspection JSUnusedGlobalSymbols\\n/**\\n *\\n * @param {*} data\\n * @returns {string[]}\\n */\\nexport function autocomplete(data) {\\n\\t// noinspection JSUnresolvedVariable\\n\\treturn data.servers;\\n}\",\"filename\":\"/tools/monitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/tools/monitor.js\",\"url\":\"blob:file:///326387eb-02d4-44f2-9d20-ab0c660105f4\",\"moduleSequenceNumber\":45532}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"home\",\"moduleSequenceNumber\":45743,\"_hash\":\"893c12e0ba4f315c62804972ae8d701f79995bced0cb1efe4b3bc26a3fba651f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {scriptsToCopy} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst power = ns.args[0];\\n\\tconst targetRam = Math.pow(2, power);\\n\\tfor (let i = 0; i < ns.getPurchasedServerLimit(); i++) {\\n\\t\\tlet server = 'pserv-' + i;\\n\\t\\tlet cost = ns.getPurchasedServerCost(targetRam);\\n\\t\\twhile (ns.getServerMoneyAvailable('home') < cost) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t\\tif (ns.serverExists(server)) {\\n\\t\\t\\tif (ns.getServerMaxRam(server) < targetRam) {\\n\\t\\t\\t\\tns.killall(server);\\n\\t\\t\\t\\tns.deleteServer(server);\\n\\t\\t\\t} else continue;\\n\\t\\t}\\n\\t\\tns.tprint(`Buying server: ${server}, target RAM: ${targetRam}`);\\n\\t\\tns.purchaseServer(server, targetRam);\\n\\t\\tawait ns.scp(scriptsToCopy(), 'home', server);\\n\\t}\\n}\",\"filename\":\"/tools/pserv-buyer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///1f0518e0-3fdf-43a9-8a34-af8241b3dc1c\",\"moduleSequenceNumber\":1784},{\"filename\":\"/tools/pserv-buyer.js\",\"url\":\"blob:file:///a18e0bef-8ed6-404d-a348-54c0f6f27222\",\"moduleSequenceNumber\":22803}],\"dependents\":[],\"ramUsage\":7.75,\"server\":\"home\",\"moduleSequenceNumber\":45744,\"_hash\":\"56c2d141ea865d967ca9c6c4f957758f2fa9da467ecafc722271bee972d6116a\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.tprint(ns.nFormat(Math.ceil(25500 * Math.exp(Math.log(1.02) * (ns.args[0] - 1)) - 25000), '0.000a'));\\n}\",\"filename\":\"/tools/reputation.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/tools/reputation.js\",\"url\":\"blob:file:///aa33c0f3-e8d2-4e13-8fde-ebda6c4aec9b\"}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":45745,\"_hash\":\"182648057b1c1b5efc12614517609fa0b5dd94312c4a74359ddbbb214c62bb5f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tconst url = 'https://raw.githubusercontent.com/mirkoconsiglio/Bitburner-scripts/master';\\n\\tconst listOfScripts = 'build/scripts.txt';\\n\\tns.tprint('----- Downloading scripts -----');\\n\\tns.tprint(`Downloading ${listOfScripts}`);\\n\\tlet download = await ns.wget(`${url}/${listOfScripts}`, '/' + listOfScripts);\\n\\tif (!download) throw new Error(`Could not download ${listOfScripts}`);\\n\\tlet scripts = ns.read('/' + listOfScripts).split('\\\\n');\\n\\tfor (let script of scripts) {\\n\\t\\tif (script === listOfScripts || (script.includes('/') ? '/' : '') + script === ns.getScriptName()) continue;\\n\\t\\tns.tprint(`Downloading ${script}`);\\n\\t\\tdownload = await ns.wget(`${url}/${script}`, (script.includes('/') ? '/' : '') + script);\\n\\t\\tif (!download) ns.alert(`Could not download ${script}`);\\n\\t}\\n\\tns.tprint('----- Download complete -----');\\n}\",\"filename\":\"/build/download-bitburner-scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/build/download-bitburner-scripts.js\",\"url\":\"blob:file:///ce6a5e62-d2e7-4398-b3e2-0095cd686de4\",\"moduleSequenceNumber\":6424}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":45746,\"_hash\":\"db6be36921ed3570f27656ff3709a77330179d053163e571a78ce453593dcaa2\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getFileHandle} from 'utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst scriptsToKeep = ['/build/scripts.txt', '/build/download-bitburner-scripts.js'];\\n\\tns.read('/build/scripts.txt').split('\\\\n').forEach(script =>\\n\\t\\tscript.includes('/') ? scriptsToKeep.push('/' + script) : scriptsToKeep.push(script));\\n\\tfor (let i = 1; i <= 20; i++) scriptsToKeep.push(getFileHandle(i));\\n\\tlet files = ns.ls('home').filter(file => file.endsWith('.js') || file.endsWith('.txt'));\\n\\tif (files.length === 0) {\\n\\t\\tns.tprint(`There are no files to delete`);\\n\\t\\treturn;\\n\\t}\\n\\tfor (let file of files) {\\n\\t\\tif (!scriptsToKeep.includes(file)) {\\n\\t\\t\\tif (await ns.prompt(`Delete ${file}?`)) {\\n\\t\\t\\t\\tns.rm(file, 'home');\\n\\t\\t\\t\\tns.tprint(`Deleted ${file}`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/build/script-remover.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///b6b3a987-962c-43c4-a3ff-c3e8d1160b88\",\"moduleSequenceNumber\":23782},{\"filename\":\"/build/script-remover.js\",\"url\":\"blob:file:///22cdceac-fa80-46d5-8160-b2bccef40f08\",\"moduleSequenceNumber\":23865}],\"dependents\":[],\"ramUsage\":2.8,\"server\":\"home\",\"moduleSequenceNumber\":45747,\"_hash\":\"b0e886a683c819af301969714eb16bdedfa567fa40525eda9475ea32decb7185\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getFactions} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst file = '/texts/augmentations-list.txt';\\n\\tconst factions = getFactions();\\n\\tawait ns.write(file, '', 'w');\\n\\tfor (const faction of factions) {\\n\\t\\tawait ns.write(file, `\\\\n\\\\n----- ${faction} -----\\\\n`, 'a');\\n\\t\\tconst augmentations = ns.getAugmentationsFromFaction(faction);\\n\\t\\tfor (const augmentation of augmentations) {\\n\\t\\t\\tif (augmentation !== 'NeuroFlux Governor') {\\n\\t\\t\\t\\tawait ns.write(file, `\\\\n--- ${augmentation} ---\\\\n`, 'a');\\n\\t\\t\\t\\tconst stats = Object.entries(ns.getAugmentationStats(augmentation));\\n\\t\\t\\t\\tif (stats.length > 0) for (const [stat, multiplier] of stats) await ns.write(file, `${stat}: ${multiplier}\\\\n`, 'a');\\n\\t\\t\\t\\telse await ns.write(file, `Special\\\\n`, 'a');\\n\\t\\t\\t\\tconst price = ns.getAugmentationPrice(augmentation);\\n\\t\\t\\t\\tconst repReq = ns.getAugmentationRepReq(augmentation);\\n\\t\\t\\t\\tconst prereq = ns.getAugmentationPrereq(augmentation);\\n\\t\\t\\t\\tawait ns.write(file, `Price: ${ns.nFormat(price, '$0.000a')}\\\\n`, 'a');\\n\\t\\t\\t\\tawait ns.write(file, `Rep: ${ns.nFormat(repReq, '0.000a')}\\\\n`, 'a');\\n\\t\\t\\t\\tif (prereq.length > 0) await ns.write(file, `Prereq: ${prereq}\\\\n`, 'a');\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/augmentations/augmentation-lister.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///17fef6df-fa59-49ad-b809-9c7a34f5799b\",\"moduleSequenceNumber\":491},{\"filename\":\"/augmentations/augmentation-lister.js\",\"url\":\"blob:file:///8feed4aa-8ade-490e-a57c-ea682b153e4a\",\"moduleSequenceNumber\":8477}],\"dependents\":[],\"ramUsage\":21.6,\"server\":\"home\",\"moduleSequenceNumber\":45748,\"_hash\":\"bd25c96a052b2f33e71068fcfea7938d3eaa6185fd7fa1e293754881ac8b047f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationPrereq\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tif (await ns.prompt('Install augmentations?')) ns.installAugmentations('cortex.js');\\n}\",\"filename\":\"/augmentations/install-augmentations.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/augmentations/install-augmentations.js\",\"url\":\"blob:file:///764b83b9-08c0-457d-9935-fba512f368d9\",\"moduleSequenceNumber\":39787}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":45749,\"_hash\":\"8a066dfc9d8c94acfd0d08b21a945d5603826885b8ac6496266433258cb9462f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installAugmentations\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedVariable\\n\\nimport {\\n\\tisUseful,\\n\\tisUsefulBladeburner,\\n\\tisUsefulCombat,\\n\\tisUsefulCompany,\\n\\tisUsefulCrime,\\n\\tisUsefulFaction,\\n\\tisUsefulFocus,\\n\\tisUsefulHacking,\\n\\tisUsefulHacknet,\\n\\tisUsefulPrograms\\n} from '/augmentations/utils.js';\\nimport {getFactions, getScripts} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst args = ns.flags([\\n\\t\\t['hacking', false],\\n\\t\\t['combat', false],\\n\\t\\t['crime', false],\\n\\t\\t['company', false],\\n\\t\\t['hacknet', false],\\n\\t\\t['programs', false],\\n\\t\\t['faction', false],\\n\\t\\t['bladeburner', false],\\n\\t\\t['focus', false],\\n\\t\\t['all', false],\\n\\t\\t['install', false]\\n\\t]);\\n\\tconst scripts = getScripts();\\n\\t// Check criteria for determining what augmentations are useful\\n\\tconst criteria = [];\\n\\tif (args.hacking || args.all) criteria.push(isUsefulHacking);\\n\\tif (args.combat || args.all) criteria.push(isUsefulCombat);\\n\\tif (args.crime || args.all) criteria.push(isUsefulCrime);\\n\\tif (args.company || args.all) criteria.push(isUsefulCompany);\\n\\tif (args.hacknet || args.all) criteria.push(isUsefulHacknet);\\n\\tif (args.programs || args.all) criteria.push(isUsefulPrograms);\\n\\tif (args.faction || args.all) criteria.push(isUsefulFaction);\\n\\tif (args.bladeburner || args.all) criteria.push(isUsefulBladeburner);\\n\\tif (args.focus || args.all) criteria.push(isUsefulFocus);\\n\\t// Augmentation price increase\\n\\tlet mult = 0;\\n\\tfor (let i = 0; i < (ns.getOwnedSourceFiles().find(s => s.n === 11) ?? {lvl: 0}).lvl; i++) {\\n\\t\\tmult += 4 / Math.pow(2, i);\\n\\t}\\n\\tconst inc = 1.9 * (1 - mult / 100);\\n\\t// Get all useful and purchasable augmentations\\n\\tlet augmentations = [];\\n\\tfor (let faction of getFactions()) {\\n\\t\\tfor (let aug of ns.getAugmentationsFromFaction(faction)) {\\n\\t\\t\\tif (isUseful(ns, criteria, aug) && isPurchasable(ns, faction, aug, augmentations)) {\\n\\t\\t\\t\\taugmentations.push(\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tfaction: faction,\\n\\t\\t\\t\\t\\t\\tname: aug,\\n\\t\\t\\t\\t\\t\\tprice: ns.getAugmentationPrice(aug)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Sell stocks before buying augmentations\\n\\tif (ns.getPlayer().hasTixApiAccess) { // Check if player has TIX API\\n\\t\\t// Check if player has any stocks\\n\\t\\tlet stocks = false;\\n\\t\\tfor (let sym of ns.stock.getSymbols()) {\\n\\t\\t\\tlet pos = ns.stock.getPosition(sym);\\n\\t\\t\\tif (pos[0] > 0 || pos[2] > 0) {\\n\\t\\t\\t\\tstocks = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Ask if player wants to sell stocks\\n\\t\\tif (stocks && await ns.prompt(`Do you want to sell all shares?`)) ns.exec(scripts.stock, 'home', 1, '--l');\\n\\t}\\n\\t// Sell hashes before buying augmentations\\n\\tif (ns.getPlayer().bitNodeN === 9 || ns.getOwnedSourceFiles().some(s => s.n === 9)) { // Check if player has hacknet servers\\n\\t\\t// Check if player has any hashes\\n\\t\\tif (ns.hacknet.numHashes() > 0 && await ns.prompt(`Do you want to sell all hashes?`)) {\\n\\t\\t\\t// Kill hacknet manager\\n\\t\\t\\tns.scriptKill(scripts.hacknet, 'home');\\n\\t\\t\\twhile (ns.hacknet.numHashes() > 4) {\\n\\t\\t\\t\\t// Sell all hashes\\n\\t\\t\\t\\tns.hacknet.spendHashes('Sell for Money');\\n\\t\\t\\t\\tawait ns.sleep(1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Check if there are any purchasable augmentations\\n\\tif (augmentations.length > 0) {\\n\\t\\t// Sort augmentations according to their price\\n\\t\\taugmentations.sort((a, b) => {\\n\\t\\t\\tif (b.price > a.price) return 1;\\n\\t\\t\\telse if (a.price > b.price) return -1;\\n\\t\\t\\telse return ns.getAugmentationPrereq(b.name).length - ns.getAugmentationPrereq(a.name).length;\\n\\t\\t});\\n\\t\\t// Fit in augs before their prereqs\\n\\t\\tconst tempAugs = [];\\n\\t\\tconst coveredIndices = [];\\n\\t\\tfor (let [i, aug] of augmentations.entries()) {\\n\\t\\t\\tif (coveredIndices.includes(i)) continue;\\n\\t\\t\\tlet prereq = ns.getAugmentationPrereq(aug.name);\\n\\t\\t\\tif (prereq.length > 0) recursiveFit(ns, augmentations, tempAugs, coveredIndices, prereq[0]);\\n\\t\\t\\ttempAugs.push(aug);\\n\\t\\t}\\n\\t\\t// Deep copy augmentations\\n\\t\\taugmentations = JSON.parse(JSON.stringify(tempAugs));\\n\\t\\t// Calculate price of augs\\n\\t\\tlet stringAugs = '';\\n\\t\\tlet totalPrice = 0;\\n\\t\\tfor (let [i, aug] of augmentations.entries()) {\\n\\t\\t\\tlet updatedAugPrice = aug.price * inc ** i;\\n\\t\\t\\tstringAugs += `${aug.name}: ${ns.nFormat(aug.price, '$0.000a')} (${ns.nFormat(updatedAugPrice, '$0.000a')}). `;\\n\\t\\t\\ttotalPrice += updatedAugPrice;\\n\\t\\t}\\n\\t\\t// Prompt user for buying augmentations\\n\\t\\tif (await ns.prompt(`${stringAugs}Buy augmentations for ${ns.nFormat(totalPrice, '0.000a')}?`)) {\\n\\t\\t\\tfor (let aug of augmentations) {\\n\\t\\t\\t\\tif (ns.purchaseAugmentation(aug.faction, aug.name)) {\\n\\t\\t\\t\\t\\tns.tprint(`Purchased ${aug.name} from ${aug.faction} for ${ns.nFormat(aug.price, '0.000a')}`);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.tprint(`Could not purchase ${aug.name} from ${aug.faction}`);\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Prompt user for purchasing NeuroFlux Governor\\n\\tif (await ns.prompt(`Purchase NeuroFlux Governor levels?`)) {\\n\\t\\tlet highestRepFaction;\\n\\t\\tlet highestRep = 0;\\n\\t\\tfor (let faction of getFactions()) {\\n\\t\\t\\t// Cannot buy NFG from gangs\\n\\t\\t\\tif (ns.gang.inGang() && ns.gang.getGangInformation().faction === faction) continue;\\n\\t\\t\\t// Cannot buy NFG from Bladeburners\\n\\t\\t\\tif (faction === 'Bladeburners') continue;\\n\\t\\t\\t// Take highest reputation faction\\n\\t\\t\\tif (ns.getFactionRep(faction) > highestRep) {\\n\\t\\t\\t\\thighestRep = ns.getFactionRep(faction);\\n\\t\\t\\t\\thighestRepFaction = faction;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tlet counter = 0;\\n\\t\\twhile (ns.purchaseAugmentation(highestRepFaction, 'NeuroFlux Governor')) {\\n\\t\\t\\tcounter++;\\n\\t\\t}\\n\\t\\tns.tprint(`Purchased ${counter} levels of NeuroFlux Governor`);\\n\\t}\\n\\t// Check if The Red Pill is available\\n\\tif (ns.getPlayer().factions.includes('Daedalus') &&\\n\\t\\tns.getFactionRep('Daedalus') >= 2.5e6 &&\\n\\t\\t!ns.getOwnedAugmentations(true).includes('The Red Pill')) {\\n\\t\\tif (await ns.prompt(`Purchase The Red Pill?`)) {\\n\\t\\t\\tif (ns.purchaseAugmentation('Daedalus', 'The Red Pill')) ns.tprint(`Purchased The Red Pill`);\\n\\t\\t\\telse {\\n\\t\\t\\t\\tns.tprint(`Could not purchase The Red Pill`);\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Ask to install augmentations\\n\\tif (args.install && await ns.prompt('Install augmentations?')) {\\n\\t\\tns.installAugmentations('cortex.js');\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} augmentations\\n * @param {string[]} tempAugs\\n * @param {number[]} coveredIndices\\n * @param {string[]} prereq\\n */\\nfunction recursiveFit(ns, augmentations, tempAugs, coveredIndices, prereq) {\\n\\tlet index = augmentations.findIndex(aug => aug.name === prereq);\\n\\tif (index >= 0) { // Fit in aug before their prereq\\n\\t\\tcoveredIndices.push(index);\\n\\t\\tlet prereq = ns.getAugmentationPrereq(augmentations[index].name);\\n\\t\\tif (prereq.length > 0) recursiveFit(ns, augmentations, tempAugs, coveredIndices, prereq[0]);\\n\\t\\ttempAugs.push(augmentations[index]);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} faction\\n * @param {string} name\\n * @param {string[]} augmentations\\n * @returns {boolean}\\n */\\nfunction isPurchasable(ns, faction, name, augmentations) {\\n\\tlet facRep = ns.getFactionRep(faction);\\n\\tlet price = ns.getAugmentationPrice(name);\\n\\tlet repReq = ns.getAugmentationRepReq(name);\\n\\treturn !(facRep < repReq || // Faction reputation prerequisite\\n\\t\\tns.getServerMoneyAvailable('home') < price || // Check if it is able to be bought\\n\\t\\taugmentations.some(aug => aug.name === name) || // Check to see if it can be bought from another faction\\n\\t\\tns.getOwnedAugmentations(true).includes(name) // Check if already bought\\n\\t);\\n}\",\"filename\":\"/augmentations/purchase-augmentations.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///49b712a5-af2a-4544-93d8-56e47b181d9c\",\"moduleSequenceNumber\":2500},{\"filename\":\"/augmentations/utils.js\",\"url\":\"blob:file:///d859d454-af72-4100-96e7-73055b2cdb21\",\"moduleSequenceNumber\":2464},{\"filename\":\"/augmentations/purchase-augmentations.js\",\"url\":\"blob:file:///984f7a44-8157-4751-a716-ac4c3959dae0\",\"moduleSequenceNumber\":39785}],\"dependents\":[],\"ramUsage\":56.5,\"server\":\"home\",\"moduleSequenceNumber\":45750,\"_hash\":\"15edb8d90bc4681e3c936d58821bbb62a2340e51ccbdbf99c549d27ae6c0631e\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"installAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedVariable\\n\\nimport {contractor} from '/contracts/contractor.js';\\nimport {spendHashes} from '/hacknet/hash-spender.js';\\nimport {acceptStanek} from '/stanek/accept.js';\\nimport {\\n\\tcopyScriptsToAll,\\n\\tdeployBatchers,\\n\\tenoughRam,\\n\\tgetAccessibleServers,\\n\\tgetGangs,\\n\\tgetScripts,\\n\\tgetUsefulPrograms,\\n\\tinitData,\\n\\tmanageAndHack,\\n\\tprintBoth,\\n\\tpromptScriptRunning,\\n\\tupdateOverview\\n} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\t// Copy necessary scripts to all servers\\n\\tawait copyScriptsToAll(ns);\\n\\t// Initialise data\\n\\tawait initData(ns);\\n\\t// Constants\\n\\tconst scripts = getScripts();\\n\\tconst haveHacknetServers = ns.getPlayer().bitNodeN === 9 || ns.getOwnedSourceFiles().some(s => s.n === 9);\\n\\t// Variables\\n\\tlet host = ns.getHostname();\\n\\tlet contractorOnline = true;\\n\\tlet upgradeRam = true;\\n\\tlet upgradeCores = true;\\n\\tlet homeRam = ns.getServerMaxRam('home');\\n\\tlet homeCores = ns.getServer('home').cpuCores;\\n\\tlet wse = true;\\n\\tlet tix = true;\\n\\tlet gang = true;\\n\\tlet corp = true;\\n\\tlet bladeburner = true;\\n\\tlet stock = true;\\n\\tlet hacknet = true;\\n\\tlet sleeve = true;\\n\\tlet stanek = true;\\n\\tlet backdoorWorldDaemon = true;\\n\\tlet factions = [];\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\t// Heal player\\n\\t\\tif (ns.getPlayer().hp < ns.getPlayer().max_hp) {\\n\\t\\t\\tlet cost = ns.hospitalize();\\n\\t\\t\\tns.print(`Player hospitalized for ${ns.nFormat(cost, '$0.000a')}`);\\n\\t\\t}\\n\\t\\t// Contract solver (disables itself if any solution was incorrect)\\n\\t\\tif (contractorOnline) contractorOnline = contractor(ns);\\n\\t\\t// Purchase TOR\\n\\t\\tif (ns.purchaseTor()) printBoth(ns, `Purchased TOR router`);\\n\\t\\t// Purchase only useful programs\\n\\t\\tif (ns.getPlayer().tor) {\\n\\t\\t\\tfor (let program of getUsefulPrograms()) {\\n\\t\\t\\t\\tif (!ns.fileExists(program.name) && ns.getPlayer().hacking >= program.level) {\\n\\t\\t\\t\\t\\tif (ns.purchaseProgram(program.name)) printBoth(ns, `Purchased ${program.name}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Check if we want to upgrade home server\\n\\t\\tconst homeServer = ns.getServer('home');\\n\\t\\tconst currentHomeRam = homeServer.maxRam;\\n\\t\\tconst currentHomeCores = homeServer.cpuCores;\\n\\t\\tif (currentHomeRam > homeRam) {\\n\\t\\t\\thomeRam = currentHomeRam;\\n\\t\\t\\tupgradeRam = true;\\n\\t\\t}\\n\\t\\tif (currentHomeCores > homeCores) {\\n\\t\\t\\thomeCores = currentHomeCores;\\n\\t\\t\\tupgradeCores = true;\\n\\t\\t}\\n\\t\\t// Upgrade home RAM\\n\\t\\tif (ns.getPlayer().money >= ns.getUpgradeHomeRamCost() && upgradeRam &&\\n\\t\\t\\t!promptScriptRunning(ns, host) && homeRam < 2 ** 30) {\\n\\t\\t\\tns.exec(scripts.upgradeHomeRam, host);\\n\\t\\t\\tupgradeRam = false;\\n\\t\\t}\\n\\t\\t// Upgrade home cores\\n\\t\\tif (ns.getPlayer().money >= ns.getUpgradeHomeCoresCost() && upgradeCores &&\\n\\t\\t\\t!promptScriptRunning(ns, host) && homeCores < 8) {\\n\\t\\t\\tns.exec(scripts.upgradeHomeCores, host);\\n\\t\\t\\tupgradeCores = false;\\n\\t\\t}\\n\\t\\t// Purchase WSE account\\n\\t\\tif (!ns.getPlayer().hasWseAccount && ns.getPlayer().money >= 200e6 && wse &&\\n\\t\\t\\t!promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Purchase WSE account?`)) {\\n\\t\\t\\t\\tns.stock.purchaseWseAccount();\\n\\t\\t\\t\\tprintBoth(ns, `Purchased WSE account`);\\n\\t\\t\\t} else wse = false;\\n\\t\\t}\\n\\t\\t// Purchase TIX API\\n\\t\\tif (!ns.getPlayer().hasTixApiAccess && ns.getPlayer().money >= 5e9 && tix &&\\n\\t\\t\\t!promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Purchase TIX API?`)) {\\n\\t\\t\\t\\tns.stock.purchaseTixApi();\\n\\t\\t\\t\\tprintBoth(ns, `Purchased TIX API`);\\n\\t\\t\\t} else tix = false;\\n\\t\\t}\\n\\t\\t// Gang manager\\n\\t\\t// noinspection JSUnresolvedFunction\\n\\t\\tconst hasGangs = ns.getPlayer().bitNodeN === 2 || (ns.getOwnedSourceFiles().some(s => s.n === 2) && ns.heart.break() <= -54e3);\\n\\t\\tif (hasGangs && !ns.gang.inGang() && gang && !ns.isRunning(scripts.gang, host) &&\\n\\t\\t\\t!promptScriptRunning(ns, host)) {\\n\\t\\t\\tconst gangs = getGangs().filter(g => ns.getPlayer().factions.includes(g));\\n\\t\\t\\tgangs.push('No');\\n\\t\\t\\tconst gangName = await ns.prompt(`Create a gang?`, {'type': 'select', 'choices': gangs});\\n\\t\\t\\tif (gangName !== 'No') {\\n\\t\\t\\t\\tns.gang.createGang(gangName);\\n\\t\\t\\t\\tprintBoth(ns, `Created a gang with ${gangName}`);\\n\\t\\t\\t} else gang = false;\\n\\t\\t}\\n\\t\\tif (hasGangs && ns.gang.inGang() && gang && !ns.isRunning(scripts.gang, host) &&\\n\\t\\t\\tenoughRam(ns, scripts.gang, host) && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Start gang manager?`)) {\\n\\t\\t\\t\\tns.exec(scripts.gang, host);\\n\\t\\t\\t\\tprintBoth(ns, `Started gang manager`);\\n\\t\\t\\t}\\n\\t\\t\\tgang = false;\\n\\t\\t}\\n\\t\\t// Corp manager\\n\\t\\tconst hasCorps = ns.getPlayer().bitNodeN === 3 || ns.getOwnedSourceFiles().some(s => s.n === 3 && s.lvl === 3);\\n\\t\\tif (hasCorps && !ns.getPlayer().hasCorporation && ns.getPlayer().money >= 150e9 && corp\\n\\t\\t\\t&& !ns.isRunning(scripts.corp, host) && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tconst name = await ns.prompt(`Create a Corporation? (Leave empty if no)`, {'type': 'text'});\\n\\t\\t\\tif (name !== '') {\\n\\t\\t\\t\\tconst corp = eval('ns.corporation'); // Cheating here because using 1 TiB of RAM to start a corporation is overkill\\n\\t\\t\\t\\tcorp.createCorporation(name);\\n\\t\\t\\t\\tprintBoth(ns, `Started a corporation: ${name}`);\\n\\t\\t\\t} else corp = false;\\n\\t\\t}\\n\\t\\tif (hasCorps && ns.getPlayer().hasCorporation && corp && !ns.isRunning(scripts.corp, host) &&\\n\\t\\t\\tenoughRam(ns, scripts.corp, host) && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Start corp manager?`)) {\\n\\t\\t\\t\\tns.exec(scripts.corp, host);\\n\\t\\t\\t\\tprintBoth(ns, `Started corp manager`);\\n\\t\\t\\t}\\n\\t\\t\\tcorp = false;\\n\\t\\t}\\n\\t\\t// Bladeburner manager\\n\\t\\tconst hasBladeburner = ns.getPlayer().bitNodeN === 7 || ns.getOwnedSourceFiles().some(s => s.n === 7);\\n\\t\\tif (hasBladeburner && !ns.getPlayer().inBladeburner && bladeburner &&\\n\\t\\t\\t!ns.isRunning(scripts.bladeburner, host) && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Join Bladeburner Division?`)) {\\n\\t\\t\\t\\tns.bladeburner.joinBladeburnerDivision();\\n\\t\\t\\t\\tprintBoth(ns, `Joined Bladeburner Division`);\\n\\t\\t\\t} else bladeburner = false;\\n\\t\\t}\\n\\t\\tif (hasBladeburner && ns.getPlayer().inBladeburner && bladeburner && !ns.isRunning(scripts.bladeburner, host) &&\\n\\t\\t\\tenoughRam(ns, scripts.bladeburner, host) && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Start Bladeburner manager?`)) {\\n\\t\\t\\t\\tns.exec(scripts.bladeburner, host);\\n\\t\\t\\t\\tprintBoth(ns, `Started Bladeburner manager`);\\n\\t\\t\\t}\\n\\t\\t\\tbladeburner = false;\\n\\t\\t}\\n\\t\\t// Stock market manager\\n\\t\\tif (ns.getPlayer().hasTixApiAccess && stock && !ns.isRunning(scripts.stock, host) &&\\n\\t\\t\\tenoughRam(ns, scripts.stock, host) && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Start stock market manager?`)) {\\n\\t\\t\\t\\tns.exec(scripts.stock, host);\\n\\t\\t\\t\\tprintBoth(ns, `Started stock market manager`);\\n\\t\\t\\t}\\n\\t\\t\\tstock = false;\\n\\t\\t}\\n\\t\\t// Hacknet manager\\n\\t\\tif (hacknet && !ns.isRunning(scripts.hacknet, host) &&\\n\\t\\t\\tenoughRam(ns, scripts.hacknet, host) && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Start Hacknet manager?`)) {\\n\\t\\t\\t\\tns.exec(scripts.hacknet, host);\\n\\t\\t\\t\\tprintBoth(ns, `Started Hacknet manager`);\\n\\t\\t\\t}\\n\\t\\t\\thacknet = false;\\n\\t\\t}\\n\\t\\t// Sleeve manager\\n\\t\\tif ((ns.getPlayer().bitNodeN === 10 || ns.getOwnedSourceFiles().some(s => s.n === 10)) &&\\n\\t\\t\\tsleeve && !ns.isRunning(scripts.sleeve, host) &&\\n\\t\\t\\tenoughRam(ns, scripts.sleeve, host) && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Start sleeve manager?`)) {\\n\\t\\t\\t\\tns.exec(scripts.sleeve, host);\\n\\t\\t\\t\\tprintBoth(ns, `Started sleeve manager`);\\n\\t\\t\\t}\\n\\t\\t\\tsleeve = false;\\n\\t\\t}\\n\\t\\t// Stanek Manager\\n\\t\\tconst hasStanek = ns.getPlayer().bitNodeN === 13 || ns.getOwnedSourceFiles().some(s => s.n === 13);\\n\\t\\tif (hasStanek && ns.getOwnedAugmentations().findIndex(e => e.includes('Stanek\\\\'s Gift')) === -1 &&\\n\\t\\t\\tns.getPlayer().money >= 200e3 && stanek && !ns.isRunning(scripts.stanek, host) &&\\n\\t\\t\\t!promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Accept Stanek's Gift?`)) {\\n\\t\\t\\t\\tacceptStanek(ns);\\n\\t\\t\\t\\tprintBoth(ns, `Accepted Stanek's Gift`);\\n\\t\\t\\t} else stanek = false;\\n\\t\\t}\\n\\t\\tif (hasStanek && ns.getOwnedAugmentations().findIndex(e => e.includes('Stanek\\\\'s Gift')) !== -1 &&\\n\\t\\t\\t!ns.isRunning(scripts.stanek, host) && stanek &&\\n\\t\\t\\tenoughRam(ns, scripts.stanek, host) && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Start Stanek's Gift manager?`)) {\\n\\t\\t\\t\\tns.exec(scripts.stanek, host);\\n\\t\\t\\t\\tprintBoth(ns, `Started Stanek's Gift manager`);\\n\\t\\t\\t}\\n\\t\\t\\tstanek = false;\\n\\t\\t}\\n\\t\\t// Check faction invites\\n\\t\\tlet factionInvitations = ns.checkFactionInvitations().filter(faction => factions.includes(faction));\\n\\t\\tif (factionInvitations.length > 0 && enoughRam(ns, scripts.joinFactions, host) &&\\n\\t\\t\\t!promptScriptRunning(ns, host)) {\\n\\t\\t\\tns.print(`Request to join ${factionInvitations}`);\\n\\t\\t\\tns.exec(scripts.joinFactions, host, 1, ...factionInvitations);\\n\\t\\t\\tfactions = factions.concat(factionInvitations); // Don't ask again\\n\\t\\t}\\n\\t\\t// Backdoor servers\\n\\t\\tfor (let server of getAccessibleServers(ns)) {\\n\\t\\t\\tif (!ns.getServer(server).backdoorInstalled &&\\n\\t\\t\\t\\t!ns.isRunning(scripts.backdoor, host, server) &&\\n\\t\\t\\t\\tserver !== 'home') {\\n\\t\\t\\t\\tif (server === 'w0r1d_d43m0n' && backdoorWorldDaemon) {\\n\\t\\t\\t\\t\\tif (await ns.prompt(`Install backdoor on w0r1d_d43m0n and finish Bitnode?`)) {\\n\\t\\t\\t\\t\\t\\tns.print(`Installing backdoor on ${server}`);\\n\\t\\t\\t\\t\\t\\tns.exec(scripts.backdoor, host, 1, server);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tbackdoorWorldDaemon = false;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.print(`Installing backdoor on ${server}`);\\n\\t\\t\\t\\t\\tns.exec(scripts.backdoor, host, 1, server);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Spend Hashes\\n\\t\\tif (haveHacknetServers) await spendHashes(ns, 'Sell for Money');\\n\\t\\t// Deploy daemons\\n\\t\\tdeployBatchers(ns);\\n\\t\\t// Simple hack manager\\n\\t\\tmanageAndHack(ns);\\n\\t\\t// Update overview\\n\\t\\tupdateOverview(ns);\\n\\t\\t// Update every second\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"cortex.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///9e8e1b72-1ded-4c1d-8f68-098627ded4c0\",\"moduleSequenceNumber\":42769},{\"filename\":\"/stanek/accept.js\",\"url\":\"blob:file:///983ba65c-bec0-452f-9b7a-c0548bb68699\",\"moduleSequenceNumber\":42786},{\"filename\":\"/hacknet/hash-spender.js\",\"url\":\"blob:file:///614dde85-5542-47f4-acdc-ae6f8f5b9f4f\",\"moduleSequenceNumber\":42757},{\"filename\":\"utils.js\",\"url\":\"blob:file:///ed749296-b0c3-44b4-86c5-ce933db74d47\",\"moduleSequenceNumber\":42769},{\"filename\":\"/contracts/contractor.js\",\"url\":\"blob:file:///8a54dc14-c438-4a93-9609-ca1ceb026ce8\",\"moduleSequenceNumber\":42756},{\"filename\":\"cortex.js\",\"url\":\"blob:file:///fad9c373-8caf-4c07-bc8d-89d87e1088d5\",\"moduleSequenceNumber\":42791}],\"dependents\":[],\"ramUsage\":83.35,\"server\":\"home\",\"moduleSequenceNumber\":45751,\"_hash\":\"7f18fa8326af637cbac3875144fb01f69969bc9e2986856dedb97b35526bfcb3\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hospitalize\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getUpgradeHomeCoresCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"upgradeHomeCores\",\"cost\":3},{\"type\":\"fn\",\"name\":\"stock.purchaseWseAccount\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchaseTixApi\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.createGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"bladeburner.joinBladeburnerDivision\",\"cost\":4},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"goToLocation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {routeFinder} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst server = ns.args[0];\\n\\tconst route = routeFinder(ns, server);\\n\\tif (route) {\\n\\t\\tfor (let serv of route) {\\n\\t\\t\\tns.connect(serv);\\n\\t\\t}\\n\\t}\\n}\\n\\n// noinspection JSUnusedGlobalSymbols\\n/**\\n *\\n * @param {*} data\\n * @returns {string[]}\\n */\\nexport function autocomplete(data) {\\n\\t// noinspection JSUnresolvedVariable\\n\\treturn data.servers;\\n}\",\"filename\":\"/tools/connect.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///0f8d5a57-6375-48b0-ab02-bc80e15381fa\",\"moduleSequenceNumber\":88926},{\"filename\":\"/tools/connect.js\",\"url\":\"blob:file:///394bf110-53ad-40de-a8ce-8f159f18ef22\",\"moduleSequenceNumber\":97364}],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"home\",\"moduleSequenceNumber\":45752,\"_hash\":\"b17a3e15d50101bb20a99629e19f87c1f2f8ca1d2cc4f7b60323548fe3f992a8\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const fs = require('fs');\\nconst path = require('path');\\nconst http = require('https');\\n\\n/**\\n *\\n * @param {string} dir\\n * @param {string[]} arrayOfFiles\\n * @returns {string[]}\\n */\\nfunction getFilesRecursive(dir, arrayOfFiles) {\\n\\ttry {\\n\\t\\tlet files = fs.readdirSync(dir);\\n\\t\\tarrayOfFiles = arrayOfFiles || [];\\n\\t\\tfiles.forEach(function (file) {\\n\\t\\t\\tlet subfile = path.join(dir, file);\\n\\t\\t\\tif (fs.statSync(subfile).isDirectory()) {\\n\\t\\t\\t\\tarrayOfFiles = getFilesRecursive(subfile, arrayOfFiles);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tarrayOfFiles.push(subfile);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\treturn arrayOfFiles.filter(file => (path.extname(file) === '.txt' || path.extname(file) === '.js'));\\n\\t} catch (err) {\\n\\t\\tconsole.log(err);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {string} dir\\n * @returns {string[]}\\n */\\nfunction getFiles(dir = __dirname) {\\n\\tlet files = getFilesRecursive(`${dir}`);\\n\\tlet relativeFiles = [];\\n\\tfiles.forEach(file => relativeFiles.push(path.relative(dir, file).replace(/\\\\\\\\/g, '/')));\\n\\treturn relativeFiles;\\n}\\n\\n/**\\n *\\n * @param {string} filename\\n * @param {string} str\\n */\\nfunction writeToFile(filename, str) {\\n\\tfs.writeFile(filename, str, (err) => {\\n\\t\\tif (err) console.log(err);\\n\\t\\telse console.log('File written successfully');\\n\\t});\\n}\\n\\nconst dir = path.join(__dirname, '../');\\nconst files = getFiles(`${dir}`);\\nconst str = files.join('\\\\n');\\nwriteToFile('scripts.txt', str);\\n\\nconst index = fs.createWriteStream('../types/index.d.ts');\\nconst url = 'https://raw.githubusercontent.com/danielyxie/bitburner/dev/src/ScriptEditor/NetscriptDefinitions.d.ts';\\nhttp.get(url, response => response.pipe(index));\",\"filename\":\"/build/update.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":45753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulPrograms(ns, name) {\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful programs augmentations\\n\\t\\t\\tname === 'CashRoot Starter Kit' || // Starting money and programs\\n\\t\\t\\tname === 'BitRunners Neurolink' || // Programs\\n\\t\\t\\tname === 'PCMatrix' // Programs\\n\\t\\t);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulFaction(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\tstats.faction_rep_mult; // Useful faction augmentations\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulFocus(ns, name) {\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful focus augmentations\\n\\t\\t\\tname === 'Neuroreceptor Management Implant' || // No simultaneous penalty\\n\\t\\t\\tname === 'The Blade\\\\'s Simulacrum' // Bladeburner and working\\n\\t\\t);\\n\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult ||\\n\\t\\t\\tstats.hacking_chance_mult ||\\n\\t\\t\\tstats.hacking_speed_mult ||\\n\\t\\t\\tstats.hacking_money_mult ||\\n\\t\\t\\tstats.hacking_grow_mult\\n\\t\\t)\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulHackingSkill(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacking skill augmentations\\n\\t\\t\\tstats.hacking_mult ||\\n\\t\\t\\tstats.hacking_exp_mult\\n\\t\\t);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp_mult ||\\n\\t\\t\\tstats.agility_mult ||\\n\\t\\t\\tstats.defense_exp_mult ||\\n\\t\\t\\tstats.defense_mult ||\\n\\t\\t\\tstats.dexterity_exp_mult ||\\n\\t\\t\\tstats.dexterity_mult ||\\n\\t\\t\\tstats.strength_exp_mult ||\\n\\t\\t\\tstats.strength_mult\\n\\t\\t);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulCrime(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful crime augmentations\\n\\t\\t\\tstats.crime_money_mult ||\\n\\t\\t\\tstats.crime_success_mult\\n\\t\\t);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp_mult ||\\n\\t\\t\\tstats.charisma_mult ||\\n\\t\\t\\tstats.company_rep_mult ||\\n\\t\\t\\tstats.work_money_mult\\n\\t\\t);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_level_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_money_mult ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost_mult ||\\n\\t\\t\\tstats.hacknet_node_ram_cost_mult\\n\\t\\t);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.getAugmentationStats(name);\\n\\treturn name !== 'NeuroFlux Governor' && // Ignore NFG\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis_mult ||\\n\\t\\t\\tstats.bladeburner_max_stamina_mult ||\\n\\t\\t\\tstats.bladeburner_stamina_gain_mult ||\\n\\t\\t\\tstats.bladeburner_success_chance_mult\\n\\t\\t);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {function} criteria\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUseful(ns, criteria, name) {\\n\\tfor (let criterion of criteria) if (criterion(ns, name)) return true;\\n\\treturn false;\\n}\\n\\n\",\"filename\":\"/augmentations/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":45754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Requires WarehouseAPI and OfficeAPI\\nimport {getCities} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tif (!ns.getOwnedSourceFiles().some(s => s.n === 3 && s.lvl === 3) && !ns.corporation.hasUnlockUpgrade('Warehouse API')) throw new Error(`This script requires the Warehouse API`);\\n\\tif (!ns.getOwnedSourceFiles().some(s => s.n === 3 && s.lvl === 3) && !ns.corporation.hasUnlockUpgrade('Office API')) throw new Error(`This script requires the Office API`);\\n\\t// Set up\\n\\tconst cities = getCities();\\n\\tconst jobs = getJobs();\\n\\tconst division1 = 'Agriculture';\\n\\tconst division2 = 'Tobacco';\\n\\t// Part 1\\n\\tawait part1(ns, cities, jobs, division1);\\n\\t// Part 2\\n\\tawait part2(ns, cities, jobs, division1);\\n\\t// Part 3\\n\\tawait part3(ns, cities, jobs, division2);\\n\\t// Autopilot\\n\\tawait autopilot(ns, cities, jobs, division2);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} cities\\n * @param {Object<string, string>} jobs\\n * @param {string} division\\n * @returns {Promise<void>}\\n */\\nexport async function part1(ns, cities, jobs, division) {\\n\\tconst corp = ns.corporation;\\n\\t// Expand to Agriculture division\\n\\tawait expandIndustry(ns, 'Agriculture', division);\\n\\t// Unlock Smart Supply\\n\\tawait unlockUpgrade(ns, 'Smart Supply');\\n\\t// Turn on Smart Supply\\n\\tcorp.setSmartSupply(division, 'Sector-12', true);\\n\\t// Expand\\n\\tfor (let city of cities) {\\n\\t\\t// Expand to city\\n\\t\\tawait expandCity(ns, division, city);\\n\\t\\t// Purchase warehouse\\n\\t\\tawait purchaseWarehouse(ns, division, city);\\n\\t\\t// upgrade office to 3 and assign jobs\\n\\t\\tconst positions = [\\n\\t\\t\\t{job: jobs.operations, num: 1},\\n\\t\\t\\t{job: jobs.engineer, num: 1},\\n\\t\\t\\t{job: jobs.business, num: 1}\\n\\t\\t];\\n\\t\\tawait upgradeOffice(ns, division, city, 3, positions);\\n\\t\\t// Start selling material\\n\\t\\tcorp.sellMaterial(division, city, 'Food', 'MAX', 'MP');\\n\\t\\tcorp.sellMaterial(division, city, 'Plants', 'MAX', 'MP');\\n\\t}\\n\\t// Upgrade warehouse upto level 2\\n\\tfor (let city of cities) {\\n\\t\\tawait upgradeWarehouseUpto(ns, division, city, 2);\\n\\t}\\n\\t// Hire advert\\n\\tawait hireAdVertUpto(ns, division, 1);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} cities\\n * @param {Object<string, string>} jobs\\n * @param {string }division\\n * @returns {Promise<void>}\\n */\\nexport async function part2(ns, cities, jobs, division) {\\n\\t// Get upgrades\\n\\tlet upgrades = [\\n\\t\\t{name: 'FocusWires', level: 2},\\n\\t\\t{name: 'Neural Accelerators', level: 2},\\n\\t\\t{name: 'Speech Processor Implants', level: 2},\\n\\t\\t{name: 'Nuoptimal Nootropic Injector Implants', level: 2},\\n\\t\\t{name: 'Smart Factories', level: 2}\\n\\t];\\n\\tawait upgradeUpto(ns, upgrades);\\n\\t// Boost production\\n\\tfor (let city of cities) {\\n\\t\\tconst materials = [\\n\\t\\t\\t{name: 'Hardware', qty: 125},\\n\\t\\t\\t{name: 'AI Cores', qty: 75},\\n\\t\\t\\t{name: 'Real Estate', qty: 27e3}\\n\\t\\t];\\n\\t\\tawait buyMaterialsUpto(ns, division, city, materials);\\n\\t}\\n\\t// Wait for investment offer of $210b for the first round\\n\\tawait investmentOffer(ns, 210e9, 1);\\n\\t// Upgrade office size to nine\\n\\tfor (let city of cities) {\\n\\t\\tconst positions = [\\n\\t\\t\\t{job: jobs.operations, num: 2},\\n\\t\\t\\t{job: jobs.engineer, num: 2},\\n\\t\\t\\t{job: jobs.business, num: 1},\\n\\t\\t\\t{job: jobs.management, num: 2},\\n\\t\\t\\t{job: jobs.RAndD, num: 2}\\n\\t\\t];\\n\\t\\tawait upgradeOffice(ns, division, city, 9, positions);\\n\\t}\\n\\t// Upgrade factories and storage\\n\\tupgrades = [\\n\\t\\t{name: 'Smart Factories', level: 10},\\n\\t\\t{name: 'Smart Storage', level: 10}\\n\\t];\\n\\tawait upgradeUpto(ns, upgrades);\\n\\t// Upgrade warehouses\\n\\tfor (let city of cities) {\\n\\t\\tawait upgradeWarehouseUpto(ns, division, city, 9);\\n\\t}\\n\\t// Boost production\\n\\tfor (let city of cities) {\\n\\t\\tconst materials = [\\n\\t\\t\\t{name: 'Hardware', qty: 2800},\\n\\t\\t\\t{name: 'Robots', qty: 96},\\n\\t\\t\\t{name: 'AI Cores', qty: 2520},\\n\\t\\t\\t{name: 'Real Estate', qty: 146400}\\n\\t\\t];\\n\\t\\tawait buyMaterialsUpto(ns, division, city, materials);\\n\\t}\\n\\t// Wait for investment offer of $5t for the second round\\n\\tawait investmentOffer(ns, 5e12, 2);\\n\\t// Upgrade warehouses\\n\\tfor (let city of cities) {\\n\\t\\tawait upgradeWarehouseUpto(ns, division, city, 19);\\n\\t}\\n\\t// Boost production\\n\\tfor (let city of cities) {\\n\\t\\tconst materials = [\\n\\t\\t\\t{name: 'Hardware', qty: 9300},\\n\\t\\t\\t{name: 'Robots', qty: 726},\\n\\t\\t\\t{name: 'AI Cores', qty: 6270},\\n\\t\\t\\t{name: 'Real Estate', qty: 230400}\\n\\t\\t];\\n\\t\\tawait buyMaterialsUpto(ns, division, city, materials);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} cities\\n * @param {Object<string, string>} jobs\\n * @param {string} division\\n * @param {string} mainCity\\n * @returns {Promise<void>}\\n */\\nexport async function part3(ns, cities, jobs, division, mainCity = 'Aevum') {\\n\\t// Expand into Tobacco industry\\n\\tawait expandIndustry(ns, 'Tobacco', division);\\n\\tfor (let city of cities) {\\n\\t\\t// Expand to city\\n\\t\\tawait expandCity(ns, division, city);\\n\\t\\t// Purchase warehouse\\n\\t\\tawait purchaseWarehouse(ns, division, city);\\n\\t\\tif (city === mainCity) {\\n\\t\\t\\t// Upgrade Office size to 60\\n\\t\\t\\tconst positions = [\\n\\t\\t\\t\\t{job: jobs.operations, num: 6},\\n\\t\\t\\t\\t{job: jobs.engineer, num: 6},\\n\\t\\t\\t\\t{job: jobs.business, num: 6},\\n\\t\\t\\t\\t{job: jobs.management, num: 6},\\n\\t\\t\\t\\t{job: jobs.RAndD, num: 6}\\n\\t\\t\\t];\\n\\t\\t\\tawait upgradeOffice(ns, division, city, 30, positions);\\n\\t\\t} else {\\n\\t\\t\\t// Upgrade Office size to nine\\n\\t\\t\\tconst positions = [\\n\\t\\t\\t\\t{job: jobs.operations, num: 2},\\n\\t\\t\\t\\t{job: jobs.engineer, num: 2},\\n\\t\\t\\t\\t{job: jobs.business, num: 1},\\n\\t\\t\\t\\t{job: jobs.management, num: 2},\\n\\t\\t\\t\\t{job: jobs.RAndD, num: 2}\\n\\t\\t\\t];\\n\\t\\t\\tawait upgradeOffice(ns, division, city, 9, positions);\\n\\t\\t}\\n\\t}\\n\\t// Start making Tobacco v1\\n\\tif (getLatestVersion(ns, division) === 0) await makeProduct(ns, division, mainCity, 'Tobacco v1', 1e9, 1e9);\\n\\t// Get upgrades\\n\\tlet upgrades = [\\n\\t\\t{name: 'FocusWires', level: 20},\\n\\t\\t{name: 'Neural Accelerators', level: 20},\\n\\t\\t{name: 'Speech Processor Implants', level: 20},\\n\\t\\t{name: 'Nuoptimal Nootropic Injector Implants', level: 20},\\n\\t\\t{name: 'Wilson Analytics', level: 14}\\n\\t];\\n\\tawait upgradeUpto(ns, upgrades);\\n}\\n\\n// TODO: go public\\n// TODO: issue dividends\\n// TODO: buy other upgrades\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} cities\\n * @param {Object<string>} jobs\\n * @param {string} division\\n * @param {string} mainCity\\n * @returns {Promise<void>}\\n */\\nexport async function autopilot(ns, cities, jobs, division, mainCity = 'Aevum') {\\n\\tconst corp = ns.corporation;\\n\\tconst upgrades = getUpgrades();\\n\\tconst minResearch = 50e3;\\n\\tlet maxProducts = 3;\\n\\tif (corp.hasResearched(division, upgrades.capacity1)) maxProducts++;\\n\\tif (corp.hasResearched(division, upgrades.capacity2)) maxProducts++;\\n\\t// Get latest version\\n\\tlet version = getLatestVersion(ns, division);\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\tif (corp.getProduct(division, 'Tobacco v' + version).developmentProgress >= 100) {\\n\\t\\t\\t// Start selling the developed version\\n\\t\\t\\tcorp.sellProduct(division, mainCity, 'Tobacco v' + version, 'MAX', 'MP*' + (2 ** (version - 1)), true);\\n\\t\\t\\t// Set Market TA II if researched\\n\\t\\t\\tif (corp.hasResearched(division, upgrades.market2)) corp.setProductMarketTA2(division, 'Tobacco v' + version, true);\\n\\t\\t\\t// Discontinue earliest version\\n\\t\\t\\tif (corp.getDivision(division).products.length === maxProducts) corp.discontinueProduct(division, 'Tobacco v' + getEarliestVersion(ns, division));\\n\\t\\t\\t// Start making new version\\n\\t\\t\\tawait makeProduct(ns, division, mainCity, 'Tobacco v' + (version + 1), 1e9 * 2 ** version, 1e9 * 2 ** version);\\n\\t\\t\\t// Update current version\\n\\t\\t\\tversion++;\\n\\t\\t}\\n\\t\\t// Use hashes to boost research\\n\\t\\tif (ns.hacknet.numHashes() >= ns.hacknet.hashCost('Exchange for Corporation Research') &&\\n\\t\\t\\tcorp.getDivision(division).research < 3 * minResearch) ns.hacknet.spendHashes('Exchange for Corporation Research');\\n\\t\\t// Check research progress for lab\\n\\t\\tif (!corp.hasResearched(division, upgrades.lab) &&\\n\\t\\t\\tcorp.getDivision(division).research - corp.getResearchCost(division, upgrades.lab) >= minResearch) {\\n\\t\\t\\tcorp.research(division, upgrades.lab);\\n\\t\\t}\\n\\t\\t// Check research progress for Market TAs\\n\\t\\tlet researchCost = 0;\\n\\t\\tif (!corp.hasResearched(division, upgrades.market1)) researchCost += corp.getResearchCost(division, upgrades.market1);\\n\\t\\tif (!corp.hasResearched(division, upgrades.market2)) researchCost += corp.getResearchCost(division, upgrades.market2);\\n\\t\\tif (corp.hasResearched(division, upgrades.lab) && researchCost > 0 &&\\n\\t\\t\\tcorp.getDivision(division).research - researchCost >= minResearch) {\\n\\t\\t\\tif (!corp.hasResearched(division, upgrades.market1)) corp.research(division, upgrades.market1);\\n\\t\\t\\tif (!corp.hasResearched(division, upgrades.market2)) {\\n\\t\\t\\t\\tcorp.research(division, upgrades.market2);\\n\\t\\t\\t\\t// Set Market TA II on for the current selling versions\\n\\t\\t\\t\\tcorp.setProductMarketTA2(division, 'Tobacco v' + (version - 2), true);\\n\\t\\t\\t\\tcorp.setProductMarketTA2(division, 'Tobacco v' + (version - 1), true);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Check research progress for Fulcrum\\n\\t\\tif (corp.hasResearched(division, upgrades.market2) && !corp.hasResearched(division, upgrades.fulcrum) &&\\n\\t\\t\\tcorp.getDivision(division).research - corp.getResearchCost(division, upgrades.fulcrum) >= minResearch) {\\n\\t\\t\\tcorp.research(division, upgrades.fulcrum);\\n\\t\\t}\\n\\t\\t// Check research progress for Capacity I\\n\\t\\tif (corp.hasResearched(division, upgrades.fulcrum) && !corp.hasResearched(division, upgrades.capacity1) &&\\n\\t\\t\\tcorp.getDivision(division).research - corp.getResearchCost(division, upgrades.capacity1) >= minResearch) {\\n\\t\\t\\tcorp.research(division, upgrades.capacity1);\\n\\t\\t\\tmaxProducts++;\\n\\t\\t}\\n\\t\\t// Check research progress for Capacity II\\n\\t\\tif (corp.hasResearched(division, upgrades.capacity1) && !corp.hasResearched(division, upgrades.capacity2) &&\\n\\t\\t\\tcorp.getDivision(division).research - corp.getResearchCost(division, upgrades.capacity2) >= minResearch) {\\n\\t\\t\\tcorp.research(division, upgrades.capacity2);\\n\\t\\t\\tmaxProducts++;\\n\\t\\t}\\n\\t\\t// Upgrade Wilson analytics if we can\\n\\t\\tif (corp.getCorporation().funds >= corp.getUpgradeLevelCost('Wilson Analytics')) corp.levelUpgrade('Wilson Analytics');\\n\\t\\t// Check what is cheaper\\n\\t\\tif (corp.getOfficeSizeUpgradeCost(division, mainCity, 15) < corp.getHireAdVertCost(division)) {\\n\\t\\t\\t// Upgrade office size in Aevum\\n\\t\\t\\tif (corp.getCorporation().funds >= corp.getOfficeSizeUpgradeCost(division, mainCity, 15)) {\\n\\t\\t\\t\\tcorp.upgradeOfficeSize(division, mainCity, 15);\\n\\t\\t\\t\\thireMaxEmployees(ns, division, mainCity);\\n\\t\\t\\t\\t// Assign jobs\\n\\t\\t\\t\\tconst dist = Math.floor(corp.getOffice(division, mainCity).size / Object.keys(jobs).length);\\n\\t\\t\\t\\tfor (let job of Object.values(jobs)) {\\n\\t\\t\\t\\t\\tawait corp.setAutoJobAssignment(division, mainCity, job, dist);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Hire advert\\n\\t\\telse if (corp.getCorporation().funds >= corp.getHireAdVertCost(division)) corp.hireAdVert(division);\\n\\t\\t// If public\\n\\t\\tif (corp.getCorporation().public) {\\n\\t\\t\\t// Sell a small amount of shares when they amount to more cash than we have on hand\\n\\t\\t\\tif (corp.getCorporation().shareSaleCooldown <= 0 &&\\n\\t\\t\\t\\tcorp.getCorporation().sharePrice * 1e6 > ns.getPlayer().money) corp.sellShares(1e6);\\n\\t\\t\\t// Buyback shares when we can\\n\\t\\t\\telse if (corp.getCorporation().issuedShares > 0) {\\n\\t\\t\\t\\tif (ns.getPlayer().money > 2 * corp.getCorporation().issuedShares * corp.getCorporation().sharePrice * 1.1) {\\n\\t\\t\\t\\t\\tcorp.buyBackShares(corp.getCorporation().issuedShares);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// Check if we can unlock Shady Accounting\\n\\t\\t\\tif (corp.getCorporation().funds >= corp.getUnlockUpgradeCost('Shady Accounting') &&\\n\\t\\t\\t\\t!corp.hasUnlockUpgrade('Shady Accounting')) corp.unlockUpgrade('Shady Accounting');\\n\\t\\t\\t// Check if we can unlock Government Partnership\\n\\t\\t\\tif (corp.getCorporation().funds >= corp.getUnlockUpgradeCost('Government Partnership') &&\\n\\t\\t\\t\\t!corp.hasUnlockUpgrade('Government Partnership')) corp.unlockUpgrade('Government Partnership');\\n\\t\\t}\\n\\t\\t// Update every second\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n/**\\n *\\n * @returns {Object<string>} Jobs\\n */\\nexport function getJobs() {\\n\\treturn {\\n\\t\\toperations: 'Operations',\\n\\t\\tengineer: 'Engineer',\\n\\t\\tbusiness: 'Business',\\n\\t\\tmanagement: 'Management',\\n\\t\\tRAndD: 'Research & Development'\\n\\t};\\n}\\n\\n\\n/**\\n * Function to wait for enough money\\n *\\n * @param {NS} ns\\n * @param {function} func\\n * @param {*[]} args\\n * @returns {Promise<void>}\\n */\\nasync function moneyFor(ns, func, ...args) {\\n\\twhile (func(...args) > ns.corporation.getCorporation().funds) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n/**\\n * Function to wait for enough money\\n *\\n * @param {NS} ns\\n * @param {number} amount\\n * @returns {Promise<void>}\\n */\\nasync function moneyForAmount(ns, amount) {\\n\\twhile (amount > ns.corporation.getCorporation().funds) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n/**\\n * Function to hire employees up to office size\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @param {string} city\\n */\\nexport function hireMaxEmployees(ns, division, city) {\\n\\tconst corp = ns.corporation;\\n\\tns.print(`Hiring employees for ${division} (${city})`);\\n\\twhile (corp.getOffice(division, city).employees.length < corp.getOffice(division, city).size) {\\n\\t\\tcorp.hireEmployee(division, city);\\n\\t}\\n}\\n\\n/**\\n * Function to upgrade list of upgrades upto a certain level\\n *\\n * @param {NS} ns\\n * @param {Object<string, number>[]} upgrades\\n * @returns {Promise<void>}\\n */\\nexport async function upgradeUpto(ns, upgrades) {\\n\\tconst corp = ns.corporation;\\n\\tfor (let upgrade of upgrades) {\\n\\t\\twhile (corp.getUpgradeLevel(upgrade.name) < upgrade.level) {\\n\\t\\t\\tawait moneyFor(ns, corp.getUpgradeLevelCost, upgrade.name);\\n\\t\\t\\tcorp.levelUpgrade(upgrade.name);\\n\\t\\t\\tns.print(`Upgraded ${upgrade.name} to level ${corp.getUpgradeLevel(upgrade.name)}`);\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n * Function to buy materials upto a certain quantity\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @param {string} city\\n * @param {Object<string, number>[]} materials\\n * @returns {Promise<void>}\\n */\\nexport async function buyMaterialsUpto(ns, division, city, materials) {\\n\\tconst corp = ns.corporation;\\n\\tfor (let material of materials) {\\n\\t\\tconst curQty = corp.getMaterial(division, city, material.name).qty;\\n\\t\\tif (curQty < material.qty) {\\n\\t\\t\\tns.print(`Buying ${material.name} for ${division} (${city})`);\\n\\t\\t\\tcorp.buyMaterial(division, city, material.name, (material.qty - curQty) / 10);\\n\\t\\t}\\n\\t}\\n\\twhile (true) {\\n\\t\\tlet breakOut = true;\\n\\t\\tfor (let material of materials) {\\n\\t\\t\\tconst curQty = corp.getMaterial(division, city, material.name).qty;\\n\\t\\t\\tif (curQty >= material.qty) corp.buyMaterial(division, city, material.name, 0);\\n\\t\\t\\telse breakOut = false;\\n\\t\\t}\\n\\t\\tif (breakOut) break;\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\n/**\\n * Function to upgrade warehouse up to certain level\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @param {string} city\\n * @param {number} level\\n * @returns {Promise<void>}\\n */\\nexport async function upgradeWarehouseUpto(ns, division, city, level) {\\n\\tconst corp = ns.corporation;\\n\\twhile (corp.getWarehouse(division, city).level < level) {\\n\\t\\tawait moneyFor(ns, corp.getUpgradeWarehouseCost, division, city);\\n\\t\\tcorp.upgradeWarehouse(division, city);\\n\\t\\tns.print(`Upgraded warehouse in ${division} (${city}) to level ${corp.getWarehouse(division, city).level}`);\\n\\t}\\n}\\n\\n/**\\n * Function to hire AdVert up to certain level\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @param {number} level\\n * @returns {Promise<void>}\\n */\\nexport async function hireAdVertUpto(ns, division, level) {\\n\\tconst corp = ns.corporation;\\n\\twhile (corp.getHireAdVertCount(division) < level) {\\n\\t\\tawait moneyFor(ns, corp.getHireAdVertCost, division);\\n\\t\\tcorp.hireAdVert(division);\\n\\t\\tns.print(`Hired AdVert in ${division} to level ${level}`);\\n\\t}\\n}\\n\\n/**\\n * Function to upgrade an office, hire maximum number of employees and assign them jobs\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @param {string} city\\n * @param {number} size\\n * @param {Object<string, number>[]} positions\\n * @returns {Promise<void>}\\n */\\nexport async function upgradeOffice(ns, division, city, size, positions) {\\n\\tconst corp = ns.corporation;\\n\\tconst upgradeSize = size - corp.getOffice(division, city).size;\\n\\tif (upgradeSize > 0) {\\n\\t\\tns.print(`Upgrading office in ${division} (${city}) to ${size}`);\\n\\t\\tawait moneyFor(ns, corp.getOfficeSizeUpgradeCost, division, city, upgradeSize);\\n\\t\\tcorp.upgradeOfficeSize(division, city, upgradeSize);\\n\\t}\\n\\thireMaxEmployees(ns, division, city);\\n\\tconst allPositions = getPositions(ns, division, city);\\n\\tfor (let position of positions) {\\n\\t\\tif (allPositions[position.job] !== position.num) await corp.setAutoJobAssignment(division, city, position.job, position.num);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param division\\n * @param city\\n * @returns {Object<string, number>[]}\\n */\\nfunction getPositions(ns, division, city) {\\n\\tconst corp = ns.corporation;\\n\\tconst positions = {};\\n\\tconst employeeNames = corp.getOffice(division, city).employees;\\n\\tfor (let employeeName of employeeNames) {\\n\\t\\tconst employeePos = corp.getEmployee(division, city, employeeName).pos;\\n\\t\\tpositions[employeePos] = (positions[employeePos] || 0) + 1;\\n\\t}\\n\\treturn positions;\\n}\\n\\n/**\\n * Function to wait for an investment offer of a certain amount\\n *\\n * @param {NS} ns\\n * @param {number} amount\\n * @param {number} round\\n * @returns {Promise<void>}\\n */\\nexport async function investmentOffer(ns, amount, round = 5) {\\n\\tconst corp = ns.corporation;\\n\\tif (corp.getInvestmentOffer().round > round) return;\\n\\tns.print(`Waiting for investment offer of ${ns.nFormat(amount, '$0.000a')}`);\\n\\t// Wait for investment\\n\\twhile (corp.getInvestmentOffer().funds < amount) {\\n\\t\\t// Pump in corp funds if we have hashes\\n\\t\\tif (ns.hacknet.numHashes() >= ns.hacknet.hashCost('Sell for Corporation Funds')) {\\n\\t\\t\\tns.hacknet.spendHashes('Sell for Corporation Funds');\\n\\t\\t\\tamount -= 1e9;\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t} else await ns.sleep(1000);\\n\\t}\\n\\tif (corp.getInvestmentOffer().round > round) return; // In case investment offer is accepted manually\\n\\tcorp.acceptInvestmentOffer();\\n}\\n\\n/**\\n * Function to start making a product\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @param {string} city\\n * @param {string} name\\n * @param {number} design\\n * @param {number} marketing\\n * @returns {Promise<void>}\\n */\\nexport async function makeProduct(ns, division, city, name, design = 0, marketing = 0) {\\n\\tconst corp = ns.corporation;\\n\\tconst products = corp.getDivision(division).products;\\n\\tconst proposedVersion = parseVersion(name);\\n\\tlet currentBestVersion = 0;\\n\\tfor (let product of products) {\\n\\t\\tlet version = parseVersion(product);\\n\\t\\tif (version > currentBestVersion) currentBestVersion = version;\\n\\t}\\n\\tif (proposedVersion > currentBestVersion) {\\n\\t\\tawait moneyForAmount(ns, design + marketing);\\n\\t\\tcorp.makeProduct(division, city, name, design, marketing);\\n\\t\\tns.print(`Started to make ${name} in ${division} (${city}) with ${ns.nFormat(design, '$0.000a')} for design and ${ns.nFormat(marketing, '$0.000a')} for marketing`);\\n\\t} else ns.print(`Already making/made ${name} in ${division} (${city})`);\\n}\\n\\n// noinspection JSUnusedGlobalSymbols\\n/**\\n * Function to wait for finishing making a product\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @param {string} name\\n * @returns {Promise<void>}\\n */\\nexport async function finishProduct(ns, division, name) {\\n\\tns.print(`Waiting for ${name} to finish in ${division}`);\\n\\twhile (ns.corporation.getProduct(division, name).developmentProgress < 100) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.print(`Finished making ${name} in ${division}`);\\n}\\n\\n// Function to get latest product version\\nexport function getLatestVersion(ns, division) {\\n\\tconst products = ns.corporation.getDivision(division).products;\\n\\tlet latestVersion = 0;\\n\\tfor (let product of products) {\\n\\t\\tlet version = parseVersion(product);\\n\\t\\tif (version > latestVersion) latestVersion = version;\\n\\t}\\n\\treturn latestVersion;\\n}\\n\\n/**\\n * Function to get earliest product version\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @returns {number}\\n */\\nexport function getEarliestVersion(ns, division) {\\n\\tconst products = ns.corporation.getDivision(division).products;\\n\\tlet earliestVersion = Number.MAX_SAFE_INTEGER;\\n\\tfor (let product of products) {\\n\\t\\tlet version = parseVersion(product);\\n\\t\\tif (version < earliestVersion) earliestVersion = version;\\n\\t}\\n\\treturn earliestVersion;\\n}\\n\\n/**\\n * Function to parse product version from name\\n *\\n * @param {string} name\\n * @returns {number}\\n */\\nfunction parseVersion(name) {\\n\\tlet version = '';\\n\\tfor (let i = 1; i <= name.length; i++) {\\n\\t\\tlet slice = name.slice(-i);\\n\\t\\tif (!isNaN(slice)) version = slice;\\n\\t\\telse if (version === '') throw new Error(`Product name must end with version number`);\\n\\t\\telse return parseInt(version);\\n\\t}\\n}\\n\\n/**\\n * Function to expand industry\\n *\\n * @param {NS} ns\\n * @param {string} industry\\n * @param {string} division\\n * @returns {Promise<void>}\\n */\\nexport async function expandIndustry(ns, industry, division) {\\n\\tconst corp = ns.corporation;\\n\\tif (!corp.getCorporation().divisions.some(d => d.type === industry || d.name === division)) {\\n\\t\\tns.print(`Expanding to ${industry} industry: ${division}`);\\n\\t\\tawait moneyFor(ns, corp.getExpandIndustryCost, industry);\\n\\t\\tcorp.expandIndustry(industry, division);\\n\\t} else ns.print(`Already expanded to ${industry} industry: ${division}`);\\n}\\n\\n\\n/**\\n * Function to expand city\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @param {string} city\\n * @returns {Promise<void>}\\n */\\nexport async function expandCity(ns, division, city) {\\n\\tconst corp = ns.corporation;\\n\\tif (!corp.getDivision(division).cities.includes(city)) {\\n\\t\\tawait moneyFor(ns, corp.getExpandCityCost);\\n\\t\\tcorp.expandCity(division, city);\\n\\t\\tns.print(`Expanded to ${city} for ${division}`);\\n\\t} else ns.print(`Already expanded to ${city} for ${division}`);\\n}\\n\\n/**\\n * Function to purchase warehouse\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @param {string} city\\n * @returns {Promise<void>}\\n */\\nexport async function purchaseWarehouse(ns, division, city) {\\n\\tconst corp = ns.corporation;\\n\\tif (!corp.hasWarehouse(division, city)) {\\n\\t\\tawait moneyFor(ns, corp.getPurchaseWarehouseCost);\\n\\t\\tcorp.purchaseWarehouse(division, city);\\n\\t\\tns.print(`Purchased warehouse in ${division} (${city})`);\\n\\t} else ns.print(`Already purchased warehouse in ${city} for ${division}`);\\n}\\n\\n/**\\n * Function to unlock upgrade\\n *\\n * @param {NS} ns\\n * @param {string} upgrade\\n * @returns {Promise<void>}\\n */\\nexport async function unlockUpgrade(ns, upgrade) {\\n\\tconst corp = ns.corporation;\\n\\tif (!corp.hasUnlockUpgrade(upgrade)) {\\n\\t\\tawait moneyFor(ns, corp.getUnlockUpgradeCost, upgrade);\\n\\t\\tcorp.unlockUpgrade(upgrade);\\n\\t\\tns.print(`Purchased ${upgrade}`);\\n\\t} else ns.print(`Already purchased ${upgrade}`);\\n}\\n\\n/**\\n * Function to return important upgrades\\n *\\n * @returns {Object<string>}\\n */\\nexport function getUpgrades() {\\n\\treturn {\\n\\t\\tlab: 'Hi-Tech R&D Laboratory',\\n\\t\\tmarket1: 'Market-TA.I',\\n\\t\\tmarket2: 'Market-TA.II',\\n\\t\\tfulcrum: 'uPgrade: Fulcrum',\\n\\t\\tcapacity1: 'uPgrade: Capacity.I',\\n\\t\\tcapacity2: 'uPgrade: Capacity.II'\\n\\t};\\n}\",\"filename\":\"/corporation/autopilot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///772d8326-be4d-4904-b34a-4be38fe8e4b7\",\"moduleSequenceNumber\":42769},{\"filename\":\"/corporation/autopilot.js\",\"url\":\"blob:file:///bfc4a09a-908d-41ea-8b87-cde4fb858a1a\",\"moduleSequenceNumber\":45593}],\"dependents\":[],\"ramUsage\":1033.5,\"server\":\"home\",\"moduleSequenceNumber\":45755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedVariable\\n\\nimport {getCities, promptScriptRunning} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst bb = ns.bladeburner;\\n\\tif (ns.getPlayer().bitNodeN !== 7 && !ns.getOwnedSourceFiles().some(s => s.n === 7 && s.lvl >= 1)) throw new Error(`This script requires the Bladeburner API`);\\n\\tif (!bb.joinBladeburnerDivision()) throw new Error(`Must be able to join Bladeburner division`);\\n\\t// Minimum chance for switching actions\\n\\tconst minChance = 1 / 3;\\n\\t// Sort black ops in ascending rank\\n\\tlet maxRequiredRank = 0;\\n\\tconst blackOps = bb.getBlackOpNames().map(blackOp => {\\n\\t\\tconst requiredRank = bb.getBlackOpRank(blackOp);\\n\\t\\tif (maxRequiredRank < requiredRank) maxRequiredRank = requiredRank;\\n\\t\\treturn {name: blackOp, requiredRank};\\n\\t}).sort((a, b) => a.requiredRank - b.requiredRank);\\n\\tns.print(`Max rank required: ${maxRequiredRank}`);\\n\\tlet lastLookAround = 0;\\n\\t// Autopilot\\n\\twhile (true) {\\n\\t\\tconst player = ns.getPlayer();\\n\\t\\tconst rank = bb.getRank();\\n\\t\\t// Join Faction if we can\\n\\t\\tif (rank > 25) bb.joinBladeburnerFaction();\\n\\t\\t// Check if we can get skills\\n\\t\\tlet points = bb.getSkillPoints();\\n\\t\\twhile (points > 0) {\\n\\t\\t\\tconst skills = getSkillsData().filter(s => bb.getSkillLevel(s.name) < s.max || s.max === -1).map(\\n\\t\\t\\t\\ts => {\\n\\t\\t\\t\\t\\tconst cost = bb.getSkillUpgradeCost(s.name);\\n\\t\\t\\t\\t\\tlet value = s.bonus / cost;\\n\\t\\t\\t\\t\\tif (s.name === 'Overclock' &&\\n\\t\\t\\t\\t\\t\\tbb.getActionEstimatedSuccessChance('Operation', 'Assassination')[0] === 1) value = 1000;\\n\\t\\t\\t\\t\\telse if (s.late &&\\n\\t\\t\\t\\t\\t\\tbb.getSkillLevel('Overclock') < getSkillsData().find(s => s.name === 'Overclock').max) value = 0;\\n\\t\\t\\t\\t\\treturn {\\n\\t\\t\\t\\t\\t\\t...s,\\n\\t\\t\\t\\t\\t\\tvalue: value,\\n\\t\\t\\t\\t\\t\\tcost\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t}).sort((a, b) => b.value - a.value);\\n\\t\\t\\t// Get current best skill\\n\\t\\t\\tconst skill = skills[0];\\n\\t\\t\\tif (skill.cost > points) break;\\n\\t\\t\\t// Purchase current best skill\\n\\t\\t\\tbb.upgradeSkill(skill.name);\\n\\t\\t\\tns.print(`Purchasing ${skill.name} for ${skill.cost} skill points`);\\n\\t\\t\\t// Update skill points\\n\\t\\t\\tpoints = bb.getSkillPoints();\\n\\t\\t}\\n\\t\\t// Train combat to get 100 in all combat stats\\n\\t\\tif (player.strength < 100 || player.defense < 100 || player.dexterity < 100 || player.agility < 100) {\\n\\t\\t\\tawait doAction(ns, 'General', 'Training');\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\t// Check if we can do black ops\\n\\t\\tfor (const blackOp of blackOps) {\\n\\t\\t\\tif (rank < blackOp.requiredRank) break; // Can't do this Black Op yet\\n\\t\\t\\tif (bb.getActionCountRemaining('BlackOps', blackOp.name) === 0) continue; // Already did the Black Op\\n\\t\\t\\tlet [amin, amax] = bb.getActionEstimatedSuccessChance('BlackOps', blackOp.name);\\n\\t\\t\\tif (amax < 1) break; // Not yet at 100%\\n\\t\\t\\twhile (amin !== amax) { // Needs field analysis\\n\\t\\t\\t\\tawait doAction(ns, 'General', 'Field Analysis');\\n\\t\\t\\t\\t[amin, amax] = bb.getActionEstimatedSuccessChance('BlackOps', blackOp.name);\\n\\t\\t\\t}\\n\\t\\t\\tif (amax < 1) break; // Attempt only at 100%\\n\\t\\t\\t// Ask player to complete the Bitnode\\n\\t\\t\\tif (blackOp.name === 'Operation Daedalus') {\\n\\t\\t\\t\\twhile (promptScriptRunning(ns, 'home')) {\\n\\t\\t\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (!await ns.prompt(`Complete Operation Daedalus and finish Bitnode?`)) {\\n\\t\\t\\t\\t\\tns.tprint(`Stopping Bladeburner manager`);\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tawait doAction(ns, 'BlackOps', blackOp.name);\\n\\t\\t}\\n\\t\\t// Get current city\\n\\t\\tlet city = bb.getCity();\\n\\t\\tif (lastLookAround < Date.now() - 60 * 60 * 1000) {\\n\\t\\t\\tlastLookAround = Date.now();\\n\\t\\t\\t// Update best city\\n\\t\\t\\tns.print(`Finding best city`);\\n\\t\\t\\tconst raid = bb.getActionCountRemaining('Operation', 'Assassination') === 0;\\n\\t\\t\\tlet bestPop = 0;\\n\\t\\t\\tlet bestCity = '';\\n\\t\\t\\tfor (const city of getCities()) {\\n\\t\\t\\t\\tbb.switchCity(city);\\n\\t\\t\\t\\tlet [amin, amax] = bb.getActionEstimatedSuccessChance('Operation', 'Assassination');\\n\\t\\t\\t\\twhile (amin !== amax) {\\n\\t\\t\\t\\t\\tawait improveAccuracy(ns);\\n\\t\\t\\t\\t\\t[amin, amax] = bb.getActionEstimatedSuccessChance('Operation', 'Assassination');\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tconst pop = bb.getCityEstimatedPopulation(city);\\n\\t\\t\\t\\tif (pop > bestPop && !(raid && bb.getCityCommunities(city) === 0)) {\\n\\t\\t\\t\\t\\tbestPop = pop;\\n\\t\\t\\t\\t\\tbestCity = city;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// Switch to best city\\n\\t\\t\\tif (city !== bestCity) {\\n\\t\\t\\t\\tcity = bestCity;\\n\\t\\t\\t\\tns.print(`Switched to ${city}`);\\n\\t\\t\\t\\tbb.switchCity(city);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Check if chaos is over 50\\n\\t\\tconst chaos = bb.getCityChaos(city);\\n\\t\\tif (chaos >= 50) {\\n\\t\\t\\tns.print(`Chaos is high in ${city}`);\\n\\t\\t\\tif (bb.getActionEstimatedSuccessChance('Operation', 'Stealth Retirement Operation')[0] === 1 &&\\n\\t\\t\\t\\tbb.getActionCountRemaining('Operation', 'Stealth Retirement Operation') > 0) {\\n\\t\\t\\t\\tawait doAction(ns, 'Operation', 'Stealth Retirement Operation');\\n\\t\\t\\t} else await doAction(ns, 'General', 'Diplomacy');\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\t// Get best action\\n\\t\\tlet needsImprovedAccuracy = false;\\n\\t\\tconst actions = getActionData().filter(a => {\\n\\t\\t\\tconst [amin, amax] = bb.getActionEstimatedSuccessChance(a.type, a.name);\\n\\t\\t\\tconst minMax = amin === amax;\\n\\t\\t\\tconst include = a.late ? bb.getActionCountRemaining('Operation', 'Assassination') === 0 : true;\\n\\t\\t\\tif (!minMax) needsImprovedAccuracy = true;\\n\\t\\t\\treturn bb.getActionCountRemaining(a.type, a.name) > 0 && minMax && amin >= minChance && include;\\n\\t\\t}).map(a => {\\n\\t\\t\\tconst level = bb.getActionCurrentLevel(a.type, a.name);\\n\\t\\t\\tconst rewardMultiplier = Math.pow(a.rewardFac, level - 1);\\n\\t\\t\\tconst gain = a.rankGain * rewardMultiplier * ns.getBitNodeMultipliers().BladeburnerRank;\\n\\t\\t\\tconst time = bb.getActionTime(a.type, a.name);\\n\\t\\t\\tconst [, amax] = bb.getActionEstimatedSuccessChance(a.type, a.name);\\n\\t\\t\\treturn {\\n\\t\\t\\t\\t...a,\\n\\t\\t\\t\\tgain,\\n\\t\\t\\t\\tlevel,\\n\\t\\t\\t\\trewardMultiplier,\\n\\t\\t\\t\\ttime,\\n\\t\\t\\t\\tchance: amax\\n\\t\\t\\t};\\n\\t\\t}).sort((a, b) => b.gain * b.chance / b.time - a.gain * a.chance / a.time);\\n\\t\\t// Do field analysis if needed\\n\\t\\tif (needsImprovedAccuracy) {\\n\\t\\t\\tawait improveAccuracy(ns);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\t// Check stamina\\n\\t\\tconst [stamina, maxStamina] = bb.getStamina();\\n\\t\\tif (stamina < maxStamina / 2) {\\n\\t\\t\\tawait doAction(ns, 'General', 'Hyperbolic Regeneration Chamber');\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\t// Do best action\\n\\t\\tconst action = actions[0];\\n\\t\\tawait doAction(ns, action.type, action.name);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nasync function improveAccuracy(ns) {\\n\\tconst [type, name] = bestOpForImprovingAccuracy(ns);\\n\\tawait doAction(ns, type, name);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} type\\n * @param {string} name\\n * @returns {Promise<void>}\\n */\\nasync function doAction(ns, type, name) {\\n\\tconst bb = ns.bladeburner;\\n\\t// If already doing the action go back\\n\\tif (bb.getCurrentAction().name === name) {\\n\\t\\tawait ns.sleep(100);\\n\\t\\treturn;\\n\\t}\\n\\t// Take into account bonus time\\n\\tconst actionTime = bb.getActionTime(type, name);\\n\\tconst bonusTime = bb.getBonusTime();\\n\\tconst time = bonusTime > 0 ? (bonusTime > actionTime ? actionTime / 5 : actionTime - 0.8 * bonusTime) : actionTime;\\n\\t// Wait until the action finishes\\n\\tconst started = bb.startAction(type, name);\\n\\tif (started) {\\n\\t\\tns.print(`Carrying out ${name}`);\\n\\t\\tawait ns.sleep(Math.ceil(time / 1e3) * 1e3 + 100);\\n\\t}\\n}\\n\\n/**\\n *\\n * @returns {Object[]}\\n */\\nexport function getSkillsData() {\\n\\treturn [\\n\\t\\t{\\n\\t\\t\\tname: 'Blade\\\\'s Intuition',\\n\\t\\t\\tbonus: 3,\\n\\t\\t\\tmax: -1\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Cloak',\\n\\t\\t\\tbonus: 5.5,\\n\\t\\t\\tmax: 25\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Short-Circuit',\\n\\t\\t\\tbonus: 5.5,\\n\\t\\t\\tmax: 25\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Digital Observer',\\n\\t\\t\\tbonus: 4,\\n\\t\\t\\tmax: -1\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Tracer',\\n\\t\\t\\tbonus: 4,\\n\\t\\t\\tmax: 5\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Overclock',\\n\\t\\t\\tbonus: 0,\\n\\t\\t\\tmax: 90\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Reaper',\\n\\t\\t\\tbonus: 4,\\n\\t\\t\\tmax: 150\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Evasive System',\\n\\t\\t\\tbonus: 4,\\n\\t\\t\\tmax: 150\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Datamancer',\\n\\t\\t\\tbonus: 1,\\n\\t\\t\\tmax: -1,\\n\\t\\t\\tlate: true\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Cyber\\\\'s Edge',\\n\\t\\t\\tbonus: 0,\\n\\t\\t\\tmax: -1\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Hands of Midas',\\n\\t\\t\\tbonus: 0,\\n\\t\\t\\tmax: -1\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Hyperdrive',\\n\\t\\t\\tbonus: 0,\\n\\t\\t\\tmax: -1\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Datamancer',\\n\\t\\t\\tbonus: 0,\\n\\t\\t\\tmax: -1\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Cyber\\\\'s Edge',\\n\\t\\t\\tbonus: 0,\\n\\t\\t\\tmax: -1\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Hands of Midas',\\n\\t\\t\\tbonus: 0,\\n\\t\\t\\tmax: -1\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Hyperdrive',\\n\\t\\t\\tbonus: 0,\\n\\t\\t\\tmax: -1\\n\\t\\t}\\n\\t];\\n}\\n\\n/**\\n *\\n * @returns {Object[]}\\n */\\nexport function getActionData() {\\n\\treturn [\\n\\t\\t// General\\n\\t\\t{\\n\\t\\t\\tname: 'Training',\\n\\t\\t\\ttype: 'General',\\n\\t\\t\\trewardFac: 0,\\n\\t\\t\\trankGain: 0\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Field Analysis',\\n\\t\\t\\ttype: 'General',\\n\\t\\t\\trewardFac: 1,\\n\\t\\t\\trankGain: 0.1,\\n\\t\\t\\taccuracy: 'eff'\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Recruitment',\\n\\t\\t\\ttype: 'General',\\n\\t\\t\\trewardFac: 0,\\n\\t\\t\\trankGain: 0\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Diplomacy',\\n\\t\\t\\ttype: 'General',\\n\\t\\t\\trewardFac: 0,\\n\\t\\t\\trankGain: 0\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Hyperbolic Regeneration Chamber',\\n\\t\\t\\ttype: 'General',\\n\\t\\t\\trewardFac: 0,\\n\\t\\t\\trankGain: 0\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Incite Violence',\\n\\t\\t\\ttype: 'General',\\n\\t\\t\\trewardFac: 0,\\n\\t\\t\\trankGain: 0\\n\\t\\t},\\n\\t\\t// Contracts\\n\\t\\t{\\n\\t\\t\\tname: 'Tracking',\\n\\t\\t\\ttype: 'Contract',\\n\\t\\t\\trewardFac: 1.041,\\n\\t\\t\\trankGain: 0.3\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Bounty Hunter',\\n\\t\\t\\ttype: 'Contract',\\n\\t\\t\\trewardFac: 1.085,\\n\\t\\t\\trankGain: 0.9\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Retirement',\\n\\t\\t\\ttype: 'Contract',\\n\\t\\t\\trewardFac: 1.065,\\n\\t\\t\\trankGain: 0.6\\n\\t\\t},\\n\\t\\t// Operations\\n\\t\\t{\\n\\t\\t\\tname: 'Investigation',\\n\\t\\t\\ttype: 'Operation',\\n\\t\\t\\trewardFac: 1.07,\\n\\t\\t\\trankGain: 2.2,\\n\\t\\t\\taccuracy: 0.4\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Undercover Operation',\\n\\t\\t\\ttype: 'Operation',\\n\\t\\t\\trewardFac: 1.09,\\n\\t\\t\\trankGain: 4.4,\\n\\t\\t\\taccuracy: 0.8\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Sting Operation',\\n\\t\\t\\ttype: 'Operation',\\n\\t\\t\\trewardFac: 1.095,\\n\\t\\t\\trankGain: 5.5,\\n\\t\\t\\tlate: true\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Raid',\\n\\t\\t\\ttype: 'Operation',\\n\\t\\t\\trewardFac: 1.1,\\n\\t\\t\\trankGain: 55,\\n\\t\\t\\tlate: true\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Stealth Retirement Operation',\\n\\t\\t\\ttype: 'Operation',\\n\\t\\t\\trewardFac: 1.11,\\n\\t\\t\\trankGain: 22,\\n\\t\\t\\tlate: true\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Assassination',\\n\\t\\t\\ttype: 'Operation',\\n\\t\\t\\trewardFac: 1.14,\\n\\t\\t\\trankGain: 44\\n\\t\\t}\\n\\t];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {[string, string]}\\n */\\nexport function bestOpForImprovingAccuracy(ns) {\\n\\tconst bb = ns.bladeburner;\\n\\tconst improvingAccuracyActions = getActionData().filter(a => a.accuracy);\\n\\tlet bestCost = 0;\\n\\tlet type;\\n\\tlet op;\\n\\tfor (let action of improvingAccuracyActions) {\\n\\t\\tif (bb.getActionCountRemaining(action.type, action.name) === 0) continue;\\n\\t\\tlet cost = action.accuracy;\\n\\t\\tif (cost === 'eff') cost = calculateEff(ns); // Used for general field analysis\\n\\t\\tcost *= bb.getActionEstimatedSuccessChance(action.type, action.name)[1]; // Multiply by current supposed best chance\\n\\t\\tcost /= bb.getActionTime(action.type, action.name); // Divide by time taken for the action to complete\\n\\t\\tif (cost > bestCost) {\\n\\t\\t\\tbestCost = cost;\\n\\t\\t\\ttype = action.type;\\n\\t\\t\\top = action.name;\\n\\t\\t}\\n\\t}\\n\\treturn [type, op];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {number}\\n */\\nfunction calculateEff(ns) {\\n\\tconst player = ns.getPlayer();\\n\\treturn (0.04 * Math.pow(player.hacking, 0.3) +\\n\\t\\t\\t0.04 * Math.pow(player.intelligence, 0.9) +\\n\\t\\t\\t0.02 * Math.pow(player.charisma, 0.3)) *\\n\\t\\tplayer.bladeburner_analysis_mult;\\n}\",\"filename\":\"/bladeburner/autopilot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///fa7e0bf2-70b3-4777-9d49-ebbbc84d3825\",\"moduleSequenceNumber\":42769},{\"filename\":\"/bladeburner/autopilot.js\",\"url\":\"blob:file:///8674b61e-ae97-42d0-baf3-9a02b1606185\",\"moduleSequenceNumber\":45594}],\"dependents\":[],\"ramUsage\":93.5,\"server\":\"home\",\"moduleSequenceNumber\":45756,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"bladeburner.joinBladeburnerDivision\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getBlackOpNames\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"bladeburner.getBlackOpRank\",\"cost\":2},{\"type\":\"fn\",\"name\":\"bladeburner.getRank\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.joinBladeburnerFaction\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillPoints\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillLevel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillUpgradeCost\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getActionEstimatedSuccessChance\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.upgradeSkill\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getActionCountRemaining\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getCity\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.switchCity\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getCityEstimatedPopulation\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getCityCommunities\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getCityChaos\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getActionCurrentLevel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getActionTime\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getStamina\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getCurrentAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"bladeburner.startAction\",\"cost\":4},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"upgradeHomeCores\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedVariable\\n\\nimport {\\n\\tisUseful,\\n\\tisUsefulCombat,\\n\\tisUsefulCompany,\\n\\tisUsefulCrime,\\n\\tisUsefulFaction,\\n\\tisUsefulHackingSkill\\n} from '/augmentations/utils.js';\\nimport {getJobs, getPortNumbers, readFromFile} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst works = ['security', 'field', 'hacking'];\\n\\tconst jobs = getJobs();\\n\\tconst numSleeves = ns.sleeve.getNumSleeves();\\n\\tconst usefulCombat = Array.from({length: numSleeves}, _ => false);\\n\\tconst usefulHacking = Array.from({length: numSleeves}, _ => false);\\n\\tconst usefulFaction = Array.from({length: numSleeves}, _ => false);\\n\\tconst usefulCompany = Array.from({length: numSleeves}, _ => false);\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\tns.clearLog();\\n\\t\\tconst player = ns.getPlayer();\\n\\t\\tconst data = readFromFile(ns, getPortNumbers().sleeve);\\n\\t\\tfor (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\n\\t\\t\\t// Check for useful augmentations\\n\\t\\t\\tconst criteria = [isUsefulCrime];\\n\\t\\t\\tif (usefulCombat[i]) criteria.push(isUsefulCombat);\\n\\t\\t\\tif (usefulHacking[i]) criteria.push(isUsefulHackingSkill);\\n\\t\\t\\tif (usefulFaction[i]) criteria.push(isUsefulFaction);\\n\\t\\t\\tif (usefulCompany[i]) criteria.push(isUsefulCompany);\\n\\t\\t\\t// Check for augmentation purchases\\n\\t\\t\\tconst augmentations = ns.sleeve.getSleevePurchasableAugs(i);\\n\\t\\t\\tfor (let aug of augmentations) {\\n\\t\\t\\t\\tif (isUseful(ns, criteria, aug.name) && ns.getServerMoneyAvailable('home') >= aug.cost &&\\n\\t\\t\\t\\t\\tns.sleeve.getSleeveStats(i).shock === 0) ns.sleeve.purchaseSleeveAug(i, aug.name);\\n\\t\\t\\t}\\n\\t\\t\\t// Assign tasks\\n\\t\\t\\t// Sleeve 0 copies player working for faction\\n\\t\\t\\tif (i === 0 && player.isWorking && player.workType === 'Working for Faction') {\\n\\t\\t\\t\\tconst name = player.currentWorkFactionName;\\n\\t\\t\\t\\tif (data[i] && ns.sleeve.getTask(i).task !== 'Faction' || !works.includes(ns.sleeve.getTask(i).factionWorkType)) {\\n\\t\\t\\t\\t\\tlet j = 0;\\n\\t\\t\\t\\t\\twhile (!ns.sleeve.setToFactionWork(i, name, works[j])) {\\n\\t\\t\\t\\t\\t\\tj++;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.print(`Sleeve ${i}: Working for ${name}`);\\n\\t\\t\\t}\\n\\t\\t\\t// Sleeve 0 copies player working for company\\n\\t\\t\\telse if (i === 0 && player.isWorking && player.workType === 'Working for Company') {\\n\\t\\t\\t\\tconst name = player.companyName;\\n\\t\\t\\t\\tif (data[i] && ns.sleeve.getTask(i).task !== 'Company') ns.sleeve.setToCompanyWork(i, name);\\n\\t\\t\\t\\tns.print(`Sleeve ${i}: Working for ${name}`);\\n\\t\\t\\t}\\n\\t\\t\\t// Crime\\n\\t\\t\\telse {\\n\\t\\t\\t\\tconst crime = ns.sleeve.getSleeveStats(i).strength < 50 ? 'Mug' : 'Homicide';\\n\\t\\t\\t\\tif (data[i] && ns.sleeve.getTask(i).crime !== crime) ns.sleeve.setToCommitCrime(i, crime);\\n\\t\\t\\t\\tns.print(`Sleeve ${i}: ${ns.sleeve.getTask(i).crime}`);\\n\\t\\t\\t}\\n\\t\\t\\t// Make relevant augmentations purchasable for sleeves\\n\\t\\t\\tconst task = ns.sleeve.getTask(i);\\n\\t\\t\\tif (task.task === 'Faction') {\\n\\t\\t\\t\\tusefulFaction[i] = true;\\n\\t\\t\\t\\tif (task.factionWorkType === 'security' || task.factionWorkType === 'field') usefulCombat[i] = true;\\n\\t\\t\\t\\tif (task.factionWorkType === 'hacking' || task.factionWorkType === 'field') usefulHacking[i] = true;\\n\\t\\t\\t} else if (task.task === 'Company') {\\n\\t\\t\\t\\tusefulCompany[i] = true;\\n\\t\\t\\t\\tfor (let [company, job] of Object.entries(player.jobs)) {\\n\\t\\t\\t\\t\\tif (company === player.company) {\\n\\t\\t\\t\\t\\t\\tconst foundJob = Object.values(jobs).find(val => val.name === job);\\n\\t\\t\\t\\t\\t\\tif (foundJob.hacking) usefulHacking[i] = true;\\n\\t\\t\\t\\t\\t\\tif (foundJob.combat) usefulCombat[i] = true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"/sleeve/autopilot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///b15b72bb-1fa6-4df4-acb6-e4a6bce0e076\",\"moduleSequenceNumber\":42769},{\"filename\":\"/augmentations/utils.js\",\"url\":\"blob:file:///a9685f36-f78a-441b-927b-445816d3fcb1\",\"moduleSequenceNumber\":42733},{\"filename\":\"/sleeve/autopilot.js\",\"url\":\"blob:file:///de147eca-0518-4f17-824d-dc52a152f075\",\"moduleSequenceNumber\":45637}],\"dependents\":[],\"ramUsage\":39.2,\"server\":\"home\",\"moduleSequenceNumber\":45757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"sleeve.getSleevePurchasableAugs\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"sleeve.getSleeveStats\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.purchaseSleeveAug\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getTask\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToFactionWork\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToCompanyWork\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToCommitCrime\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Requires access to the TIX API. Purchases access to the 4S Mkt Data API as soon as it can\\nimport {printBoth} from '/utils.js';\\n\\nlet disableShorts = false;\\nlet commission = 100000; // Buy/sell commission. Expected profit must exceed this to buy anything.\\nlet totalProfit = 0.0; // We can keep track of how much we've earned since start.\\nlet mock = false; // If set to true, will \\\"mock\\\" buy/sell but not actually buy/sell anything\\n// Pre-4S configuration (influences how we play the stock market before we have 4S data, after which everything's fool-proof)\\nlet showMarketSummary = false;  // If set to true, will always generate and display the pre-4s forecast table in a separate tail window\\nlet minTickHistory; // This much history must be gathered before we will offer a stock forecast.\\nlet longTermForecastWindowLength; // This much history will be used to determine the historical probability of the stock (so long as no inversions are detected)\\nlet nearTermForecastWindowLength; // This much history will be used to detect recent negative trends and act on them immediately.\\n// The following pre-4s constants are hard-coded (not configurable via command line) but may require tweaking\\nconst marketCycleLength = 75; // Every this many ticks, all stocks have a 45% chance of \\\"reversing\\\" their probability. Something we must detect and act on quick to not lose profits.\\nconst maxTickHistory = 151; // This much history will be kept for purposes of determining volatility and perhaps one day pinpointing the market cycle tick\\nconst inversionDetectionTolerance = 0.10; // If the near-term forecast is within this distance of (1 - long-term forecast), consider it a potential \\\"inversion\\\"\\nconst inversionLagTolerance = 5; // An inversion is \\\"trusted\\\" up to this many ticks after the normal nearTermForecastWindowLength expected detection time\\n// (Note: 33 total stocks * 45% inversion chance each cycle = ~15 expected inversions per cycle)\\n// The following pre-4s values are set during the lifetime of the program\\nlet marketCycleDetected = false; // We should not make risky purchasing decisions until the stock market cycle is detected. This can take a long time, but we'll be thanked\\nlet detectedCycleTick = 0; // This will be reset to zero once we've detected the market cycle point.\\nlet inversionAgreementThreshold = 6; // If this many stocks are detected as being in an \\\"inversion\\\", consider this the stock market cycle point\\nconst expectedTickTime = 6000;\\nconst catchUpTickTime = 4000;\\nlet lastTick = 0;\\nlet sleepInterval = 1000;\\n\\nconst argsSchema = [\\n\\t['l', false], // Stop any other running instances and sell all stocks\\n\\t['liquidate', false],\\n\\t['mock', false], // If set to true, will \\\"mock\\\" buy/sell but not actually buy/sell anything\\n\\t['disable-shorts', false], // If set to true, will \\\"mock\\\" buy/sell but not actually buy/sell anything\\n\\t['reserve', null], // A fixed amount of money to not spend\\n\\t['fracB', 0.4], // Fraction of assets to have as liquid before we consider buying more stock\\n\\t['fracH', 0.2], // Fraction of assets to retain as cash in hand when buying\\n\\t['buy-threshold', 0.0001], // Buy only stocks forecasted to earn better than a 0.01% return (1 Basis Point)\\n\\t['sell-threshold', 0], // Sell stocks forecasted to earn less than this return (default 0% - which happens when prob hits 50% or worse)\\n\\t['diversification', 0.34], // Before we have 4S data, we will not hold more than this fraction of our portfolio as a single stock\\n\\t['disableHud', false], // Disable showing stock value in the HUD panel\\n\\t// The following settings are related only to tweaking pre-4s stock-market logic\\n\\t['show-pre-4s-forecast', false], // If set to true, will always generate and display the pre-4s forecast (if false, it's only shown while we hold no stocks)\\n\\t['show-market-summary', false], // Same effect as \\\"show-pre-4s-forecast\\\", this market summary has become so informative, it's valuable even with 4s\\n\\t['pre-4s-buy-threshold-probability', 0.15], // Before we have 4S data, only buy stocks whose probability is more than this far away from 0.5, to account for imprecision\\n\\t['pre-4s-buy-threshold-return', 0.0015], // Before we have 4S data, Buy only stocks forecasted to earn better than this return (default 0.25% or 25 Basis Points)\\n\\t['pre-4s-sell-threshold-return', 0.0005], // Before we have 4S data, Sell stocks forecasted to earn less than this return (default 0.15% or 15 Basis Points)\\n\\t['pre-4s-min-tick-history', 21], // This much history must be gathered before we will use pre-4s stock forecasts to make buy/sell decisions. (Default 21)\\n\\t['pre-4s-forecast-window', 51], // This much history will be used to determine the historical probability of the stock (so long as no inversions are detected) (Default 76)\\n\\t['pre-4s-inversion-detection-window', 10], // This much history will be used to detect recent negative trends and act on them immediately. (Default 10)\\n\\t['pre-4s-min-blackout-window', 10], // Do not make any new purchases this many ticks before the detected stock market cycle tick, to avoid buying a position that reverses soon after\\n\\t['pre-4s-minimum-hold-time', 10] // A recently bought position must be held for this long before selling, to avoid rash decisions due to noise after a fresh market cycle. (Default 10)\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, args) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\t// Extract various options from the args (globals, purchasing decision factors, pre-4s factors)\\n\\tconst options = ns.flags(argsSchema);\\n\\tmock = options.mock;\\n\\tconst fracB = options.fracB;\\n\\tconst fracH = options.fracH;\\n\\tconst diversification = options.diversification;\\n\\tconst disableHud = options.disableHud || options.liquidate || options.mock;\\n\\tdisableShorts = options['disable-shorts'];\\n\\tconst pre4sBuyThresholdProbability = options['pre-4s-buy-threshold-probability'];\\n\\tconst pre4sMinBlackoutWindow = options['pre-4s-min-blackout-window'] || 1;\\n\\tconst pre4sMinHoldTime = options['pre-4s-minimum-hold-time'] || 0;\\n\\tminTickHistory = options['pre-4s-min-tick-history'] || 21;\\n\\tnearTermForecastWindowLength = options['pre-4s-inversion-detection-window'] || 10;\\n\\tlongTermForecastWindowLength = options['pre-4s-forecast-window'] || (marketCycleLength + 1);\\n\\tshowMarketSummary = options['show-pre-4s-forecast'] || options['show-market-summary'];\\n\\t// Other global values must be reset at start lest they be left in memory from a prior run\\n\\tlastTick = 0;\\n\\ttotalProfit = 0;\\n\\tmarketCycleDetected = false;\\n\\tdetectedCycleTick = 0;\\n\\tinversionAgreementThreshold = 6;\\n\\tlet corpus = 0;\\n\\tlet myStocks = [];\\n\\tlet allStocks = [];\\n\\n\\tif (!ns.getPlayer().hasTixApiAccess) { // You cannot use the autopilot until you have API access\\n\\t\\treturn printBoth(ns, `ERROR: You have to buy WSE account and TIX API access before you can run this script`);\\n\\t}\\n\\n\\tif (options.l || options.liquidate) { // If given the \\\"liquidate\\\" command, try to kill the version of ourselves trading in stocks\\n\\t\\tns.ps().filter(p => p.filename === ns.getScriptName() && !p.args.includes('--l') &&\\n\\t\\t\\t!p.args.includes('--liquidate')).forEach(p => ns.kill(p.pid));\\n\\t}\\n\\n\\tif (!disableShorts && ns.getPlayer().bitNodeN !== 8 && !ns.getOwnedSourceFiles().some(s => s.n === 8 && s.lvl > 1)) {\\n\\t\\tns.print(`INFO: Shorting stocks has been disabled (you have not yet unlocked access to shorting)`);\\n\\t\\tdisableShorts = true;\\n\\t}\\n\\n\\tallStocks = initAllStocks(ns);\\n\\n\\tif (options.l || options.liquidate) {\\n\\t\\tliquidate(ns); // Sell all stocks\\n\\t\\treturn;\\n\\t}\\n\\n\\t// Assume Bitnode mults are 1 if user doesn't have this API access yet\\n\\tconst bitnodeMults = ns.getPlayer().bitNodeN === 5 || ns.getOwnedSourceFiles().includes(s => s.n === 5) ?\\n\\t\\tns.getBitNodeMultipliers() : {FourSigmaMarketDataCost: 1, FourSigmaMarketDataApiCost: 1};\\n\\n\\tif (showMarketSummary) await launchSummaryTail(ns); // Opens a separate script / window to continuously display the Pre4S forecast\\n\\n\\tlet hudElement = null;\\n\\tif (!disableHud) {\\n\\t\\thudElement = initializeHud();\\n\\t\\tns.atExit(() => hudElement.parentElement.parentElement.parentElement.removeChild(hudElement.parentElement.parentElement));\\n\\t}\\n\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\tconst playerStats = ns.getPlayer();\\n\\t\\tconst pre4s = !playerStats.has4SDataTixApi;\\n\\t\\tcorpus = refresh(ns, playerStats, allStocks, myStocks);\\n\\t\\tif (pre4s && !mock && tryGet4SApi(ns, playerStats, bitnodeMults, corpus))\\n\\t\\t\\tcontinue; // Start the loop over if we just bought 4S API access\\n\\t\\t// Be more conservative with our decisions if we don't have 4S data\\n\\t\\tconst thresholdToBuy = pre4s ? options['pre-4s-buy-threshold-return'] : options['buy-threshold'];\\n\\t\\tconst thresholdToSell = pre4s ? options['pre-4s-sell-threshold-return'] : options['sell-threshold'];\\n\\t\\tif (myStocks.length > 0) doStatusUpdate(ns, allStocks, myStocks, hudElement);\\n\\t\\telse if (hudElement) hudElement.innerText = '$0.000 ';\\n\\t\\tif (pre4s && allStocks[0].priceHistory.length < minTickHistory) {\\n\\t\\t\\tns.print(`Building a history of stock prices (${allStocks[0].priceHistory.length}/${minTickHistory})...`);\\n\\t\\t\\tawait ns.sleep(sleepInterval);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t// Sell shares which are forecasted to underperform (worse than some expected return threshold)\\n\\t\\tlet sales = 0;\\n\\t\\tfor (let stk of myStocks) {\\n\\t\\t\\tif (stk.absReturn() <= thresholdToSell || stk.bullish() && stk.sharesShort > 0 || stk.bearish() && stk.sharesLong > 0) {\\n\\t\\t\\t\\tif (pre4s && stk.ticksHeld < pre4sMinHoldTime) {\\n\\t\\t\\t\\t\\tif (!stk.warnedBadPurchase) ns.print(`WARNING: Thinking of selling ${stk.sym} with ER ${ns.nFormat(stk.absReturn(), '$0.000a')}, but holding out as it was purchased just ${stk.ticksHeld} ticks ago...`);\\n\\t\\t\\t\\t\\tstk.warnedBadPurchase = true; // Hack to ensure we don't spam this warning\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tsales += doSellAll(ns, stk);\\n\\t\\t\\t\\t\\tstk.warnedBadPurchase = false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (sales > 0) continue; // If we sold anything, loop immediately (no need to sleep) and refresh stats immediately before making purchasing decisions.\\n\\n\\t\\tlet cash = playerStats.money - (options['reserve'] ?? 0);\\n\\t\\tlet liquidity = cash / corpus;\\n\\t\\t// If we haven't gone above a certain liquidity threshold, don't attempt to buy more stock\\n\\t\\t// Avoids death-by-a-thousand-commissions before we get super-rich, stocks are capped, and this is no longer an issue\\n\\t\\t// BUT may mean we miss striking while the iron is hot while waiting to build up more funds.\\n\\t\\tif (liquidity > fracB) {\\n\\t\\t\\t// If we haven't detected the market cycle (or haven't detected it reliably), assume it might be quite soon and restrict bets to those that can turn a profit in the very-near term.\\n\\t\\t\\tconst estTick = Math.max(detectedCycleTick, marketCycleLength - (!marketCycleDetected ? 5 : inversionAgreementThreshold <= 8 ? 15 : inversionAgreementThreshold <= 10 ? 30 : marketCycleLength));\\n\\t\\t\\t// Buy shares with cash remaining in hand if exceeding some buy threshold. Prioritize targets whose expected return will cover the ask/bit spread the soonest\\n\\t\\t\\tfor (const stk of allStocks.sort(purchaseOrder)) {\\n\\t\\t\\t\\t// Do not purchase a stock if it is not forecasted to recover from the ask/bid spread before the next market cycle and potential probability inversion\\n\\t\\t\\t\\tif (stk.blackoutWindow() >= marketCycleLength - estTick) continue;\\n\\t\\t\\t\\tif (pre4s && (Math.max(pre4sMinHoldTime, pre4sMinBlackoutWindow) >= marketCycleLength - estTick)) continue;\\n\\t\\t\\t\\t// Compute the cash we have to spend (such that spending it all on stock would bring us down to a liquidity of fracH)\\n\\t\\t\\t\\tlet budget = cash - (fracH * corpus);\\n\\t\\t\\t\\tif (budget <= 0) break; // Break if we are out of money (i.e. from prior purchases)\\n\\t\\t\\t\\t// Skip if we already own all possible shares in this stock, or if the expected return is below our threshold, or if shorts are disabled and stock is bearish\\n\\t\\t\\t\\tif (stk.ownedShares() === stk.maxShares || stk.absReturn() <= thresholdToBuy || (disableShorts && stk.bearish())) continue;\\n\\t\\t\\t\\t// If pre-4s, do not purchase any stock whose last inversion was too recent, or whose probability is too close to 0.5\\n\\t\\t\\t\\tif (pre4s && (stk.lastInversion < minTickHistory || Math.abs(stk.prob - 0.5) < pre4sBuyThresholdProbability)) continue;\\n\\n\\t\\t\\t\\t// Enforce diversification - don't hold more than x% of our portfolio as a single stock (as corpus increases, this naturally stops being a limiter)\\n\\t\\t\\t\\tbudget = Math.min(budget, (1 - fracH) * corpus * diversification - stk.positionValue());\\n\\t\\t\\t\\tlet purchasePrice = stk.bullish() ? stk.ask_price : stk.bid_price; // Depends on whether we will be buying a long or short position\\n\\t\\t\\t\\tlet affordableShares = Math.floor((budget - commission) / purchasePrice);\\n\\t\\t\\t\\tlet numShares = Math.min(stk.maxShares - stk.ownedShares(), affordableShares);\\n\\t\\t\\t\\tif (numShares <= 0) continue;\\n\\t\\t\\t\\t// Don't buy fewer shares than can beat the commission before the next stock market cycle (after covering the spread), lest the position reverse before we break even.\\n\\t\\t\\t\\tlet ticksBeforeCycleEnd = marketCycleLength - estTick - stk.timeToCoverTheSpread();\\n\\t\\t\\t\\tif (ticksBeforeCycleEnd < 1) continue; // We're cutting it too close to the market cycle, position might reverse before we break even on commission\\n\\t\\t\\t\\tlet estEndOfCycleValue = numShares * purchasePrice * ((stk.absReturn() + 1) ** ticksBeforeCycleEnd - 1); // Expected difference in purchase price and value at next market cycle end\\n\\t\\t\\t\\tif (estEndOfCycleValue <= 2 * commission)\\n\\t\\t\\t\\t\\tns.print(`Despite attractive ER of ${ns.nFormat(stk.absReturn(), '$0.000a')}, ${stk.sym} was not bought. Budget: ${ns.nFormat(budget, '$0.000a')} can only buy ${numShares} shares @ ${ns.nFormat(purchasePrice, '$0.000a')}. ` +\\n\\t\\t\\t\\t\\t\\t`Given an estimated ${marketCycleLength - estTick} ticks left in market cycle, less ${stk.timeToCoverTheSpread().toFixed(1)} ticks to cover the spread (${(stk.spread_pct * 100).toFixed(2)}%), ` +\\n\\t\\t\\t\\t\\t\\t`remaining ${ticksBeforeCycleEnd.toFixed(1)} ticks would only generate ${ns.nFormat(estEndOfCycleValue, '$0.000a')}, which is less than 2x commission (${ns.nFormat(2 * commission, '$0.000a')})`);\\n\\t\\t\\t\\telse cash -= doBuy(ns, stk, numShares);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.sleep(sleepInterval);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {function} func\\n * @returns {Object<string, *>}\\n */\\nfunction getStockInfoDict(ns, func) {\\n\\treturn Object.fromEntries(ns.stock.getSymbols().map(sym => [sym, func(sym)]));\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Object[]}\\n */\\nfunction initAllStocks(ns) {\\n\\tconst dictMaxShares = getStockInfoDict(ns, ns.stock.getMaxShares); // Only need to get this once, it never changes\\n\\treturn ns.stock.getSymbols().map(s => ({\\n\\t\\tsym: s,\\n\\t\\tmaxShares: dictMaxShares[s], // Value never changes once retrieved\\n\\t\\texpectedReturn: function () { // How many holdings are expected to appreciate (or depreciate) in the future\\n\\t\\t\\t// To add conservatism to pre-4s estimates, we reduce the probability by 1 standard deviation without crossing the midpoint\\n\\t\\t\\tlet normalizedProb = (this.prob - 0.5);\\n\\t\\t\\tlet conservativeProb = normalizedProb < 0 ? Math.min(0, normalizedProb + this.probStdDev) : Math.max(0, normalizedProb - this.probStdDev);\\n\\t\\t\\treturn this.vol * conservativeProb;\\n\\t\\t},\\n\\t\\tabsReturn: function () {\\n\\t\\t\\treturn Math.abs(this.expectedReturn());\\n\\t\\t}, // Appropriate to use when can just as well buy a short position as a long position\\n\\t\\tbullish: function () {\\n\\t\\t\\treturn this.prob > 0.5;\\n\\t\\t},\\n\\t\\tbearish: function () {\\n\\t\\t\\treturn !this.bullish();\\n\\t\\t},\\n\\t\\townedShares: function () {\\n\\t\\t\\treturn this.sharesLong + this.sharesShort;\\n\\t\\t},\\n\\t\\towned: function () {\\n\\t\\t\\treturn this.ownedShares() > 0;\\n\\t\\t},\\n\\t\\tpositionValueLong: function () {\\n\\t\\t\\treturn this.sharesLong * this.bid_price;\\n\\t\\t},\\n\\t\\tpositionValueShort: function () {\\n\\t\\t\\treturn this.sharesShort * (2 * this.boughtPriceShort - this.ask_price);\\n\\t\\t}, // Shorts work a bit weird\\n\\t\\tpositionValue: function () {\\n\\t\\t\\treturn this.positionValueLong() + this.positionValueShort();\\n\\t\\t},\\n\\t\\t// How many stock market ticks must occur at the current expected return before we regain the value lost by the spread between buy and sell prices.\\n\\t\\t// This can be derived by taking the compound interest formula (future = current * (1 + expected_return) ^ n) and solving for n\\n\\t\\ttimeToCoverTheSpread: function () {\\n\\t\\t\\treturn Math.log(this.ask_price / this.bid_price) / Math.log(1 + this.absReturn());\\n\\t\\t},\\n\\t\\t// We should not buy this stock within this many ticks of a Market cycle, or we risk being forced to sell due to a probability inversion, and losing money due to the spread\\n\\t\\tblackoutWindow: function () {\\n\\t\\t\\treturn Math.ceil(this.timeToCoverTheSpread());\\n\\t\\t},\\n\\t\\t// Pre-4s properties used for forecasting\\n\\t\\tpriceHistory: [],\\n\\t\\tlastInversion: 0\\n\\t}));\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n */\\nfunction liquidate(ns) {\\n\\tlet totalStocks = 0, totalSharesLong = 0, totalSharesShort = 0, totalRevenue = 0;\\n\\tconst dictPositions = mock ? null : getStockInfoDict(ns, ns.stock.getPosition);\\n\\tfor (const sym of ns.stock.getSymbols()) {\\n\\t\\tconst [sharesLong, , sharesShort, avgShortCost] = dictPositions[sym];\\n\\t\\tif (sharesLong + sharesShort === 0) continue;\\n\\t\\ttotalStocks++;\\n\\t\\ttotalSharesLong += sharesLong;\\n\\t\\ttotalSharesShort += sharesShort;\\n\\t\\tif (sharesLong > 0) totalRevenue += ns.stock.sell(sym, sharesLong) * sharesLong - commission;\\n\\t\\tif (sharesShort > 0) totalRevenue += (2 * avgShortCost - ns.stock.sellShort(sym, sharesShort)) * sharesShort - commission;\\n\\t}\\n\\tprintBoth(ns, `Sold ${ns.nFormat(totalSharesLong, '0.000a')} long shares and ${ns.nFormat(totalSharesShort, '0.000a')} short shares ` +\\n\\t\\t`in ${totalStocks} stocks for ${ns.nFormat(totalRevenue, '$0.000a')}`);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {Player} playerStats\\n * @param {Object<number>} bitnodeMults\\n * @param {number} corpus\\n * @returns {boolean}\\n */\\nfunction tryGet4SApi(ns, playerStats, bitnodeMults, corpus) {\\n\\tif (playerStats.has4SDataTixApi) return false; // Only return true if we just bought it\\n\\tconst cost4sData = bitnodeMults.FourSigmaMarketDataCost * 5e9;\\n\\tconst cost4sApi = bitnodeMults.FourSigmaMarketDataApiCost * 25e9;\\n\\tconst totalCost = (playerStats.has4SData ? 0 : cost4sData) + cost4sApi;\\n\\t// Liquidate shares if it would allow us to afford 4S API data\\n\\tif (totalCost > corpus * 0.9) return false;\\n\\tif (playerStats.money < totalCost) liquidate(ns);\\n\\tif (!playerStats.has4SData) {\\n\\t\\tif (ns.stock.purchase4SMarketData()) printBoth(ns, `Purchased 4SMarketData for ${ns.nFormat(cost4sData, '$0.000a')}`);\\n\\t\\telse ns.print(`ERROR attempting to purchase 4SMarketData`);\\n\\t}\\n\\tif (ns.stock.purchase4SMarketDataTixApi()) {\\n\\t\\tprintBoth(ns, `Purchased 4SMarketDataTixApi for ${ns.nFormat(cost4sApi, '$0.000a')}`);\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.print(`ERROR attempting to purchase 4SMarketDataTixApi`);\\n\\t\\tif (playerStats.bitNodeN !== 5 || !ns.getOwnedSourceFiles().some(s => s.n === 5)) { // If we do not have access to Bitnode multipliers, assume the cost is double and try again later\\n\\t\\t\\tns.print('INFO: Bitnode mults are not available (SF5) - assuming everything is twice as expensive in the current Bitnode');\\n\\t\\t\\tbitnodeMults.FourSigmaMarketDataCost *= 2;\\n\\t\\t\\tbitnodeMults.FourSigmaMarketDataApiCost *= 2;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {Object} stocks\\n * @param {Object} myStocks\\n * @param {*} hudElement\\n */\\nfunction doStatusUpdate(ns, stocks, myStocks, hudElement = null) {\\n\\tconst maxReturnBP = 1e5 * Math.max(...myStocks.map(s => s.absReturn())); // The largest return (in basis points) in our portfolio\\n\\tconst minReturnBP = 1e5 * Math.min(...myStocks.map(s => s.absReturn())); // The smallest return (in basis points) in our portfolio\\n\\tconst est_holdings_cost = myStocks.reduce((sum, stk) => sum + (stk.owned() ? commission : 0) +\\n\\t\\tstk.sharesLong * stk.boughtPrice + stk.sharesShort * stk.boughtPriceShort, 0);\\n\\tconst liquidation_value = myStocks.reduce((sum, stk) => sum - (stk.owned() ? commission : 0) + stk.positionValue(), 0);\\n\\tns.print(`Long ${myStocks.filter(s => s.sharesLong > 0).length}, Short ${myStocks.filter(s => s.sharesShort > 0).length} of ${stocks.length} stocks ` +\\n\\t\\t(myStocks.length === 0 ? '' : `(ER ${minReturnBP.toFixed(1)}-${maxReturnBP.toFixed(1)} BP) `) +\\n\\t\\t`Profit: ${ns.nFormat(totalProfit, '$0.000a')} Holdings: ${ns.nFormat(liquidation_value, '$0.000a')} ` +\\n\\t\\t`(Cost: ${ns.nFormat(est_holdings_cost, '$0.000a')}) Net: ${ns.nFormat(totalProfit + liquidation_value - est_holdings_cost, '$0.000a')}`);\\n\\tif (hudElement) hudElement.innerText = ns.nFormat(liquidation_value, '$0.000a');\\n}\\n\\n/* A sorting function to put stocks in the order we should prioritize investing in them */\\nconst purchaseOrder = (a, b) => (Math.ceil(a.timeToCoverTheSpread()) - Math.ceil(b.timeToCoverTheSpread())) || (b.absReturn() - a.absReturn());\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {Player} playerStats\\n * @param {Object[]} allStocks\\n * @param {Object[]} myStocks\\n * @returns {number}\\n */\\nfunction refresh(ns, playerStats, allStocks, myStocks) {\\n\\tconst has4s = playerStats.has4SDataTixApi;\\n\\tlet corpus = playerStats.money;\\n\\tconst dictAskPrices = getStockInfoDict(ns, ns.stock.getAskPrice);\\n\\tconst dictBidPrices = getStockInfoDict(ns, ns.stock.getBidPrice);\\n\\tconst dictVolatilities = !has4s ? null : getStockInfoDict(ns, ns.stock.getVolatility);\\n\\tconst dictForecasts = !has4s ? null : getStockInfoDict(ns, ns.stock.getForecast);\\n\\tconst dictPositions = mock ? null : getStockInfoDict(ns, ns.stock.getPosition);\\n\\tconst ticked = allStocks.some(stk => stk.ask_price !== dictAskPrices[stk.sym]); // If any price has changed since our last update, the stock market has \\\"ticked\\\"\\n\\tif (ticked) {\\n\\t\\tif (Date.now() - lastTick < expectedTickTime - sleepInterval) {\\n\\t\\t\\tif (Date.now() - lastTick < catchUpTickTime - sleepInterval) {\\n\\t\\t\\t\\tconst changedPrices = allStocks.filter(stk => stk.ask_price !== dictAskPrices[stk.sym]);\\n\\t\\t\\t\\tns.print(`WARNING: Detected a stock market tick after only ${ns.tFormat(Date.now() - lastTick)}, but expected ~${ns.tFormat(expectedTickTime)}. ` +\\n\\t\\t\\t\\t\\t(changedPrices.length >= 33 ? '(All stocks updated)' : `The following ${changedPrices.length} stock prices changed: ${changedPrices.map(stk =>\\n\\t\\t\\t\\t\\t\\t`${stk.sym} ${ns.nFormat(stk.ask_price, '$0.000a')} -> ${ns.nFormat(dictAskPrices[stk.sym], '$0.000a')}`).join(', ')}`));\\n\\t\\t\\t} else ns.print(`INFO: Detected a rapid stock market tick (${ns.tFormat(Date.now() - lastTick)}), likely to make up for lag / offline time.`);\\n\\t\\t}\\n\\t\\tlastTick = Date.now();\\n\\t}\\n\\n\\tmyStocks.length = 0;\\n\\tfor (const stk of allStocks) {\\n\\t\\tconst sym = stk.sym;\\n\\t\\tstk.ask_price = dictAskPrices[sym]; // The amount we would pay if we bought the stock (higher than 'price')\\n\\t\\tstk.bid_price = dictBidPrices[sym]; // The amount we would receive if we sold the stock (lower than 'price')\\n\\t\\tstk.spread = stk.ask_price - stk.bid_price;\\n\\t\\tstk.spread_pct = stk.spread / stk.ask_price; // The percentage of value we lose just by buying the stock\\n\\t\\tstk.price = (stk.ask_price + stk.bid_price) / 2; // = ns.stock.getPrice(sym);\\n\\t\\tstk.vol = has4s ? dictVolatilities[sym] : stk.vol;\\n\\t\\tstk.prob = has4s ? dictForecasts[sym] : stk.prob;\\n\\t\\tstk.probStdDev = has4s ? 0 : stk.probStdDev; // Standard deviation around the est. probability\\n\\t\\t// Update our current portfolio of owned stock\\n\\t\\tconst [priorLong, priorShort] = [stk.sharesLong, stk.sharesShort];\\n\\t\\tstk.position = mock ? null : dictPositions[sym];\\n\\t\\tstk.sharesLong = mock ? (stk.sharesLong || 0) : stk.position[0];\\n\\t\\tstk.boughtPrice = mock ? (stk.boughtPrice || 0) : stk.position[1];\\n\\t\\tstk.sharesShort = mock ? (stk.shares_short || 0) : stk.position[2];\\n\\t\\tstk.boughtPriceShort = mock ? (stk.boughtPrice_short || 0) : stk.position[3];\\n\\t\\tcorpus += stk.positionValue();\\n\\t\\tif (stk.owned()) myStocks.push(stk);\\n\\t\\telse stk.ticksHeld = 0;\\n\\t\\tif (ticked) // Increment ticksHeld, or reset it if we have no position in this stock or reversed our position last tick.\\n\\t\\t\\tstk.ticksHeld = !stk.owned() || (priorLong > 0 && stk.sharesLong === 0) || (priorShort > 0 && stk.sharesShort === 0) ? 0 : 1 + (stk.ticksHeld || 0);\\n\\t}\\n\\tif (ticked) updateForecast(ns, allStocks, has4s); // Logic below only required on market tick\\n\\treturn corpus;\\n}\\n\\n// Historical probability can be inferred from the number of times the stock was recently observed increasing over the total number of observations\\nconst forecast = history => history.reduce((ups, price, idx) => idx === 0 ? 0 : (history[idx - 1] > price ? ups + 1 : ups), 0) / (history.length - 1);\\n// An \\\"inversion\\\" can be detected if two probabilities are far enough apart and are within \\\"tolerance\\\" of p1 being equal to 1-p2\\nconst tol2 = inversionDetectionTolerance / 2;\\nconst detectInversion = (p1, p2) => ((p1 >= 0.5 + tol2) && (p2 <= 0.5 - tol2) && p2 <= (1 - p1) + inversionDetectionTolerance)\\n\\t/* Reverse Condition: */ || ((p1 <= 0.5 - tol2) && (p2 >= 0.5 + tol2) && p2 >= (1 - p1) - inversionDetectionTolerance);\\n\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {Object[]} allStocks\\n * @param {boolean} has4s\\n */\\nfunction updateForecast(ns, allStocks, has4s) {\\n\\tconst currentHistory = allStocks[0].priceHistory.length;\\n\\tconst prepSummary = showMarketSummary || mock || (!has4s && (currentHistory < minTickHistory || allStocks.filter(stk => stk.owned()).length === 0)); // Decide whether to display the market summary table.\\n\\tconst inversionsDetected = []; // Keep track of individual stocks whose probability has inverted (45% chance of happening each \\\"cycle\\\")\\n\\tdetectedCycleTick = (detectedCycleTick + 1) % marketCycleLength; // Keep track of stock market cycle (which occurs every 75 ticks)\\n\\tfor (const stk of allStocks) {\\n\\t\\tstk.priceHistory.unshift(stk.price);\\n\\t\\tif (stk.priceHistory.length > maxTickHistory) // Limit the rolling window size\\n\\t\\t\\tstk.priceHistory.splice(maxTickHistory, 1);\\n\\t\\t// Volatility is easy - the largest observed % movement in a single tick\\n\\t\\tif (!has4s) stk.vol = stk.priceHistory.reduce((max, price, idx) => Math.max(max, idx === 0 ? 0 : Math.abs(stk.priceHistory[idx - 1] - price) / price), 0);\\n\\t\\t// We want stocks that have the best expected return, averaged over a long window for greater precision, but the game will occasionally invert probabilities\\n\\t\\t// (45% chance every 75 updates), so we also compute a near-term forecast window to allow for early-detection of inversions, so we can ditch our position.\\n\\t\\tstk.nearTermForecast = forecast(stk.priceHistory.slice(0, nearTermForecastWindowLength));\\n\\t\\tlet preNearTermWindowProb = forecast(stk.priceHistory.slice(nearTermForecastWindowLength)); // Used to detect the probability before the potential inversion event.\\n\\t\\t// Detect whether it appears as though the probability of this stock has recently undergone an inversion (i.e. prob => 1 - prob)\\n\\t\\tstk.possibleInversionDetected = has4s ? detectInversion(stk.prob, stk.lastTickProbability || stk.prob) : detectInversion(preNearTermWindowProb, stk.nearTermForecast);\\n\\t\\tstk.lastTickProbability = stk.prob;\\n\\t\\tif (stk.possibleInversionDetected) inversionsDetected.push(stk);\\n\\t}\\n\\t// Detect whether our auto-detected \\\"stock market cycle\\\" timing should be adjusted based on the number of potential inversions observed\\n\\tlet summary = '';\\n\\tif (inversionsDetected.length > 0) {\\n\\t\\tsummary += `${inversionsDetected.length} Stocks appear to be reversing their outlook: ${inversionsDetected.map(s => s.sym).join(', ')} (threshold: ${inversionAgreementThreshold})\\\\n`;\\n\\t\\tif (inversionsDetected.length >= inversionAgreementThreshold && (has4s || currentHistory >= minTickHistory)) { // We believe we have detected the stock market cycle!\\n\\t\\t\\tconst newPredictedCycleTick = has4s ? 0 : nearTermForecastWindowLength; // By the time we've detected it, we're this many ticks past the cycle start\\n\\t\\t\\tif (detectedCycleTick !== newPredictedCycleTick)\\n\\t\\t\\t\\tns.print(`Threshold for changing predicted market cycle met (${inversionsDetected.length} >= ${inversionAgreementThreshold}). ` +\\n\\t\\t\\t\\t\\t`Changing current market tick from ${detectedCycleTick} to ${newPredictedCycleTick}.`);\\n\\t\\t\\tmarketCycleDetected = true;\\n\\t\\t\\tdetectedCycleTick = newPredictedCycleTick;\\n\\t\\t\\t// Don't adjust this in the future unless we see another day with as much or even more agreement (capped at 14, it seems sometimes our cycles get out of sync with\\n\\t\\t\\t// actual cycles, and we need to reset our clock even after previously determining the cycle with great certainty.)\\n\\t\\t\\tinversionAgreementThreshold = Math.max(14, inversionsDetected.length);\\n\\t\\t}\\n\\t}\\n\\t// Act on any inversions (if trusted), compute the probability, and prepare the stock summary\\n\\tfor (const stk of allStocks) {\\n\\t\\t// Don't \\\"trust\\\" (act on) a detected inversion unless it's near the time when we're capable of detecting market cycle start. Avoids most false-positives.\\n\\t\\tif (stk.possibleInversionDetected && (has4s && detectedCycleTick === 0 ||\\n\\t\\t\\t(!has4s && (detectedCycleTick > nearTermForecastWindowLength / 2 - 1) && (detectedCycleTick <= nearTermForecastWindowLength + inversionLagTolerance))))\\n\\t\\t\\tstk.lastInversion = detectedCycleTick; // If we \\\"trust\\\" a probability inversion has occurred, probability will be calculated based on only history since the last inversion.\\n\\t\\telse\\n\\t\\t\\tstk.lastInversion++;\\n\\t\\t// Only take the stock history since after the last inversion to compute the probability of the stock.\\n\\t\\tconst probWindowLength = Math.min(longTermForecastWindowLength, stk.lastInversion);\\n\\t\\tstk.longTermForecast = forecast(stk.priceHistory.slice(0, probWindowLength));\\n\\t\\tif (!has4s) {\\n\\t\\t\\tstk.prob = stk.longTermForecast;\\n\\t\\t\\tstk.probStdDev = Math.sqrt((stk.prob * (1 - stk.prob)) / probWindowLength);\\n\\t\\t}\\n\\t\\tconst signalStrength = 1 + (stk.bullish() ? (stk.nearTermForecast > stk.prob ? 1 : 0) + (stk.prob > 0.8 ? 1 : 0) : (stk.nearTermForecast < stk.prob ? 1 : 0) + (stk.prob < 0.2 ? 1 : 0));\\n\\t\\tif (prepSummary) { // Example: AERO  ++   Prob: 54% (t51: 54%, t10: 67%) tLast⇄:190 Vol:0.640% ER: 2.778BP Spread:1.784% ttProfit: 65 Pos: 14.7M long  (held 189 ticks)\\n\\t\\t\\tstk.debugLog = `${stk.sym.padEnd(5, ' ')} ${(stk.bullish() ? '+' : '-').repeat(signalStrength).padEnd(3)} ` +\\n\\t\\t\\t\\t`Prob:${(stk.prob * 100).toFixed(0).padStart(3)}% (t${probWindowLength.toFixed(0).padStart(2)}:${(stk.longTermForecast * 100).toFixed(0).padStart(3)}%, ` +\\n\\t\\t\\t\\t`t${Math.min(stk.priceHistory.length, nearTermForecastWindowLength).toFixed(0).padStart(2)}:${(stk.nearTermForecast * 100).toFixed(0).padStart(3)}%) ` +\\n\\t\\t\\t\\t`tLast⇄:${(stk.lastInversion + 1).toFixed(0).padStart(3)} Vol:${(stk.vol * 100).toFixed(2)}% ER:${ns.nFormat(stk.expectedReturn(), '$0.000a').padStart(8)} ` +\\n\\t\\t\\t\\t`Spread:${(stk.spread_pct * 100).toFixed(2)}% ttProfit:${stk.blackoutWindow().toFixed(0).padStart(3)}`;\\n\\t\\t\\tif (stk.owned()) stk.debugLog += ` Pos: ${ns.nFormat(stk.ownedShares(), '$0.000a')} (${stk.ownedShares() === stk.maxShares ? 'max' :\\n\\t\\t\\t\\t((100 * stk.ownedShares() / stk.maxShares).toFixed(0).padStart(2) + '%')}) ${stk.sharesLong > 0 ? 'long ' : 'short'} (held ${stk.ticksHeld} ticks)`;\\n\\t\\t\\tif (stk.possibleInversionDetected) stk.debugLog += ' ⇄⇄⇄';\\n\\t\\t}\\n\\t}\\n\\t// Print a summary of stocks as of this most recent tick (if enabled)\\n\\tif (prepSummary) {\\n\\t\\tsummary += `Market day ${detectedCycleTick + 1}${marketCycleDetected ? '' : '?'} of ${marketCycleLength} (${marketCycleDetected ? (100 * inversionAgreementThreshold / 19).toPrecision(2) : '0'}% certain) ` +\\n\\t\\t\\t`Current Stock Summary and Pre-4S Forecasts (by best payoff-time):\\\\n` + allStocks.sort(purchaseOrder).map(s => s.debugLog).join('\\\\n');\\n\\t\\tns.print(summary);\\n\\t}\\n\\t// // Write out a file of stock probabilities so that other scripts can make use of this (e.g. hack orchestrator can manipulate the stock market)\\n\\t// await ns.write('/Temp/stock-probabilities.txt', JSON.stringify(Object.fromEntries(\\n\\t// \\tallStocks.map(stk => [stk.sym, {\\n\\t// \\t\\tprob: stk.prob,\\n\\t// \\t\\tsharesLong: stk.sharesLong,\\n\\t// \\t\\tsharesShort: stk.sharesShort\\n\\t// \\t}]))), 'w');\\n}\\n\\n/**\\n * Automatically buys either a short or long position depending on the outlook of the stock\\n *\\n * @param {NS} ns\\n * @param {Object} stk\\n * @param {amount} sharesBought\\n * @returns {number}\\n */\\nfunction doBuy(ns, stk, sharesBought) {\\n\\t// We include -2*commission in the \\\"holdings value\\\" of our stock, but if we make repeated purchases of the same stock, we have to track\\n\\t// the additional commission somewhere. So only subtract it from our running profit if this isn't our first purchase of this symbol\\n\\tif (stk.owned()) totalProfit -= commission;\\n\\tlet long = stk.bullish();\\n\\tlet expectedPrice = long ? stk.ask_price : stk.bid_price; // Depends on whether we will be buying a long or short position\\n\\tlet price;\\n\\ttry {\\n\\t\\tprice = mock ? expectedPrice : long ? ns.stock.buy(stk.sym, sharesBought) : ns.stock.short(stk.sym, sharesBought);\\n\\t} catch (err) {\\n\\t\\tif (long) throw err;\\n\\t\\tprintBoth(ns, `WARNING: Failed to short ${stk.sym} (Shorts not available?). Disabling shorts...`);\\n\\t\\tdisableShorts = true;\\n\\t\\treturn 0;\\n\\t}\\n\\n\\tns.print(`INFO: ${long ? 'Bought ' : 'Shorted'} ${ns.nFormat(sharesBought, '0.000a').padStart(5)}${stk.maxShares === sharesBought + stk.ownedShares() ? ' (max shares)' : ''} ` +\\n\\t\\t`${stk.sym.padEnd(5)} @ ${ns.nFormat(price, '$0.000a').padStart(9)} for ${ns.nFormat(sharesBought * price, '$0.000a').padStart(9)} (Spread:${(stk.spread_pct * 100).toFixed(2)}% ` +\\n\\t\\t`ER:${ns.nFormat(stk.expectedReturn(), '$0.000a').padStart(8)}) Ticks to Profit: ${stk.timeToCoverTheSpread().toFixed(2)}`);\\n\\t// The rest of this work is for troubleshooting / mock-mode purposes\\n\\tif (price === 0) {\\n\\t\\tprintBoth(ns, `ERROR: Failed to ${long ? 'buy' : 'short'} ${stk.sym} @ ${ns.nFormat(expectedPrice, '$0.000a')} - 0 was returned`);\\n\\t\\treturn 0;\\n\\t} else if (price !== expectedPrice) {\\n\\t\\tprintBoth(ns, `WARNING: ${long ? 'Bought' : 'Shorted'} ${stk.sym} @ ${ns.nFormat(price, '$0.000a')} but expected ${ns.nFormat(expectedPrice, '$0.000a')} (spread: ${ns.nFormat(stk.spread, '$0.000a')})`);\\n\\t\\tprice = expectedPrice; // Known Bitburner bug for now, short returns \\\"price\\\" instead of \\\"bit_price\\\". Correct this so running profit calculations are correct.\\n\\t}\\n\\tif (mock && long) stk.boughtPrice = (stk.boughtPrice * stk.sharesLong + price * sharesBought) / (stk.sharesLong + sharesBought);\\n\\tif (mock && !long) stk.boughtPriceShort = (stk.boughtPriceShort * stk.sharesShort + price * sharesBought) / (stk.sharesShort + sharesBought);\\n\\tif (long) stk.sharesLong += sharesBought; else stk.sharesShort += sharesBought; // Maintained for mock mode, otherwise, redundant (overwritten at next refresh)\\n\\treturn sharesBought * price + commission; // Return the amount spent on the transaction, so it can be subtracted from our cash on hand\\n}\\n\\n/**\\n * Sell our current position in this stock\\n *\\n * @param {NS} ns\\n * @param {Object} stk\\n * @returns {number}\\n */\\nfunction doSellAll(ns, stk) {\\n\\tlet long = stk.sharesLong > 0;\\n\\tif (long && stk.sharesShort > 0) // Detect any issues here - we should always sell one before buying the other.\\n\\t\\tprintBoth(ns, `ERROR: Somehow ended up both ${stk.sharesShort} short and ${stk.sharesLong} long on ${stk.sym}`);\\n\\tlet expectedPrice = long ? stk.bid_price : stk.ask_price; // Depends on whether we will be selling a long or short position\\n\\tlet sharesSold = long ? stk.sharesLong : stk.sharesShort;\\n\\tlet price = mock ? expectedPrice : long ? ns.stock.sell(stk.sym, sharesSold) : ns.stock.sellShort(stk.sym, sharesSold);\\n\\tconst profit = (long ? stk.sharesLong * (price - stk.boughtPrice) : stk.sharesShort * (stk.boughtPriceShort - price)) - 2 * commission;\\n\\tns.print(`${profit > 0 ? 'SUCCESS' : 'WARNING'}: Sold all ${ns.nFormat(sharesSold, '$0.000a').padStart(5)} ${stk.sym.padEnd(5)} ${long ? ' long' : 'short'} positions ` +\\n\\t\\t`@ ${ns.nFormat(price, '$0.000a').padStart(9)} for a ` + (profit > 0 ? `PROFIT of ${ns.nFormat(profit, '$0.000a').padStart(9)}` : ` LOSS of ${ns.nFormat(-profit, '$0.000a').padStart(9)}`) + ` after ${stk.ticksHeld} ticks`);\\n\\tif (price === 0) {\\n\\t\\tprintBoth(ns, `ERROR: Failed to sell ${sharesSold} ${stk.sym} ${long ? 'shares' : 'shorts'} @ ${ns.nFormat(expectedPrice, '$0.000a')} - 0 was returned`);\\n\\t\\treturn 0;\\n\\t} else if (price !== expectedPrice) {\\n\\t\\tns.print(`WARNING: Sold ${stk.sym} ${long ? 'shares' : 'shorts'} @ ${ns.nFormat(price, '$0.000a')} but expected ${ns.nFormat(expectedPrice, '$0.000a')} (spread: ${ns.nFormat(stk.spread, '$0.000a')})`);\\n\\t\\tprice = expectedPrice; // Known Bitburner bug for now, sellSort returns \\\"price\\\" instead of \\\"ask_price\\\". Correct this so running profit calculations are correct.\\n\\t}\\n\\tif (long) stk.sharesLong -= sharesSold;\\n\\telse stk.sharesShort -= sharesSold; // Maintained for mock mode, otherwise, redundant (overwritten at next refresh)\\n\\ttotalProfit += profit;\\n\\treturn price * sharesSold - commission; // Return the amount of money received from the transaction\\n}\\n\\n/**\\n *\\n * @returns {*}\\n */\\nfunction initializeHud() {\\n\\tconst d = eval('document');\\n\\tlet htmlDisplay = d.getElementById('stock-display-1');\\n\\tif (htmlDisplay !== null) return htmlDisplay;\\n\\t// Get the custom display elements in HUD.\\n\\tlet customElements = d.getElementById('overview-extra-hook-0').parentElement.parentElement;\\n\\t// Make a clone of the hook for extra hud elements, and move it up under money\\n\\tlet stockValueTracker = customElements.cloneNode(true);\\n\\t// Remove any nested elements created by stats.js\\n\\tstockValueTracker.querySelectorAll('p > p').forEach(e => e.parentElement.removeChild(e));\\n\\t// Change ids since duplicate ids are invalid\\n\\tstockValueTracker.querySelectorAll('p').forEach((e, i) => e.id = `stock-display-${i}`);\\n\\t// Get out output element\\n\\thtmlDisplay = stockValueTracker.querySelector('#stock-display-1');\\n\\t// Display label and default value\\n\\tstockValueTracker.querySelectorAll('p')[0].innerText = 'Stock';\\n\\thtmlDisplay.innerText = '$0.000 ';\\n\\t// Insert our element right after Money\\n\\tcustomElements.parentElement.insertBefore(stockValueTracker, customElements.parentElement.childNodes[2]);\\n\\treturn htmlDisplay;\\n}\",\"filename\":\"/stock-market/autopilot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///f022fa63-1ca2-430e-a18a-6ab2c58ca760\",\"moduleSequenceNumber\":42769},{\"filename\":\"/stock-market/autopilot.js\",\"url\":\"blob:file:///50a8308d-3256-4424-936a-2aea0c98d205\",\"moduleSequenceNumber\":45635}],\"dependents\":[],\"ramUsage\":41.8,\"server\":\"home\",\"moduleSequenceNumber\":45758,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchase4SMarketData\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchase4SMarketDataTixApi\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedVariable\\n\\nimport {disableSleeveAutopilot} from '/sleeve/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst args = ns.flags([\\n\\t\\t['sleeve', undefined],\\n\\t\\t['str', false],\\n\\t\\t['def', false],\\n\\t\\t['dex', false],\\n\\t\\t['agi', false],\\n\\t\\t['gym', 'Powerhouse Gym'],\\n\\t\\t['all', false]\\n\\t]);\\n\\tif (!args.all && args.sleeve === -1) throw new Error(`Need to specify --sleeve number or --all`);\\n\\n\\tlet city;\\n\\tif (args.gym === 'Crush Fitness Gym' || args.gym === 'Snap Fitness Gym') city = 'Aevum';\\n\\telse if (args.gym === 'Iron Gym' || args.gym === 'Powerhouse Gym') city = 'Sector-12';\\n\\telse if (args.gym === 'Millenium Fitness Gym') city = 'Volhaven';\\n\\telse throw new Error(`Invalid gym`);\\n\\n\\tlet stat;\\n\\tif (args.str) stat = 'Strength';\\n\\telse if (args.def) stat = 'Defense';\\n\\telse if (args.dex) stat = 'Dexterity';\\n\\telse if (args.agi) stat = 'Agility';\\n\\telse throw new Error('Invalid stat');\\n\\n\\tif (args.all) {\\n\\t\\tfor (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\n\\t\\t\\tif (city) ns.sleeve.travel(i, city);\\n\\t\\t\\tawait disableSleeveAutopilot(ns, i);\\n\\t\\t\\tns.sleeve.setToGymWorkout(i, args.gym, stat);\\n\\t\\t}\\n\\t} else {\\n\\t\\tawait disableSleeveAutopilot(ns, args.sleeve);\\n\\t\\tns.sleeve.setToGymWorkout(args.sleeve, args.gym, stat);\\n\\t}\\n}\",\"filename\":\"/sleeve/gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///c9c5688b-f3d0-42ad-90ea-7e2018ec34cc\",\"moduleSequenceNumber\":1891},{\"filename\":\"/sleeve/utils.js\",\"url\":\"blob:file:///632339b8-1282-4003-84be-6474a811fa0d\",\"moduleSequenceNumber\":1937},{\"filename\":\"/sleeve/gym.js\",\"url\":\"blob:file:///80c2b1c5-192c-4e7b-9cab-2ca4fd1dc2b4\",\"moduleSequenceNumber\":35769}],\"dependents\":[],\"ramUsage\":13.6,\"server\":\"home\",\"moduleSequenceNumber\":45759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.travel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToGymWorkout\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedVariable\\n\\nimport {disableSleeveAutopilot} from '/sleeve/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst args = ns.flags([\\n\\t\\t['sleeve', undefined],\\n\\t\\t['university', 'ZB Institute of Technology'],\\n\\t\\t['course', 'Leadership'],\\n\\t\\t['all', false]\\n\\t]);\\n\\tif (!args.all && !args.sleeve) throw new Error(`Need to specify --sleeve number or --all`);\\n\\n\\tlet city;\\n\\tif (args.university === 'Summit University') city = 'Aevum';\\n\\telse if (args.university === 'Rothman University') city = 'Sector-12';\\n\\telse if (args.university === 'ZB Institute of Technology') city = 'Volhaven';\\n\\telse throw new Error(`Invalid university`);\\n\\n\\tif (args.all) {\\n\\t\\tfor (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\n\\t\\t\\tif (city) ns.sleeve.travel(i, city);\\n\\t\\t\\tawait disableSleeveAutopilot(ns, i);\\n\\t\\t\\tns.sleeve.setToUniversityCourse(i, args.university, args.course);\\n\\t\\t}\\n\\t} else {\\n\\t\\tawait disableSleeveAutopilot(ns, args.sleeve);\\n\\t\\tns.sleeve.setToUniversityCourse(args.sleeve, args.university, args.course);\\n\\t}\\n}\",\"filename\":\"/sleeve/university.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.6,\"server\":\"home\",\"moduleSequenceNumber\":45760,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.travel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToUniversityCourse\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {disableSleeveAutopilot} from '/sleeve/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst args = ns.flags([\\n\\t\\t['crime', 'Homicide'],\\n\\t\\t['sleeve', undefined],\\n\\t\\t['all', false]\\n\\t]);\\n\\tif (!args.all && !args.sleeve) throw new Error(`Need to specify --sleeve \\\"number\\\" or --all`);\\n\\n\\tif (args.all) {\\n\\t\\tfor (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\n\\t\\t\\tawait disableSleeveAutopilot(ns, i);\\n\\t\\t\\tns.sleeve.setToCommitCrime(i, args.crime);\\n\\t\\t}\\n\\t} else {\\n\\t\\tawait disableSleeveAutopilot(ns, args.sleeve);\\n\\t\\tns.sleeve.setToCommitCrime(args.sleeve, args.crime);\\n\\t}\\n}\",\"filename\":\"/sleeve/crime.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///464888fd-328c-4b11-8856-b84d1bcec5ad\",\"moduleSequenceNumber\":1641},{\"filename\":\"/sleeve/utils.js\",\"url\":\"blob:file:///2ca1437a-65e8-4719-9567-2756af037331\",\"moduleSequenceNumber\":111158},{\"filename\":\"/sleeve/crime.js\",\"url\":\"blob:file:///63f90f92-1eba-46fb-aa30-3ace5808d021\",\"moduleSequenceNumber\":116207}],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"home\",\"moduleSequenceNumber\":45761,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToCommitCrime\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {disableSleeveAutopilot} from '/sleeve/utils.js';\\nimport {getCompanies} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst args = ns.flags([\\n\\t\\t['sleeve', undefined],\\n\\t\\t['company', undefined]\\n\\t]);\\n\\tif (!args.sleeve) throw new Error(`Need to specify --sleeve \\\"number\\\"`);\\n\\tif (!args.company) throw new Error(`Need to specify --company \\\"name\\\"`);\\n\\n\\tconst foundCompany = getCompanies().find(c => c.toLowerCase() === args.company.toLowerCase());\\n\\tif (!foundCompany) {\\n\\t\\tns.tprint(`Could not find ${args.company}`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tawait disableSleeveAutopilot(ns, args.sleeve);\\n\\tns.sleeve.setToCompanyWork(args.sleeve, foundCompany);\\n}\",\"filename\":\"/sleeve/company.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":45762,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.setToCompanyWork\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedVariable\\n\\nimport {disableSleeveAutopilot} from '/sleeve/utils.js';\\nimport {getFactions} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst args = ns.flags([\\n\\t\\t['sleeve', undefined],\\n\\t\\t['faction', undefined],\\n\\t\\t['hacking', false],\\n\\t\\t['field', false],\\n\\t\\t['security', false]\\n\\t]);\\n\\tif (!args.sleeve) throw new Error(`Need to specify --sleeve number`);\\n\\tif (!args.faction) throw new Error(`Need to specify --faction`);\\n\\n\\tlet workType;\\n\\tif (args.hacking) workType = 'Hacking Contracts';\\n\\telse if (args.field) workType = 'Field Work';\\n\\telse if (args.security) workType = 'Security Work';\\n\\telse throw new Error(`Invalid work type`);\\n\\n\\tconst foundFaction = getFactions().find(f => f.toLowerCase() === args.faction.toLowerCase());\\n\\tif (!foundFaction) {\\n\\t\\tns.tprint(`Could not find ${args.faction}`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tawait disableSleeveAutopilot(ns, sleeveNumber);\\n\\tns.sleeve.setToFactionWork(sleeveNumber, foundFaction, workType);\\n}\",\"filename\":\"/sleeve/faction.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///6c04f611-f82d-48c3-adf6-c2a0c3907c0c\",\"moduleSequenceNumber\":57888},{\"filename\":\"/sleeve/faction.js\",\"url\":\"blob:file:///feefc4cf-8146-428d-b756-b172bd42842d\",\"moduleSequenceNumber\":92685}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":45763,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.setToFactionWork\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {disableSleeveAutopilot} from '/sleeve/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst args = ns.flags([\\n\\t\\t['sleeve', undefined],\\n\\t\\t['all', false]\\n\\t]);\\n\\tif (!args.all && !args.sleeve) throw new Error(`Need to specify a sleeve number or --all`);\\n\\n\\tif (args.all) {\\n\\t\\tfor (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\n\\t\\t\\tawait disableSleeveAutopilot(ns, i);\\n\\t\\t\\tns.sleeve.setToShockRecovery(i);\\n\\t\\t}\\n\\t} else {\\n\\t\\tawait disableSleeveAutopilot(ns, args.sleeve);\\n\\t\\tns.sleeve.setToShockRecovery(args.sleeve);\\n\\t}\\n}\",\"filename\":\"/sleeve/shock-recovery.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///b405339f-7528-4318-9f0a-ae32d316c4e2\",\"moduleSequenceNumber\":1641},{\"filename\":\"/sleeve/utils.js\",\"url\":\"blob:file:///d469d7fe-b6fd-4baa-91e9-4e5be6897de7\",\"moduleSequenceNumber\":111158},{\"filename\":\"/sleeve/shock-recovery.js\",\"url\":\"blob:file:///547333f6-71c3-472b-af59-d08de6194f79\",\"moduleSequenceNumber\":129656}],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"home\",\"moduleSequenceNumber\":45764,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToShockRecovery\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {disableSleeveAutopilot} from '/sleeve/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst args = ns.flags([\\n\\t\\t['sleeve', -1],\\n\\t\\t['all', false]\\n\\t]);\\n\\tif (!args.all && !args.sleeve) throw new Error(`Need to specify a sleeve number or --all`);\\n\\n\\tif (args.all) {\\n\\t\\tfor (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\n\\t\\t\\tawait disableSleeveAutopilot(ns, i);\\n\\t\\t\\tns.sleeve.setToSynchronize(i);\\n\\t\\t}\\n\\t} else {\\n\\t\\tawait disableSleeveAutopilot(ns, args.sleeve);\\n\\t\\tns.sleeve.setToSynchronize(args.sleeve);\\n\\t}\\n}\",\"filename\":\"/sleeve/synchronize.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"home\",\"moduleSequenceNumber\":45765,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToSynchronize\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @returns {Promise<void>}\\n */\\nexport async function main() {\\n\\tconst doc = eval('document');\\n\\tdoc.getElementById('unclickable').style = 'display: block; position: absolute; top: 50%; left: 50%; width: 100px; height: 100px; z-index: 10000; background: red;';\\n\\tdoc.getElementById('unclickable').parentNode.addEventListener('click', () => {\\n\\t\\tdoc.getElementById('unclickable').style = 'display: none; visibility: hidden;';\\n\\t}, true);\\n}\",\"filename\":\"/exploits/unclickable.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":45766,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedFunction\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\teval('ns.bypass(document)');\\n}\",\"filename\":\"/exploits/bypass.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":45767,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @returns {Promise<void>}\\n */\\nexport async function main() {\\n\\tNumber.prototype.toExponential = () => null;\\n}\",\"filename\":\"/exploits/prototype-tampering.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":45768,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @returns {Promise<void>}\\n */\\nexport async function main() {\\n\\tconst win = eval('window');\\n\\twin.performance.now = () => 0;\\n}\",\"filename\":\"/exploits/time-compression.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":45769,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\t// noinspection JSUnresolvedFunction\\n\\tns.exploit();\\n}\",\"filename\":\"/exploits/undocumented-function-call.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":45770,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSDeprecatedSymbols,JSUnresolvedFunction\\n\\n/**\\n *\\n * @returns {Promise<void>}\\n */\\nexport async function main() {\\n\\tlet saveStr = decodeURIComponent(escape(atob(await load())));\\n\\n\\tsaveStr = saveStr.replace('\\\\\\\\\\\"exploits\\\\\\\\\\\":[', '\\\\\\\\\\\"exploits\\\\\\\\\\\":[\\\\\\\\\\\"EditSaveFile\\\\\\\\\\\",');\\n\\n\\tsaveStr = btoa(unescape(encodeURIComponent(saveStr)));\\n\\tawait save(saveStr);\\n}\\n\\n/**\\n *\\n * @returns {Promise<string>}\\n */\\nfunction getDB() {\\n\\treturn new Promise((resolve, reject) => {\\n\\t\\tconst win = eval('window');\\n\\t\\tif (!win.indexedDB) reject(`Indexed DB does not exists`);\\n\\t\\tconst indexedDbRequest = win.indexedDB.open('bitburnerSave', 1);\\n\\t\\tindexedDbRequest.onupgradeneeded = () => indexedDbRequest.result.createObjectStore('savestring');\\n\\t\\tindexedDbRequest.onerror = ev => reject(`Failed to get IDB ${ev}`);\\n\\t\\tindexedDbRequest.onsuccess = () => {\\n\\t\\t\\tconst db = indexedDbRequest.result;\\n\\t\\t\\tif (!db) {\\n\\t\\t\\t\\treject(`database loading result was undefined`);\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tresolve(db.transaction(['savestring'], 'readwrite').objectStore('savestring'));\\n\\t\\t};\\n\\t});\\n}\\n\\n/**\\n *\\n * @returns {Promise<string>}\\n */\\nfunction load() {\\n\\treturn new Promise((resolve, reject) => {\\n\\t\\tgetDB().then(db => {\\n\\t\\t\\treturn new Promise((resolve, reject) => {\\n\\t\\t\\t\\tconst request = db.get('save');\\n\\t\\t\\t\\trequest.onerror = ev => reject(`Error in Database request to get savestring: ${ev}`);\\n\\t\\t\\t\\trequest.onsuccess = () => resolve(request.result);\\n\\t\\t\\t}).then(saveString => resolve(saveString));\\n\\t\\t}).catch(r => reject(r));\\n\\t});\\n}\\n\\n/**\\n *\\n * @param {string} saveString\\n * @returns {Promise<string>}\\n */\\nfunction save(saveString) {\\n\\treturn getDB().then((db) => {\\n\\t\\treturn new Promise((resolve, reject) => {\\n\\t\\t\\tconst request = db.put(saveString, 'save');\\n\\t\\t\\trequest.onerror = e => reject(`Error saving game to IndexedDB: ${e}`);\\n\\t\\t\\trequest.onsuccess = () => resolve();\\n\\t\\t});\\n\\t});\\n}\",\"filename\":\"/exploits/edit-save-file.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":45771,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedFunction,JSUnresolvedVariable\\n\\n/**\\n *\\n * @returns {Promise<void>}\\n */\\nexport async function main() {\\n\\tlet boxes = Array.from(eval('document').querySelectorAll('[class*=MuiBox-root]'));\\n\\tlet box = boxes.find(x => hasPlayer(x));\\n\\n\\tif (box) {\\n\\t\\tlet props = getProps(box);\\n\\t\\tprops.router.toLocation({name: 'Noodle Bar', types: [4]});\\n\\t\\t[...eval('document').getElementsByTagName('*')].find(e => e.innerText === 'Eat noodles').click();\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {Object} obj\\n * @returns {Object}\\n */\\nfunction getProps(obj) {\\n\\treturn Object.entries(obj).find(entry => entry[0].startsWith('__reactProps'))[1].children.props;\\n}\\n\\n/**\\n *\\n * @param {Object} obj\\n * @returns {boolean}\\n */\\nfunction hasPlayer(obj) {\\n\\ttry {\\n\\t\\treturn !!getProps(obj).router;\\n\\t} catch (err) {\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/exploits/n00dles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/exploits/n00dles.js\",\"url\":\"blob:file:///98bcd8f4-0820-4685-91dd-428d9d1e8297\",\"moduleSequenceNumber\":79650}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":45772,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @returns {Promise<void>}\\n */\\nexport async function main() {\\n\\t// TODO: reality alteration exploit script\\n}\",\"filename\":\"/exploits/reality-alteration.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":45773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getPortNumbers, modifyFile} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} sleeveNumber\\n */\\nexport async function enableSleeveAutopilot(ns, sleeveNumber) {\\n\\tawait modifyFile(ns, getPortNumbers().sleeve, {[sleeveNumber]: true});\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} sleeveNumber\\n */\\nexport async function disableSleeveAutopilot(ns, sleeveNumber) {\\n\\tawait modifyFile(ns, getPortNumbers().sleeve, {[sleeveNumber]: false});\\n}\",\"filename\":\"/sleeve/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":45774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {hackServer, routeFinder} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst server = ns.args[0];\\n\\tconst route = routeFinder(ns, server);\\n\\tif (route && hackServer(ns, server)) {\\n\\t\\tfor (let serv of route) {\\n\\t\\t\\tns.connect(serv);\\n\\t\\t}\\n\\t\\tawait ns.installBackdoor();\\n\\t\\tfor (let serv of route.reverse()) {\\n\\t\\t\\tns.connect(serv);\\n\\t\\t}\\n\\t}\\n}\\n\\n// noinspection JSUnusedGlobalSymbols\\n/**\\n *\\n * @param {*} data\\n * @returns {string[]}\\n */\\nexport function autocomplete(data) {\\n\\t// noinspection JSUnresolvedVariable\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///957458f1-268b-47b2-a790-7779e7a33594\",\"moduleSequenceNumber\":42769},{\"filename\":\"/hacking/backdoor.js\",\"url\":\"blob:file:///3704d74a-a61c-4d0e-b05a-3716853c4808\",\"moduleSequenceNumber\":45659}],\"dependents\":[],\"ramUsage\":6.55,\"server\":\"home\",\"moduleSequenceNumber\":45775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tfor (let [key, val] of Object.entries(ns.getPlayer())) {\\n\\t\\tif (key === 'jobs') {\\n\\t\\t\\tns.tprint('jobs:');\\n\\t\\t\\tfor (let [i, j] of Object.entries(val)) {\\n\\t\\t\\t\\tns.tprintf(`\\\\t${i}: ${j}`);\\n\\t\\t\\t}\\n\\t\\t} else ns.tprint(`${key}: ${val}`);\\n\\t}\\n}\",\"filename\":\"/tools/player.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/tools/player.js\",\"url\":\"blob:file:///cd66774a-b1ad-4e0a-ac15-83f93bb8434f\",\"moduleSequenceNumber\":2504041}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":45776,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getServers, printBoth} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tcontractor(ns);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {boolean}\\n */\\nexport function contractor(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tconst files = ns.ls(server, '.cct');\\n\\t\\tfor (let file of files) {\\n\\t\\t\\tconst contract = ns.codingcontract.getContractType(file, server);\\n\\t\\t\\tconst data = ns.codingcontract.getData(file, server);\\n\\t\\t\\tlet solution;\\n\\t\\t\\tswitch (contract) {\\n\\t\\t\\t\\tcase 'Find Largest Prime Factor':\\n\\t\\t\\t\\t\\tsolution = largestPrimeFactor(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\t\\t\\tsolution = subarrayMaxSum(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Spiralize Matrix':\\n\\t\\t\\t\\t\\tsolution = spiralizeMatrix(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Minimum Path Sum in a Triangle':\\n\\t\\t\\t\\t\\tsolution = minPathSum(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\t\\t\\tsolution = uniquePathsI(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\t\\t\\tsolution = uniquePathsII(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Algorithmic Stock Trader I':\\n\\t\\t\\t\\t\\tsolution = stockTrader(1, data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\t\\t\\tsolution = stockTrader(Math.floor(data.length / 2), data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Algorithmic Stock Trader III':\\n\\t\\t\\t\\t\\tsolution = stockTrader(2, data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Algorithmic Stock Trader IV':\\n\\t\\t\\t\\t\\tsolution = stockTrader(...data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Generate IP Addresses':\\n\\t\\t\\t\\t\\tsolution = genIPAddresses(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\t\\t\\tsolution = mergeOverlappingIntervals(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Array Jumping Game':\\n\\t\\t\\t\\t\\tsolution = arrayJumpingGame(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\t\\t\\tsolution = totalWaysToSum(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Find All Valid Math Expressions':\\n\\t\\t\\t\\t\\tsolution = validMathExpressions(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Sanitize Parentheses in Expression':\\n\\t\\t\\t\\t\\tsolution = sanitizeParentheses(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\tprintBoth(ns, `Found ${file} on ${server} of type: ${contract}.`)\\n\\t\\t\\t}\\n\\t\\t\\tconst result = ns.codingcontract.attempt(solution, file, server, {returnReward: true});\\n\\t\\t\\tif (result) {\\n\\t\\t\\t\\tprintBoth(ns, `Solved ${file} on ${server} of type: ${contract}. ${result}.`);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tprintBoth(ns, `Could not solve ${file} on ${server} of type: ${contract}.`);\\n\\t\\t\\t\\tprintBoth(ns, `Disabling contractor.`);\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn true;\\n}\\n\\n/**\\n *\\n * @param {number} n\\n * @returns {number}\\n */\\nfunction largestPrimeFactor(n) {\\n\\tlet maxPrime = 0;\\n\\twhile (n % 2 === 0) {\\n\\t\\tn = Math.floor(n / 2);\\n\\t\\tmaxPrime = 2;\\n\\t}\\n\\tfor (let i = 3; i <= Math.floor(Math.sqrt(n)) + 1; i = i + 2) {\\n\\t\\twhile (n % i === 0) {\\n\\t\\t\\tn = Math.floor(n / i);\\n\\t\\t\\tmaxPrime = i;\\n\\t\\t}\\n\\t}\\n\\tif (n > 2) maxPrime = n;\\n\\n\\treturn maxPrime;\\n}\\n\\n/**\\n *\\n * @param {number[]} array\\n * @returns {number}\\n */\\nfunction subarrayMaxSum(array) {\\n\\tconst sumReduce = (a, b) => a + b;\\n\\tlet maxSum = -Infinity;\\n\\tlet sum;\\n\\tfor (let i = 0; i < array.length; i++) {\\n\\t\\tfor (let j = i; j < array.length; j++) {\\n\\t\\t\\tsum = array.slice(i, j + 1).reduce(sumReduce);\\n\\t\\t\\tif (sum > maxSum) maxSum = sum;\\n\\t\\t}\\n\\t}\\n\\treturn maxSum;\\n}\\n\\n/**\\n *\\n * @param {number[][]} matrix\\n * @returns {number[][]}\\n */\\nfunction spiralizeMatrix(matrix) {\\n\\tconst rows = matrix.length;\\n\\tconst cols = matrix[0].length;\\n\\n\\tlet maxrow = rows - 1;\\n\\tlet maxcol = cols - 1;\\n\\tlet minrow = 0;\\n\\tlet mincol = 0;\\n\\n\\tlet row = 0;\\n\\tlet col = 0;\\n\\n\\tlet list = [];\\n\\twhile (list.length < rows * cols) {\\n\\t\\tif (maxrow >= minrow) {\\n\\t\\t\\tfor (col; col <= maxcol; col++) {\\n\\t\\t\\t\\tlist.push(matrix[row][col]);\\n\\t\\t\\t}\\n\\t\\t\\tminrow++;\\n\\t\\t\\trow++;\\n\\t\\t\\tcol--;\\n\\t\\t}\\n\\t\\tif (maxcol >= mincol) {\\n\\t\\t\\tfor (row; row <= maxrow; row++) {\\n\\t\\t\\t\\tlist.push(matrix[row][col]);\\n\\t\\t\\t}\\n\\t\\t\\tmaxcol--;\\n\\t\\t\\tcol--;\\n\\t\\t\\trow--;\\n\\t\\t}\\n\\t\\tif (minrow <= maxrow) {\\n\\t\\t\\tfor (col; col >= mincol; col--) {\\n\\t\\t\\t\\tlist.push(matrix[row][col]);\\n\\t\\t\\t}\\n\\t\\t\\tmaxrow--;\\n\\t\\t\\tcol++;\\n\\t\\t\\trow--;\\n\\t\\t}\\n\\t\\tif (mincol <= maxcol) {\\n\\t\\t\\tfor (row; row >= minrow; row--) {\\n\\t\\t\\t\\tlist.push(matrix[row][col]);\\n\\t\\t\\t}\\n\\t\\t\\tmincol++;\\n\\t\\t\\trow++;\\n\\t\\t\\tcol++;\\n\\t\\t}\\n\\t}\\n\\treturn list;\\n}\\n\\n/**\\n *\\n * @param {number[][]} data\\n * @returns {number}\\n */\\nfunction minPathSum(data) {\\n\\tconst totalPaths = Math.pow(2, data.length - 1);\\n\\tlet minSum = Infinity;\\n\\tfor (let i = 0; i < totalPaths; i++) {\\n\\t\\tlet bin = i.toString(2);\\n\\t\\twhile (bin.length < data.length - 1) {\\n\\t\\t\\tbin = '0' + bin;\\n\\t\\t}\\n\\n\\t\\tlet sum = data[0][0];\\n\\t\\tlet k = 0;\\n\\t\\tfor (let j = 1; j < data.length; j++) {\\n\\t\\t\\tlet index = parseInt(bin.charAt(j - 1));\\n\\t\\t\\tk += index;\\n\\t\\t\\tsum += data[j][k];\\n\\t\\t}\\n\\n\\t\\tif (sum < minSum) minSum = sum;\\n\\t}\\n\\treturn minSum;\\n}\\n\\n/**\\n *\\n * @param {[number, number]} data\\n * @returns {number}\\n */\\nfunction uniquePathsI(data) {\\n\\tconst [m, n] = data;\\n\\n\\tconst f = [];\\n\\tconst x = factorial(f, m + n - 2);\\n\\tconst y = factorial(f, m - 1);\\n\\tconst z = factorial(f, n - 1);\\n\\n\\treturn x / (y * z);\\n}\\n\\nfunction factorial(f, n) {\\n\\tif (n === 0 || n === 1) return 1;\\n\\tif (f[n] > 0) return f[n];\\n\\treturn f[n] = n * factorial(f, n - 1);\\n}\\n\\n/**\\n *\\n * @param {number[][]} grid\\n * @returns {number}\\n */\\nfunction uniquePathsII(grid) {\\n\\tconst gridSum = [];\\n\\tfor (let i of grid) {\\n\\t\\tgridSum.push(i.slice());\\n\\t}\\n\\tfor (let i = 0; i < gridSum.length; i++) {\\n\\t\\tfor (let j = 0; j < gridSum[0].length; j++) {\\n\\t\\t\\tif (gridSum[i][j] === 1) {\\n\\t\\t\\t\\tgridSum[i][j] = 0;\\n\\t\\t\\t} else if (i === 0 && j === 0) {\\n\\t\\t\\t\\tgridSum[0][0] = 1;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tgridSum[i][j] = (i > 0 ? gridSum[i - 1][j] : 0) + (j > 0 ? gridSum[i][j - 1] : 0);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn gridSum[gridSum.length - 1][gridSum[0].length - 1];\\n}\\n\\n/**\\n *\\n * @param {number} maxTrades\\n * @param {number[]} stockPrices\\n * @returns {number}\\n */\\nfunction stockTrader(maxTrades, stockPrices) {\\n\\tlet tempStr = '[0';\\n\\tfor (let i = 0; i < stockPrices.length - 1; i++) {\\n\\t\\ttempStr += ',0';\\n\\t}\\n\\ttempStr += ']';\\n\\tlet tempArr = '[' + tempStr;\\n\\tfor (let i = 0; i < maxTrades - 1; i++) {\\n\\t\\ttempArr += ',' + tempStr;\\n\\t}\\n\\ttempArr += ']';\\n\\n\\tconst highestProfit = JSON.parse(tempArr);\\n\\n\\tfor (let i = 0; i < maxTrades; i++) {\\n\\t\\tfor (let j = 0; j < stockPrices.length - 1; j++) {\\n\\t\\t\\tfor (let k = j + 1; k < stockPrices.length; k++) {\\n\\t\\t\\t\\tif (i > 0 && j > 0 && k > 0) {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t} else if (i > 0 && j > 0) {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t} else if (i > 0 && k > 0) {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t} else if (j > 0 && k > 0) {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn highestProfit[maxTrades - 1][stockPrices.length - 1];\\n}\\n\\n/**\\n *\\n * @param {string} str\\n * @returns {string[]}\\n */\\nfunction genIPAddresses(str) {\\n\\tconst ips = [];\\n\\tfor (let i = 1; i < str.length - 2; i++) {\\n\\t\\tfor (let j = i + 1; j < str.length - 1; j++) {\\n\\t\\t\\tfor (let k = j + 1; k < str.length; k++) {\\n\\t\\t\\t\\tconst ip = [\\n\\t\\t\\t\\t\\tstr.slice(0, i),\\n\\t\\t\\t\\t\\tstr.slice(i, j),\\n\\t\\t\\t\\t\\tstr.slice(j, k),\\n\\t\\t\\t\\t\\tstr.slice(k)\\n\\t\\t\\t\\t];\\n\\n\\t\\t\\t\\tlet isValid = true;\\n\\t\\t\\t\\tip.forEach(seg => {\\n\\t\\t\\t\\t\\tisValid = isValid && isValidIpSegment(seg);\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\tif (isValid) ips.push(ip.join('.'));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn ips;\\n}\\n\\n/**\\n *\\n * @param {string[]} segment\\n * @returns {boolean}\\n */\\nfunction isValidIpSegment(segment) {\\n\\treturn !((segment[0] === '0' && segment !== '0') || segment > 255);\\n}\\n\\n/**\\n *\\n * @param {number[][]} array\\n * @returns {number[][]}\\n */\\nfunction mergeOverlappingIntervals(array) {\\n\\tarray.sort((a, b) => a[0] - b[0]);\\n\\n\\tconst intervals = [array[0].slice()];\\n\\tfor (let interval of array) {\\n\\t\\tlet [x1, y1] = interval;\\n\\t\\tlet [, y2] = intervals[intervals.length - 1];\\n\\n\\t\\tif (y2 >= x1) intervals[intervals.length - 1][1] = Math.max(y1, y2);\\n\\t\\telse intervals.push(interval.slice());\\n\\t}\\n\\treturn intervals;\\n}\\n\\n/**\\n *\\n * @param {number[]} array\\n * @returns {number}\\n */\\nfunction arrayJumpingGame(array) {\\n\\tconst reachable = new Array(array.length).fill(0);\\n\\treachable[0] = 1;\\n\\tfor (let i = 0; i < array.length; i++) {\\n\\t\\tlet num = array[i];\\n\\t\\tfor (let j = 1; j <= num; j++) {\\n\\t\\t\\tif (i + j === array.length) break;\\n\\t\\t\\treachable[i + j] = 1;\\n\\t\\t}\\n\\t}\\n\\treturn reachable.includes(0) ? 0 : 1;\\n}\\n\\n/**\\n *\\n * @param {number} n\\n * @returns {number}\\n */\\nfunction totalWaysToSum(n) {\\n\\tconst table = [1];\\n\\tfor (let i = 0; i < n; i++) {\\n\\t\\ttable.push(0);\\n\\t}\\n\\tfor (let i = 1; i < n; i++) {\\n\\t\\tfor (let j = i; j <= n; j++) {\\n\\t\\t\\ttable[j] += table[j - i];\\n\\t\\t}\\n\\t}\\n\\treturn table[n];\\n}\\n\\n/**\\n *\\n * @param {[string, number]} data\\n * @returns {string[]}\\n */\\nfunction validMathExpressions(data) {\\n\\tconst [digits, target] = data;\\n\\n\\tconst result = [];\\n\\tif (digits == null || digits.length === 0) return result;\\n\\trecursiveExpression(result, '', digits, target, 0, 0, 0);\\n\\n\\treturn result;\\n}\\n\\n/**\\n *\\n * @param {string[]} res\\n * @param {string} path\\n * @param {string} digits\\n * @param {number} target\\n * @param {number} pos\\n * @param {number} evaluated\\n * @param {number} multed\\n */\\nfunction recursiveExpression(res, path, digits, target, pos, evaluated, multed) {\\n\\tif (pos === digits.length) {\\n\\t\\tif (target === evaluated) res.push(path);\\n\\t\\treturn;\\n\\t}\\n\\tfor (let i = pos; i < digits.length; i++) {\\n\\t\\tif (i !== pos && digits[pos] === '0') break;\\n\\t\\tconst cur = parseInt(digits.substring(pos, i + 1));\\n\\t\\tif (pos === 0) recursiveExpression(res, path + cur, digits, target, i + 1, cur, cur);\\n\\t\\telse {\\n\\t\\t\\trecursiveExpression(res, path + '+' + cur, digits, target, i + 1, evaluated + cur, cur);\\n\\t\\t\\trecursiveExpression(res, path + '-' + cur, digits, target, i + 1, evaluated - cur, -cur);\\n\\t\\t\\trecursiveExpression(res, path + '*' + cur, digits, target, i + 1, evaluated - multed + multed * cur, multed * cur);\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {string} data\\n * @returns {string[]}\\n */\\nfunction sanitizeParentheses(data) {\\n\\tconst valid = new Set('');\\n\\tlet min = data.length;\\n\\tfor (let i = 0; i < 2 ** data.length; i++) {\\n\\t\\tlet j = i.toString(2);\\n\\t\\twhile (j.length < data.length) {\\n\\t\\t\\tj = '0' + j;\\n\\t\\t}\\n\\n\\t\\tlet str = '';\\n\\t\\tlet deletions = 0;\\n\\t\\tfor (let k = 0; k < j.length; k++) {\\n\\t\\t\\tif (j[k] === '1' || (data[k] !== '(' && data[k] !== ')')) str += data[k];\\n\\t\\t\\telse deletions++;\\n\\t\\t}\\n\\t\\tif (deletions > min) continue;\\n\\n\\t\\tlet count = 0;\\n\\t\\tlet neg = false;\\n\\t\\tfor (let k of str) {\\n\\t\\t\\tif (k === '(') count++;\\n\\t\\t\\telse if (k === ')') count--;\\n\\t\\t\\tif (count < 0) neg = true;\\n\\t\\t}\\n\\t\\tif (count > 0 || neg) continue;\\n\\n\\t\\tif (deletions === min) valid.add(str);\\n\\t\\telse if (deletions < min) {\\n\\t\\t\\tmin = deletions;\\n\\t\\t\\tvalid.clear();\\n\\t\\t\\tvalid.add(str);\\n\\t\\t}\\n\\t}\\n\\treturn [...valid];\\n}\",\"filename\":\"/contracts/contractor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///ceda4e1f-b693-4555-b4e1-812c840b5b30\",\"moduleSequenceNumber\":115459},{\"filename\":\"/contracts/contractor.js\",\"url\":\"blob:file:///e51a268d-b6df-4589-892a-039d9c3d4db8\",\"moduleSequenceNumber\":215614}],\"dependents\":[],\"ramUsage\":22,\"server\":\"home\",\"moduleSequenceNumber\":45777,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedVariable\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tif (!ns.getPlayer().bitNodeN === 9 && !ns.getOwnedSourceFiles().some(s => s.n === 9)) throw new Error(`Script requires Hacknet servers to be unlocked`);\\n\\tconst args = ns.flags([\\n\\t\\t['l', false],\\n\\t\\t['liquidate', false],\\n\\t\\t['c', false],\\n\\t\\t['continuous', false]\\n\\t]);\\n\\tconst upgrade = args._[0] ?? 'Sell for Money';\\n\\tconst target = args._[1] ?? undefined;\\n\\tconst liquidate = args.l || args.liquidate;\\n\\tconst continuous = args.c || args.continuous;\\n\\twhile (true) {\\n\\t\\tawait spendHashes(ns, upgrade, target, liquidate);\\n\\t\\tif (!continuous) break;\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} upgrade\\n * @param {string} target\\n * @param {boolean} liquidate\\n * @returns {Promise<void>}\\n */\\nexport async function spendHashes(ns, upgrade, target = undefined, liquidate = false) {\\n\\tconst hn = ns.hacknet;\\n\\tconst capacity = hn.hashCapacity();\\n\\tconst globalProduction = Array.from({length: hn.numNodes()}, (_, i) => hn.getNodeStats(i)).reduce((total, node) => total + node.production, 0);\\n\\twhile (hn.numHashes() > (liquidate ? hn.hashCost(upgrade) : capacity - 2 * globalProduction)) {\\n\\t\\ttarget ? hn.spendHashes(upgrade, target) : hn.spendHashes(upgrade);\\n\\t\\tawait ns.sleep(1);\\n\\t}\\n}\",\"filename\":\"/hacknet/hash-spender.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/hacknet/hash-spender.js\",\"url\":\"blob:file:///aa0fe548-306c-431c-8c7e-ec2badc5749c\",\"moduleSequenceNumber\":6515}],\"dependents\":[],\"ramUsage\":11.1,\"server\":\"home\",\"moduleSequenceNumber\":45778,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @param {number} fragmentID\\n * @returns {Fragment}\\n */\\nexport function getFragment(ns, fragmentID) {\\n\\treturn ns.stanek.fragmentDefinitions().find(f => f.id === fragmentID);\\n}\",\"filename\":\"/stanek/utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":45779,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getFragment} from '/stanek/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.tprintf(JSON.stringify(ns.stanek.activeFragments().map(f => ({\\n\\t\\trootX: f.x,\\n\\t\\trootY: f.y,\\n\\t\\trotation: f.rotation,\\n\\t\\tfragmentID: f.id,\\n\\t\\ttype: getFragment(ns, f.id).type\\n\\t}))));\\n}\",\"filename\":\"/stanek/save.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/stanek/utils.js\",\"url\":\"blob:file:///cc3e45aa-0b05-415a-950e-4eac4a33a84c\",\"moduleSequenceNumber\":1827},{\"filename\":\"/stanek/save.js\",\"url\":\"blob:file:///219ae0d5-45d8-4b5c-bdd8-5c24dae1a68c\",\"moduleSequenceNumber\":17588}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":45780,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.activeFragments\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getFragment} from '/stanek/utils.js';\\nimport {getAccessibleServers, getManagerScripts, getPortNumbers, getScripts, modifyFile, readFromFile} from '/utils.js';\\n\\n// TODO: fix bug\\n// RUNTIME ERROR\\n// /stanek/controller.js@home\\n//\\n// reservedRam is not defined\\n// stack:\\n// \\tReferenceError: reservedRam is not defined\\n// at Module.main (blob:file:///185aa84d-ac68-4ba7-b686-fc726dac5ffa:41:65)\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst st = ns.stanek;\\n\\tconst portNumbers = getPortNumbers();\\n\\tconst stanekPortNumber = portNumbers.stanek;\\n\\tconst reservedRamPortNumber = portNumbers.reservedRam;\\n\\tlet host, threads = 0, ram = 0;\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\tns.clearLog();\\n\\t\\t// Get Stanek data\\n\\t\\tconst data = readFromFile(ns, stanekPortNumber);\\n\\t\\t// Get best host and the max RAM we can reserve for charging\\n\\t\\tconst [bestHost, maxThreads, maxRam] = getBestHost(ns);\\n\\t\\tif (maxThreads > threads) {\\n\\t\\t\\tns.stanek.clear(); // Reset charges\\n\\t\\t\\thost = bestHost;\\n\\t\\t\\tthreads = maxThreads;\\n\\t\\t\\tram = maxRam;\\n\\t\\t}\\n\\t\\t// Set up pattern\\n\\t\\tsetupPattern(ns, getPatterns(st.width(), st.height())[data.pattern]);\\n\\t\\t// Get chargeable fragment info\\n\\t\\tconst fragments = st.activeFragments().filter(f => f.numCharge < data.maxCharges);\\n\\t\\tif (fragments.length === 0) {\\n\\t\\t\\tns.print(`INFO: All fragments are fully charged`);\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\t// Reserve RAM on host for charging\\n\\t\\tawait modifyFile(ns, reservedRamPortNumber, {[host]: ram});\\n\\t\\t// Wait for RAM to free up\\n\\t\\twhile (ns.getServerMaxRam(host) - ns.getServerUsedRam(host) < ram) {\\n\\t\\t\\tns.clearLog();\\n\\t\\t\\tns.print(`INFO: Waiting for RAM to free up on ${host}`);\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t\\t// Charge Stanek\\n\\t\\tawait charger(ns, host);\\n\\t\\t// Remove reserved RAM on host\\n\\t\\tconst currentReservedRam = readFromFile(ns, reservedRamPortNumber)[host] ?? 0;\\n\\t\\tawait modifyFile(ns, reservedRamPortNumber, {[host]: currentReservedRam - ram});\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {[string, number, number]}\\n */\\nfunction getBestHost(ns) {\\n\\tconst scripts = getScripts();\\n\\tconst managerScripts = getManagerScripts();\\n\\tconst portNumber = getPortNumbers().reservedRam;\\n\\tconst chargeRam = ns.getScriptRam(scripts.charge);\\n\\tlet bestHost, maxThreads = 0, maxRam = 0;\\n\\tfor (const host of getAccessibleServers(ns)) {\\n\\t\\tlet managerScriptsRam = 0;\\n\\t\\tmanagerScripts.filter(s => ns.scriptRunning(s, host)).forEach(s => managerScriptsRam += ns.getScriptRam(s, host));\\n\\t\\tconst maxRamAvailable = ns.getServerMaxRam(host) - managerScriptsRam - (readFromFile(ns, portNumber)[host] ?? 0);\\n\\t\\tif (maxRamAvailable > maxRam) {\\n\\t\\t\\tbestHost = host;\\n\\t\\t\\tmaxThreads = Math.floor(maxRamAvailable / chargeRam);\\n\\t\\t\\tmaxRam = maxRamAvailable;\\n\\t\\t}\\n\\t}\\n\\treturn [bestHost, maxThreads, maxRam];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nasync function charger(ns, host) {\\n\\tconst st = ns.stanek;\\n\\tconst scripts = getScripts();\\n\\tconst stanekPortNumber = getPortNumbers().stanek;\\n\\t// Charge fragments\\n\\twhile (true) {\\n\\t\\tns.clearLog();\\n\\t\\t// Get data\\n\\t\\tconst data = readFromFile(ns, stanekPortNumber);\\n\\t\\t// Set up pattern\\n\\t\\tsetupPattern(ns, getPatterns(st.width(), st.height())[data.pattern]);\\n\\t\\t// Get chargeable fragments\\n\\t\\tconst fragments = st.activeFragments().filter(f => f.numCharge < data.maxCharges);\\n\\t\\tif (fragments.length === 0) return; // All fragments charged to full\\n\\t\\t// Charge each fragment one at a time\\n\\t\\tfor (const fragment of fragments) {\\n\\t\\t\\tstatusUpdate(ns, fragments, data);\\n\\t\\t\\tlet availableRam = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\n\\t\\t\\tconst threads = Math.floor(availableRam / ns.getScriptRam(scripts.charge));\\n\\t\\t\\t// Only charge if we will not be bringing down the average\\n\\t\\t\\tif (threads < fragment.avgCharge * 0.99) {\\n\\t\\t\\t\\tns.print(`WARNING: The current average charge of fragment ${fragment.id} is ${ns.nFormat(fragment.avgCharge, '0.000a')}, ` +\\n\\t\\t\\t\\t\\t`indicating that it has been charged while there was ${ns.nFormat(2 * fragment.avgCharge * 1000 ** 3, '0.00b')} or more free RAM on home, ` +\\n\\t\\t\\t\\t\\t`but currently there is only ${ns.nFormat(availableRam * 1000 ** 3, '0.00b')} available, which would reduce the average charge and lower your stats. ` +\\n\\t\\t\\t\\t\\t`This update will be skipped, and you should free up RAM on home to resume charging.`);\\n\\t\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tconst pid = ns.exec(scripts.charge, host, threads, fragment.x, fragment.y);\\n\\t\\t\\twhile (ns.isRunning(pid, host)) await ns.sleep(100);\\n\\t\\t}\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {Fragment[]} fragments\\n * @param {Object} data\\n */\\nfunction statusUpdate(ns, fragments, data) {\\n\\tlet status = `Charging ${fragments.length} fragments to ${data.maxCharges}\\\\n`;\\n\\tfor (const fragment of fragments) {\\n\\t\\tstatus += `Fragment ${String(fragment.id).padStart(2)} at [${fragment.x}, ${fragment.y}], ` +\\n\\t\\t\\t`charge num: ${fragment.numCharge}, avg: ${ns.nFormat(fragment.avgCharge, '0.000a')}\\\\n`;\\n\\t}\\n\\tns.print(status);\\n}\\n\\n/**\\n *\\n * @param {number} width\\n * @param {number} height\\n * @returns {Object<Object<number, number, number, number, number>[]>}\\n */\\nfunction getPatterns(width, height) {\\n\\tconst patterns = {};\\n\\tswitch (true) { // Sorted in descending order of size\\n\\t\\tcase (width >= 6 && height >= 5) :\\n\\t\\t\\tpatterns.starter = [\\n\\t\\t\\t\\t{rootX: 0, rootY: 0, rotation: 0, fragmentID: 20, type: 12},\\n\\t\\t\\t\\t{rootX: 4, rootY: 0, rotation: 0, fragmentID: 21, type: 13},\\n\\t\\t\\t\\t{rootX: 3, rootY: 3, rotation: 0, fragmentID: 12, type: 8},\\n\\t\\t\\t\\t{rootX: 0, rootY: 3, rotation: 0, fragmentID: 14, type: 9},\\n\\t\\t\\t\\t{rootX: 3, rootY: 2, rotation: 0, fragmentID: 10, type: 7},\\n\\t\\t\\t\\t{rootX: 0, rootY: 2, rotation: 0, fragmentID: 16, type: 10},\\n\\t\\t\\t\\t{rootX: 0, rootY: 1, rotation: 0, fragmentID: 101, type: 18}\\n\\t\\t\\t];\\n\\t\\t\\tpatterns.hack = [\\n\\t\\t\\t\\t{rootX: 0, rootY: 0, rotation: 1, fragmentID: 6, type: 4},\\n\\t\\t\\t\\t{rootX: 4, rootY: 0, rotation: 1, fragmentID: 5, type: 3},\\n\\t\\t\\t\\t{rootX: 2, rootY: 0, rotation: 0, fragmentID: 0, type: 6},\\n\\t\\t\\t\\t{rootX: 1, rootY: 2, rotation: 0, fragmentID: 102, type: 18},\\n\\t\\t\\t\\t{rootX: 3, rootY: 3, rotation: 0, fragmentID: 1, type: 6},\\n\\t\\t\\t\\t{rootX: 0, rootY: 4, rotation: 0, fragmentID: 20, type: 12},\\n\\t\\t\\t\\t{rootX: 1, rootY: 0, rotation: 1, fragmentID: 7, type: 5}\\n\\t\\t\\t];\\n\\t\\t\\tpatterns.bladeburner = [\\n\\t\\t\\t\\t{rootX: 3, rootY: 0, rotation: 0, fragmentID: 30, type: 17},\\n\\t\\t\\t\\t{rootX: 3, rootY: 3, rotation: 0, fragmentID: 12, type: 8},\\n\\t\\t\\t\\t{rootX: 1, rootY: 0, rotation: 0, fragmentID: 10, type: 7},\\n\\t\\t\\t\\t{rootX: 2, rootY: 1, rotation: 2, fragmentID: 101, type: 18},\\n\\t\\t\\t\\t{rootX: 0, rootY: 0, rotation: 1, fragmentID: 16, type: 10},\\n\\t\\t\\t\\t{rootX: 2, rootY: 3, rotation: 2, fragmentID: 14, type: 9},\\n\\t\\t\\t\\t{rootX: 0, rootY: 2, rotation: 1, fragmentID: 18, type: 11}\\n\\t\\t\\t];\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tthrow new Error(`No patterns are defined for Stanek's gift of size ${width} by ${height}`);\\n\\t}\\n\\treturn patterns;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} pattern\\n */\\nfunction setupPattern(ns, pattern) {\\n\\tconst st = ns.stanek;\\n\\tfor (let fragment of pattern) {\\n\\t\\tconst x = fragment.rootX;\\n\\t\\tconst y = fragment.rootY;\\n\\t\\tconst rot = fragment.rotation;\\n\\t\\tconst id = fragment.fragmentID;\\n\\t\\tif (st.get(x, y)?.id === id) continue; // Fragment already placed there\\n\\t\\tif (!st.canPlace(x, y, rot, id)) makeSpace(ns, x, y, rot, id); // Make space for fragment\\n\\t\\tst.place(x, y, rot, id); // Place fragment\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} rootX\\n * @param {number} rootY\\n * @param {number} rotation\\n * @param {number} fragmentID\\n * @returns {boolean}\\n */\\nfunction makeSpace(ns, rootX, rootY, rotation, fragmentID) {\\n\\tconst st = ns.stanek;\\n\\tconst fragment = getFragment(ns, fragmentID);\\n\\tconst activeFragments = st.activeFragments();\\n\\tconst sameActiveFragments = activeFragments.filter(f => f.id === fragmentID);\\n\\t// Check first if we are going over the limit\\n\\tif (sameActiveFragments.length + 1 > fragment.limit) {\\n\\t\\t// Remove any fragments with the same ID\\n\\t\\tfor (let sameActiveFragment of sameActiveFragments) {\\n\\t\\t\\tst.remove(sameActiveFragment.x, sameActiveFragment.y);\\n\\t\\t}\\n\\t\\t// Check if we can place fragment now\\n\\t\\tif (st.canPlace(rootX, rootY, rotation, fragmentID)) return true;\\n\\t}\\n\\t// Check if we are colliding with another fragment\\n\\tconst currentFragmentCoordinates = getCoordinates(ns, rootX, rootY, fragment.shape, rotation);\\n\\tfor (let other of getActiveFragmentsAndCoordinates(ns)) {\\n\\t\\t// Check if there are colliding cells\\n\\t\\tif (currentFragmentCoordinates.some(c => other.coordinates.some(e => e[0] === c[0] && e[1] === c[1]))) {\\n\\t\\t\\tst.remove(other.fragment.x, other.fragment.y);\\n\\t\\t}\\n\\t\\t// Check if we can place fragment now\\n\\t\\tif (st.canPlace(rootX, rootY, rotation, fragmentID)) return true;\\n\\t}\\n\\t// Something is stopping us from making space\\n\\tthrow new Error(`Could not make space for fragment`);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Object<Fragment, [number, number][]>[]}\\n */\\nfunction getActiveFragmentsAndCoordinates(ns) {\\n\\treturn Array.from(ns.stanek.activeFragments(), f => {\\n\\t\\treturn {\\n\\t\\t\\tfragment: f,\\n\\t\\t\\tcoordinates: getCoordinates(ns, f.x, f.y, getFragment(ns, f.id).shape, f.rotation)\\n\\t\\t};\\n\\t});\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} rootX\\n * @param {number} rootY\\n * @param {boolean[][]} shape\\n * @param {number} rotation\\n * @returns {[number, number][]}\\n */\\nfunction getCoordinates(ns, rootX, rootY, shape, rotation) {\\n\\tconst st = ns.stanek;\\n\\tconst coordinates = [];\\n\\tfor (let [i, row] of getRotatedShape(shape, rotation).entries()) {\\n\\t\\tfor (let [j, cell] of row.entries()) {\\n\\t\\t\\t// Check if fragment occupies the cell\\n\\t\\t\\tif (cell === false) continue;\\n\\t\\t\\tconst x = rootX + j;\\n\\t\\t\\tconst y = rootY + i;\\n\\t\\t\\t// If we are going over the gift's edges throw an error\\n\\t\\t\\tif (x < 0 || y < 0 || x >= st.width() || y >= st.height()) throw new Error(`Invalid placement`);\\n\\t\\t\\tcoordinates.push([x, y]);\\n\\t\\t}\\n\\t}\\n\\treturn coordinates;\\n}\\n\\n/**\\n *\\n * @param {boolean[][]} shape\\n * @param {number} rotation\\n * @returns {boolean[][]}\\n */\\nfunction getRotatedShape(shape, rotation) {\\n\\tswitch (rotation) {\\n\\t\\tcase 0: // No rotation\\n\\t\\t\\treturn shape;\\n\\t\\tcase 1: // Rotate by 90 degrees\\n\\t\\t\\treturn reverse(transpose(shape));\\n\\t\\tcase 2: // Rotate by 180 degrees\\n\\t\\t\\treturn reverse(transpose(reverse(transpose(shape))));\\n\\t\\tcase 3: // Rotate by 270 degrees\\n\\t\\t\\treturn transpose(reverse(shape));\\n\\t\\tdefault:\\n\\t\\t\\tthrow new Error(`Invalid rotation`);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {boolean[][]} shape\\n * @returns {boolean[][]}\\n */\\nfunction transpose(shape) {\\n\\treturn Object.keys(shape[0]).map(c => shape.map(r => r[c]));\\n}\\n\\n/**\\n *\\n * @param {boolean[][]} shape\\n * @returns {boolean[][]}\\n */\\nfunction reverse(shape) {\\n\\treturn shape.map(r => r.reverse());\\n}\",\"filename\":\"/stanek/controller.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///7aa55090-cf93-478b-b2e5-d64d123f515a\",\"moduleSequenceNumber\":42769},{\"filename\":\"/stanek/utils.js\",\"url\":\"blob:file:///87665c6d-475f-4c29-8ade-e3b65f4c5fde\",\"moduleSequenceNumber\":42758},{\"filename\":\"/stanek/controller.js\",\"url\":\"blob:file:///e5d33a3c-448f-453e-869e-5efa94cb3719\",\"moduleSequenceNumber\":45638}],\"dependents\":[],\"ramUsage\":23.05,\"server\":\"home\",\"moduleSequenceNumber\":45781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.activeFragments\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stanek.canPlace\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stanek.place\",\"cost\":5},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getPortNumbers, modifyFile} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst args = ns.flags([\\n\\t\\t['pattern', undefined],\\n\\t\\t['maxCharges', undefined]\\n\\t]);\\n\\tconst dataToModify = {};\\n\\tif (args.pattern) dataToModify.pattern = args.pattern;\\n\\tif (args.maxCharges) dataToModify.maxCharges = args.maxCharges;\\n\\tawait modifyFile(ns, getPortNumbers().stanek, dataToModify);\\n}\",\"filename\":\"/stanek/set.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/utils.js\",\"url\":\"blob:file:///0e89acc5-fae3-415d-a3b9-b737ef9bb917\",\"moduleSequenceNumber\":28213},{\"filename\":\"/stanek/utils.js\",\"url\":\"blob:file:///16c1115f-ea06-4c06-8f67-f10c5a936b70\",\"moduleSequenceNumber\":28266},{\"filename\":\"/stanek/set.js\",\"url\":\"blob:file:///59b9cf0e-aaa7-4c73-ad87-347b5d435da8\",\"moduleSequenceNumber\":37074}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":45782,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {defaultPortData, getPortNumbers, modifyFile} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst portNumber = getPortNumbers().sleeve;\\n\\tawait modifyFile(ns, portNumber, defaultPortData(portNumber));\\n}\",\"filename\":\"/sleeve/reset.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":45783,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.stanek.clear();\\n}\",\"filename\":\"/stanek/reset-charges.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/stanek/reset-charges.js\",\"url\":\"blob:file:///583b683e-a2c3-4871-b5c9-7e2e1d4a33ab\",\"moduleSequenceNumber\":22565}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":45784,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tif (!ns.gang.inGang()) {\\n\\t\\tns.tprint(`You need to join a gang first`);\\n\\t\\treturn;\\n\\t}\\n\\tlet counter = 0;\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\t// Check for recruits\\n\\t\\tcounter = recruitGangMembers(ns, counter);\\n\\t\\t// Get gang info\\n\\t\\tconst gangRoster = Array.from(ns.gang.getMemberNames(), name => ns.gang.getMemberInformation(name));\\n\\t\\t//Update Log\\n\\t\\tns.clearLog();\\n\\t\\tns.print(`Gang: ${getGangName(ns)}`);\\n\\t\\tns.print(`Gang Warfare: ${ns.gang.getGangInformation().territoryWarfareEngaged}`);\\n\\t\\tfor (const gangMember of gangRoster) ns.print(`${gangMember.name} - ${gangMember.task}`);\\n\\t\\t// Check for ascensions\\n\\t\\tascendMembers(ns, gangRoster);\\n\\t\\t// Check for equipment purchases\\n\\t\\tpurchaseEquipment(ns, gangRoster);\\n\\t\\t// Assign tasks\\n\\t\\tassignTasks(ns, gangRoster);\\n\\t\\t// Check for territory warfare\\n\\t\\tns.gang.setTerritoryWarfare(territoryWarfare(ns));\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Object}\\n */\\nfunction getData(ns) {\\n\\tif (ns.gang.getGangInformation().isHacking) return {\\n\\t\\tgangName: getGangName(ns),\\n\\t\\tisHacking: true,\\n\\t\\tlevel: 500,\\n\\t\\tname: 'hackerman-',\\n\\t\\ttraining: 'Train Hacking',\\n\\t\\treduceWantedLevel: 'Ethical Hacking',\\n\\t\\tterrorize: 'Cyberterrorism',\\n\\t\\tmoney: 'Money Laundering',\\n\\t\\tterritoryWarfare: 'Territory Warfare',\\n\\t\\tattribute: 'hack',\\n\\t\\tasc_attribute: 'hack_asc_mult',\\n\\t\\tclash: false\\n\\t};\\n\\telse return {\\n\\t\\tgangName: getGangName(ns),\\n\\t\\tisHacking: false,\\n\\t\\tlevel: 500,\\n\\t\\tname: 'gangsta-',\\n\\t\\ttraining: 'Train Combat',\\n\\t\\treduceWantedLevel: 'Vigilante Justice',\\n\\t\\tterrorize: 'Terrorism',\\n\\t\\tmoney: 'Human Trafficking',\\n\\t\\tterritoryWarfare: 'Territory Warfare',\\n\\t\\tattribute: 'str',\\n\\t\\tasc_attribute: 'str_asc_mult',\\n\\t\\tclash: true\\n\\t};\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {string}\\n */\\nexport function getGangName(ns) {\\n\\treturn ns.gang.getGangInformation().faction;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {string[]}\\n */\\nfunction getOtherGangs(ns) {\\n\\treturn Object.entries(ns.gang.getOtherGangInformation()).filter(([faction]) =>\\n\\t\\tfaction !== getGangName(ns));\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} counter\\n */\\nexport function recruitGangMembers(ns, counter) {\\n\\tconst data = getData(ns);\\n\\tif (ns.gang.canRecruitMember()) {\\n\\t\\tconst name = data.name + counter;\\n\\t\\tns.gang.recruitMember(name);\\n\\t\\tns.gang.setMemberTask(name, data.training);\\n\\t\\tcounter++;\\n\\t}\\n\\treturn counter;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {GangMemberInfo[]} gangRoster\\n */\\nexport function ascendMembers(ns, gangRoster) {\\n\\tfor (const gangMember of gangRoster) {\\n\\t\\tif (!ns.gang.getAscensionResult(gangMember.name)) continue;\\n\\t\\tconst ascensionThreshold = calculateAscensionThreshold(gangMember[getData(ns).asc_attribute]);\\n\\t\\tif (ns.gang.getAscensionResult(gangMember.name)[getData(ns).attribute] >= ascensionThreshold)\\n\\t\\t\\tns.gang.ascendMember(gangMember.name);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {number} asc_mult\\n * @returns {number}\\n */\\nfunction calculateAscensionThreshold(asc_mult) {\\n\\treturn Math.max(1.6 + (1 - asc_mult) / 58, 1.1);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {GangMemberInfo[]} gangRoster\\n */\\nexport function purchaseEquipment(ns, gangRoster) {\\n\\tconst data = getData(ns);\\n\\tconst orderedEquipment = data.isHacking ? getHackingEquipment(ns) : getCombatEquipment(ns);\\n\\tfor (const gangMember of gangRoster) {\\n\\t\\tif (gangMember[data.attribute] < data.level) continue;\\n\\t\\tfor (const equipment of orderedEquipment) {\\n\\t\\t\\tif (!gangMember.upgrades.includes(equipment) && !gangMember.augmentations.includes(equipment) &&\\n\\t\\t\\t\\t!ns.gang.purchaseEquipment(gangMember.name, equipment)) break;\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {string[]}\\n */\\nfunction getHackingEquipment(ns) {\\n\\tconst allEquipment = ns.gang.getEquipmentNames();\\n\\tconst hackEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).hack).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\tconst chaEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).cha).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\treturn [...new Set([...hackEquipment, ...chaEquipment])];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {string[]}\\n */\\nfunction getCombatEquipment(ns) {\\n\\tconst allEquipment = ns.gang.getEquipmentNames();\\n\\tconst strAndDefEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).str || ns.gang.getEquipmentStats(equipment).def).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\tconst dexAndAgiEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).dex || ns.gang.getEquipmentStats(equipment).agi).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\tconst chaAndHackEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).cha || ns.gang.getEquipmentStats(equipment).hack).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\treturn [...new Set([...strAndDefEquipment, ...dexAndAgiEquipment, ...chaAndHackEquipment])];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {GangMemberInfo[]} gangRoster\\n */\\nexport function assignTasks(ns, gangRoster) {\\n\\tconst data = getData(ns);\\n\\tlet warfareCounter = 0;\\n\\tfor (const gangMember of gangRoster) {\\n\\t\\tif (gangMember[data.attribute] < data.level) ns.gang.setMemberTask(gangMember.name, data.training);\\n\\t\\telse if (ns.gang.getGangInformation().wantedPenalty < 0.5) ns.gang.setMemberTask(gangMember.name, data.reduceWantedLevel);\\n\\t\\telse if (gangRoster.length < 12) ns.gang.setMemberTask(gangMember.name, data.terrorize);\\n\\t\\telse if (data.clash && clashChance(ns).some(s => s < 0.8) &&\\n\\t\\t\\tns.gang.getGangInformation().territory < 1 && warfareCounter < 6) {\\n\\t\\t\\tns.gang.setMemberTask(gangMember.name, data.territoryWarfare);\\n\\t\\t\\twarfareCounter++;\\n\\t\\t} else ns.gang.setMemberTask(gangMember.name, data.money);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {number[]}\\n */\\nfunction clashChance(ns) {\\n\\treturn Array.from(getOtherGangs(ns), ([faction]) => ns.gang.getChanceToWinClash(faction));\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {boolean}\\n */\\nexport function territoryWarfare(ns) {\\n\\treturn (Number(Math.round(Number(ns.gang.getGangInformation().territory + 'e' + 10)) + 'e' + 10 * -1) < 1 &&\\n\\t\\tfightForTerritory(ns, getOtherGangs(ns)));\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {boolean}\\n */\\nfunction fightForTerritory(ns) {\\n\\tlet averageWinChance = 0;\\n\\tfor (const [faction, info] of getOtherGangs(ns)) averageWinChance += info.territory * ns.gang.getChanceToWinClash(faction);\\n\\treturn averageWinChance / (1 - ns.gang.getGangInformation().territory) >= 0.7;\\n}\",\"filename\":\"/gang/manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/gang/manager.js\",\"url\":\"blob:file:///8c957ac1-04dc-4686-b693-b4cdbb60fd15\",\"moduleSequenceNumber\":45592}],\"dependents\":[],\"ramUsage\":40.7,\"server\":\"home\",\"moduleSequenceNumber\":45785,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setTerritoryWarfare\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getOtherGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentStats\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getChanceToWinClash\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedFunction,JSUnresolvedVariable\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\t// Download password list and check it\\n\\tconst link = 'https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/Common-Credentials/10-million-password-list-top-10000.txt';\\n\\tconst list = download(ns, link);\\n\\tawait check(list);\\n\\t// or brute force your way\\n\\t// brute(ns);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} list\\n * @returns {Promise<void>}\\n */\\nasync function check(ns, list) {\\n\\tfor (const s of list) {\\n\\t\\tns.rainbow(s);\\n\\t\\tawait ns.asleep(1);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} link\\n * @returns {Promise<string[]>}\\n */\\nasync function download(ns, link) {\\n\\tlet lines, done;\\n\\tconst req = new XMLHttpRequest();\\n\\treq.onreadystatechange = function () {\\n\\t\\tif (req.readyState === 4 && req.status === 200) {\\n\\t\\t\\tns.print(`Processing successful response...`);\\n\\t\\t\\tconst text = req.responseText;\\n\\t\\t\\tlines = text.split('\\\\n');\\n\\t\\t} else if (req.readyState === 4) ns.print(`Request failed with status ${req.status}`);\\n\\t\\telse ns.print(`State: ${req.readyState}`);\\n\\t\\tdone = req.readyState === 4;\\n\\t};\\n\\treq.open('GET', link);\\n\\treq.send();\\n\\twhile (!done) {\\n\\t\\tawait ns.asleep(5000);\\n\\t}\\n\\treturn lines;\\n}\\n\\n// noinspection JSUnusedLocalSymbols\\n/**\\n *\\n * @param {NS} ns\\n * @param {boolean} lowercase\\n * @param {boolean} uppercase\\n * @param {boolean} numbers\\n * @param {number} length\\n * @returns {Promise<void>}\\n */\\nasync function brute(ns, lowercase = true, uppercase = false, numbers = false, length = 8) {\\n\\tconst list = [];\\n\\tif (lowercase) for (let i = 'a'.charCodeAt(); i <= 'z'.charCodeAt(); i++) list.push(String.fromCharCode(i));\\n\\tif (uppercase) for (let i = 'A'.charCodeAt(); i <= 'Z'.charCodeAt(); i++) list.push(String.fromCharCode(i));\\n\\tif (numbers) for (let i = 0; i <= 9; i++) list.push(String(i));\\n\\tawait force(ns, list, ns.rainbow, length);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} list\\n * @param {function} func\\n * @param {number} limit\\n * @param {number} k\\n * @param {string} prepend\\n * @param {boolean} callBig\\n * @returns {Promise<void>}\\n */\\nasync function force(ns, list, func, limit, k = 1, prepend = '', callBig = true) {\\n\\tif (k <= 0 || k > limit) return;\\n\\tif (k === 1) for (let s of list) if (func(prepend + s)) return;\\n\\tfor (let i = 0; i < list.length; i++) await force(ns, list, func, limit - 1, k - 1, prepend + list[i], false);\\n\\tif (callBig) await force(ns, list, func, limit, k + 1);\\n\\tawait ns.asleep(1);\\n}\\n\\n\",\"filename\":\"/exploits/rainbow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":45786,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\t// TODO: true recursion exploit script\\n}\",\"filename\":\"/exploits/true-recursion.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":45787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Requires formulas\\nimport {printBoth} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst args = ns.flags([\\n\\t\\t['max-spend', Infinity],\\n\\t\\t['max-payoff-time', Infinity]\\n\\t]);\\n\\tlet maxSpend = args['max-spend'];\\n\\tconst maxPayoffTime = args['max-payoff-time'];\\n\\twhile (true) {\\n\\t\\tconst spend = upgradeHacknet(ns, maxSpend, maxPayoffTime);\\n\\t\\tif (typeof spend === 'string') {\\n\\t\\t\\tprintBoth(ns, spend);\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tmaxSpend -= spend;\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\n// Will buy the most effective hacknet upgrade, so long as it will pay for itself in maxPayoffTimeSeconds\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} maxSpend\\n * @param {number} maxPayoffTimeSeconds\\n * @returns {number|boolean}\\n */\\nexport function upgradeHacknet(ns, maxSpend = Infinity, maxPayoffTimeSeconds = 21600 /* 6 hours */) {\\n\\tconst hn = ns.hacknet;\\n\\tconst haveHacknetServers = ns.getPlayer().bitNodeN === 9 || ns.getOwnedSourceFiles().some(s => s.n === 9);\\n\\tconst form = haveHacknetServers ? ns.formulas.hacknetServers : ns.formulas.hacknetNodes;\\n\\tconst currentHacknetMult = ns.getPlayer().hacknet_node_money_mult;\\n\\t// Find the best upgrade we can make to an existing node\\n\\tconst upgrades = getUpgrades(ns);\\n\\tlet bestUpgradePayoff = 0;\\n\\tlet nodeToUpgrade;\\n\\tlet bestUpgrade;\\n\\tlet cost;\\n\\tlet upgradedValue;\\n\\tlet worstNodeProduction = Number.MAX_SAFE_INTEGER; // Used to hold how productive a newly purchased node might be\\n\\tfor (let i = 0; i < hn.numNodes(); i++) {\\n\\t\\tconst nodeStats = hn.getNodeStats(i);\\n\\t\\t// When a hacknet server runs scripts, nodeStats.production lags behind what it should be for current ram usage\\n\\t\\tif (haveHacknetServers) nodeStats.production = form.hashGainRate(nodeStats.level, 0, nodeStats.ram, nodeStats.cores, currentHacknetMult);\\n\\t\\tworstNodeProduction = Math.min(worstNodeProduction, nodeStats.production);\\n\\t\\t// Get next best upgrade\\n\\t\\tfor (let upgrade of upgrades) {\\n\\t\\t\\tconst currentUpgradeCost = upgrade.cost(i);\\n\\t\\t\\tconst payoff = upgrade.addedProduction(nodeStats) / currentUpgradeCost; // Production per money\\n\\t\\t\\tif (payoff > bestUpgradePayoff) {\\n\\t\\t\\t\\tbestUpgradePayoff = payoff;\\n\\t\\t\\t\\tnodeToUpgrade = i;\\n\\t\\t\\t\\tbestUpgrade = upgrade;\\n\\t\\t\\t\\tcost = currentUpgradeCost;\\n\\t\\t\\t\\tupgradedValue = upgrade.nextValue(nodeStats);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Compare this to the cost of adding a new node\\n\\tlet newNodeCost;\\n\\tlet newNodePayoff;\\n\\tlet shouldBuyNewNode;\\n\\tif (hn.numNodes() < hn.maxNumNodes()) {\\n\\t\\tnewNodeCost = hn.getPurchaseNodeCost();\\n\\t\\tnewNodePayoff = worstNodeProduction / newNodeCost;\\n\\t\\tshouldBuyNewNode = newNodePayoff > bestUpgradePayoff;\\n\\t} else if (bestUpgradePayoff === 0) return false; // Cannot buy new node and payoff will be zero\\n\\t// If specified, only buy upgrades that will pay for themselves in payoffTimeSeconds\\n\\tconst value = haveHacknetServers ? 0.25e6 : 1; // 1 hash = 0.25m\\n\\tlet payoffTimeSeconds = 1 / (value * (shouldBuyNewNode ? newNodePayoff : bestUpgradePayoff));\\n\\tif (shouldBuyNewNode) cost = newNodeCost;\\n\\t// Prepare info about next purchase\\n\\tlet strPurchase = (shouldBuyNewNode ? `a new node \\\"hacknet-node-${hn.numNodes()}\\\"` :\\n\\t\\t`hacknet-node-${nodeToUpgrade} ${bestUpgrade.name} ${upgradedValue}`) + ` for ${ns.nFormat(cost, '$0.000a')}`;\\n\\tlet strPayoff = `production ${ns.nFormat((shouldBuyNewNode ? newNodePayoff : bestUpgradePayoff) * cost, '0.000a')}, payoff time: ${ns.tFormat(1000 * payoffTimeSeconds)}`;\\n\\tif (cost > maxSpend) {\\n\\t\\tns.print(`The next best purchase would be ${strPurchase} but the cost ${ns.nFormat(cost, '$0.000a')} exceeds the limit (${ns.nFormat(maxSpend, '$0.000a')})`);\\n\\t\\treturn 'Spending limit reached. Turning off Hacknet manager...'; // Overspending\\n\\t}\\n\\tif (payoffTimeSeconds > maxPayoffTimeSeconds) {\\n\\t\\tns.print(`The next best purchase would be ${strPurchase} but the ${strPayoff} is worse than the limit (${ns.tFormat(1000 * maxPayoffTimeSeconds)})`);\\n\\t\\treturn 'Max payoff time reached. Turning off Hacknet manager...'; // Won't pay itself off\\n\\t}\\n\\tconst success = shouldBuyNewNode ? hn.purchaseNode() !== -1 : bestUpgrade.upgrade(nodeToUpgrade, 1);\\n\\tns.print(success ? `Purchased ${strPurchase} with ${strPayoff}` : `Insufficient funds to purchase the next best upgrade: ${strPurchase}`);\\n\\treturn success ? cost : 0;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Object<string, function, function, function, function>[]}\\n */\\nexport function getUpgrades(ns) {\\n\\tconst hn = ns.hacknet;\\n\\treturn [\\n\\t\\t{\\n\\t\\t\\tname: 'level',\\n\\t\\t\\tupgrade: hn.upgradeLevel,\\n\\t\\t\\tcost: i => hn.getLevelUpgradeCost(i, 1),\\n\\t\\t\\tnextValue: nodeStats => nodeStats.level + 1,\\n\\t\\t\\taddedProduction: nodeStats => nodeStats.production * productionMult(ns, 'level', nodeStats.level)\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'ram',\\n\\t\\t\\tupgrade: hn.upgradeRam,\\n\\t\\t\\tcost: i => hn.getRamUpgradeCost(i, 1),\\n\\t\\t\\tnextValue: nodeStats => nodeStats.ram * 2,\\n\\t\\t\\taddedProduction: nodeStats => nodeStats.production * productionMult(ns, 'ram', nodeStats.ram)\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'cores',\\n\\t\\t\\tupgrade: hn.upgradeCore,\\n\\t\\t\\tcost: i => hn.getCoreUpgradeCost(i, 1),\\n\\t\\t\\tnextValue: nodeStats => nodeStats.cores + 1,\\n\\t\\t\\taddedProduction: nodeStats => nodeStats.production * productionMult(ns, 'cores', nodeStats.cores)\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'cache',\\n\\t\\t\\tupgrade: hn.upgradeCache,\\n\\t\\t\\tcost: i => hn.getCacheUpgradeCost(i, 1),\\n\\t\\t\\tnextValue: nodeStats => nodeStats.cache + 1,\\n\\t\\t\\taddedProduction: nodeStats => nodeStats.production * productionMult(ns, 'cache', nodeStats.cache)\\n\\t\\t}\\n\\t];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} type\\n * @param {number} level\\n * @returns {number}\\n */\\nfunction productionMult(ns, type, level) {\\n\\tconst hn = ns.hacknet;\\n\\tconst haveHacknetServers = ns.getPlayer().bitNodeN === 9 || ns.getOwnedSourceFiles().some(s => s.n === 9);\\n\\tconst form = haveHacknetServers ? ns.formulas.hacknetServers.hashGainRate : ns.formulas.hacknetNodes.moneyGainRate;\\n\\tlet curLevel;\\n\\tlet nextLevel;\\n\\tswitch (type) {\\n\\t\\tcase 'level':\\n\\t\\t\\tcurLevel = haveHacknetServers ? [level, 0, 1, 1] : [level, 1, 1];\\n\\t\\t\\tnextLevel = haveHacknetServers ? [level + 1, 0, 1, 1] : [level + 1, 1, 1];\\n\\t\\t\\tbreak;\\n\\t\\tcase 'ram':\\n\\t\\t\\tcurLevel = haveHacknetServers ? [1, 0, level, 1] : [1, level, 1];\\n\\t\\t\\tnextLevel = haveHacknetServers ? [1, 0, level * 2, 1] : [1, level * 2, 1];\\n\\t\\t\\tbreak;\\n\\t\\tcase 'cores':\\n\\t\\t\\tcurLevel = haveHacknetServers ? [1, 0, 1, level] : [1, 1, level];\\n\\t\\t\\tnextLevel = haveHacknetServers ? [1, 0, 1, level + 1] : [1, 1, level + 1];\\n\\t\\t\\tbreak;\\n\\t\\tcase 'cache': // Doesn't improve production, but we consider buying cache if hash is at percentageCutoff capacity\\n\\t\\t\\tconst percentageCutoff = 0.95;\\n\\t\\t\\tconst mult = 1 / (1 - percentageCutoff);\\n\\t\\t\\treturn mult * (hn.numHashes() / hn.hashCapacity() - percentageCutoff);\\n\\t\\tdefault:\\n\\t\\t\\tthrow new Error(`Invalid type encountered in Hacknet production multiplier`);\\n\\t}\\n\\treturn form(...nextLevel) / form(...curLevel) - 1;\\n}\",\"filename\":\"/hacknet/manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///9c269095-1e77-4f47-9876-65d052f49b61\",\"moduleSequenceNumber\":42769},{\"filename\":\"/hacknet/manager.js\",\"url\":\"blob:file:///bc31130a-132f-4688-99df-bb07b806de1b\",\"moduleSequenceNumber\":45636}],\"dependents\":[],\"ramUsage\":11.1,\"server\":\"home\",\"moduleSequenceNumber\":45788,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {findPlaceToRun, getAccessibleServers, getFreeRam, getScripts, printBoth} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\tlet sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tlet money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (!(money === data.maxMoney) || !(sec === data.minSec)) {\\n\\t\\t\\tns.print(`Priming ${data.target} in ${ns.getWeakenTime(data.target).toFixed(2)} seconds`);\\n\\t\\t\\tlet primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\t\\tlet info = getInfo(ns, data);\\n\\t\\tif (info === 'EXIT') return;\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {Object} info\\n * @param {Object} data\\n * @returns {Promise<void>}\\n */\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRAM) {\\n\\t\\t\\tns.print(`Running cycle ${c}.`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} sec\\n * @param {number} money\\n * @param {Object} data\\n * @returns {Promise<boolean>}\\n */\\nasync function primeTarget(ns, sec, money, data) {\\n\\tlet growth = data.maxMoney / money;\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, Math.max(growth !== Infinity ? growth : 10, 1), data.cores));\\n\\tlet weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tlet primeRAM = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${primeRAM.toFixed(2)}, available RAM: ${freeRAM.toFixed(2)}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRam(ns, servers);\\n\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown && growThreads > 0) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, data.target);\\n\\t\\tif (growFound) grown = true;\\n\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened && weakenThreads > 0) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, data.target);\\n\\t\\tif (weakenFound) weakened = true;\\n\\n\\t\\tif (!growFound) await ns.sleep(1000);\\n\\t\\telse if (!weakenFound) await ns.sleep(1000);\\n\\t\\telse await ns.sleep(weakenTime + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(weakenTime + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {Object} data\\n * @returns {Object}\\n */\\nfunction getInfo(ns, data) {\\n\\tlet hackTime = ns.getHackTime(data.target);\\n\\tlet growTime = ns.getGrowTime(data.target);\\n\\tlet weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tlet hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tlet growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tlet gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tlet freeRAM = ns.getServerMaxRam(data.host) - ns.getServerUsedRam(data.host);\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRAM / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRAM / cycleRAM);\\n\\t}\\n\\n\\tif (cycleRAM > freeRAM) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}.`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRAM}.`);\\n\\t\\tdata.drainPercent *= freeRAM / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${data.drainPercent.toFixed(2)}.`);\\n\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}.`);\\n\\t\\t\\treturn 'EXIT';\\n\\t\\t}\\n\\n\\t\\treturn getInfo(ns, data);\\n\\t}\\n\\n\\tns.print(`Running ${cycleCount} cycles in ${(cycleCount * cycleDelay / 1000).toFixed(2)} seconds.`);\\n\\n\\tlet hackOffset = -0.25 * cycleDelay;\\n\\tlet hWeakenOffset = 0;\\n\\tlet growOffset = 0.25 * cycleDelay;\\n\\tlet gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tlet hackDelay = weakenTime - hackTime + hackOffset;\\n\\tlet hWeakenDelay = hWeakenOffset;\\n\\tlet growDelay = weakenTime - growTime + growOffset;\\n\\tlet gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRAM,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Object}\\n */\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 100;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam,\\n\\t\\tgrowScriptRam,\\n\\t\\tweakenScriptRam\\n\\t};\\n}\\n\\n// noinspection JSUnusedGlobalSymbols\\n/**\\n *\\n * @param {*} data\\n * @returns {string[]}\\n */\\nexport function autocomplete(data) {\\n\\t// noinspection JSUnresolvedVariable\\n\\treturn data.servers;\\n}\",\"filename\":\"/hacking/batcher.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///a33b0a70-307f-4305-9260-71e5707d4c30\",\"moduleSequenceNumber\":42769},{\"filename\":\"/hacking/batcher.js\",\"url\":\"blob:file:///cf04d9c3-feff-46b1-89f7-ef4cf29102ea\",\"moduleSequenceNumber\":45660}],\"dependents\":[],\"ramUsage\":13.2,\"server\":\"home\",\"moduleSequenceNumber\":45789,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @param {string} str\\n */\\nexport function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\n/**\\n *\\n * @returns {string[]}\\n */\\nexport function getCities() {\\n\\treturn ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) if (server !== 'home') await ns.scp(scriptsToCopy(), 'home', server);\\n}\\n\\n/**\\n *\\n * @returns {Object<string>}\\n */\\nexport function getScripts() {\\n\\treturn {\\n\\t\\tcortex: 'cortex.js',\\n\\t\\tupgradeHomeRam: '/player/upgrade-home-ram.js',\\n\\t\\tupgradeHomeCores: '/player/upgrade-home-cores.js',\\n\\t\\tjoinFactions: '/factions/join-factions.js',\\n\\t\\thack: '/daemons/hack.js',\\n\\t\\tgrow: '/daemons/grow.js',\\n\\t\\tweaken: '/daemons/weaken.js',\\n\\t\\tcharge: '/daemons/charge.js',\\n\\t\\tintelligence: '/daemons/intelligence.js',\\n\\t\\tbatcher: '/hacking/batcher.js',\\n\\t\\tbackdoor: '/hacking/backdoor.js',\\n\\t\\tshare: '/daemons/share.js',\\n\\t\\tutils: 'utils.js',\\n\\t\\tgang: '/gang/manager.js',\\n\\t\\tcorp: '/corporation/autopilot.js',\\n\\t\\tbladeburner: '/bladeburner/autopilot.js',\\n\\t\\tstock: '/stock-market/autopilot.js',\\n\\t\\thacknet: '/hacknet/manager.js',\\n\\t\\tsleeve: '/sleeve/autopilot.js',\\n\\t\\tstanek: '/stanek/controller.js',\\n\\t};\\n}\\n\\n/**\\n *\\n * @returns {string[]}\\n */\\nexport function getManagerScripts() {\\n\\tconst scripts = getScripts();\\n\\treturn [\\n\\t\\tscripts.cortex,\\n\\t\\tscripts.gang,\\n\\t\\tscripts.corp,\\n\\t\\tscripts.bladeburner,\\n\\t\\tscripts.stock,\\n\\t\\tscripts.hacknet,\\n\\t\\tscripts.sleeve,\\n\\t\\tscripts.stanek,\\n\\t\\tscripts.batcher\\n\\t];\\n}\\n\\n/**\\n *\\n * @returns {string[]}\\n */\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\n/**\\n *\\n * @returns {string[]}\\n */\\nexport function getFactions() {\\n\\treturn [\\n\\t\\t'CyberSec', 'Tian Di Hui', 'Netburners', 'Sector-12', 'Chongqing',\\n\\t\\t'New Tokyo', 'Ishima', 'Aevum', 'Volhaven', 'NiteSec',\\n\\t\\t'The Black Hand', 'BitRunners', 'ECorp', 'MegaCorp',\\n\\t\\t'KuaiGong International', 'Four Sigma', 'NWO', 'Blade Industries',\\n\\t\\t'OmniTek Incorporated', 'Bachman & Associates',\\n\\t\\t'Clarke Incorporated', 'Fulcrum Secret Technologies',\\n\\t\\t'Slum Snakes', 'Tetrads', 'Silhouette', 'Speakers for the Dead',\\n\\t\\t'The Dark Army', 'The Syndicate', 'The Covenant', 'Daedalus',\\n\\t\\t'Illuminati', 'Bladeburners'\\n\\t];\\n}\\n\\n/**\\n *\\n * @returns {string[]}\\n */\\nexport function getCompanies() {\\n\\treturn [\\n\\t\\t'ECorp', 'MegaCorp', 'Bachman and Associates', 'Blade Industries', 'NWO',\\n\\t\\t'Clarke Incorporated', 'OmniTek Incorporated', 'Four Sigma', 'KuaiGong International',\\n\\t\\t'Fulcrum Technologies', 'Storm Technologies', 'DefComm', 'Helios Labs', 'VitaLife',\\n\\t\\t'Icarus Microsystems', 'Universal Energy', 'Galactic Cybersystems', 'AeroCorp',\\n\\t\\t'Omnia Cybersystems', 'Solaris Space Systems', 'DeltaOne', 'Global Pharmaceuticals',\\n\\t\\t'Nova Medical', 'CIA', 'NSA', 'Watchdog Security', 'LexoCorp', 'Rho Construction',\\n\\t\\t'Alpha Enterprises', 'Aevum Police', 'SysCore Securities', 'CompuTek', 'NetLink Technologies',\\n\\t\\t'Carmichael Security', 'FoodNStuff', 'JoesGuns', 'Ishima Omega Software', 'Noodle Bar'\\n\\t];\\n}\\n\\n/**\\n *\\n * @returns {string[]}\\n */\\nexport function getGangs() {\\n\\treturn ['Slum Snakes', 'Tetrads', 'The Syndicate', 'The Dark Army', 'Speakers for the Dead',\\n\\t\\t'NiteSec', 'The Black Hand'];\\n}\\n\\n/**\\n *\\n * @returns {Object<Object<string, boolean, boolean, boolean>[]>}\\n */\\nexport function getJobs() {\\n\\treturn {\\n\\t\\tagent: {\\n\\t\\t\\tname: 'Agent',\\n\\t\\t\\thacking: true,\\n\\t\\t\\tcombat: true,\\n\\t\\t\\tcharisma: true\\n\\t\\t},\\n\\t\\tbusiness: {\\n\\t\\t\\tname: 'Business',\\n\\t\\t\\thacking: true,\\n\\t\\t\\tcombat: false,\\n\\t\\t\\tcharisma: true\\n\\t\\t},\\n\\t\\tit: {\\n\\t\\t\\tname: 'IT',\\n\\t\\t\\thacking: true,\\n\\t\\t\\tcombat: false,\\n\\t\\t\\tcharisma: true\\n\\t\\t},\\n\\t\\tsecurity: {\\n\\t\\t\\tname: 'Security',\\n\\t\\t\\thacking: true,\\n\\t\\t\\tcombat: true,\\n\\t\\t\\tcharisma: true\\n\\t\\t},\\n\\t\\tsoftware: {\\n\\t\\t\\tname: 'Software',\\n\\t\\t\\thacking: true,\\n\\t\\t\\tcombat: false,\\n\\t\\t\\tcharisma: true\\n\\t\\t},\\n\\t\\tsoftware_consultant: {\\n\\t\\t\\tname: 'Software Consultant',\\n\\t\\t\\thacking: true,\\n\\t\\t\\tcombat: false,\\n\\t\\t\\tcharisma: true\\n\\t\\t},\\n\\t\\temployee: {\\n\\t\\t\\tname: 'Employee',\\n\\t\\t\\thacking: false,\\n\\t\\t\\tcombat: true,\\n\\t\\t\\tcharisma: true\\n\\t\\t},\\n\\t\\tpart_time_employee: {\\n\\t\\t\\tname: 'part-time Employee',\\n\\t\\t\\thacking: false,\\n\\t\\t\\tcombat: true,\\n\\t\\t\\tcharisma: true\\n\\t\\t},\\n\\t\\twaiter: {\\n\\t\\t\\tname: 'Employee',\\n\\t\\t\\thacking: false,\\n\\t\\t\\tcombat: true,\\n\\t\\t\\tcharisma: true\\n\\t\\t},\\n\\t\\tpart_time_waiter: {\\n\\t\\t\\tname: 'part-time Waiter',\\n\\t\\t\\thacking: false,\\n\\t\\t\\tcombat: true,\\n\\t\\t\\tcharisma: true\\n\\t\\t}\\n\\t};\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} minimumRam\\n */\\nexport function deployBatchers(ns, minimumRam = 2 ** 14) {\\n\\tconst scripts = getScripts();\\n\\tconst servers = getAccessibleServers(ns);\\n\\tconst hackables = getOptimalHackable(ns, servers);\\n\\t// filter and sort servers according to RAM\\n\\tconst hosts = servers.filter(server => ns.getServerMaxRam(server) >= minimumRam).sort((a, b) => ns.getServerMaxRam(b) - ns.getServerMaxRam(a));\\n\\t// Deploy batchers\\n\\tfor (let i = 0; i < Math.min(hosts.length, hackables.length); i++) {\\n\\t\\tif (!ns.isRunning(scripts.batcher, hosts[i], hackables[i])) {\\n\\t\\t\\tns.scriptKill(scripts.batcher, hosts[i]);\\n\\t\\t\\tns.exec(scripts.batcher, hosts[i], 1, hackables[i]);\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n */\\nexport function manageAndHack(ns) {\\n\\tconst scripts = getScripts();\\n\\tconst servers = getAccessibleServers(ns);\\n\\tconst hackables = getOptimalHackable(ns, servers);\\n\\tconst [freeRams, filteredHackables] = getFreeRam(ns, servers, hackables);\\n\\tconst hackstates = getHackStates(ns, servers, filteredHackables);\\n\\tfor (const target of filteredHackables) {\\n\\t\\tconst money = ns.getServerMoneyAvailable(target);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\t\\tconst sec = ns.getServerSecurityLevel(target);\\n\\t\\tconst secDiff = sec - minSec;\\n\\t\\tif (secDiff > 0) {\\n\\t\\t\\tconst threads = Math.ceil(secDiff * 20) - hackstates.get(target).weaken;\\n\\t\\t\\tif (threads > 0 && !findPlaceToRun(ns, scripts.weaken, threads, freeRams, target)) return;\\n\\t\\t}\\n\\t\\tlet moneyPercent = money / maxMoney;\\n\\t\\tif (moneyPercent === 0) moneyPercent = 0.1;\\n\\t\\tif (moneyPercent < 0.9) {\\n\\t\\t\\tconst threads = Math.ceil(ns.growthAnalyze(target, 1 / moneyPercent)) - hackstates.get(target).grow;\\n\\t\\t\\tif (threads > 0 && !findPlaceToRun(ns, scripts.grow, threads, freeRams, target)) return;\\n\\t\\t}\\n\\t\\tif (moneyPercent > 0.75 && secDiff < 50) {\\n\\t\\t\\tlet threads = Math.floor(ns.hackAnalyzeThreads(target, money - (0.4 * maxMoney))) - hackstates.get(target).hack;\\n\\t\\t\\tif (threads > 0 && !findPlaceToRun(ns, scripts.hack, threads, freeRams, target)) return;\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} servers\\n * @param {string[]} hackables\\n * @returns {Object<number, number, number>}\\n */\\nfunction getHackStates(ns, servers, hackables) {\\n\\tconst scripts = getScripts();\\n\\tconst hackstates = new Map();\\n\\tfor (let server of servers.values()) {\\n\\t\\tfor (let hackable of hackables.values()) {\\n\\t\\t\\tlet weakenScript = ns.getRunningScript(scripts.weaken, server, hackable);\\n\\t\\t\\tlet growScript = ns.getRunningScript(scripts.grow, server, hackable);\\n\\t\\t\\tlet hackScript = ns.getRunningScript(scripts.hack, server, hackable);\\n\\t\\t\\tif (hackstates.has(hackable)) {\\n\\t\\t\\t\\thackstates.get(hackable).weaken += !weakenScript ? 0 : weakenScript.threads;\\n\\t\\t\\t\\thackstates.get(hackable).grow += !growScript ? 0 : growScript.threads;\\n\\t\\t\\t\\thackstates.get(hackable).hack += !hackScript ? 0 : hackScript.threads;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\thackstates.set(hackable, {\\n\\t\\t\\t\\t\\tweaken: !weakenScript ? 0 : weakenScript.threads,\\n\\t\\t\\t\\t\\tgrow: !growScript ? 0 : growScript.threads,\\n\\t\\t\\t\\t\\thack: !hackScript ? 0 : hackScript.threads\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn hackstates;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n */\\nexport function updateOverview(ns) {\\n\\tconst doc = eval('document');\\n\\tconst hook0 = doc.getElementById('overview-extra-hook-0');\\n\\tconst hook1 = doc.getElementById('overview-extra-hook-1');\\n\\ttry {\\n\\t\\tconst headers = [];\\n\\t\\tconst values = [];\\n\\t\\theaders.push(`Income\\\\u00A0`);\\n\\t\\tvalues.push(`${ns.nFormat(ns.getScriptIncome()[0], '$0.000a')}`);\\n\\t\\theaders.push(`Karma`);\\n\\t\\tvalues.push(`${ns.nFormat(ns.heart.break(), '0.000a')}`);\\n\\t\\thook0.innerText = headers.join('\\\\n');\\n\\t\\thook1.innerText = values.join('\\\\n');\\n\\t} catch (err) {\\n\\t\\tns.print(`ERROR: Update Skipped: ${String(err)}`);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} server\\n * @returns {null|string[]}\\n */\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} parent\\n * @param {string} host\\n * @param {string} server\\n * @param {string[]} route\\n * @returns {boolean}\\n */\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {string[]}\\n */\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) {\\n\\t\\tns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\t}\\n\\treturn serverList;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} server\\n * @returns {boolean}\\n */\\nexport function hackServer(ns, server) {\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe', 'home')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe', 'home')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe', 'home')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe', 'home')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe', 'home')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened\\n\\t\\t&& ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {string[]}\\n */\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server) && !server.startsWith('hacknet-node-'));\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} script\\n * @param {number} threads\\n * @param {Object<string, number>[]} freeRams\\n * @param {*[]} scriptArgs\\n * @returns {boolean}\\n */\\nexport function findPlaceToRun(ns, script, threads, freeRams, ...scriptArgs) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThreads = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tconst host = freeRams[0].host;\\n\\t\\tconst ram = freeRams[0].freeRam;\\n\\t\\tif (ram < scriptRam) freeRams.shift();\\n\\t\\telse if (ram < scriptRam * remainingThreads) { // Put as many threads as we can\\n\\t\\t\\tlet threadsForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadsForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThreads -= threadsForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else { // All remaining threads were placed\\n\\t\\t\\tns.exec(script, host, remainingThreads, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThreads;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} servers\\n * @param {string[]} hackables\\n * @param {boolean} occupy\\n * @returns {Object<string, number>[] | [Object<string, number>[], string[]]}\\n */\\nexport function getFreeRam(ns, servers, hackables, occupy = false) {\\n\\tconst scripts = getScripts();\\n\\tconst data = readFromFile(ns, getPortNumbers().reservedRam);\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (const server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.batcher, server)) { // Check if we have a batcher running on this server\\n\\t\\t\\tconst process = ns.ps(server).find(s => s.filename === scripts.batcher); // Find the process of the batcher\\n\\t\\t\\tunhackables.push(process.args[0]); // Don't hack the target of the batcher\\n\\t\\t\\tif (!occupy) continue; // Check if we want to run scripts on the host\\n\\t\\t}\\n\\t\\tconst freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server) - (data[server] ?? 0);\\n\\t\\tif (freeRam > 0) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tconst filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t} else return sortedFreeRams;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} servers\\n * @param {number} cores\\n * @returns {string[]}\\n */\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores)[0] - targetCost(ns, a, cores)[0]);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} target\\n * @param {number} cores\\n * @param {number} hackPercent\\n * @param {number} freeRam\\n * @returns {[number, number, number]}\\n */\\nexport function targetCost(ns, target, cores = 1, hackPercent = 0.5, freeRam = 2 ** 15) {\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\n\\t// RAM calculations\\n\\n\\t// Hack threads per hack percent\\n\\tconst hackThreads = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread\\n\\tconst weakenThreadsAfterHack = weakenThreadsPerHackThread * hackThreads;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed\\n\\tconst growThreads = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsAfterGrow = weakenThreadsPerGrowThread * growThreads;\\n\\t// Cycle RAM\\n\\tconst cycleRam = hackThreads * hackRam + growThreads * growRam + (weakenThreadsAfterHack + weakenThreadsAfterGrow) * weakenRam;\\n\\t// Number of cycles in one cycle group\\n\\tconst cycleCount = Math.floor(freeRam / cycleRam);\\n\\t// Group RAM\\n\\tconst groupRam = cycleRam * cycleCount;\\n\\n\\t// Stolen money calculations\\n\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per cycle\\n\\tconst averageMoneyPerCycle = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per group\\n\\tconst averageMoneyPerGroup = averageMoneyPerCycle * cycleCount;\\n\\n\\t// Time taken calculations\\n\\n\\t// Time taken for weaken\\n\\tconst weakenTime = form.weakenTime(server, player);\\n\\t// Time taken from one cycle to the next\\n\\tconst cycleDelay = weakenTime / cycleCount;\\n\\t// Time taken from one group to the next\\n\\tconst groupDelay = cycleDelay * cycleCount; // equivalent to weaken time\\n\\n\\t// Cost function calculations\\n\\n\\t// Average Money per unit Ram per unit time\\n\\tconst averageMoneyPerRamPerTime = averageMoneyPerGroup / (2 * groupDelay * groupRam);\\n\\t// Average money stolen per unit Ram\\n\\tconst averageMoneyPerRam = averageMoneyPerRamPerTime * (2 * groupDelay);\\n\\t// Average money stolen per unit time\\n\\tconst averageMoneyPerTime = averageMoneyPerGroup * groupRam;\\n\\n\\t// Cost\\n\\treturn [averageMoneyPerRamPerTime, averageMoneyPerRam, averageMoneyPerTime];\\n}\\n\\n// noinspection JSUnusedGlobalSymbols\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} server\\n * @returns {number}\\n */\\nexport function altTargetCost(ns, server) { // Doesn't use Formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\n/**\\n *\\n * @returns {Object<string, number>[]}\\n */\\nexport function getUsefulPrograms() {\\n\\treturn [\\n\\t\\t{name: 'BruteSSH.exe', level: 50},\\n\\t\\t{name: 'FTPCrack.exe', level: 100},\\n\\t\\t{name: 'relaySMTP.exe', level: 300},\\n\\t\\t{name: 'HTTPWorm.exe', level: 400},\\n\\t\\t{name: 'SQLInject.exe', level: 800}\\n\\t];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} server\\n * @returns {boolean}\\n */\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (const script of getPromptScripts()) if (ns.scriptRunning(script, server)) return true;\\n\\treturn false;\\n}\\n\\n/**\\n *\\n * @returns {string[]}\\n */\\nfunction getPromptScripts() {\\n\\tconst scripts = getScripts();\\n\\treturn [\\n\\t\\tscripts.joinFactions,\\n\\t\\tscripts.upgradeHomeRam,\\n\\t\\tscripts.upgradeHomeCores,\\n\\t\\t'/augmentations/install-augmentations.js',\\n\\t\\t'/augmentations/purchase-augmentations.js',\\n\\t\\t'/build/script-remover.js'\\n\\t];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} script\\n * @param {string} server\\n * @returns {boolean}\\n */\\nexport function enoughRam(ns, script, server = ns.getHostname()) {\\n\\treturn ns.getScriptRam(script, server) <= ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n}\\n\\n/**\\n *\\n * @returns {Object<number>}\\n */\\nexport function getPortNumbers() {\\n\\treturn {\\n\\t\\treservedRam: 1,\\n\\t\\tgang: 2,\\n\\t\\tcorp: 3,\\n\\t\\taugmentations: 4,\\n\\t\\thack: 5,\\n\\t\\tbladeburner: 7,\\n\\t\\tstock: 8,\\n\\t\\thacknet: 9,\\n\\t\\tsleeve: 10,\\n\\t\\tstanek: 13\\n\\t};\\n}\\n\\n/**\\n *\\n * @param {number} portNumber\\n * @returns {Object<*>}\\n */\\nexport function defaultPortData(portNumber) {\\n\\tswitch (portNumber) {\\n\\t\\tcase 1:\\n\\t\\t\\treturn {home: 128};\\n\\t\\tcase 2:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 3:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 4:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 5:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 6:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 7:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 8:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 9:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 10:\\n\\t\\t\\treturn Object.fromEntries(Array.from({length: 8}, (_, i) => [i, true]));\\n\\t\\tcase 11:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 12:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 13:\\n\\t\\t\\treturn {\\n\\t\\t\\t\\tpattern: 'starter',\\n\\t\\t\\t\\tmaxCharges: 100\\n\\t\\t\\t};\\n\\t\\tcase 14:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 15:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 16:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 17:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 18:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 19:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 20:\\n\\t\\t\\treturn undefined;\\n\\t\\tdefault:\\n\\t\\t\\tthrow new Error(`Trying to use an invalid port: ${portNumber}. Only ports 1-20 are valid.`);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function initData(ns) {\\n\\tfor (let i = 1; i <= 20; i++) {\\n\\t\\tconst data = readFromFile(ns, i);\\n\\t\\tawait writeToFile(ns, getFileHandle(i), data);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} portNumber\\n * @param {boolean} write\\n * @param {boolean} clear\\n * @returns {Object<*>}\\n */\\nexport function getDataFromPort(ns, portNumber, write = true, clear = true) {\\n\\tconst port = ns.getPortHandle(portNumber);\\n\\tconst data = port.empty() ? defaultPortData(portNumber) : port.read();\\n\\tif (clear) port.clear();\\n\\tif (write) port.write(data);\\n\\treturn data;\\n}\\n\\n/**\\n *\\n * @param {number} portNumber\\n * @returns {string}\\n */\\nexport function getFileHandle(portNumber) {\\n\\treturn `/data/${portNumber}.txt`;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} handle\\n * @param {*} data\\n * @param {string} mode\\n */\\nasync function writeToFile(ns, handle, data, mode = 'w') {\\n\\tif (typeof data !== 'string') data = JSON.stringify(data);\\n\\tawait ns.write(handle, data, mode);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} portNumber\\n * @param {boolean} saveToFile\\n * @param {string} mode\\n * @returns {Object<*>}\\n */\\nexport function readFromFile(ns, portNumber) {\\n\\tconst data = ns.read(getFileHandle(portNumber));\\n\\treturn data ? JSON.parse(data) : defaultPortData(portNumber);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} portNumber\\n * @param {Object<*>} data\\n * @param {string} mode\\n * @returns {Promise<void>}\\n */\\nexport async function modifyFile(ns, portNumber, dataToModify, mode = 'w') {\\n\\tconst data = readFromFile(ns, portNumber);\\n\\tfor (const [key, val] of Object.entries(dataToModify)) data[key] = val;\\n\\tawait writeToFile(ns, getFileHandle(portNumber), data, mode);\\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.8,\"server\":\"home\",\"moduleSequenceNumber\":45790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"upgradeHomeCores\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedVariable\\n\\nimport {getFactions} from '/My Drive/Games/Bitburner/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\tconst factions = getFactions();\\n\\tconst args = ns.flags([\\n\\t\\t['hacking', false],\\n\\t\\t['field', false],\\n\\t\\t['security', false]\\n\\t]);\\n\\n\\tlet workType;\\n\\tif (args.hacking) workType = 'Hacking Contracts';\\n\\telse if (args.field) workType = 'Field Work';\\n\\telse if (args.security) workType = 'Security Work';\\n\\telse throw new Error(`Invalid work type`);\\n\\n\\tfor (let i = 0; i < args._.length; i += 2) {\\n\\t\\tconst faction = factions.find(faction => faction.toLowerCase() === args._[i].toLowerCase());\\n\\t\\tif (faction) {\\n\\t\\t\\tns.tprint(`Working for ${faction}`);\\n\\t\\t\\twhile (ns.getFactionRep(faction) < args._[i + 1]) {\\n\\t\\t\\t\\tns.workForFaction(faction, workType, ns.isFocused());\\n\\t\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\t}\\n\\t\\t} else ns.tprint(`Could not find ${args._[i]}`);\\n\\t}\\n}\",\"filename\":\"/factions/work.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":45791}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tfor (let faction of ns.args) {\\n\\t\\tif (await ns.prompt(`Join ${faction}?`)) ns.joinFaction(faction);\\n\\t}\\n}\",\"filename\":\"/factions/join-factions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":45792,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"joinFaction\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n\\tcopyScriptsToAll,\\n\\tfindPlaceToRun,\\n\\tgetAccessibleServers,\\n\\tgetFreeRam,\\n\\tgetScripts\\n} from '/My Drive/Games/Bitburner/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tawait copyScriptsToAll(ns);\\n\\tconst threads = Number.MAX_SAFE_INTEGER;\\n\\tconst scripts = getScripts();\\n\\tlet i = 0;\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\tconst servers = getAccessibleServers(ns);\\n\\t\\tconst freeRams = getFreeRam(ns, servers);\\n\\t\\tfindPlaceToRun(ns, scripts.share, threads, freeRams, i);\\n\\t\\ti++;\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"/factions/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":45793}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\tns.tail(); // Necessary to exit script\\n\\t\\tawait ns.sleep(ns.commitCrime(ns.args[0] ?? ns.getPlayer().strength < 50 ? 'Mug' : 'Homicide') + 100);\\n\\t}\\n}\",\"filename\":\"/crime/automate.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.1,\"server\":\"home\",\"moduleSequenceNumber\":45794,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedVariable\\n\\nimport {getCompanies, getJobs} from '/My Drive/Games/Bitburner/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\tconst companies = getCompanies();\\n\\tconst jobs = getJobs();\\n\\tconst args = ns.flags([\\n\\t\\t['agent', false],\\n\\t\\t['business', false],\\n\\t\\t['it', false],\\n\\t\\t['security', false],\\n\\t\\t['software', false],\\n\\t\\t['software_consultant', false],\\n\\t\\t['employee', false],\\n\\t\\t['part_time_employee', false],\\n\\t\\t['waiter', false],\\n\\t\\t['part_time_waiter', false]\\n\\t]);\\n\\n\\tlet workType;\\n\\tif (args.agent) workType = jobs.agent.name;\\n\\telse if (args.business) workType = jobs.business.name;\\n\\telse if (args.it) workType = jobs.it.name;\\n\\telse if (args.security) workType = jobs.security.name;\\n\\telse if (args.software) workType = jobs.software.name;\\n\\telse if (args.software_consultant) workType = jobs.software_consultant.name;\\n\\telse if (args.employee) workType = jobs.employee.name;\\n\\telse if (args.part_time_employee) workType = jobs.part_time_employee.name;\\n\\telse if (args.waiter) workType = jobs.waiter.name;\\n\\telse if (args.part_time_waiter) workType = jobs.waiter.name;\\n\\telse throw new Error(`Invalid work type`);\\n\\n\\tfor (let i = 0; i < args._.length; i += 2) {\\n\\t\\tlet company = companies.find(company => company.toLowerCase() === args._[i].toLowerCase());\\n\\t\\tif (company) {\\n\\t\\t\\tns.tprint(`Working for ${company}`);\\n\\t\\t\\twhile (ns.getCompanyRep(company) < args._[i + 1]) {\\n\\t\\t\\t\\tns.applyToCompany(company, workType);\\n\\t\\t\\t\\tns.workForCompany(company, ns.isFocused());\\n\\t\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\t}\\n\\t\\t} else ns.tprint(`Could not find ${args._[i]}`);\\n\\t}\\n}\",\"filename\":\"/company/work.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":45795}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst programs = ['ServerProfiler.exe', 'DeepscanV1.exe', 'DeepscanV2.exe', 'AutoLink.exe'];\\n\\tfor (let program of programs) {\\n\\t\\tif (ns.createProgram(program)) {\\n\\t\\t\\twhile (ns.isBusy()) {\\n\\t\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\t}\\n\\t\\t\\tns.tprint(`${program} created.`)\\n\\t\\t} else ns.tprint(`${program} already owned.`);\\n\\t}\\n}\",\"filename\":\"/player/create-programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/player/create-programs.js\",\"url\":\"blob:file:///63562506-8e58-41db-8239-660a62c8c02a\",\"moduleSequenceNumber\":42705}],\"dependents\":[],\"ramUsage\":7.1,\"server\":\"home\",\"moduleSequenceNumber\":45796,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":5},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedVariable\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst args = ns.flags([\\n\\t\\t['str', false],\\n\\t\\t['def', false],\\n\\t\\t['dex', false],\\n\\t\\t['agi', false],\\n\\t\\t['all', false],\\n\\t\\t['gym', 'Powerhouse Gym']\\n\\t]);\\n\\n\\tif (args.gym === 'Crush Fitness Gym' || args.gym === 'Snap Fitness Gym') ns.travelToCity('Aevum');\\n\\telse if (args.gym === 'Iron Gym' || args.gym === 'Powerhouse Gym') ns.travelToCity('Sector-12');\\n\\telse if (args.gym === 'Millenium Fitness Gym') ns.travelToCity('Volhaven');\\n\\telse throw new Error(`Invalid gym`);\\n\\n\\tif (args.str || args.all) await workOutStr(ns, args.gym, args._[0]);\\n\\tif (args.def || args.all) await workOutDef(ns, args.gym, args._[0]);\\n\\tif (args.dex || args.all) await workOutDex(ns, args.gym, args._[0]);\\n\\tif (args.agi || args.all) await workOutAgi(ns, args.gym, args._[0]);\\n}\\n\\nasync function workOutStr(ns, gym, level) {\\n\\tns.gymWorkout(gym, 'str');\\n\\twhile (ns.getPlayer().strength < level) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\\n\\nasync function workOutDef(ns, gym, level) {\\n\\tns.gymWorkout(gym, 'def');\\n\\twhile (ns.getPlayer().defense < level) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\\n\\nasync function workOutDex(ns, gym, level) {\\n\\tns.gymWorkout(gym, 'dex');\\n\\twhile (ns.getPlayer().dexterity < level) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\\n\\nasync function workOutAgi(ns, gym, level) {\\n\\tns.gymWorkout(gym, 'agi');\\n\\twhile (ns.getPlayer().agility < level) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\",\"filename\":\"/player/gym.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.1,\"server\":\"home\",\"moduleSequenceNumber\":45797,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gymWorkout\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedVariable\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst args = ns.flags([\\n\\t\\t['university', 'ZB Institute of Technology'],\\n\\t\\t['course', 'Leadership']\\n\\t]);\\n\\n\\tif (args.university === 'Summit University') ns.travelToCity('Aevum');\\n\\telse if (args.university === 'Rothman University') ns.travelToCity('Sector-12');\\n\\telse if (args.university === 'ZB Institute of Technology') ns.travelToCity('Volhaven');\\n\\telse throw new Error(`Invalid university`);\\n\\n\\tif (args.course === 'Computer Science' ||\\n\\t\\targs.course === 'Data Structures' ||\\n\\t\\targs.course === 'Networks' ||\\n\\t\\targs.course === 'Algorithms') await studyHack(ns, args.university, args.course, args._[0]);\\n\\telse if (args.course === 'Management' ||\\n\\t\\targs.course === 'Leadership') await studyCha(ns, args.university, args.course, args._[0]);\\n\\telse throw new Error(`Invalid course`);\\n}\\n\\nasync function studyHack(ns, university, course, level) {\\n\\tns.universityCourse(university, course);\\n\\twhile (ns.getPlayer().hacking < level) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\\n\\nasync function studyCha(ns, university, course, level) {\\n\\tns.universityCourse(university, course);\\n\\twhile (ns.getPlayer().charisma < level) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.stopAction();\\n}\",\"filename\":\"/player/university.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.1,\"server\":\"home\",\"moduleSequenceNumber\":45798,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"universityCourse\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n\\tcopyScriptsToAll,\\n\\tfindPlaceToRun,\\n\\tgetAccessibleServers,\\n\\tgetFreeRam,\\n\\tgetScripts\\n} from '/My Drive/Games/Bitburner/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tawait copyScriptsToAll(ns);\\n\\tconst threads = Number.MAX_SAFE_INTEGER;\\n\\tconst scripts = getScripts();\\n\\tlet i = 0;\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\tconst servers = getAccessibleServers(ns);\\n\\t\\tconst freeRams = getFreeRam(ns, servers);\\n\\t\\tfindPlaceToRun(ns, scripts.grow, threads, freeRams, 'joesguns', 0, i);\\n\\t\\tfindPlaceToRun(ns, scripts.weaken, threads, freeRams, 'joesguns', 0, i);\\n\\t\\ti++;\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"/player/exp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":45799}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst cost = ns.getUpgradeHomeCoresCost();\\n\\tif (await ns.prompt(`Upgrade home Cores for ${ns.nFormat(cost, '$0.000a')}?`)) {\\n\\t\\tif (ns.upgradeHomeCores()) ns.tprint(`Home cores upgraded.`);\\n\\t\\telse ns.tprint(`Could not upgrade home cores.`);\\n\\t}\\n}\",\"filename\":\"/player/upgrade-home-cores.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/player/upgrade-home-cores.js\",\"url\":\"blob:file:///5debda52-c4e4-46a7-884f-c272984809b2\",\"moduleSequenceNumber\":5464}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":45800,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getUpgradeHomeCoresCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"upgradeHomeCores\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst cost = ns.getUpgradeHomeRamCost();\\n\\tif (await ns.prompt(`Upgrade home RAM for ${ns.nFormat(cost, '$0.000a')}?`)) {\\n\\t\\tif (ns.upgradeHomeRam()) ns.tprint(`Home RAM upgraded.`);\\n\\t\\telse ns.tprint(`Could not upgrade home RAM.`);\\n\\t}\\n}\",\"filename\":\"/player/upgrade-home-ram.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/player/upgrade-home-ram.js\",\"url\":\"blob:file:///84c683c0-61eb-48e3-8f28-1cd75140c61a\",\"moduleSequenceNumber\":8592}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":45801,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getScripts} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst args = ns.flags([\\n\\t\\t['moneyThreshold', 1e9],\\n\\t\\t['threads', 1],\\n\\t\\t['host', ns.getHostname()]\\n\\t]);\\n\\tconst moneyThreshold = args.moneyThreshold;\\n\\tconst threads = args.threads;\\n\\tconst host = args.host;\\n\\tconst script = getScripts().intelligence;\\n\\tfor (let i = 0; i < threads; i++) ns.exec(script, host, 1, moneyThreshold, i);\\n}\\n\",\"filename\":\"/player/intelligence.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///fe0f58f7-cf0f-4d28-83eb-e19154448e24\",\"moduleSequenceNumber\":6492},{\"filename\":\"/player/intelligence.js\",\"url\":\"blob:file:///4618e84a-163f-45b3-8765-acb85348067a\",\"moduleSequenceNumber\":6573}],\"dependents\":[],\"ramUsage\":2.95,\"server\":\"home\",\"moduleSequenceNumber\":45802,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/daemons/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/daemons/grow.js\",\"url\":\"blob:file:///a6f8bb04-97c5-4811-a58e-73c604126382\",\"moduleSequenceNumber\":45679}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":45803,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/daemons/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/daemons/hack.js\",\"url\":\"blob:file:///77006c51-4a0d-473b-b10e-ecd372ffcfd9\",\"moduleSequenceNumber\":42706}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":45804,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tif (ns.args[1]) await ns.sleep(ns.args[1]);\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/daemons/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/daemons/weaken.js\",\"url\":\"blob:file:///570b59bb-45b0-4c12-b2ab-12c71c900686\",\"moduleSequenceNumber\":45680}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":45805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"/daemons/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":45806,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tacceptStanek(ns);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n */\\nexport function acceptStanek(ns) {\\n\\tns.travelToCity('Chongqing');\\n\\tns.goToLocation('Church of the Machine God');\\n\\t[...eval('document').getElementsByTagName('*')].find(e => e.innerText === 'Accept Stanek\\\\'s Gift').click();\\n}\",\"filename\":\"/stanek/accept.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":45807,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"goToLocation\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tawait ns.stanek.charge(ns.args[0], ns.args[1]);\\n}\",\"filename\":\"/daemons/charge.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/daemons/charge.js\",\"url\":\"blob:file:///d61a6bc3-b432-4c1c-959b-b07bbbf2ed2f\",\"moduleSequenceNumber\":42656}],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":45808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getCities} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst moneyThreshold = ns.args[0];\\n\\tconst cities = getCities();\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\twhile (ns.getPlayer().money > moneyThreshold) {\\n\\t\\t\\tfor (const city of cities) ns.travelToCity(city);\\n\\t\\t\\tawait ns.asleep(1);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/daemons/intelligence.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///721b4a67-760f-4c9a-b924-95888b554012\",\"moduleSequenceNumber\":2498},{\"filename\":\"/daemons/intelligence.js\",\"url\":\"blob:file:///5f5b489c-0ed0-4828-ba2c-200b29d60735\",\"moduleSequenceNumber\":5884}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":45809,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"travelToCity\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {readFromFile, getPortNumbers, getAccessibleServers, getScripts, getManagerScripts} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.tprint(getBestHost(ns));\\n}\\n\\nfunction getBestHost(ns) {\\n\\tconst scripts = getScripts();\\n\\tconst managerScripts = getManagerScripts();\\n\\tconst portNumber = getPortNumbers().reservedRam;\\n\\tconst chargeRam = ns.getScriptRam(scripts.charge);\\n\\tlet bestHost, maxThreads = 0, maxRam = 0;\\n\\tfor (const host of getAccessibleServers(ns)) {\\n\\t\\tlet managerScriptsRam = 0;\\n\\t\\tmanagerScripts.filter(s => ns.scriptRunning(s, host)).forEach(s => managerScriptsRam += ns.getScriptRam(s, host));\\n\\t\\tconst maxRamAvailable = ns.getServerMaxRam(host) - managerScriptsRam - (readFromFile(ns, portNumber)[host] ?? 0);\\n\\t\\tif (maxRamAvailable > maxRam) {\\n\\t\\t\\tbestHost = host;\\n\\t\\t\\tmaxThreads = Math.floor(maxRamAvailable / chargeRam);\\n\\t\\t\\tmaxRam = maxRamAvailable;\\n\\t\\t}\\n\\t}\\n\\treturn [bestHost, maxThreads, maxRam];\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///aea96dd3-7af4-455d-8534-89e4009d8735\",\"moduleSequenceNumber\":39843},{\"filename\":\"test.js\",\"url\":\"blob:file:///c526ab0b-6f9b-4a5e-89ed-fa95e2cd5965\",\"moduleSequenceNumber\":42713}],\"dependents\":[],\"ramUsage\":8.05,\"server\":\"home\",\"moduleSequenceNumber\":45810,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getCities} from '/utils.js';\\n\\nconst argsSchema = [\\n\\t['trips-per-cycle', 1e6],\\n\\t['money-threshold', 1e9]\\n];\\n\\n/**\\n *\\n * @param {*} data\\n * @param {*} args\\n * @returns {*[]}\\n */\\nexport function autocomplete(data, args) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.tail();\\n\\tlet tripsPerCycle = options['trips-per-cycle'];\\n\\tlet moneyThreshold = options['money-threshold'];\\n\\tns.print(`trips-per-cycle: ${tripsPerCycle}`);\\n\\tns.print(`money-threshold: ${ns.nFormat(moneyThreshold, '$0.000a')}`);\\n\\tconst cities = getCities();\\n\\tlet justStarted = true;\\n\\tlet previousInt = ns.getPlayer().intelligence;\\n\\tlet currentInt = previousInt;\\n\\tlet previousLevelTime = Date.now();\\n\\tlet levelupTime;\\n\\tlet cycles = 0;\\n\\tlet duration = 0;\\n\\tlet tripsPerLevel = 0;\\n\\tlet tripsPerMs = 0;\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\twhile (ns.getPlayer().money > moneyThreshold) {\\n\\t\\t\\tfor (let i = 0; i < tripsPerCycle; i++) cities.forEach(city => ns.travelToCity(city));\\n\\t\\t\\tawait ns.sleep(1);\\n\\t\\t\\tcycles++;\\n\\t\\t\\tif (previousInt !== ns.getPlayer().intelligence) {\\n\\t\\t\\t\\tcurrentInt = ns.getPlayer().intelligence;\\n\\t\\t\\t\\tlevelupTime = Date.now();\\n\\t\\t\\t\\tduration = levelupTime - previousLevelTime;\\n\\t\\t\\t\\ttripsPerLevel = cycles * tripsPerCycle * 2;\\n\\t\\t\\t\\ttripsPerMs = Math.floor(tripsPerLevel / duration);\\n\\t\\t\\t\\tns.clearLog();\\n\\t\\t\\t\\tns.print(`Level Up: Int ${currentInt}` + (justStarted ? ` partial ` : ` pull `) +\\n\\t\\t\\t\\t\\t`level in ${ns.tFormat(duration)} & ${ns.nFormat(tripsPerLevel, '0.000a')} travels`);\\n\\t\\t\\t\\tns.print(`Approximately ${tripsPerMs} trips/ms`);\\n\\t\\t\\t\\tpreviousLevelTime = levelupTime;\\n\\t\\t\\t\\tpreviousInt = currentInt;\\n\\t\\t\\t\\tjustStarted = false;\\n\\t\\t\\t\\tcycles = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.sleep(10000);\\n\\t\\tns.clearLog();\\n\\t\\tns.print(`Below money threshold, waiting 10 seconds`);\\n\\t}\\n}\",\"filename\":\"/data/test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/data/test.js\",\"url\":\"blob:file:///c018b018-09bc-478d-8f66-b759afaa979e\",\"moduleSequenceNumber\":26456}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":45811,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"travelToCity\",\"cost\":2}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"hacknet-node-0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/build/scripts.txt\",\"text\":\"cortex.js\\naugmentations/augmentation-lister.js\\naugmentations/install-augmentations.js\\naugmentations/purchase-augmentations.js\\naugmentations/utils.js\\nbuild/download-bitburner-scripts.js\\nbuild/script-remover.js\\nbuild/update.js\\nbuild/scripts.txt\\nexploits/dev-menu.js\\nexploits/unclickable.js\\nexploits/bypass.js\\nexploits/prototype-tampering.js\\nexploits/time-compression.js\\nexploits/undocumented-function-call.js\\nexploits/edit-save-file.js\\nexploits/n00dles.js\\nexploits/reality-alteration.js\\nexploits/rainbow.js\\nexploits/true-recursion.js\\nhacking/batcher.js\\nhacking/backdoor.js\\nstock-market/autopilot.js\\ntexts/augmentations-list.txt\\ntexts/bitnode-order.txt\\ntools/analyze-server.js\\ntools/bitnode-multipliers.js\\ntools/connect.js\\ntools/cost-pserv.js\\ntools/favor.js\\ntools/get-all-text.js\\ntools/hackable-servers.js\\ntools/karma.js\\ntools/monitor.js\\ntools/pserv-buyer.js\\ntools/reputation.js\\ntools/player.js\\nutils.js\\ncorporation/autopilot.js\\ngang/manager.js\\nbladeburner/autopilot.js\\nsleeve/autopilot.js\\nsleeve/gym.js\\nsleeve/university.js\\nsleeve/crime.js\\nsleeve/company.js\\nsleeve/faction.js\\nsleeve/shock-recovery.js\\nsleeve/synchronize.js\\nsleeve/utils.js\\nsleeve/reset.js\\nhacknet/manager.js\\nhacknet/hash-spender.js\\nstanek/utils.js\\nstanek/save.js\\nstanek/set.js\\nstanek/reset-charges.js\\nstanek/controller.js\\nstanek/accept.js\\ncontracts/contractor.js\\nfactions/work.js\\nfactions/join-factions.js\\nfactions/share.js\\ncrime/automate.js\\ncompany/work.js\\nplayer/create-programs.js\\nplayer/gym.js\\nplayer/university.js\\nplayer/exp.js\\nplayer/upgrade-home-cores.js\\nplayer/upgrade-home-ram.js\\nplayer/intelligence.js\\ndaemons/grow.js\\ndaemons/hack.js\\ndaemons/weaken.js\\ndaemons/share.js\\ndaemons/charge.js\\ndaemons/intelligence.js\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/texts/augmentations-list.txt\",\"text\":\"\\n\\n----- CyberSec -----\\n\\n--- BitWire ---\\nhacking_mult: 1.05\\nPrice: $10.000m\\nRep: 3.750k\\n\\n--- Synaptic Enhancement Implant ---\\nhacking_speed_mult: 1.03\\nPrice: $7.500m\\nRep: 2.000k\\n\\n--- Cranial Signal Processors - Gen I ---\\nhacking_mult: 1.05\\nhacking_speed_mult: 1.01\\nPrice: $70.000m\\nRep: 10.000k\\n\\n--- Cranial Signal Processors - Gen II ---\\nhacking_mult: 1.07\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.02\\nPrice: $125.000m\\nRep: 18.750k\\nPrereq: Cranial Signal Processors - Gen I\\n\\n--- Neurotrainer I ---\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $4.000m\\nRep: 1.000k\\n\\n\\n----- Tian Di Hui -----\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- Social Negotiation Assistant (S.N.A) ---\\ncompany_rep_mult: 1.15\\nfaction_rep_mult: 1.15\\nwork_money_mult: 1.1\\nPrice: $30.000m\\nRep: 6.250k\\n\\n--- Neuroreceptor Management Implant ---\\nSpecial\\nPrice: $550.000m\\nRep: 75.000k\\n\\n\\n----- Netburners -----\\n\\n--- Hacknet Node CPU Architecture Neural-Upload ---\\nhacknet_node_money_mult: 1.15\\nhacknet_node_purchase_cost_mult: 0.85\\nPrice: $11.000m\\nRep: 3.750k\\n\\n--- Hacknet Node Cache Architecture Neural-Upload ---\\nhacknet_node_money_mult: 1.1\\nhacknet_node_level_cost_mult: 0.85\\nPrice: $5.500m\\nRep: 2.500k\\n\\n--- Hacknet Node NIC Architecture Neural-Upload ---\\nhacknet_node_money_mult: 1.1\\nhacknet_node_purchase_cost_mult: 0.9\\nPrice: $4.500m\\nRep: 1.875k\\n\\n--- Hacknet Node Kernel Direct-Neural Interface ---\\nhacknet_node_money_mult: 1.25\\nPrice: $40.000m\\nRep: 7.500k\\n\\n--- Hacknet Node Core Direct-Neural Interface ---\\nhacknet_node_money_mult: 1.45\\nPrice: $60.000m\\nRep: 12.500k\\n\\n\\n----- Sector-12 -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- CashRoot Starter Kit ---\\nSpecial\\nPrice: $125.000m\\nRep: 12.500k\\n\\n\\n----- Chongqing -----\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Neuregen Gene Modification ---\\nhacking_exp_mult: 1.4\\nPrice: $375.000m\\nRep: 37.500k\\n\\n\\n----- New Tokyo -----\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- NutriGen Implant ---\\nstrength_exp_mult: 1.2\\ndefense_exp_mult: 1.2\\ndexterity_exp_mult: 1.2\\nagility_exp_mult: 1.2\\nPrice: $2.500m\\nRep: 6.250k\\n\\n\\n----- Ishima -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- INFRARET Enhancement ---\\ndexterity_mult: 1.1\\ncrime_money_mult: 1.1\\ncrime_success_mult: 1.25\\nPrice: $30.000m\\nRep: 7.500k\\n\\n\\n----- Aevum -----\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Synaptic Enhancement Implant ---\\nhacking_speed_mult: 1.03\\nPrice: $7.500m\\nRep: 2.000k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Neurotrainer I ---\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $4.000m\\nRep: 1.000k\\n\\n--- PCMatrix ---\\ncharisma_mult: 1.0777\\ncharisma_exp_mult: 1.0777\\ncompany_rep_mult: 1.0777\\nfaction_rep_mult: 1.0777\\ncrime_money_mult: 1.0777\\ncrime_success_mult: 1.0777\\nwork_money_mult: 1.777\\nPrice: $2.000b\\nRep: 100.000k\\n\\n\\n----- Volhaven -----\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- DermaForce Particle Barrier ---\\ndefense_mult: 1.4\\nPrice: $50.000m\\nRep: 15.000k\\n\\n\\n----- NiteSec -----\\n\\n--- BitWire ---\\nhacking_mult: 1.05\\nPrice: $10.000m\\nRep: 3.750k\\n\\n--- Artificial Synaptic Potentiation ---\\nhacking_exp_mult: 1.05\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.02\\nPrice: $80.000m\\nRep: 6.250k\\n\\n--- Neural-Retention Enhancement ---\\nhacking_exp_mult: 1.25\\nPrice: $250.000m\\nRep: 20.000k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Cranial Signal Processors - Gen II ---\\nhacking_mult: 1.07\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.02\\nPrice: $125.000m\\nRep: 18.750k\\nPrereq: Cranial Signal Processors - Gen I\\n\\n--- Cranial Signal Processors - Gen III ---\\nhacking_mult: 1.09\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.15\\nPrice: $550.000m\\nRep: 50.000k\\nPrereq: Cranial Signal Processors - Gen II\\n\\n--- Neurotrainer II ---\\nhacking_exp_mult: 1.15\\nstrength_exp_mult: 1.15\\ndefense_exp_mult: 1.15\\ndexterity_exp_mult: 1.15\\nagility_exp_mult: 1.15\\ncharisma_exp_mult: 1.15\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- CRTX42-AA Gene Modification ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nPrice: $225.000m\\nRep: 45.000k\\n\\n\\n----- The Black Hand -----\\n\\n--- Artificial Synaptic Potentiation ---\\nhacking_exp_mult: 1.05\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.02\\nPrice: $80.000m\\nRep: 6.250k\\n\\n--- Enhanced Myelin Sheathing ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.1\\nhacking_speed_mult: 1.03\\nPrice: $1.375b\\nRep: 100.000k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Cranial Signal Processors - Gen III ---\\nhacking_mult: 1.09\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.15\\nPrice: $550.000m\\nRep: 50.000k\\nPrereq: Cranial Signal Processors - Gen II\\n\\n--- Cranial Signal Processors - Gen IV ---\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.2\\nhacking_grow_mult: 1.25\\nPrice: $1.100b\\nRep: 125.000k\\nPrereq: Cranial Signal Processors - Gen III\\n\\n--- The Black Hand ---\\nhacking_mult: 1.1\\nstrength_mult: 1.15\\ndexterity_mult: 1.15\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.1\\nPrice: $550.000m\\nRep: 100.000k\\n\\n\\n----- BitRunners -----\\n\\n--- Artificial Bio-neural Network Implant ---\\nhacking_mult: 1.12\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.15\\nPrice: $3.000b\\nRep: 275.000k\\n\\n--- Enhanced Myelin Sheathing ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.1\\nhacking_speed_mult: 1.03\\nPrice: $1.375b\\nRep: 100.000k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Neural Accelerator ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.15\\nhacking_money_mult: 1.2\\nPrice: $1.750b\\nRep: 200.000k\\n\\n--- Cranial Signal Processors - Gen III ---\\nhacking_mult: 1.09\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.15\\nPrice: $550.000m\\nRep: 50.000k\\nPrereq: Cranial Signal Processors - Gen II\\n\\n--- Cranial Signal Processors - Gen IV ---\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.2\\nhacking_grow_mult: 1.25\\nPrice: $1.100b\\nRep: 125.000k\\nPrereq: Cranial Signal Processors - Gen III\\n\\n--- Cranial Signal Processors - Gen V ---\\nhacking_mult: 1.3\\nhacking_money_mult: 1.25\\nhacking_grow_mult: 1.75\\nPrice: $2.250b\\nRep: 250.000k\\nPrereq: Cranial Signal Processors - Gen IV\\n\\n--- Neurotrainer II ---\\nhacking_exp_mult: 1.15\\nstrength_exp_mult: 1.15\\ndefense_exp_mult: 1.15\\ndexterity_exp_mult: 1.15\\nagility_exp_mult: 1.15\\ncharisma_exp_mult: 1.15\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- BitRunners Neurolink ---\\nhacking_mult: 1.15\\nhacking_exp_mult: 1.2\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nPrice: $4.375b\\nRep: 875.000k\\n\\n\\n----- ECorp -----\\n\\n--- Graphene Bionic Spine Upgrade ---\\nstrength_mult: 1.6\\ndefense_mult: 1.6\\ndexterity_mult: 1.6\\nagility_mult: 1.6\\nPrice: $6.000b\\nRep: 1.625m\\nPrereq: Bionic Spine\\n\\n--- Graphene Bionic Legs Upgrade ---\\nagility_mult: 2.5\\nPrice: $4.500b\\nRep: 750.000k\\nPrereq: Bionic Legs\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- PC Direct-Neural Interface ---\\nhacking_mult: 1.08\\ncompany_rep_mult: 1.3\\nPrice: $3.750b\\nRep: 375.000k\\n\\n--- PC Direct-Neural Interface Optimization Submodule ---\\nhacking_mult: 1.1\\ncompany_rep_mult: 1.75\\nPrice: $4.500b\\nRep: 500.000k\\nPrereq: PC Direct-Neural Interface\\n\\n--- ECorp HVMind Implant ---\\nhacking_grow_mult: 3\\nPrice: $5.500b\\nRep: 1.500m\\n\\n\\n----- MegaCorp -----\\n\\n--- Graphene Bionic Legs Upgrade ---\\nagility_mult: 2.5\\nPrice: $4.500b\\nRep: 750.000k\\nPrereq: Bionic Legs\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- CordiARC Fusion Reactor ---\\nstrength_mult: 1.35\\ndefense_mult: 1.35\\ndexterity_mult: 1.35\\nagility_mult: 1.35\\nstrength_exp_mult: 1.35\\ndefense_exp_mult: 1.35\\ndexterity_exp_mult: 1.35\\nagility_exp_mult: 1.35\\nPrice: $5.000b\\nRep: 1.125m\\n\\n\\n----- KuaiGong International -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- FocusWire ---\\nhacking_exp_mult: 1.05\\nstrength_exp_mult: 1.05\\ndefense_exp_mult: 1.05\\ndexterity_exp_mult: 1.05\\nagility_exp_mult: 1.05\\ncharisma_exp_mult: 1.05\\ncompany_rep_mult: 1.1\\nwork_money_mult: 1.2\\nPrice: $900.000m\\nRep: 75.000k\\n\\n--- HyperSight Corneal Implant ---\\ndexterity_mult: 1.4\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.750b\\nRep: 150.000k\\n\\n--- Photosynthetic Cells ---\\nstrength_mult: 1.4\\ndefense_mult: 1.4\\nagility_mult: 1.4\\nPrice: $2.750b\\nRep: 562.500k\\n\\n\\n----- Four Sigma -----\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- FocusWire ---\\nhacking_exp_mult: 1.05\\nstrength_exp_mult: 1.05\\ndefense_exp_mult: 1.05\\ndexterity_exp_mult: 1.05\\nagility_exp_mult: 1.05\\ncharisma_exp_mult: 1.05\\ncompany_rep_mult: 1.1\\nwork_money_mult: 1.2\\nPrice: $900.000m\\nRep: 75.000k\\n\\n--- PC Direct-Neural Interface ---\\nhacking_mult: 1.08\\ncompany_rep_mult: 1.3\\nPrice: $3.750b\\nRep: 375.000k\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- ADR-V2 Pheromone Gene ---\\ncompany_rep_mult: 1.2\\nfaction_rep_mult: 1.2\\nPrice: $550.000m\\nRep: 62.500k\\n\\n--- Neurotrainer III ---\\nhacking_exp_mult: 1.2\\nstrength_exp_mult: 1.2\\ndefense_exp_mult: 1.2\\ndexterity_exp_mult: 1.2\\nagility_exp_mult: 1.2\\ncharisma_exp_mult: 1.2\\nPrice: $130.000m\\nRep: 25.000k\\n\\n\\n----- NWO -----\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- Neurotrainer III ---\\nhacking_exp_mult: 1.2\\nstrength_exp_mult: 1.2\\ndefense_exp_mult: 1.2\\ndexterity_exp_mult: 1.2\\nagility_exp_mult: 1.2\\ncharisma_exp_mult: 1.2\\nPrice: $130.000m\\nRep: 25.000k\\n\\n--- Power Recirculation Core ---\\nhacking_mult: 1.05\\nstrength_mult: 1.05\\ndefense_mult: 1.05\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\ncharisma_mult: 1.05\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $180.000m\\nRep: 25.000k\\n\\n--- Xanipher ---\\nhacking_mult: 1.2\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\ndexterity_mult: 1.2\\nagility_mult: 1.2\\ncharisma_mult: 1.2\\nhacking_exp_mult: 1.15\\nstrength_exp_mult: 1.15\\ndefense_exp_mult: 1.15\\ndexterity_exp_mult: 1.15\\nagility_exp_mult: 1.15\\ncharisma_exp_mult: 1.15\\nPrice: $4.250b\\nRep: 875.000k\\n\\n--- Hydroflame Left Arm ---\\nstrength_mult: 2.7\\nPrice: $2.500t\\nRep: 1.250m\\n\\n\\n----- Blade Industries -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- PC Direct-Neural Interface ---\\nhacking_mult: 1.08\\ncompany_rep_mult: 1.3\\nPrice: $3.750b\\nRep: 375.000k\\n\\n--- PC Direct-Neural Interface Optimization Submodule ---\\nhacking_mult: 1.1\\ncompany_rep_mult: 1.75\\nPrice: $4.500b\\nRep: 500.000k\\nPrereq: PC Direct-Neural Interface\\n\\n--- HyperSight Corneal Implant ---\\ndexterity_mult: 1.4\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.750b\\nRep: 150.000k\\n\\n--- Neotra ---\\nstrength_mult: 1.55\\ndefense_mult: 1.55\\nPrice: $2.875b\\nRep: 562.500k\\n\\n\\n----- OmniTek Incorporated -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- PC Direct-Neural Interface ---\\nhacking_mult: 1.08\\ncompany_rep_mult: 1.3\\nPrice: $3.750b\\nRep: 375.000k\\n\\n--- OmniTek InfoLoad ---\\nhacking_mult: 1.2\\nhacking_exp_mult: 1.25\\nPrice: $2.875b\\nRep: 625.000k\\n\\n\\n----- Bachman & Associates -----\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- FocusWire ---\\nhacking_exp_mult: 1.05\\nstrength_exp_mult: 1.05\\ndefense_exp_mult: 1.05\\ndexterity_exp_mult: 1.05\\nagility_exp_mult: 1.05\\ncharisma_exp_mult: 1.05\\ncompany_rep_mult: 1.1\\nwork_money_mult: 1.2\\nPrice: $900.000m\\nRep: 75.000k\\n\\n--- ADR-V2 Pheromone Gene ---\\ncompany_rep_mult: 1.2\\nfaction_rep_mult: 1.2\\nPrice: $550.000m\\nRep: 62.500k\\n\\n--- SmartJaw ---\\ncharisma_mult: 1.5\\ncharisma_exp_mult: 1.5\\ncompany_rep_mult: 1.25\\nfaction_rep_mult: 1.25\\nPrice: $2.750b\\nRep: 375.000k\\n\\n\\n----- Clarke Incorporated -----\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Neuronal Densification ---\\nhacking_mult: 1.15\\nhacking_exp_mult: 1.1\\nhacking_speed_mult: 1.03\\nPrice: $1.375b\\nRep: 187.500k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- FocusWire ---\\nhacking_exp_mult: 1.05\\nstrength_exp_mult: 1.05\\ndefense_exp_mult: 1.05\\ndexterity_exp_mult: 1.05\\nagility_exp_mult: 1.05\\ncharisma_exp_mult: 1.05\\ncompany_rep_mult: 1.1\\nwork_money_mult: 1.2\\nPrice: $900.000m\\nRep: 75.000k\\n\\n--- ADR-V2 Pheromone Gene ---\\ncompany_rep_mult: 1.2\\nfaction_rep_mult: 1.2\\nPrice: $550.000m\\nRep: 62.500k\\n\\n--- nextSENS Gene Modification ---\\nhacking_mult: 1.2\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\ndexterity_mult: 1.2\\nagility_mult: 1.2\\ncharisma_mult: 1.2\\nPrice: $1.925b\\nRep: 437.500k\\n\\n\\n----- Fulcrum Secret Technologies -----\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Graphene Bone Lacings ---\\nstrength_mult: 1.7\\ndefense_mult: 1.7\\nPrice: $4.250b\\nRep: 1.125m\\n\\n--- Graphene Bionic Spine Upgrade ---\\nstrength_mult: 1.6\\ndefense_mult: 1.6\\ndexterity_mult: 1.6\\nagility_mult: 1.6\\nPrice: $6.000b\\nRep: 1.625m\\nPrereq: Bionic Spine\\n\\n--- Graphene Bionic Legs Upgrade ---\\nagility_mult: 2.5\\nPrice: $4.500b\\nRep: 750.000k\\nPrereq: Bionic Legs\\n\\n--- Artificial Bio-neural Network Implant ---\\nhacking_mult: 1.12\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.15\\nPrice: $3.000b\\nRep: 275.000k\\n\\n--- Enhanced Myelin Sheathing ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.1\\nhacking_speed_mult: 1.03\\nPrice: $1.375b\\nRep: 100.000k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- PC Direct-Neural Interface Optimization Submodule ---\\nhacking_mult: 1.1\\ncompany_rep_mult: 1.75\\nPrice: $4.500b\\nRep: 500.000k\\nPrereq: PC Direct-Neural Interface\\n\\n--- PC Direct-Neural Interface NeuroNet Injector ---\\nhacking_mult: 1.1\\nhacking_speed_mult: 1.05\\ncompany_rep_mult: 2\\nPrice: $7.500b\\nRep: 1.500m\\nPrereq: PC Direct-Neural Interface\\n\\n\\n----- Slum Snakes -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- LuminCloaking-V1 Skin Implant ---\\nagility_mult: 1.05\\ncrime_money_mult: 1.1\\nPrice: $5.000m\\nRep: 1.500k\\n\\n--- LuminCloaking-V2 Skin Implant ---\\ndefense_mult: 1.1\\nagility_mult: 1.1\\ncrime_money_mult: 1.25\\nPrice: $30.000m\\nRep: 5.000k\\nPrereq: LuminCloaking-V1 Skin Implant\\n\\n--- SmartSonar Implant ---\\ndexterity_mult: 1.1\\ndexterity_exp_mult: 1.15\\ncrime_money_mult: 1.25\\nPrice: $75.000m\\nRep: 22.500k\\n\\n\\n----- Tetrads -----\\n\\n--- HemoRecirculator ---\\nstrength_mult: 1.08\\ndefense_mult: 1.08\\ndexterity_mult: 1.08\\nagility_mult: 1.08\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- LuminCloaking-V1 Skin Implant ---\\nagility_mult: 1.05\\ncrime_money_mult: 1.1\\nPrice: $5.000m\\nRep: 1.500k\\n\\n--- LuminCloaking-V2 Skin Implant ---\\ndefense_mult: 1.1\\nagility_mult: 1.1\\ncrime_money_mult: 1.25\\nPrice: $30.000m\\nRep: 5.000k\\nPrereq: LuminCloaking-V1 Skin Implant\\n\\n--- Power Recirculation Core ---\\nhacking_mult: 1.05\\nstrength_mult: 1.05\\ndefense_mult: 1.05\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\ncharisma_mult: 1.05\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $180.000m\\nRep: 25.000k\\n\\n--- Bionic Arms ---\\nstrength_mult: 1.3\\ndexterity_mult: 1.3\\nPrice: $275.000m\\nRep: 62.500k\\n\\n\\n----- Silhouette -----\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- TITN-41 Gene-Modification Injection ---\\ncharisma_mult: 1.15\\ncharisma_exp_mult: 1.15\\nPrice: $190.000m\\nRep: 25.000k\\n\\n--- ADR-V2 Pheromone Gene ---\\ncompany_rep_mult: 1.2\\nfaction_rep_mult: 1.2\\nPrice: $550.000m\\nRep: 62.500k\\n\\n\\n----- Speakers for the Dead -----\\n\\n--- Unstable Circadian Modulator ---\\nhacknet_node_money_mult: 1.2\\nhacknet_node_purchase_cost_mult: 0.85\\nhacknet_node_ram_cost_mult: 0.85\\nhacknet_node_core_cost_mult: 0.85\\nhacknet_node_level_cost_mult: 0.85\\nPrice: $5.000b\\nRep: 362.500k\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- The Shadow's Simulacrum ---\\ncompany_rep_mult: 1.15\\nfaction_rep_mult: 1.15\\nPrice: $400.000m\\nRep: 37.500k\\n\\n--- Graphene BrachiBlades Upgrade ---\\nstrength_mult: 1.4\\ndefense_mult: 1.4\\ncrime_money_mult: 1.3\\ncrime_success_mult: 1.1\\nPrice: $2.500b\\nRep: 225.000k\\nPrereq: BrachiBlades\\n\\n\\n----- The Dark Army -----\\n\\n--- HemoRecirculator ---\\nstrength_mult: 1.08\\ndefense_mult: 1.08\\ndexterity_mult: 1.08\\nagility_mult: 1.08\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- The Shadow's Simulacrum ---\\ncompany_rep_mult: 1.15\\nfaction_rep_mult: 1.15\\nPrice: $400.000m\\nRep: 37.500k\\n\\n--- Power Recirculation Core ---\\nhacking_mult: 1.05\\nstrength_mult: 1.05\\ndefense_mult: 1.05\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\ncharisma_mult: 1.05\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $180.000m\\nRep: 25.000k\\n\\n--- Graphene Bionic Arms Upgrade ---\\nstrength_mult: 1.85\\ndexterity_mult: 1.85\\nPrice: $3.750b\\nRep: 500.000k\\nPrereq: Bionic Arms\\n\\n\\n----- The Syndicate -----\\n\\n--- HemoRecirculator ---\\nstrength_mult: 1.08\\ndefense_mult: 1.08\\ndexterity_mult: 1.08\\nagility_mult: 1.08\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- The Shadow's Simulacrum ---\\ncompany_rep_mult: 1.15\\nfaction_rep_mult: 1.15\\nPrice: $400.000m\\nRep: 37.500k\\n\\n--- Power Recirculation Core ---\\nhacking_mult: 1.05\\nstrength_mult: 1.05\\ndefense_mult: 1.05\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\ncharisma_mult: 1.05\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $180.000m\\nRep: 25.000k\\n\\n--- BrachiBlades ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ncrime_money_mult: 1.15\\ncrime_success_mult: 1.1\\nPrice: $90.000m\\nRep: 12.500k\\n\\n\\n----- The Covenant -----\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Graphene Bone Lacings ---\\nstrength_mult: 1.7\\ndefense_mult: 1.7\\nPrice: $4.250b\\nRep: 1.125m\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- SPTN-97 Gene Modification ---\\nhacking_mult: 1.15\\nstrength_mult: 1.75\\ndefense_mult: 1.75\\ndexterity_mult: 1.75\\nagility_mult: 1.75\\nPrice: $4.875b\\nRep: 1.250m\\n\\n\\n----- Daedalus -----\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- The Red Pill ---\\nSpecial\\nPrice: $0.000\\nRep: 2.500m\\n\\n\\n----- Illuminati -----\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- QLink ---\\nhacking_mult: 1.75\\nhacking_chance_mult: 2.5\\nhacking_speed_mult: 2\\nhacking_money_mult: 4\\nPrice: $25.000t\\nRep: 1.875m\\n\\n\\n----- Bladeburners -----\\n\\n--- EsperTech Bladeburner Eyewear ---\\ndexterity_mult: 1.05\\nbladeburner_success_chance_mult: 1.03\\nPrice: $165.000m\\nRep: 1.250k\\n\\n--- EMS-4 Recombination ---\\nbladeburner_stamina_gain_mult: 1.02\\nbladeburner_analysis_mult: 1.05\\nbladeburner_success_chance_mult: 1.03\\nPrice: $275.000m\\nRep: 2.500k\\n\\n--- ORION-MKIV Shoulder ---\\nstrength_mult: 1.05\\ndefense_mult: 1.05\\ndexterity_mult: 1.05\\nbladeburner_success_chance_mult: 1.04\\nPrice: $550.000m\\nRep: 6.250k\\n\\n--- Hyperion Plasma Cannon V1 ---\\nbladeburner_success_chance_mult: 1.06\\nPrice: $2.750b\\nRep: 12.500k\\n\\n--- Hyperion Plasma Cannon V2 ---\\nbladeburner_success_chance_mult: 1.08\\nPrice: $5.500b\\nRep: 25.000k\\nPrereq: Hyperion Plasma Cannon V1\\n\\n--- GOLEM Serum ---\\nstrength_mult: 1.07\\ndefense_mult: 1.07\\ndexterity_mult: 1.07\\nagility_mult: 1.07\\nbladeburner_stamina_gain_mult: 1.05\\nPrice: $11.000b\\nRep: 31.250k\\n\\n--- Vangelis Virus ---\\ndexterity_exp_mult: 1.1\\nbladeburner_analysis_mult: 1.1\\nbladeburner_success_chance_mult: 1.04\\nPrice: $2.750b\\nRep: 18.750k\\n\\n--- Vangelis Virus 3.0 ---\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nbladeburner_analysis_mult: 1.15\\nbladeburner_success_chance_mult: 1.05\\nPrice: $11.000b\\nRep: 37.500k\\nPrereq: Vangelis Virus\\n\\n--- I.N.T.E.R.L.I.N.K.E.D ---\\nstrength_exp_mult: 1.05\\ndefense_exp_mult: 1.05\\ndexterity_exp_mult: 1.05\\nagility_exp_mult: 1.05\\nbladeburner_max_stamina_mult: 1.1\\nPrice: $5.500b\\nRep: 25.000k\\n\\n--- Blade's Runners ---\\nagility_mult: 1.05\\nbladeburner_max_stamina_mult: 1.05\\nbladeburner_stamina_gain_mult: 1.05\\nPrice: $8.250b\\nRep: 20.000k\\n\\n--- BLADE-51b Tesla Armor ---\\nstrength_mult: 1.04\\ndefense_mult: 1.04\\ndexterity_mult: 1.04\\nagility_mult: 1.04\\nbladeburner_stamina_gain_mult: 1.02\\nbladeburner_success_chance_mult: 1.03\\nPrice: $1.375b\\nRep: 12.500k\\n\\n--- BLADE-51b Tesla Armor: Power Cells Upgrade ---\\nbladeburner_max_stamina_mult: 1.05\\nbladeburner_stamina_gain_mult: 1.02\\nbladeburner_success_chance_mult: 1.05\\nPrice: $2.750b\\nRep: 18.750k\\nPrereq: BLADE-51b Tesla Armor\\n\\n--- BLADE-51b Tesla Armor: Energy Shielding Upgrade ---\\ndefense_mult: 1.05\\nbladeburner_success_chance_mult: 1.06\\nPrice: $5.500b\\nRep: 21.250k\\nPrereq: BLADE-51b Tesla Armor\\n\\n--- BLADE-51b Tesla Armor: Unibeam Upgrade ---\\nbladeburner_success_chance_mult: 1.08\\nPrice: $16.500b\\nRep: 31.250k\\nPrereq: BLADE-51b Tesla Armor\\n\\n--- BLADE-51b Tesla Armor: Omnibeam Upgrade ---\\nbladeburner_success_chance_mult: 1.1\\nPrice: $27.500b\\nRep: 62.500k\\nPrereq: BLADE-51b Tesla Armor: Unibeam Upgrade\\n\\n--- BLADE-51b Tesla Armor: IPU Upgrade ---\\nbladeburner_analysis_mult: 1.15\\nbladeburner_success_chance_mult: 1.02\\nPrice: $1.100b\\nRep: 15.000k\\nPrereq: BLADE-51b Tesla Armor\\n\\n--- The Blade's Simulacrum ---\\nSpecial\\nPrice: $150.000b\\nRep: 1.250k\\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/texts/bitnode-order.txt\",\"text\":\"1.1  -> 1.2  -> 1.3     Max SF1 28% All\\n5.1                     Int, Formulas & getBitNodeMultipliers()\\n4.1  -> 4.2  -> 4.3     Max SF4 Singularity Functions\\n5.2  -> 5.3             Max SF5 14% Hacking\\n2.1  -> 2.2  -> 2.3     Max SF2 42% Crime & Charisma, Gangs\\n3.1                     Corps\\n12.1                    NFG-1\\n6.1                     Bladeburner\\n7.1                     Bladeburner API\\n10.1 -> 10.2 -> 10.3    Max SF 10 8 Sleeves max memory\\n6.2  -> 6.3             Max SF6 14% Combat\\n7.2  -> 7.3             Max SF7 14% Bladeburner\\n3.2  -> 3.3             Max SF3 14% Company Salary and Charisma, Office API & Warehouse API\\n11.1 -> 11.2 -> 11.3    Max SF11 56% Company Salary and Reputation Gain, 7% Augmentation Price Decrease, Favored Reputation\\n9.1  -> 9.2  -> 9.3     Max SF9 14% Hacknet, Hacknet Servers, 128 GiB RAM, Bitnode Server\\n12.2                    NFG-2\\n13.1 -> 13.2 -> 13.3    Max SF13 +3 size Stanek's Gift, Church of the Machine God\\n12.3 -> 12.4            NFG-4\\n8.1  -> 8.2  -> 8.3     Max SF8, 21% Grow, WSE Account and TIX API, Shorting Stocks, Limit/Stop Orders\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/1.txt\",\"text\":\"{\\\"home\\\":1073740538.1,\\\"pserv-0\\\":0,\\\"pserv-1\\\":0,\\\"silver-helix\\\":64}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/2.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/3.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/4.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/5.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/6.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/7.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/8.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/9.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/10.txt\",\"text\":\"{\\\"0\\\":true,\\\"1\\\":true,\\\"2\\\":true,\\\"3\\\":true,\\\"4\\\":true,\\\"5\\\":true,\\\"6\\\":true,\\\"7\\\":true}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/11.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/12.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/13.txt\",\"text\":\"{\\\"pattern\\\":\\\"starter\\\",\\\"maxCharges\\\":100,\\\"host\\\":\\\"home\\\",\\\"reservedRam\\\":0}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/14.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/15.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/16.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/17.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/18.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/19.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/data/20.txt\",\"text\":\"\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":4.167999999999998,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"96.5.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":39345549620,\"moneyMax\":983638740500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1064,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"6.6.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":44458857271,\"moneyMax\":1111471431775,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1178,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"78.3.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":18302179978,\"moneyMax\":457554499450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1125,\"serverGrowth\":63}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"93.9.2.0\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"ecorp\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":34280841743,\"moneyMax\":857021043575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":995,\"serverGrowth\":58}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"43.3.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":32244742368,\"moneyMax\":806118559200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1033,\"serverGrowth\":78}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"44.6.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":22707892588,\"moneyMax\":567697314700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1127,\"serverGrowth\":63}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"64.9.2.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":14725054068,\"moneyMax\":368126351700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1069,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"16.9.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":16691238559,\"moneyMax\":417280963975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1002,\"serverGrowth\":94}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"18.3.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":23652417868,\"moneyMax\":591310446700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":955,\"serverGrowth\":96}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"85.5.5.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1539849000,\"moneyMax\":38496225000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":983,\"serverGrowth\":85}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"82.0.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1266,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"1.7.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1058950827,\"moneyMax\":26473770675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":964,\"serverGrowth\":90}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"12.7.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":895876709,\"moneyMax\":22396917725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":914,\"serverGrowth\":67}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"32.0.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":613213958,\"moneyMax\":15330348950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":890,\"serverGrowth\":68}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"37.9.3.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":577820476,\"moneyMax\":14445511900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":808,\"serverGrowth\":73}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"48.6.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":714893652,\"moneyMax\":17872341300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":851,\"serverGrowth\":65}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"69.4.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":952717969,\"moneyMax\":23817949225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":868,\"serverGrowth\":94}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"59.1.5.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1130966501,\"moneyMax\":28274162525,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":841,\"serverGrowth\":80}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"48.7.8.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":888957952,\"moneyMax\":22223948800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":843,\"serverGrowth\":68}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"82.1.9.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":663150350,\"moneyMax\":16578758750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":850,\"serverGrowth\":71}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"96.7.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":861979454,\"moneyMax\":21549486350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":865,\"serverGrowth\":75}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"30.6.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":758688450,\"moneyMax\":18967211250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":857,\"serverGrowth\":88}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"23.8.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1098936009,\"moneyMax\":27473400225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":856,\"serverGrowth\":56}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"78.7.4.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":920983625,\"moneyMax\":23024590625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":881,\"serverGrowth\":62}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"15.6.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":1091536011,\"moneyMax\":27288400275,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":809,\"serverGrowth\":70}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"55.1.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":906529953,\"moneyMax\":22663248825,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":790,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"99.1.1.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":771416521,\"moneyMax\":19285413025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":773,\"serverGrowth\":71}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"75.2.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"univ-energy\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1623177009,\"moneyMax\":40579425225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":818,\"serverGrowth\":60}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"20.1.8.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1586434726,\"moneyMax\":39660868150,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":831,\"serverGrowth\":84}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"18.0.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":1155902726,\"moneyMax\":28897568150,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":821,\"serverGrowth\":78}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"71.0.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1325530595,\"moneyMax\":33138264875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":846,\"serverGrowth\":78}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"72.9.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":1002689050,\"moneyMax\":25067226250,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":785,\"serverGrowth\":76}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"39.6.1.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":797757929,\"moneyMax\":19943948225,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":652,\"serverGrowth\":56}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"84.6.6.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":528958506,\"moneyMax\":13223962650,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":489,\"serverGrowth\":45}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"6.7.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":682748952,\"moneyMax\":17068723800,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":527,\"serverGrowth\":55}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"17.1.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":325939511,\"moneyMax\":8148487775,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":400,\"serverGrowth\":47}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"22.2.3.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":193998308,\"moneyMax\":4849957700,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":372,\"serverGrowth\":45}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"91.2.4.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":915511068,\"moneyMax\":22887776700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":725,\"serverGrowth\":85}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"31.8.5.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":216283880,\"moneyMax\":5407097000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":474,\"serverGrowth\":60}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"14.5.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":427671796,\"moneyMax\":10691794900,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":557,\"serverGrowth\":69}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"0.5.8.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"computek\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":549230463,\"moneyMax\":13730761575,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":407,\"serverGrowth\":37}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"51.7.2.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"summit-uni\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":36,\"hackDifficulty\":36,\"minDifficulty\":12,\"moneyAvailable\":188455483,\"moneyMax\":4711387075,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":293,\"serverGrowth\":46}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"49.1.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":247100923,\"moneyMax\":6177523075,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":364,\"serverGrowth\":54}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"83.1.6.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":414,\"serverGrowth\":48}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"1.1.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":79781285,\"moneyMax\":1994532125,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":286,\"serverGrowth\":36}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"19.1.8.0\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"24.7.7.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"25.0.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"68.2.8.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"49.7.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"iron-gym\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"62.0.4.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"58.1.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"max-hardware\",\"netlink\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"40.4.8.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"max-hardware\",\"computek\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"88.8.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"38.6.2.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"47.8.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"98.9.2.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"harakiri-sushi\",\"neo-net\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"47.0.7.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":33,\"hackDifficulty\":33,\"minDifficulty\":11,\"moneyAvailable\":63966970,\"moneyMax\":1599174250,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":194,\"serverGrowth\":37}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"97.9.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":40722332,\"moneyMax\":1018058300,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":265,\"serverGrowth\":31}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"78.1.5.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"53.8.0.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":475,\"serverGrowth\":40}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"67.3.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":968,\"serverGrowth\":50}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"97.8.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":41,\"minDifficulty\":14,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":787,\"serverGrowth\":42}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"65.4.7.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":544,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"65.8.4.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":362,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"0.9.7.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":213,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"26.4.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":528,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"25.8.4.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"hong-fang-tea\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":60,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"54.4.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"13.2.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"hacknet-node-0\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-0\",\"httpPortOpen\":false,\"ip\":\"69.8.9.8\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":5,\"cores\":10,\"hashCapacity\":1024,\"hashRate\":0,\"level\":100,\"onlineTimeSeconds\":63.20000000000036,\"totalHashesGenerated\":0}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":1.961973071093875}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":false}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as NiteSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":false}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":false}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for The Black Hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":false}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":false}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":23218.58824950917,\"lastPrice\":23192.984981399673,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.47,\"b\":true,\"otlkMag\":19.059384747180655,\"otlkMagForecast\":69.04502633990921,\"cap\":170614274,\"spreadPerc\":0.5,\"shareTxForMovement\":79347,\"shareTxUntilMovement\":79347,\"totalShares\":105200000,\"maxShares\":21000000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":27727.974680283038,\"lastPrice\":27699.34851789985,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.44,\"b\":true,\"otlkMag\":19.155554312930686,\"otlkMagForecast\":69.14945654321397,\"cap\":389366747,\"spreadPerc\":0.2,\"shareTxForMovement\":41291,\"shareTxUntilMovement\":41291,\"totalShares\":86200000,\"maxShares\":17200000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":20347.491151690203,\"lastPrice\":20311.23424020443,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":13.084316399672188,\"otlkMagForecast\":62.968334936306874,\"cap\":335843740,\"spreadPerc\":0.3,\"shareTxForMovement\":66912,\"shareTxUntilMovement\":66912,\"totalShares\":80200000,\"maxShares\":16000000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":20531.141248145857,\"lastPrice\":20565.379559650173,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":11.769931777652767,\"otlkMagForecast\":61.9605072346389,\"cap\":414651582,\"spreadPerc\":0.3,\"shareTxForMovement\":47944,\"shareTxUntilMovement\":47944,\"totalShares\":73300000,\"maxShares\":14700000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":39085.89738063739,\"lastPrice\":39150.1600892655,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":11.940361489648245,\"otlkMagForecast\":61.9752918905547,\"cap\":873882518,\"spreadPerc\":0.3,\"shareTxForMovement\":70953,\"shareTxUntilMovement\":70953,\"totalShares\":46000000,\"maxShares\":9200000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":74367.98327696348,\"lastPrice\":74193.71913150416,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1,\"b\":true,\"otlkMag\":17.081133784423265,\"otlkMagForecast\":67.06338037242344,\"cap\":243028462,\"spreadPerc\":0.3,\"shareTxForMovement\":36765,\"shareTxUntilMovement\":36765,\"totalShares\":27900000,\"maxShares\":5600000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":16870.765325646265,\"lastPrice\":16840.308707872377,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":10.032008373262503,\"otlkMagForecast\":60.03993182366451,\"cap\":202401907,\"spreadPerc\":0.3,\"shareTxForMovement\":57274,\"shareTxUntilMovement\":57274,\"totalShares\":112400000,\"maxShares\":22500000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":32397.81279058108,\"lastPrice\":32302.215901428437,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.26,\"b\":true,\"otlkMag\":16.121222199604063,\"otlkMagForecast\":65.86249457342032,\"cap\":79678219,\"spreadPerc\":0.8,\"shareTxForMovement\":39444,\"shareTxUntilMovement\":39444,\"totalShares\":61000000,\"maxShares\":12200000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":24345.17426016386,\"lastPrice\":24393.77833854735,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.85,\"b\":true,\"otlkMag\":7.098321152302032,\"otlkMagForecast\":56.91403797821387,\"cap\":321378920,\"spreadPerc\":0.4,\"shareTxForMovement\":63726,\"shareTxUntilMovement\":63726,\"totalShares\":48700000,\"maxShares\":9700000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":16330.838403430856,\"lastPrice\":16306.326501676078,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":10.216854958044669,\"otlkMagForecast\":60.03401259169793,\"cap\":93742973,\"spreadPerc\":0.8,\"shareTxForMovement\":88661,\"shareTxUntilMovement\":88661,\"totalShares\":55200000,\"maxShares\":11000000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":12754.92632564623,\"lastPrice\":12735.781717558137,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":9.130882200371397,\"otlkMagForecast\":59.00362221689813,\"cap\":227262821,\"spreadPerc\":0.4,\"shareTxForMovement\":81976,\"shareTxUntilMovement\":81976,\"totalShares\":64700000,\"maxShares\":12900000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":11995.998196541274,\"lastPrice\":11976.026635993747,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":7.079279639323513,\"otlkMagForecast\":56.984978693791895,\"cap\":111493896,\"spreadPerc\":0.5,\"shareTxForMovement\":51148,\"shareTxUntilMovement\":51148,\"totalShares\":85500000,\"maxShares\":17100000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":20502.751069669717,\"lastPrice\":20535.978911072143,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":7.5963274439369615,\"otlkMagForecast\":57.49504128318693,\"cap\":452426402,\"spreadPerc\":0.3,\"shareTxForMovement\":84912,\"shareTxUntilMovement\":84912,\"totalShares\":38600000,\"maxShares\":7700000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":20485.39213114901,\"lastPrice\":20509.931046193575,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.51,\"b\":true,\"otlkMag\":10.028535434051726,\"otlkMagForecast\":59.99916591610302,\"cap\":254195663,\"spreadPerc\":0.5,\"shareTxForMovement\":53669,\"shareTxUntilMovement\":53669,\"totalShares\":43500000,\"maxShares\":8700000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":8922.227080315575,\"lastPrice\":8910.297971980943,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":true,\"otlkMag\":5.9529710505613345,\"otlkMagForecast\":56.000790803839394,\"cap\":11876813,\"spreadPerc\":0.7,\"shareTxForMovement\":106752,\"shareTxUntilMovement\":106752,\"totalShares\":71200000,\"maxShares\":14200000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":13873.422645935403,\"lastPrice\":13851.624657550048,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":3.3879226663944917,\"otlkMagForecast\":54.831486798512124,\"cap\":197411860,\"spreadPerc\":0.6,\"shareTxForMovement\":58640,\"shareTxUntilMovement\":58640,\"totalShares\":43700000,\"maxShares\":8700000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":19377.227352932656,\"lastPrice\":19409.99649193797,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":8.27787296829285,\"otlkMagForecast\":58.57508097162394,\"cap\":296533498,\"spreadPerc\":0.9,\"shareTxForMovement\":53178,\"shareTxUntilMovement\":53178,\"totalShares\":36800000,\"maxShares\":7400000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":25757.712106309442,\"lastPrice\":25723.877170760974,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":true,\"otlkMag\":10.651606374615804,\"otlkMagForecast\":60.52287776417848,\"cap\":58398743,\"spreadPerc\":1,\"shareTxForMovement\":70030,\"shareTxUntilMovement\":70030,\"totalShares\":26800000,\"maxShares\":5400000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":20973.857946238553,\"lastPrice\":21009.32717276925,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":5.065843806713667,\"otlkMagForecast\":54.920532343372834,\"cap\":145942493,\"spreadPerc\":1,\"shareTxForMovement\":43947,\"shareTxUntilMovement\":43947,\"totalShares\":28700000,\"maxShares\":5700000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":4262.143633208516,\"lastPrice\":4236.273525258984,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.6,\"b\":true,\"otlkMag\":2.3720208659302506,\"otlkMagForecast\":51.41234157809484,\"cap\":53647796,\"spreadPerc\":0.9,\"shareTxForMovement\":14753,\"shareTxUntilMovement\":14753,\"totalShares\":107600000,\"maxShares\":21500000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":5171.7710430850775,\"lastPrice\":5186.226344470997,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.19,\"b\":true,\"otlkMag\":5.983085874057059,\"otlkMagForecast\":55.99038650457325,\"cap\":6626864,\"spreadPerc\":0.9,\"shareTxForMovement\":62267,\"shareTxUntilMovement\":62267,\"totalShares\":59200000,\"maxShares\":11800000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":3393.7719573599047,\"lastPrice\":3389.5524754355056,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.53,\"b\":true,\"otlkMag\":1.6777107234787683,\"otlkMagForecast\":50.43793227203188,\"cap\":36690943,\"spreadPerc\":0.6,\"shareTxForMovement\":75512,\"shareTxUntilMovement\":75512,\"totalShares\":53700000,\"maxShares\":10700000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":5099.659833845361,\"lastPrice\":5077.1215799509155,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.89,\"b\":true,\"otlkMag\":9.43717233277693,\"otlkMagForecast\":60.13792393405184,\"cap\":65584743,\"spreadPerc\":1.1,\"shareTxForMovement\":65603,\"shareTxUntilMovement\":65603,\"totalShares\":46600000,\"maxShares\":9300000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":7058.465449908628,\"lastPrice\":7083.830902946299,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.53,\"b\":true,\"otlkMag\":4.661544021939553,\"otlkMagForecast\":52.822187609164715,\"cap\":33324637,\"spreadPerc\":0.5,\"shareTxForMovement\":19638,\"shareTxUntilMovement\":19638,\"totalShares\":27800000,\"maxShares\":5600000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":5200.2125552023335,\"lastPrice\":5212.182387630094,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.98,\"b\":true,\"otlkMag\":3.0991726083599227,\"otlkMagForecast\":53.8822392957917,\"cap\":96058869,\"spreadPerc\":0.9,\"shareTxForMovement\":100173,\"shareTxUntilMovement\":100173,\"totalShares\":34300000,\"maxShares\":6900000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":3662.947711232021,\"lastPrice\":3684.7143885786645,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.53,\"b\":false,\"otlkMag\":1.415045929050042,\"otlkMagForecast\":51.871848094594,\"cap\":70011486,\"spreadPerc\":1.9,\"shareTxForMovement\":28356,\"shareTxUntilMovement\":28356,\"totalShares\":16100000,\"maxShares\":3200000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":2214.824186593711,\"lastPrice\":2209.2718748689613,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.07,\"b\":true,\"otlkMag\":1.2573531210985152,\"otlkMagForecast\":50.9924442143285,\"cap\":16137665,\"spreadPerc\":1.2,\"shareTxForMovement\":33806,\"shareTxUntilMovement\":33806,\"totalShares\":27900000,\"maxShares\":5600000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":3114.909425070182,\"lastPrice\":3120.1039360773534,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":2.033352565345006,\"otlkMagForecast\":51.516676282672506,\"cap\":55477308,\"spreadPerc\":0.6,\"shareTxForMovement\":82122,\"shareTxUntilMovement\":82122,\"totalShares\":14700000,\"maxShares\":2900000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":2634.2913999414386,\"lastPrice\":2617.7519269471145,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.69,\"b\":false,\"otlkMag\":1.2607333839114891,\"otlkMagForecast\":51.8770506804467,\"cap\":3565102,\"spreadPerc\":1.3,\"shareTxForMovement\":45362,\"shareTxUntilMovement\":45362,\"totalShares\":11200000,\"maxShares\":2200000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":613.2040483301638,\"lastPrice\":616.9055592594461,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.57,\"b\":true,\"otlkMag\":1.7451070036610963,\"otlkMagForecast\":51.535478941005465,\"cap\":3636743,\"spreadPerc\":1.4,\"shareTxForMovement\":30809,\"shareTxUntilMovement\":30809,\"totalShares\":71400000,\"maxShares\":14300000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":268.4344586720725,\"lastPrice\":267.65491973064405,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.24,\"b\":true,\"otlkMag\":13.857329344492008,\"otlkMagForecast\":63.59530270501033,\"cap\":5965996,\"spreadPerc\":1,\"shareTxForMovement\":36490,\"shareTxUntilMovement\":36490,\"totalShares\":384600000,\"maxShares\":76900000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":23184.11169792438,\"lastPrice\":23224.952345831298,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":7.9736669297678,\"otlkMagForecast\":57.93255274296424,\"cap\":123834090,\"spreadPerc\":0.5,\"shareTxForMovement\":188307,\"shareTxUntilMovement\":188307,\"totalShares\":15800000,\"maxShares\":3200000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":23215.192968963638,\"lastPrice\":23180.347940483414,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":11.278069699243678,\"otlkMagForecast\":60.96452764920955,\"cap\":330090322,\"spreadPerc\":0.4,\"shareTxForMovement\":145050,\"shareTxUntilMovement\":145050,\"totalShares\":18400000,\"maxShares\":3700000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":16,\"lastUpdate\":1648119230440,\"ticksUntilCycle\":65}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":0,\"CodeInstructionRunTime\":5,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":100,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":true,\"SuppressTIXPopup\":true,\"SuppressSavedGameToast\":true,\"UseIEC60027_2\":true,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#7389DC\",\"primary\":\"#7389DC\",\"primarydark\":\"#5964F1\",\"successlight\":\"#00CC00\",\"success\":\"#20DF20\",\"successdark\":\"#0CB80C\",\"errorlight\":\"#EA5558\",\"error\":\"#EC4145\",\"errordark\":\"#E82528\",\"secondarylight\":\"#AAA\",\"secondary\":\"#D6D6D6\",\"secondarydark\":\"#4E4E4E\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#1C4FB3\",\"welllight\":\"#999999\",\"well\":\"#35383C\",\"white\":\"#FFFFFF\",\"black\":\"#202225\",\"hp\":\"#FF5656\",\"money\":\"#43FF43\",\"hack\":\"#FFAB3D\",\"combat\":\"#D8DAFF\",\"cha\":\"#FF51D9\",\"int\":\"#6495ed\",\"rep\":\"#FFFF30\",\"disabled\":\"#474B51\",\"backgroundprimary\":\"#171719\",\"backgroundsecondary\":\"#262729\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-1,\"y\":1,\"opened\":true}}","VersionSave":"11","AllGangsSave":"{\"Slum Snakes\":{\"power\":4258.750832947035,\"territory\":0},\"Tetrads\":{\"power\":3812.3604656998873,\"territory\":0},\"The Syndicate\":{\"power\":3829.7926821449196,\"territory\":0},\"The Dark Army\":{\"power\":3669.763481513351,\"territory\":0},\"Speakers for the Dead\":{\"power\":18355.68816961668,\"territory\":0.8553665200035112},\"NiteSec\":{\"power\":3647.8788677162,\"territory\":0},\"The Black Hand\":{\"power\":1,\"territory\":0.14285714285714285}}","LastExportBonus":"1648116192621","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}